module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"
#include <assert.h>

extern "C" {
    __global__ void method_19(long long int * var_0, long long int * var_1, long long int * var_2);
    __device__ char method_20(long long int * var_0);
    
    __global__ void method_19(long long int * var_0, long long int * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (128 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_20(var_7)) {
            long long int var_9 = var_7[0];
            long long int var_10 = (var_9 % 32);
            long long int var_11 = (var_9 / 32);
            long long int var_12 = (var_11 % 2);
            long long int var_13 = (var_11 / 2);
            long long int var_14 = (var_13 % 2);
            long long int var_15 = (var_13 / 2);
            long long int var_16[1];
            var_16[0] = var_10;
            while (method_20(var_16)) {
                long long int var_18 = var_16[0];
                char var_19 = (var_14 >= 0);
                char var_21;
                if (var_19) {
                    var_21 = (var_14 < 2);
                } else {
                    var_21 = 0;
                }
                char var_22 = (var_21 == 0);
                if (var_22) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_23 = (var_14 * 256);
                char var_24 = (var_12 >= 0);
                char var_26;
                if (var_24) {
                    var_26 = (var_12 < 2);
                } else {
                    var_26 = 0;
                }
                char var_27 = (var_26 == 0);
                if (var_27) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_28 = (var_12 * 128);
                long long int var_29 = (var_23 + var_28);
                char var_30 = (var_18 >= 0);
                char var_32;
                if (var_30) {
                    var_32 = (var_18 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_29 + var_18);
                var_0[var_34] = var_14;
                var_1[var_34] = var_12;
                var_2[var_34] = var_18;
                long long int var_35 = (var_18 + 32);
                var_16[0] = var_35;
            }
            long long int var_36 = var_16[0];
            long long int var_37 = (var_9 + 128);
            var_7[0] = var_37;
        }
        long long int var_38 = var_7[0];
    }
    __device__ char method_20(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 128);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and EnvStack1 =
    struct
    val mem_0: ResizeArray<Env19>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<EnvStack1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack3 =
    struct
    val mem_0: ResizeArray<uint64>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap4 =
    {
    mem_0: (int32 ref)
    mem_1: EnvStack3
    mem_2: EnvStack3
    mem_3: EnvStack2
    mem_4: (uint64 ref)
    mem_5: uint64
    }
and EnvHeap5 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap4
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap4
    }
and Env8 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env18
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack9 =
    struct
    val mem_0: ResizeArray<Env8>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap10 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvHeap4
    }
and Env11 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env15
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack12 =
    struct
    val mem_0: ResizeArray<Env11>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap13 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvStack12
    mem_5: EnvHeap4
    }
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env15 =
    struct
    val mem_0: EnvHeap14
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap16 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvStack12
    mem_5: EnvHeap4
    mem_6: (int64 ref)
    mem_7: EnvHeap14
    }
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: (ManagedCuda.CudaSolve.cusolverDnHandle ref)
    mem_3: ManagedCuda.CudaRand.CudaRandDevice
    mem_4: EnvStack9
    mem_5: EnvStack12
    mem_6: EnvHeap4
    mem_7: (int64 ref)
    mem_8: EnvHeap14
    }
and Env18 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env19 =
    struct
    val mem_0: Env18
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple20 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env21 =
    struct
    val mem_0: int32
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap5), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env19>) = ResizeArray<Env19>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env19>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env19>) = ResizeArray<Env19>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env19>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env19>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env19>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_6((var_0: EnvHeap14), (var_1: EnvHeap13), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env11 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack12) = var_1.mem_4
    method_7((var_3: (int64 ref)), (var_0: EnvHeap14), (var_4: EnvStack12))
    (Env11(var_3, (Env15(var_0))))
and method_8((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 4096L
    method_9((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_4((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A disposed Cuda memory cell has been tried to be accessed.")
    else
        ()
    var_1
and method_17((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_18((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_22((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64), (var_25: int64)): unit =
    let (var_26: int64) = (var_21 - var_20)
    let (var_27: int64) = (var_23 - var_22)
    let (var_28: int64) = (var_25 - var_24)
    let (var_29: int64) = (var_26 * var_27)
    let (var_30: int64) = (var_29 * var_28)
    let (var_31: bool) = (var_30 > 0L)
    let (var_32: bool) = (var_31 = false)
    if var_32 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_33: int64) = (var_27 * var_6)
    let (var_34: bool) = (var_5 = var_33)
    let (var_35: bool) = (var_34 = false)
    if var_35 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_36: int64) = (var_26 * var_5)
    let (var_37: int64) = (var_28 * var_7)
    let (var_38: bool) = (var_6 = var_37)
    let (var_39: bool) = (var_38 = false)
    if var_39 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_40: int64) = (var_36 * var_6)
    let (var_41: int64) = (var_27 * var_12)
    let (var_42: bool) = (var_11 = var_41)
    let (var_43: bool) = (var_42 = false)
    if var_43 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_44: int64) = (var_26 * var_11)
    let (var_45: int64) = (var_28 * var_13)
    let (var_46: bool) = (var_12 = var_45)
    let (var_47: bool) = (var_46 = false)
    if var_47 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_48: int64) = (var_44 * var_12)
    let (var_49: int64) = (var_27 * var_18)
    let (var_50: bool) = (var_17 = var_49)
    let (var_51: bool) = (var_50 = false)
    if var_51 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_52: int64) = (var_26 * var_17)
    let (var_53: int64) = (var_28 * var_19)
    let (var_54: bool) = (var_18 = var_53)
    let (var_55: bool) = (var_54 = false)
    if var_55 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_56: int64) = (var_52 * var_18)
    let (var_57: (int64 [])) = method_23((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_26: int64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64))
    let (var_58: (int64 [])) = method_23((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_26: int64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64))
    let (var_59: (int64 [])) = method_23((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_26: int64), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64))
    let (var_60: int64) = 0L
    let (var_61: int64) = 0L
    let (var_62: int64) = 0L
    method_24((var_57: (int64 [])), (var_60: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_58: (int64 [])), (var_61: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_59: (int64 [])), (var_62: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64), (var_25: int64))
and method_21((var_0: EnvHeap14)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_34((var_0: EnvStack12)): unit =
    let (var_1: ResizeArray<Env11>) = var_0.mem_0
    let (var_2: int32) = var_1.get_Count()
    let (var_3: int32) = 0
    method_35((var_1: ResizeArray<Env11>), (var_2: int32), (var_3: int32))
    var_1.Clear()
and method_36((var_0: EnvStack9)): unit =
    let (var_1: ResizeArray<Env8>) = var_0.mem_0
    let (var_2: int32) = var_1.get_Count()
    let (var_3: int32) = 0
    method_37((var_1: ResizeArray<Env8>), (var_2: int32), (var_3: int32))
    var_1.Clear()
and method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: EnvStack1) = var_1.[var_3]
        let (var_6: ResizeArray<Env19>) = var_5.mem_0
        let (var_7: int32) = var_6.get_Count()
        let (var_8: int32) = 0
        method_3((var_0: EnvStack1), (var_6: ResizeArray<Env19>), (var_7: int32), (var_8: int32))
        let (var_9: int32) = (var_3 + 1)
        method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_9: int32))
    else
        ()
and method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env19>), (var_5: int32), (var_6: int32)): unit =
    let (var_7: bool) = (var_6 < var_5)
    if var_7 then
        let (var_8: Env19) = var_4.[var_6]
        let (var_9: Env18) = var_8.mem_0
        let (var_10: (uint64 ref)) = var_9.mem_0
        let (var_11: uint64) = var_8.mem_1
        let (var_12: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_13: int32) = var_12.get_Count()
        let (var_14: int32) = (var_13 - 1)
        let (var_15: ResizeArray<uint64>) = var_1.mem_0
        let (var_16: uint64) = var_15.[var_14]
        let (var_17: ResizeArray<uint64>) = var_2.mem_0
        let (var_18: uint64) = var_17.[var_14]
        let (var_19: uint64) = (!var_10)
        let (var_20: uint64) = (var_16 + var_18)
        let (var_21: bool) = (var_20 < var_19)
        if var_21 then
            let (var_22: uint64) = (var_19 - var_16)
            var_17.[var_14] <- var_22
            let (var_23: ResizeArray<Env19>) = ResizeArray<Env19>()
            let (var_24: EnvStack1) = EnvStack1((var_23: ResizeArray<Env19>))
            let (var_25: ResizeArray<Env19>) = var_24.mem_0
            var_25.Add((Env19((Env18(var_10)), var_11)))
            var_15.Add(var_19)
            var_17.Add(var_11)
            var_12.Add(var_24)
        else
            let (var_26: bool) = (var_20 = var_19)
            if var_26 then
                let (var_27: uint64) = (var_18 + var_11)
                var_17.[var_14] <- var_27
                let (var_28: EnvStack1) = var_12.[var_14]
                let (var_29: ResizeArray<Env19>) = var_28.mem_0
                var_29.Add((Env19((Env18(var_10)), var_11)))
            else
                (failwith "The elements should always be ordered.")
        let (var_30: int32) = (var_6 + 1)
        method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env19>), (var_5: int32), (var_30: int32))
    else
        ()
and method_7((var_0: (int64 ref)), (var_1: EnvHeap14), (var_2: EnvStack12)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env11>) = var_2.mem_0
    var_5.Add((Env11(var_0, (Env15(var_1)))))
and method_9((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env8 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env18) = method_10((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack9) = var_0.mem_4
    method_16((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack9))
    (Env8(var_9, (Env18(var_8))))
and method_18((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_19((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_19", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_7
    let (var_10: EnvHeap14) = var_4.mem_8
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_21((var_10: EnvHeap14))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_23((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64)): (int64 []) =
    let (var_9: (int64 ref)) = var_0.mem_7
    let (var_10: EnvHeap14) = var_0.mem_8
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_21((var_10: EnvHeap14))
    let (var_12: int64) = (var_2 * var_6)
    let (var_13: uint64) = method_4((var_4: (uint64 ref)))
    let (var_14: int64) = (var_5 * 8L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_13 + var_15)
    let (var_17: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_12))
    let (var_18: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_17,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_19: int64) = var_18.AddrOfPinnedObject().ToInt64()
    let (var_20: uint64) = (uint64 var_19)
    let (var_21: int64) = (var_12 * 8L)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_20)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_27: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_23, var_25, var_26, var_11)
    if var_27 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_27)
    var_18.Free()
    var_17
and method_24((var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64)): unit =
    let (var_21: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_22: string) = ""
    let (var_23: int64) = 0L
    let (var_24: int64) = 0L
    method_25((var_21: System.Text.StringBuilder), (var_24: int64))
    let (var_25: System.Text.StringBuilder) = var_21.AppendLine("[|")
    let (var_26: int64) = method_26((var_21: System.Text.StringBuilder), (var_22: string), (var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_23: int64))
    let (var_27: int64) = 0L
    method_25((var_21: System.Text.StringBuilder), (var_27: int64))
    let (var_28: System.Text.StringBuilder) = var_21.AppendLine("|]")
    let (var_29: string) = var_21.ToString()
    System.Console.WriteLine(var_29)
and method_35((var_0: ResizeArray<Env11>), (var_1: int32), (var_2: int32)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: Env11) = var_0.[var_2]
        let (var_5: (int64 ref)) = var_4.mem_0
        let (var_6: Env15) = var_4.mem_1
        let (var_7: EnvHeap14) = var_6.mem_0
        let (var_8: int64) = (!var_5)
        let (var_9: int64) = (var_8 - 1L)
        var_5 := var_9
        let (var_10: int64) = (!var_5)
        let (var_11: bool) = (var_10 = 0L)
        if var_11 then
            let (var_12: ManagedCuda.CudaStream) = var_7.mem_2
            var_12.Dispose()
            let (var_13: ManagedCuda.CudaEvent) = var_7.mem_0
            var_13.Dispose()
            let (var_14: (bool ref)) = var_7.mem_1
            var_14 := false
        else
            ()
        let (var_15: int32) = (var_2 + 1)
        method_35((var_0: ResizeArray<Env11>), (var_1: int32), (var_15: int32))
    else
        ()
and method_37((var_0: ResizeArray<Env8>), (var_1: int32), (var_2: int32)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: Env8) = var_0.[var_2]
        let (var_5: (int64 ref)) = var_4.mem_0
        let (var_6: Env18) = var_4.mem_1
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: int64) = (!var_5)
        let (var_9: int64) = (var_8 - 1L)
        var_5 := var_9
        let (var_10: int64) = (!var_5)
        let (var_11: bool) = (var_10 = 0L)
        if var_11 then
            var_7 := 0UL
        else
            ()
        let (var_12: int32) = (var_2 + 1)
        method_37((var_0: ResizeArray<Env8>), (var_1: int32), (var_12: int32))
    else
        ()
and method_3((var_0: EnvStack1), (var_1: ResizeArray<Env19>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: Env19) = var_1.[var_3]
        let (var_6: Env18) = var_5.mem_0
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: uint64) = var_5.mem_1
        let (var_9: uint64) = (!var_7)
        let (var_10: bool) = (var_9 <> 0UL)
        if var_10 then
            let (var_11: ResizeArray<Env19>) = var_0.mem_0
            var_11.Add((Env19((Env18(var_7)), var_8)))
        else
            ()
        let (var_12: int32) = (var_3 + 1)
        method_3((var_0: EnvStack1), (var_1: ResizeArray<Env19>), (var_2: int32), (var_12: int32))
    else
        ()
and method_10((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env18 =
    let (var_3: EnvHeap4) = var_0.mem_6
    let (var_4: (uint64 ref)) = var_3.mem_4
    let (var_5: uint64) = var_3.mem_5
    let (var_6: (int32 ref)) = var_3.mem_0
    let (var_7: EnvStack3) = var_3.mem_1
    let (var_8: EnvStack3) = var_3.mem_2
    let (var_9: EnvStack2) = var_3.mem_3
    method_11((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_10: Tuple20) = method_12((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_11: uint64) = var_10.mem_0
    let (var_12: uint64) = var_10.mem_1
    let (var_13: bool) = (var_11 >= var_2)
    let (var_34: Env19) =
        if var_13 then
            let (var_14: (uint64 ref)) = (ref var_12)
            (Env19((Env18(var_14)), var_2))
        else
            let (var_15: ResizeArray<EnvStack1>) = var_9.mem_0
            let (var_16: int32) = var_15.get_Count()
            let (var_17: int32) = 0
            let (var_18: Env21) = method_13((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2), (var_16: int32), (var_17: int32))
            let (var_19: int32) = var_18.mem_0
            let (var_20: uint64) = var_18.mem_1
            var_6 := var_19
            method_11((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_21: Tuple20) = method_12((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_22: uint64) = var_21.mem_0
            let (var_23: uint64) = var_21.mem_1
            let (var_24: bool) = (var_22 >= var_2)
            if var_24 then
                let (var_25: (uint64 ref)) = (ref var_23)
                (Env19((Env18(var_25)), var_2))
            else
                method_15((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                method_11((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_26: Tuple20) = method_12((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_27: uint64) = var_26.mem_0
                let (var_28: uint64) = var_26.mem_1
                let (var_29: bool) = (var_27 >= var_2)
                if var_29 then
                    let (var_30: (uint64 ref)) = (ref var_28)
                    (Env19((Env18(var_30)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_35: Env18) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_35.mem_0
    let (var_37: uint64) = var_34.mem_1
    let (var_38: int32) = (!var_6)
    let (var_39: ResizeArray<EnvStack1>) = var_9.mem_0
    let (var_40: EnvStack1) = var_39.[var_38]
    let (var_41: ResizeArray<Env19>) = var_40.mem_0
    var_41.Add((Env19((Env18(var_36)), var_37)))
    (Env18(var_36))
and method_16((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack9)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env8>) = var_2.mem_0
    var_5.Add((Env8(var_0, (Env18(var_1)))))
and method_25((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_25((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_26((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64)): int64 =
    let (var_24: bool) = (var_17 < var_18)
    if var_24 then
        let (var_25: bool) = (var_23 < 1000L)
        if var_25 then
            let (var_26: bool) = (var_17 >= var_17)
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = 0L
            method_27((var_0: System.Text.StringBuilder), (var_28: int64))
            let (var_29: System.Text.StringBuilder) = var_0.AppendLine("[|")
            let (var_30: int64) = method_28((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_15: int64), (var_16: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64))
            let (var_31: int64) = 0L
            method_27((var_0: System.Text.StringBuilder), (var_31: int64))
            let (var_32: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_33: int64) = (var_17 + 1L)
            method_33((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_30: int64), (var_33: int64))
        else
            let (var_35: int64) = 0L
            method_25((var_0: System.Text.StringBuilder), (var_35: int64))
            let (var_36: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_23
    else
        var_23
and method_11((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): unit =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<Env19>) = var_6.mem_0
    let (var_8: int32) = var_7.get_Count()
    let (var_9: int32) = (var_8 - 1)
    let (var_10: bool) = (var_9 >= 0)
    if var_10 then
        let (var_11: Env19) = var_7.[var_9]
        let (var_12: Env18) = var_11.mem_0
        let (var_13: (uint64 ref)) = var_12.mem_0
        let (var_14: uint64) = var_11.mem_1
        let (var_15: uint64) = (!var_13)
        let (var_16: bool) = (var_15 = 0UL)
        if var_16 then
            var_7.RemoveAt(var_9)
            method_11((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
    else
        let (var_17: bool) = (var_4 > 0)
        if var_17 then
            let (var_18: ResizeArray<uint64>) = var_2.mem_0
            let (var_19: uint64) = var_18.[var_4]
            let (var_20: int32) = (var_4 - 1)
            let (var_21: uint64) = var_18.[var_20]
            let (var_22: uint64) = (var_21 + var_19)
            var_18.[var_20] <- var_22
            var_18.RemoveAt(var_4)
            var_5.RemoveAt(var_4)
            let (var_23: ResizeArray<uint64>) = var_1.mem_0
            var_23.RemoveAt(var_4)
            var_0 := var_20
            method_11((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
and method_12((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): Tuple20 =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<uint64>) = var_1.mem_0
    let (var_8: uint64) = var_7.[var_4]
    let (var_9: ResizeArray<uint64>) = var_2.mem_0
    let (var_10: uint64) = var_9.[var_4]
    let (var_11: uint64) = (var_8 + var_10)
    let (var_12: ResizeArray<Env19>) = var_6.mem_0
    let (var_13: int32) = var_12.get_Count()
    let (var_14: bool) = (var_13 > 0)
    if var_14 then
        let (var_15: int32) = var_12.get_Count()
        let (var_16: int32) = (var_15 - 1)
        let (var_17: Env19) = var_12.[var_16]
        let (var_18: Env18) = var_17.mem_0
        let (var_19: (uint64 ref)) = var_18.mem_0
        let (var_20: uint64) = var_17.mem_1
        let (var_21: uint64) = (!var_19)
        let (var_22: uint64) = (var_21 + var_20)
        let (var_23: uint64) = (var_11 - var_22)
        Tuple20(var_23, var_22)
    else
        Tuple20(var_11, var_8)
and method_13((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32)): Env21 =
    let (var_6: bool) = (var_5 < var_4)
    if var_6 then
        let (var_7: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_8: EnvStack1) = var_7.[var_5]
        let (var_9: ResizeArray<Env19>) = var_8.mem_0
        let (var_10: int32) = var_9.get_Count()
        let (var_11: bool) = (var_10 > 0)
        let (var_28: uint64) =
            if var_11 then
                let (var_12: int32) = var_9.get_Count()
                let (var_13: int32) = (var_12 - 1)
                let (var_14: Env19) = var_9.[var_13]
                let (var_15: Env18) = var_14.mem_0
                let (var_16: (uint64 ref)) = var_15.mem_0
                let (var_17: uint64) = var_14.mem_1
                let (var_18: uint64) = (!var_16)
                let (var_19: uint64) = (var_18 + var_17)
                let (var_20: ResizeArray<uint64>) = var_1.mem_0
                let (var_21: uint64) = var_20.[var_5]
                let (var_22: ResizeArray<uint64>) = var_2.mem_0
                let (var_23: uint64) = var_22.[var_5]
                let (var_24: uint64) = (var_21 + var_23)
                (var_24 - var_19)
            else
                let (var_26: ResizeArray<uint64>) = var_2.mem_0
                var_26.[var_5]
        let (var_29: bool) = (0UL < var_28)
        let (var_30: Env21) =
            if var_29 then
                (Env21(var_5, var_28))
            else
                (Env21(0, 0UL))
        let (var_31: int32) = var_30.mem_0
        let (var_32: uint64) = var_30.mem_1
        let (var_33: int32) = (var_5 + 1)
        method_14((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_31: int32), (var_32: uint64), (var_33: int32))
    else
        (Env21(0, 0UL))
and method_15((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_6
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env19>) = ResizeArray<Env19>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env19>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env19>) = ResizeArray<Env19>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env19>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env19>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env19>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_27((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_27((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_28((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64)): int64 =
    let (var_19: bool) = (var_14 < var_15)
    if var_19 then
        let (var_20: bool) = (var_18 < 1000L)
        if var_20 then
            let (var_21: bool) = (var_14 >= var_14)
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = 0L
            method_29((var_0: System.Text.StringBuilder), (var_23: int64))
            let (var_24: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_25: int64) = method_30((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_13: int64), (var_16: int64), (var_17: int64), (var_1: string), (var_18: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_27: int64) = (var_14 + 1L)
            method_32((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_25: int64), (var_27: int64))
        else
            let (var_29: int64) = 0L
            method_27((var_0: System.Text.StringBuilder), (var_29: int64))
            let (var_30: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_18
    else
        var_18
and method_33((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64)): int64 =
    let (var_25: bool) = (var_24 < var_18)
    if var_25 then
        let (var_26: bool) = (var_23 < 1000L)
        if var_26 then
            let (var_27: bool) = (var_24 >= var_17)
            let (var_28: bool) = (var_27 = false)
            if var_28 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_29: int64) = (var_24 - var_17)
            let (var_30: int64) = (var_29 * var_4)
            let (var_31: int64) = (var_3 + var_30)
            let (var_32: int64) = (var_29 * var_9)
            let (var_33: int64) = (var_8 + var_32)
            let (var_34: int64) = (var_29 * var_14)
            let (var_35: int64) = (var_13 + var_34)
            let (var_36: int64) = 0L
            method_27((var_0: System.Text.StringBuilder), (var_36: int64))
            let (var_37: System.Text.StringBuilder) = var_0.AppendLine("[|")
            let (var_38: int64) = method_28((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_31: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_33: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_35: int64), (var_15: int64), (var_16: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64))
            let (var_39: int64) = 0L
            method_27((var_0: System.Text.StringBuilder), (var_39: int64))
            let (var_40: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_41: int64) = (var_24 + 1L)
            method_33((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_38: int64), (var_41: int64))
        else
            let (var_43: int64) = 0L
            method_25((var_0: System.Text.StringBuilder), (var_43: int64))
            let (var_44: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_23
    else
        var_23
and method_14((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32), (var_6: uint64), (var_7: int32)): Env21 =
    let (var_8: bool) = (var_7 < var_4)
    if var_8 then
        let (var_9: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_10: EnvStack1) = var_9.[var_7]
        let (var_11: ResizeArray<Env19>) = var_10.mem_0
        let (var_12: int32) = var_11.get_Count()
        let (var_13: bool) = (var_12 > 0)
        let (var_30: uint64) =
            if var_13 then
                let (var_14: int32) = var_11.get_Count()
                let (var_15: int32) = (var_14 - 1)
                let (var_16: Env19) = var_11.[var_15]
                let (var_17: Env18) = var_16.mem_0
                let (var_18: (uint64 ref)) = var_17.mem_0
                let (var_19: uint64) = var_16.mem_1
                let (var_20: uint64) = (!var_18)
                let (var_21: uint64) = (var_20 + var_19)
                let (var_22: ResizeArray<uint64>) = var_1.mem_0
                let (var_23: uint64) = var_22.[var_7]
                let (var_24: ResizeArray<uint64>) = var_2.mem_0
                let (var_25: uint64) = var_24.[var_7]
                let (var_26: uint64) = (var_23 + var_25)
                (var_26 - var_21)
            else
                let (var_28: ResizeArray<uint64>) = var_2.mem_0
                var_28.[var_7]
        let (var_31: bool) = (var_6 < var_30)
        let (var_32: Env21) =
            if var_31 then
                (Env21(var_7, var_30))
            else
                (Env21(var_5, var_6))
        let (var_33: int32) = var_32.mem_0
        let (var_34: uint64) = var_32.mem_1
        let (var_35: int32) = (var_7 + 1)
        method_14((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_33: int32), (var_34: uint64), (var_35: int32))
    else
        (Env21(var_5, var_6))
and method_29((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 8L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_29((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_30((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: string), (var_13: int64)): int64 =
    let (var_14: bool) = (var_10 < var_11)
    if var_14 then
        let (var_15: bool) = (var_13 < 1000L)
        if var_15 then
            let (var_16: System.Text.StringBuilder) = var_0.Append(var_12)
            let (var_17: bool) = (var_10 >= var_10)
            let (var_18: bool) = (var_17 = false)
            if var_18 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_19: int64) = var_1.[int32 var_2]
            let (var_20: int64) = var_4.[int32 var_5]
            let (var_21: int64) = var_7.[int32 var_8]
            let (var_22: string) = System.String.Format("{0}",var_21)
            let (var_23: string) = System.String.Format("{0}",var_20)
            let (var_24: string) = System.String.Format("{0}",var_19)
            let (var_25: string) = String.concat ", " [|var_24; var_23; var_22|]
            let (var_26: string) = System.String.Format("[{0}]",var_25)
            let (var_27: System.Text.StringBuilder) = var_0.Append(var_26)
            let (var_28: string) = "; "
            let (var_29: int64) = (var_13 + 1L)
            let (var_30: int64) = (var_10 + 1L)
            method_31((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_28: string), (var_29: int64), (var_30: int64))
        else
            let (var_32: System.Text.StringBuilder) = var_0.Append("...")
            var_13
    else
        var_13
and method_32((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64)): int64 =
    let (var_20: bool) = (var_19 < var_15)
    if var_20 then
        let (var_21: bool) = (var_18 < 1000L)
        if var_21 then
            let (var_22: bool) = (var_19 >= var_14)
            let (var_23: bool) = (var_22 = false)
            if var_23 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_24: int64) = (var_19 - var_14)
            let (var_25: int64) = (var_24 * var_4)
            let (var_26: int64) = (var_3 + var_25)
            let (var_27: int64) = (var_24 * var_8)
            let (var_28: int64) = (var_7 + var_27)
            let (var_29: int64) = (var_24 * var_12)
            let (var_30: int64) = (var_11 + var_29)
            let (var_31: int64) = 0L
            method_29((var_0: System.Text.StringBuilder), (var_31: int64))
            let (var_32: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_33: int64) = method_30((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_26: int64), (var_5: int64), (var_6: (int64 [])), (var_28: int64), (var_9: int64), (var_10: (int64 [])), (var_30: int64), (var_13: int64), (var_16: int64), (var_17: int64), (var_1: string), (var_18: int64))
            let (var_34: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_35: int64) = (var_19 + 1L)
            method_32((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_33: int64), (var_35: int64))
        else
            let (var_37: int64) = 0L
            method_27((var_0: System.Text.StringBuilder), (var_37: int64))
            let (var_38: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_18
    else
        var_18
and method_31((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: string), (var_13: int64), (var_14: int64)): int64 =
    let (var_15: bool) = (var_14 < var_11)
    if var_15 then
        let (var_16: bool) = (var_13 < 1000L)
        if var_16 then
            let (var_17: System.Text.StringBuilder) = var_0.Append(var_12)
            let (var_18: bool) = (var_14 >= var_10)
            let (var_19: bool) = (var_18 = false)
            if var_19 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_20: int64) = (var_14 - var_10)
            let (var_21: int64) = (var_20 * var_3)
            let (var_22: int64) = (var_2 + var_21)
            let (var_23: int64) = (var_20 * var_6)
            let (var_24: int64) = (var_5 + var_23)
            let (var_25: int64) = (var_20 * var_9)
            let (var_26: int64) = (var_8 + var_25)
            let (var_27: int64) = var_1.[int32 var_22]
            let (var_28: int64) = var_4.[int32 var_24]
            let (var_29: int64) = var_7.[int32 var_26]
            let (var_30: string) = System.String.Format("{0}",var_29)
            let (var_31: string) = System.String.Format("{0}",var_28)
            let (var_32: string) = System.String.Format("{0}",var_27)
            let (var_33: string) = String.concat ", " [|var_32; var_31; var_30|]
            let (var_34: string) = System.String.Format("[{0}]",var_33)
            let (var_35: System.Text.StringBuilder) = var_0.Append(var_34)
            let (var_36: string) = "; "
            let (var_37: int64) = (var_13 + 1L)
            let (var_38: int64) = (var_14 + 1L)
            method_31((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_36: string), (var_37: int64), (var_38: int64))
        else
            let (var_40: System.Text.StringBuilder) = var_0.Append("...")
            var_13
    else
        var_13
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_11; "\" -I\"C:/cub-1.7.4\" -I\""; var_10; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1048576UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_43: ResizeArray<EnvStack1>) = ResizeArray<EnvStack1>()
let (var_44: EnvStack2) = EnvStack2((var_43: ResizeArray<EnvStack1>))
let (var_45: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_46: EnvStack3) = EnvStack3((var_45: ResizeArray<uint64>))
let (var_47: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_48: EnvStack3) = EnvStack3((var_47: ResizeArray<uint64>))
let (var_49: (int32 ref)) = (ref 0)
let (var_50: EnvHeap4) = ({mem_0 = (var_49: (int32 ref)); mem_1 = (var_48: EnvStack3); mem_2 = (var_46: EnvStack3); mem_3 = (var_44: EnvStack2); mem_4 = (var_40: (uint64 ref)); mem_5 = (var_35: uint64)} : EnvHeap4)
let (var_51: EnvHeap5) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_50: EnvHeap4)} : EnvHeap5)
method_1((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_52: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_53: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_52)
let (var_54: ManagedCuda.CudaContext) = var_51.mem_0
let (var_55: EnvHeap4) = var_51.mem_1
let (var_56: EnvHeap6) = ({mem_0 = (var_54: ManagedCuda.CudaContext); mem_1 = (var_53: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_55: EnvHeap4)} : EnvHeap6)
let (var_57: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_58: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_59: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_57, var_58)
let (var_60: ManagedCuda.CudaContext) = var_56.mem_0
let (var_61: ManagedCuda.CudaRand.CudaRandDevice) = var_56.mem_1
let (var_62: EnvHeap4) = var_56.mem_2
let (var_63: EnvHeap7) = ({mem_0 = (var_60: ManagedCuda.CudaContext); mem_1 = (var_59: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_61: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_62: EnvHeap4)} : EnvHeap7)
let (var_70: ResizeArray<Env8>) = ResizeArray<Env8>()
let (var_71: EnvStack9) = EnvStack9((var_70: ResizeArray<Env8>))
let (var_72: ManagedCuda.CudaContext) = var_63.mem_0
let (var_73: ManagedCuda.CudaBlas.CudaBlas) = var_63.mem_1
let (var_74: ManagedCuda.CudaRand.CudaRandDevice) = var_63.mem_2
let (var_75: EnvHeap4) = var_63.mem_3
let (var_76: EnvHeap10) = ({mem_0 = (var_72: ManagedCuda.CudaContext); mem_1 = (var_73: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_74: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_71: EnvStack9); mem_4 = (var_75: EnvHeap4)} : EnvHeap10)
let (var_88: ResizeArray<Env11>) = ResizeArray<Env11>()
let (var_89: EnvStack12) = EnvStack12((var_88: ResizeArray<Env11>))
let (var_90: ManagedCuda.CudaContext) = var_76.mem_0
let (var_91: ManagedCuda.CudaBlas.CudaBlas) = var_76.mem_1
let (var_92: ManagedCuda.CudaRand.CudaRandDevice) = var_76.mem_2
let (var_93: EnvStack9) = var_76.mem_3
let (var_94: EnvHeap4) = var_76.mem_4
let (var_95: EnvHeap13) = ({mem_0 = (var_90: ManagedCuda.CudaContext); mem_1 = (var_91: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_92: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_93: EnvStack9); mem_4 = (var_89: EnvStack12); mem_5 = (var_94: EnvHeap4)} : EnvHeap13)
let (var_96: (bool ref)) = (ref true)
let (var_97: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_98: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_99: EnvHeap14) = ({mem_0 = (var_98: ManagedCuda.CudaEvent); mem_1 = (var_96: (bool ref)); mem_2 = (var_97: ManagedCuda.CudaStream)} : EnvHeap14)
let (var_100: Env11) = method_6((var_99: EnvHeap14), (var_95: EnvHeap13), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_101: (int64 ref)) = var_100.mem_0
let (var_102: Env15) = var_100.mem_1
let (var_103: EnvHeap14) = var_102.mem_0
let (var_104: ManagedCuda.CudaContext) = var_95.mem_0
let (var_105: ManagedCuda.CudaBlas.CudaBlas) = var_95.mem_1
let (var_106: ManagedCuda.CudaRand.CudaRandDevice) = var_95.mem_2
let (var_107: EnvStack9) = var_95.mem_3
let (var_108: EnvStack12) = var_95.mem_4
let (var_109: EnvHeap4) = var_95.mem_5
let (var_110: EnvHeap16) = ({mem_0 = (var_104: ManagedCuda.CudaContext); mem_1 = (var_105: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_106: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_107: EnvStack9); mem_4 = (var_108: EnvStack12); mem_5 = (var_109: EnvHeap4); mem_6 = (var_101: (int64 ref)); mem_7 = (var_103: EnvHeap14)} : EnvHeap16)
let (var_111: ManagedCuda.CudaSolve.cusolverDnHandle) = ManagedCuda.CudaSolve.cusolverDnHandle()
let (var_112: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = (ref var_111)
let (var_113: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnCreate(var_112)
if var_113 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_113)
let (var_114: ManagedCuda.CudaContext) = var_110.mem_0
let (var_115: ManagedCuda.CudaBlas.CudaBlas) = var_110.mem_1
let (var_116: ManagedCuda.CudaRand.CudaRandDevice) = var_110.mem_2
let (var_117: EnvStack9) = var_110.mem_3
let (var_118: EnvStack12) = var_110.mem_4
let (var_119: EnvHeap4) = var_110.mem_5
let (var_120: (int64 ref)) = var_110.mem_6
let (var_121: EnvHeap14) = var_110.mem_7
let (var_122: EnvHeap17) = ({mem_0 = (var_114: ManagedCuda.CudaContext); mem_1 = (var_115: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_112: (ManagedCuda.CudaSolve.cusolverDnHandle ref)); mem_3 = (var_116: ManagedCuda.CudaRand.CudaRandDevice); mem_4 = (var_117: EnvStack9); mem_5 = (var_118: EnvStack12); mem_6 = (var_119: EnvHeap4); mem_7 = (var_120: (int64 ref)); mem_8 = (var_121: EnvHeap14)} : EnvHeap17)
let (var_123: Env8) = method_8((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_124: (int64 ref)) = var_123.mem_0
let (var_125: Env18) = var_123.mem_1
let (var_126: (uint64 ref)) = var_125.mem_0
let (var_127: Env8) = method_8((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_128: (int64 ref)) = var_127.mem_0
let (var_129: Env18) = var_127.mem_1
let (var_130: (uint64 ref)) = var_129.mem_0
let (var_131: Env8) = method_8((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_132: (int64 ref)) = var_131.mem_0
let (var_133: Env18) = var_131.mem_1
let (var_134: (uint64 ref)) = var_133.mem_0
let (var_135: uint64) = method_4((var_126: (uint64 ref)))
let (var_136: uint64) = method_4((var_130: (uint64 ref)))
let (var_137: uint64) = method_4((var_134: (uint64 ref)))
method_17((var_135: uint64), (var_136: uint64), (var_137: uint64), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_138: int64) = 0L
let (var_139: int64) = 256L
let (var_140: int64) = 128L
let (var_141: int64) = 1L
let (var_142: int64) = 0L
let (var_143: int64) = 256L
let (var_144: int64) = 128L
let (var_145: int64) = 1L
let (var_146: int64) = 0L
let (var_147: int64) = 256L
let (var_148: int64) = 128L
let (var_149: int64) = 1L
let (var_150: int64) = 0L
let (var_151: int64) = 2L
let (var_152: int64) = 0L
let (var_153: int64) = 2L
let (var_154: int64) = 0L
let (var_155: int64) = 128L
method_22((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_124: (int64 ref)), (var_126: (uint64 ref)), (var_138: int64), (var_139: int64), (var_140: int64), (var_141: int64), (var_128: (int64 ref)), (var_130: (uint64 ref)), (var_142: int64), (var_143: int64), (var_144: int64), (var_145: int64), (var_132: (int64 ref)), (var_134: (uint64 ref)), (var_146: int64), (var_147: int64), (var_148: int64), (var_149: int64), (var_150: int64), (var_151: int64), (var_152: int64), (var_153: int64), (var_154: int64), (var_155: int64))
let (var_156: (int64 ref)) = var_122.mem_7
let (var_157: EnvHeap14) = var_122.mem_8
let (var_158: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = var_122.mem_2
let (var_159: ManagedCuda.CudaSolve.cusolverDnHandle) = (!var_158)
let (var_160: ManagedCuda.BasicTypes.CUstream) = method_21((var_157: EnvHeap14))
let (var_161: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSetStream(var_159, var_160)
if var_161 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_161)
let (var_162: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnDestroy(var_159)
if var_162 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_162)
method_34((var_108: EnvStack12))
method_36((var_93: EnvStack9))
var_59.Dispose()
var_53.Dispose()
let (var_163: uint64) = method_4((var_40: (uint64 ref)))
let (var_164: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_163)
let (var_165: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_164)
var_54.FreeMemory(var_165)
var_40 := 0UL
var_1.Dispose()

