module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"
#include <assert.h>

extern "C" {
    
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and EnvStack1 =
    struct
    val mem_0: ResizeArray<Env7>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<EnvStack1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack3 =
    struct
    val mem_0: ResizeArray<uint64>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap4 =
    {
    mem_0: (int32 ref)
    mem_1: EnvStack3
    mem_2: EnvStack3
    mem_3: EnvStack2
    mem_4: (uint64 ref)
    mem_5: uint64
    }
and EnvHeap5 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap4
    }
and Env6 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env7 =
    struct
    val mem_0: Env6
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple8 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env9 =
    struct
    val mem_0: int32
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap5), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env7>) = ResizeArray<Env7>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env7>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env7>) = ResizeArray<Env7>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env7>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env7>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env7>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_6((var_0: EnvHeap5), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env6 =
    let (var_3: EnvHeap4) = var_0.mem_1
    let (var_4: (uint64 ref)) = var_3.mem_4
    let (var_5: uint64) = var_3.mem_5
    let (var_6: (int32 ref)) = var_3.mem_0
    let (var_7: EnvStack3) = var_3.mem_1
    let (var_8: EnvStack3) = var_3.mem_2
    let (var_9: EnvStack2) = var_3.mem_3
    method_7((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_10: Tuple8) = method_8((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_11: uint64) = var_10.mem_0
    let (var_12: uint64) = var_10.mem_1
    let (var_13: bool) = (var_11 >= var_2)
    let (var_34: Env7) =
        if var_13 then
            let (var_14: (uint64 ref)) = (ref var_12)
            (Env7((Env6(var_14)), var_2))
        else
            let (var_15: ResizeArray<EnvStack1>) = var_9.mem_0
            let (var_16: int32) = var_15.get_Count()
            let (var_17: int32) = 0
            let (var_18: Env9) = method_9((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2), (var_16: int32), (var_17: int32))
            let (var_19: int32) = var_18.mem_0
            let (var_20: uint64) = var_18.mem_1
            var_6 := var_19
            method_7((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_21: Tuple8) = method_8((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_22: uint64) = var_21.mem_0
            let (var_23: uint64) = var_21.mem_1
            let (var_24: bool) = (var_22 >= var_2)
            if var_24 then
                let (var_25: (uint64 ref)) = (ref var_23)
                (Env7((Env6(var_25)), var_2))
            else
                method_1((var_0: EnvHeap5), (var_1: ManagedCuda.BasicTypes.CUmodule))
                method_7((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_26: Tuple8) = method_8((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_27: uint64) = var_26.mem_0
                let (var_28: uint64) = var_26.mem_1
                let (var_29: bool) = (var_27 >= var_2)
                if var_29 then
                    let (var_30: (uint64 ref)) = (ref var_28)
                    (Env7((Env6(var_30)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_35: Env6) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_35.mem_0
    let (var_37: uint64) = var_34.mem_1
    let (var_38: int32) = (!var_6)
    let (var_39: ResizeArray<EnvStack1>) = var_9.mem_0
    let (var_40: EnvStack1) = var_39.[var_38]
    let (var_41: ResizeArray<Env7>) = var_40.mem_0
    var_41.Add((Env7((Env6(var_36)), var_37)))
    (Env6(var_36))
and method_4((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 = 0UL)
    let (var_3: bool) = (var_2 <> true)
    let (var_4: bool) = (var_3 = false)
    if var_4 then
        (failwith "A disposed Cuda memory cell has been tried to be accessed.")
    else
        ()
    var_1
and method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: EnvStack1) = var_1.[var_3]
        let (var_6: ResizeArray<Env7>) = var_5.mem_0
        let (var_7: int32) = var_6.get_Count()
        let (var_8: int32) = 0
        method_3((var_0: EnvStack1), (var_6: ResizeArray<Env7>), (var_7: int32), (var_8: int32))
        let (var_9: int32) = (var_3 + 1)
        method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_9: int32))
    else
        ()
and method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env7>), (var_5: int32), (var_6: int32)): unit =
    let (var_7: bool) = (var_6 < var_5)
    if var_7 then
        let (var_8: Env7) = var_4.[var_6]
        let (var_9: Env6) = var_8.mem_0
        let (var_10: (uint64 ref)) = var_9.mem_0
        let (var_11: uint64) = var_8.mem_1
        let (var_12: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_13: int32) = var_12.get_Count()
        let (var_14: int32) = (var_13 - 1)
        let (var_15: ResizeArray<uint64>) = var_1.mem_0
        let (var_16: uint64) = var_15.[var_14]
        let (var_17: ResizeArray<uint64>) = var_2.mem_0
        let (var_18: uint64) = var_17.[var_14]
        let (var_19: uint64) = (!var_10)
        let (var_20: uint64) = (var_16 + var_18)
        let (var_21: bool) = (var_20 < var_19)
        if var_21 then
            let (var_22: uint64) = (var_19 - var_16)
            var_17.[var_14] <- var_22
            let (var_23: ResizeArray<Env7>) = ResizeArray<Env7>()
            let (var_24: EnvStack1) = EnvStack1((var_23: ResizeArray<Env7>))
            let (var_25: ResizeArray<Env7>) = var_24.mem_0
            var_25.Add((Env7((Env6(var_10)), var_11)))
            var_15.Add(var_19)
            var_17.Add(var_11)
            var_12.Add(var_24)
        else
            let (var_26: bool) = (var_20 = var_19)
            if var_26 then
                let (var_27: uint64) = (var_18 + var_11)
                var_17.[var_14] <- var_27
                let (var_28: EnvStack1) = var_12.[var_14]
                let (var_29: ResizeArray<Env7>) = var_28.mem_0
                var_29.Add((Env7((Env6(var_10)), var_11)))
            else
                (failwith "The elements should always be ordered.")
        let (var_30: int32) = (var_6 + 1)
        method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env7>), (var_5: int32), (var_30: int32))
    else
        ()
and method_7((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): unit =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<Env7>) = var_6.mem_0
    let (var_8: int32) = var_7.get_Count()
    let (var_9: int32) = (var_8 - 1)
    let (var_10: bool) = (var_9 >= 0)
    if var_10 then
        let (var_11: Env7) = var_7.[var_9]
        let (var_12: Env6) = var_11.mem_0
        let (var_13: (uint64 ref)) = var_12.mem_0
        let (var_14: uint64) = var_11.mem_1
        let (var_15: uint64) = (!var_13)
        let (var_16: bool) = (var_15 = 0UL)
        if var_16 then
            var_7.RemoveAt(var_9)
            method_7((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
    else
        let (var_17: bool) = (var_4 > 0)
        if var_17 then
            let (var_18: ResizeArray<uint64>) = var_2.mem_0
            let (var_19: uint64) = var_18.[var_4]
            let (var_20: int32) = (var_4 - 1)
            let (var_21: uint64) = var_18.[var_20]
            let (var_22: uint64) = (var_21 + var_19)
            var_18.[var_20] <- var_22
            var_18.RemoveAt(var_4)
            var_5.RemoveAt(var_4)
            let (var_23: ResizeArray<uint64>) = var_1.mem_0
            var_23.RemoveAt(var_4)
            var_0 := var_20
            method_7((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
and method_8((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): Tuple8 =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<uint64>) = var_1.mem_0
    let (var_8: uint64) = var_7.[var_4]
    let (var_9: ResizeArray<uint64>) = var_2.mem_0
    let (var_10: uint64) = var_9.[var_4]
    let (var_11: uint64) = (var_8 + var_10)
    let (var_12: ResizeArray<Env7>) = var_6.mem_0
    let (var_13: int32) = var_12.get_Count()
    let (var_14: bool) = (var_13 > 0)
    if var_14 then
        let (var_15: int32) = var_12.get_Count()
        let (var_16: int32) = (var_15 - 1)
        let (var_17: Env7) = var_12.[var_16]
        let (var_18: Env6) = var_17.mem_0
        let (var_19: (uint64 ref)) = var_18.mem_0
        let (var_20: uint64) = var_17.mem_1
        let (var_21: uint64) = (!var_19)
        let (var_22: uint64) = (var_21 + var_20)
        let (var_23: uint64) = (var_11 - var_22)
        Tuple8(var_23, var_22)
    else
        Tuple8(var_11, var_8)
and method_9((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32)): Env9 =
    let (var_6: bool) = (var_5 < var_4)
    if var_6 then
        let (var_7: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_8: EnvStack1) = var_7.[var_5]
        let (var_9: ResizeArray<Env7>) = var_8.mem_0
        let (var_10: int32) = var_9.get_Count()
        let (var_11: bool) = (var_10 > 0)
        let (var_28: uint64) =
            if var_11 then
                let (var_12: int32) = var_9.get_Count()
                let (var_13: int32) = (var_12 - 1)
                let (var_14: Env7) = var_9.[var_13]
                let (var_15: Env6) = var_14.mem_0
                let (var_16: (uint64 ref)) = var_15.mem_0
                let (var_17: uint64) = var_14.mem_1
                let (var_18: uint64) = (!var_16)
                let (var_19: uint64) = (var_18 + var_17)
                let (var_20: ResizeArray<uint64>) = var_1.mem_0
                let (var_21: uint64) = var_20.[var_5]
                let (var_22: ResizeArray<uint64>) = var_2.mem_0
                let (var_23: uint64) = var_22.[var_5]
                let (var_24: uint64) = (var_21 + var_23)
                (var_24 - var_19)
            else
                let (var_26: ResizeArray<uint64>) = var_2.mem_0
                var_26.[var_5]
        let (var_29: bool) = (0UL < var_28)
        let (var_30: Env9) =
            if var_29 then
                (Env9(var_5, var_28))
            else
                (Env9(0, 0UL))
        let (var_31: int32) = var_30.mem_0
        let (var_32: uint64) = var_30.mem_1
        let (var_33: int32) = (var_5 + 1)
        method_10((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_31: int32), (var_32: uint64), (var_33: int32))
    else
        (Env9(0, 0UL))
and method_3((var_0: EnvStack1), (var_1: ResizeArray<Env7>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: Env7) = var_1.[var_3]
        let (var_6: Env6) = var_5.mem_0
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: uint64) = var_5.mem_1
        let (var_9: uint64) = (!var_7)
        let (var_10: bool) = (var_9 = 0UL)
        let (var_11: bool) = (var_10 <> true)
        if var_11 then
            let (var_12: ResizeArray<Env7>) = var_0.mem_0
            var_12.Add((Env7((Env6(var_7)), var_8)))
        else
            ()
        let (var_13: int32) = (var_3 + 1)
        method_3((var_0: EnvStack1), (var_1: ResizeArray<Env7>), (var_2: int32), (var_13: int32))
    else
        ()
and method_10((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32), (var_6: uint64), (var_7: int32)): Env9 =
    let (var_8: bool) = (var_7 < var_4)
    if var_8 then
        let (var_9: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_10: EnvStack1) = var_9.[var_7]
        let (var_11: ResizeArray<Env7>) = var_10.mem_0
        let (var_12: int32) = var_11.get_Count()
        let (var_13: bool) = (var_12 > 0)
        let (var_30: uint64) =
            if var_13 then
                let (var_14: int32) = var_11.get_Count()
                let (var_15: int32) = (var_14 - 1)
                let (var_16: Env7) = var_11.[var_15]
                let (var_17: Env6) = var_16.mem_0
                let (var_18: (uint64 ref)) = var_17.mem_0
                let (var_19: uint64) = var_16.mem_1
                let (var_20: uint64) = (!var_18)
                let (var_21: uint64) = (var_20 + var_19)
                let (var_22: ResizeArray<uint64>) = var_1.mem_0
                let (var_23: uint64) = var_22.[var_7]
                let (var_24: ResizeArray<uint64>) = var_2.mem_0
                let (var_25: uint64) = var_24.[var_7]
                let (var_26: uint64) = (var_23 + var_25)
                (var_26 - var_21)
            else
                let (var_28: ResizeArray<uint64>) = var_2.mem_0
                var_28.[var_7]
        let (var_31: bool) = (var_6 < var_30)
        let (var_32: Env9) =
            if var_31 then
                (Env9(var_7, var_30))
            else
                (Env9(var_5, var_6))
        let (var_33: int32) = var_32.mem_0
        let (var_34: uint64) = var_32.mem_1
        let (var_35: int32) = (var_7 + 1)
        method_10((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_33: int32), (var_34: uint64), (var_35: int32))
    else
        (Env9(var_5, var_6))
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_11; "\" -I\"C:/cub-1.7.4\" -I\""; var_10; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 262144UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_43: ResizeArray<EnvStack1>) = ResizeArray<EnvStack1>()
let (var_44: EnvStack2) = EnvStack2((var_43: ResizeArray<EnvStack1>))
let (var_45: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_46: EnvStack3) = EnvStack3((var_45: ResizeArray<uint64>))
let (var_47: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_48: EnvStack3) = EnvStack3((var_47: ResizeArray<uint64>))
let (var_49: (int32 ref)) = (ref 0)
let (var_50: EnvHeap4) = ({mem_0 = (var_49: (int32 ref)); mem_1 = (var_48: EnvStack3); mem_2 = (var_46: EnvStack3); mem_3 = (var_44: EnvStack2); mem_4 = (var_40: (uint64 ref)); mem_5 = (var_35: uint64)} : EnvHeap4)
let (var_51: EnvHeap5) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_50: EnvHeap4)} : EnvHeap5)
method_1((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_52: uint64) = 256UL
let (var_53: Env6) = method_6((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_52: uint64))
let (var_54: (uint64 ref)) = var_53.mem_0
let (var_55: uint64) = 256UL
let (var_56: Env6) = method_6((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_55: uint64))
let (var_57: (uint64 ref)) = var_56.mem_0
let (var_58: uint64) = 256UL
let (var_59: Env6) = method_6((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_58: uint64))
let (var_60: (uint64 ref)) = var_59.mem_0
let (var_61: uint64) = (!var_54)
let (var_62: string) = System.String.Format("{0}",var_61)
System.Console.WriteLine(var_62)
let (var_63: uint64) = (!var_57)
let (var_64: string) = System.String.Format("{0}",var_63)
System.Console.WriteLine(var_64)
let (var_65: uint64) = (!var_60)
let (var_66: string) = System.String.Format("{0}",var_65)
System.Console.WriteLine(var_66)
var_60 := 0UL
var_57 := 0UL
let (var_67: uint64) = 256UL
let (var_68: Env6) = method_6((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_67: uint64))
let (var_69: (uint64 ref)) = var_68.mem_0
let (var_70: uint64) = 256UL
let (var_71: Env6) = method_6((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_70: uint64))
let (var_72: (uint64 ref)) = var_71.mem_0
let (var_73: uint64) = (!var_69)
let (var_74: string) = System.String.Format("{0}",var_73)
System.Console.WriteLine(var_74)
let (var_75: uint64) = (!var_72)
let (var_76: string) = System.String.Format("{0}",var_75)
System.Console.WriteLine(var_76)
var_54 := 0UL
let (var_77: ManagedCuda.CudaContext) = var_51.mem_0
let (var_78: uint64) = method_4((var_40: (uint64 ref)))
let (var_79: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_78)
let (var_80: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_79)
var_77.FreeMemory(var_80)
var_40 := 0UL
var_1.Dispose()

