module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"
#include <assert.h>

extern "C" {
    __global__ void method_45(float * __restrict__ var_0, float * __restrict__ var_1);
    __global__ void method_50(int * __restrict__ var_0);
    __global__ void method_59(float * __restrict__ var_0);
    
    __global__ void method_45(float * __restrict__ var_0, float * __restrict__ var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6 = (var_5 % 8);
        long long int var_7 = (var_5 / 8);
        long long int var_8 = (var_7 % 8);
        long long int var_9 = (var_7 / 8);
        char var_10 = (var_8 >= var_6);
        if (var_10) {
            char var_11 = (var_8 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_8 < 8);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_15 = (var_8 * 8);
            char var_16 = (var_6 >= 0);
            char var_18;
            if (var_16) {
                var_18 = (var_6 < 8);
            } else {
                var_18 = 0;
            }
            char var_19 = (var_18 == 0);
            if (var_19) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_20 = (var_15 + var_6);
            char var_22;
            if (var_11) {
                var_22 = (var_8 < 8);
            } else {
                var_22 = 0;
            }
            char var_23 = (var_22 == 0);
            if (var_23) {
                // "Argument out of bounds."
            } else {
            }
            char var_25;
            if (var_16) {
                var_25 = (var_6 < 8);
            } else {
                var_25 = 0;
            }
            char var_26 = (var_25 == 0);
            if (var_26) {
                // "Argument out of bounds."
            } else {
            }
            float var_27 = var_0[var_20];
            var_1[var_20] = var_27;
        } else {
        }
    }
    __global__ void method_50(int * __restrict__ var_0) {
        long long int var_1 = threadIdx.x;
        long long int var_2 = blockIdx.x;
        long long int var_3 = (var_1 + var_2);
        int var_4 = var_0[0];
        char var_5 = (var_4 > 0);
        if (var_5) {
            printf("CuSolve function failed!\n");
            printf("The leading minor of order %d is not positive definite.", var_4);
            printf("\n");
        } else {
        }
        char var_6 = (var_4 < 0);
        if (var_6) {
            printf("CuSolve function failed!\n");
            int var_7 = (-var_4);
            printf("The %d-th parameter is wrong.", var_7);
            printf("\n");
        } else {
        }
        char var_8 = (var_4 == 0);
        int is_info_zero = var_8;
        assert(is_info_zero);
    }
    __global__ void method_59(float * __restrict__ var_0) {
        long long int var_1 = threadIdx.x;
        long long int var_2 = blockIdx.x;
        long long int var_3 = (32 * var_2);
        long long int var_4 = (var_1 + var_3);
        long long int var_5 = (var_4 % 8);
        long long int var_6 = (var_4 / 8);
        long long int var_7 = (var_6 % 8);
        long long int var_8 = (var_6 / 8);
        char var_9 = (var_7 >= 0);
        char var_11;
        if (var_9) {
            var_11 = (var_7 < 8);
        } else {
            var_11 = 0;
        }
        char var_12 = (var_11 == 0);
        if (var_12) {
            // "Argument out of bounds."
        } else {
        }
        long long int var_13 = (var_7 * 8);
        char var_14 = (var_5 >= 0);
        char var_16;
        if (var_14) {
            var_16 = (var_5 < 8);
        } else {
            var_16 = 0;
        }
        char var_17 = (var_16 == 0);
        if (var_17) {
            // "Argument out of bounds."
        } else {
        }
        long long int var_18 = (var_13 + var_5);
        char var_19 = (var_7 == var_5);
        float var_20;
        if (var_19) {
            var_20 = 1;
        } else {
            var_20 = 0;
        }
        var_0[var_18] = var_20;
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and EnvStack1 =
    struct
    val mem_0: ResizeArray<Env25>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<EnvStack1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack3 =
    struct
    val mem_0: ResizeArray<uint64>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap4 =
    {
    mem_0: (int32 ref)
    mem_1: EnvStack3
    mem_2: EnvStack3
    mem_3: EnvStack2
    mem_4: (uint64 ref)
    mem_5: uint64
    }
and EnvHeap5 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap4
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap4
    }
and Env8 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env22
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack9 =
    struct
    val mem_0: ResizeArray<Env8>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap10 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvHeap4
    }
and Env11 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env15
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack12 =
    struct
    val mem_0: ResizeArray<Env11>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap13 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvStack12
    mem_5: EnvHeap4
    }
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env15 =
    struct
    val mem_0: EnvHeap14
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap16 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvStack12
    mem_5: EnvHeap4
    mem_6: (int64 ref)
    mem_7: EnvHeap14
    }
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: (ManagedCuda.CudaSolve.cusolverDnHandle ref)
    mem_3: ManagedCuda.CudaRand.CudaRandDevice
    mem_4: EnvStack9
    mem_5: EnvStack12
    mem_6: EnvHeap4
    mem_7: (int64 ref)
    mem_8: EnvHeap14
    }
and Tuple18 =
    struct
    val mem_0: Tuple19
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple19 =
    struct
    val mem_0: int64
    val mem_1: int64
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and Tuple20 =
    struct
    val mem_0: int64
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env21 =
    struct
    val mem_0: Env8
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env22 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack23 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack24 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env25 =
    struct
    val mem_0: Env22
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack26 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple27 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env28 =
    struct
    val mem_0: int32
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap5), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env25>) = ResizeArray<Env25>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env25>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env25>) = ResizeArray<Env25>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env25>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env25>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env25>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_6((var_0: EnvHeap14), (var_1: EnvHeap13), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env11 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack12) = var_1.mem_4
    method_7((var_3: (int64 ref)), (var_0: EnvHeap14), (var_4: EnvStack12))
    (Env11(var_3, (Env15(var_0))))
and method_8((var_0: string)): Tuple18 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2051)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2051i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int32) = var_5.ReadInt32()
    let (var_13: int32) = System.Net.IPAddress.NetworkToHostOrder(var_12)
    let (var_14: int32) = var_5.ReadInt32()
    let (var_15: int32) = System.Net.IPAddress.NetworkToHostOrder(var_14)
    let (var_16: int64) = (int64 var_11)
    let (var_17: int64) = (int64 var_13)
    let (var_18: int64) = (int64 var_15)
    let (var_19: int32) = (var_11 * var_13)
    let (var_20: int32) = (var_19 * var_15)
    let (var_22: (uint8 [])) = var_5.ReadBytes(var_20)
    var_5.Dispose()
    var_4.Dispose()
    Tuple18(Tuple19(var_16, var_17, var_18), var_22)
and method_9((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_10((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_9((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_11((var_0: string)): Tuple20 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2049)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2049i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int64) = (int64 var_11)
    let (var_14: (uint8 [])) = var_5.ReadBytes(var_11)
    var_5.Dispose()
    var_4.Dispose()
    Tuple20(var_12, var_14)
and method_12((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_13((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_12((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_14((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_10((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_14((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_13((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_16((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (float32 [])), (var_4: int64), (var_5: int64), (var_6: int64)): Env21 =
    let (var_7: (int64 ref)) = var_0.mem_7
    let (var_8: EnvHeap14) = var_0.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    let (var_10: int64) = (var_2 * var_5)
    let (var_11: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_3,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_12: int64) = var_11.AddrOfPinnedObject().ToInt64()
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: int64) = (var_4 * 4L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_15 + var_13)
    let (var_17: Env8) = method_18((var_10: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: Env22) = var_17.mem_1
    let (var_20: (uint64 ref)) = var_19.mem_0
    let (var_21: uint64) = method_4((var_20: (uint64 ref)))
    let (var_22: int64) = (var_10 * 4L)
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_24: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_23)
    let (var_25: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_26: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_25)
    let (var_27: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_28: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_24, var_26, var_27, var_9)
    if var_28 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_28)
    var_11.Free()
    (Env21((Env8(var_18, (Env22(var_20))))))
and method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_2: Env8) = method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_29((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack23((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_30((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_6: Env8) = method_31((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_32((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_33((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: Env8) = method_31((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_5: (int64 ref)), (var_7: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_35((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_7 * var_8)
    let (var_10: int64) = (var_8 * var_6)
    let (var_11: bool) = (var_5 = var_10)
    let (var_12: bool) = (var_11 = false)
    if var_12 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_13: (float32 [])) = method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_7: int64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: int64))
    let (var_14: int64) = 0L
    method_37((var_13: (float32 [])), (var_14: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64))
and method_42((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: Env8) = method_31((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: uint64) = method_4((var_1: (uint64 ref)))
    let (var_9: uint64) = method_4((var_7: (uint64 ref)))
    method_43((var_8: uint64), (var_9: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: EnvStack26) = method_46((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_11: (int64 ref)) = var_10.mem_0
    let (var_12: (uint64 ref)) = var_10.mem_1
    let (var_13: uint64) = method_4((var_12: (uint64 ref)))
    method_48((var_13: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    var_12 := 0UL
    EnvStack24((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_51((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: EnvStack24) = method_52((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: (uint64 ref)) = var_4.mem_1
    method_60((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_5: (int64 ref)), (var_6: (uint64 ref)))
and method_61((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
    let (var_7: (int64 ref)) = var_4.mem_7
    let (var_8: EnvHeap14) = var_4.mem_8
    let (var_9: ManagedCuda.CudaBlas.CudaBlasHandle) = var_6.get_CublasHandle()
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.set_Stream(var_10)
    let (var_11: ManagedCuda.CudaBlas.SideMode) = ManagedCuda.CudaBlas.SideMode.Right
    let (var_12: ManagedCuda.CudaBlas.FillMode) = ManagedCuda.CudaBlas.FillMode.Upper
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.DiagType) = ManagedCuda.CudaBlas.DiagType.NonUnit
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_1: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: uint64) = method_4((var_3: (uint64 ref)))
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_24: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_23)
    let (var_25: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasStrmm_v2(var_9, var_11, var_12, var_13, var_14, 8, 8, var_15, var_18, 8, var_21, 8, var_24, 8)
    if var_25 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_25)
and method_62((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_6: Env8) = method_31((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_63((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_17((var_0: EnvHeap14)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_64((var_0: EnvStack12)): unit =
    let (var_1: ResizeArray<Env11>) = var_0.mem_0
    let (var_2: int32) = var_1.get_Count()
    let (var_3: int32) = 0
    method_65((var_1: ResizeArray<Env11>), (var_2: int32), (var_3: int32))
    var_1.Clear()
and method_66((var_0: EnvStack9)): unit =
    let (var_1: ResizeArray<Env8>) = var_0.mem_0
    let (var_2: int32) = var_1.get_Count()
    let (var_3: int32) = 0
    method_67((var_1: ResizeArray<Env8>), (var_2: int32), (var_3: int32))
    var_1.Clear()
and method_4((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 = 0UL)
    let (var_3: bool) = (var_2 <> true)
    let (var_4: bool) = (var_3 = false)
    if var_4 then
        (failwith "A disposed Cuda memory cell has been tried to be accessed.")
    else
        ()
    var_1
and method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: EnvStack1) = var_1.[var_3]
        let (var_6: ResizeArray<Env25>) = var_5.mem_0
        let (var_7: int32) = var_6.get_Count()
        let (var_8: int32) = 0
        method_3((var_0: EnvStack1), (var_6: ResizeArray<Env25>), (var_7: int32), (var_8: int32))
        let (var_9: int32) = (var_3 + 1)
        method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_9: int32))
    else
        ()
and method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env25>), (var_5: int32), (var_6: int32)): unit =
    let (var_7: bool) = (var_6 < var_5)
    if var_7 then
        let (var_8: Env25) = var_4.[var_6]
        let (var_9: Env22) = var_8.mem_0
        let (var_10: (uint64 ref)) = var_9.mem_0
        let (var_11: uint64) = var_8.mem_1
        let (var_12: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_13: int32) = var_12.get_Count()
        let (var_14: int32) = (var_13 - 1)
        let (var_15: ResizeArray<uint64>) = var_1.mem_0
        let (var_16: uint64) = var_15.[var_14]
        let (var_17: ResizeArray<uint64>) = var_2.mem_0
        let (var_18: uint64) = var_17.[var_14]
        let (var_19: uint64) = (!var_10)
        let (var_20: uint64) = (var_16 + var_18)
        let (var_21: bool) = (var_20 < var_19)
        if var_21 then
            let (var_22: uint64) = (var_19 - var_16)
            var_17.[var_14] <- var_22
            let (var_23: ResizeArray<Env25>) = ResizeArray<Env25>()
            let (var_24: EnvStack1) = EnvStack1((var_23: ResizeArray<Env25>))
            let (var_25: ResizeArray<Env25>) = var_24.mem_0
            var_25.Add((Env25((Env22(var_10)), var_11)))
            var_15.Add(var_19)
            var_17.Add(var_11)
            var_12.Add(var_24)
        else
            let (var_26: bool) = (var_20 = var_19)
            if var_26 then
                let (var_27: uint64) = (var_18 + var_11)
                var_17.[var_14] <- var_27
                let (var_28: EnvStack1) = var_12.[var_14]
                let (var_29: ResizeArray<Env25>) = var_28.mem_0
                var_29.Add((Env25((Env22(var_10)), var_11)))
            else
                (failwith "The elements should always be ordered.")
        let (var_30: int32) = (var_6 + 1)
        method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env25>), (var_5: int32), (var_30: int32))
    else
        ()
and method_7((var_0: (int64 ref)), (var_1: EnvHeap14), (var_2: EnvStack12)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env11>) = var_2.mem_0
    var_5.Add((Env11(var_0, (Env15(var_1)))))
and method_10((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 784L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_1 + var_3)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: uint8) = var_0.[int32 var_7]
        let (var_9: float32) = (float32 var_8)
        let (var_10: float32) = (var_9 / 255.000000f)
        var_2.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_10((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_11: int64))
    else
        ()
and method_13((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 10L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_2 + var_3)
        let (var_8: uint8) = (uint8 var_3)
        let (var_9: bool) = (var_8 = var_0)
        let (var_10: float32) =
            if var_9 then
                1.000000f
            else
                0.000000f
        var_1.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_13((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_11: int64))
    else
        ()
and method_18((var_0: int64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_3: int64) = (var_0 * 4L)
    method_19((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: int64))
and method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 25088L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_29((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(6272L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_3
    let (var_7: (int64 ref)) = var_2.mem_7
    let (var_8: EnvHeap14) = var_2.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.353553f)
and method_31((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 256L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_32((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 8, 8, 784, var_15, var_18, 8, var_21, 784, var_22, var_25, 8)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
    let (var_7: (int64 ref)) = var_4.mem_7
    let (var_8: EnvHeap14) = var_4.mem_8
    let (var_9: ManagedCuda.CudaBlas.CudaBlasHandle) = var_6.get_CublasHandle()
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.set_Stream(var_10)
    let (var_11: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_12: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_13: (float32 ref)) = (ref 0.125000f)
    let (var_14: uint64) = method_4((var_1: (uint64 ref)))
    let (var_15: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_16: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_15)
    let (var_17: uint64) = method_4((var_1: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: (float32 ref)) = (ref 0.000000f)
    let (var_21: uint64) = method_4((var_3: (uint64 ref)))
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_9, var_11, var_12, 8, 8, 8, var_13, var_16, 8, var_19, 8, var_20, var_23, 8)
    if var_24 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_24)
and method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64), (var_6: int64), (var_7: int64)): (float32 []) =
    let (var_8: (int64 ref)) = var_0.mem_7
    let (var_9: EnvHeap14) = var_0.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_11: int64) = (var_2 * var_6)
    let (var_12: uint64) = method_4((var_4: (uint64 ref)))
    let (var_13: int64) = (var_5 * 4L)
    let (var_14: uint64) = (uint64 var_13)
    let (var_15: uint64) = (var_12 + var_14)
    let (var_16: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_11))
    let (var_17: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_16,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_18: int64) = var_17.AddrOfPinnedObject().ToInt64()
    let (var_19: uint64) = (uint64 var_18)
    let (var_20: int64) = (var_11 * 4L)
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_22: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_21)
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_15)
    let (var_24: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_23)
    let (var_25: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_20)
    let (var_26: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_22, var_24, var_25, var_10)
    if var_26 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_26)
    var_17.Free()
    var_16
and method_37((var_0: (float32 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): unit =
    let (var_6: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_7: string) = ""
    let (var_8: int64) = 0L
    let (var_9: int64) = 0L
    method_38((var_6: System.Text.StringBuilder), (var_9: int64))
    let (var_10: System.Text.StringBuilder) = var_6.AppendLine("[|")
    let (var_11: int64) = 0L
    let (var_12: int64) = method_39((var_6: System.Text.StringBuilder), (var_7: string), (var_0: (float32 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_8: int64), (var_11: int64))
    let (var_13: int64) = 0L
    method_38((var_6: System.Text.StringBuilder), (var_13: int64))
    let (var_14: System.Text.StringBuilder) = var_6.AppendLine("|]")
    let (var_15: string) = var_6.ToString()
    System.Console.WriteLine(var_15)
and method_43((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_44((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_46((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_4: (int32 ref)) = (ref 0)
    let (var_5: (int64 ref)) = var_2.mem_7
    let (var_6: EnvHeap14) = var_2.mem_8
    let (var_7: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = var_2.mem_2
    let (var_8: ManagedCuda.CudaSolve.cusolverDnHandle) = (!var_7)
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_6: EnvHeap14))
    let (var_10: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSetStream(var_8, var_9)
    if var_10 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_10)
    let (var_11: ManagedCuda.CudaBlas.FillMode) = ManagedCuda.CudaBlas.FillMode.Upper
    let (var_12: uint64) = method_4((var_1: (uint64 ref)))
    let (var_13: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_14: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_13)
    let (var_15: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSpotrf_bufferSize(var_8, var_11, 8, var_14, 8, var_4)
    if var_15 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_15)
    let (var_16: int32) = (!var_4)
    let (var_17: int64) = (int64 var_16)
    let (var_18: bool) = (var_17 > 0L)
    let (var_19: bool) = (var_18 = false)
    if var_19 then
        (failwith "Dimensions of a tensor must be positive")
    else
        ()
    let (var_20: Env8) = method_18((var_17: int64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: (int64 ref)) = var_20.mem_0
    let (var_22: Env22) = var_20.mem_1
    let (var_23: (uint64 ref)) = var_22.mem_0
    let (var_24: Env8) = method_47((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_25: (int64 ref)) = var_24.mem_0
    let (var_26: Env22) = var_24.mem_1
    let (var_27: (uint64 ref)) = var_26.mem_0
    let (var_28: ManagedCuda.CudaSolve.cusolverDnHandle) = (!var_7)
    let (var_29: ManagedCuda.BasicTypes.CUstream) = method_17((var_6: EnvHeap14))
    let (var_30: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSetStream(var_28, var_29)
    if var_30 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_30)
    let (var_31: ManagedCuda.CudaBlas.FillMode) = ManagedCuda.CudaBlas.FillMode.Upper
    let (var_32: uint64) = method_4((var_1: (uint64 ref)))
    let (var_33: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_32)
    let (var_34: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_33)
    let (var_35: uint64) = method_4((var_23: (uint64 ref)))
    let (var_36: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
    let (var_37: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_36)
    let (var_38: uint64) = method_4((var_27: (uint64 ref)))
    let (var_39: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_38)
    let (var_40: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_39)
    let (var_41: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSpotrf(var_28, var_31, 8, var_34, 8, var_37, var_16, var_40)
    if var_41 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_41)
    let (var_42: EnvStack26) = EnvStack26((var_25: (int64 ref)), (var_27: (uint64 ref)))
    var_23 := 0UL
    var_42
and method_48((var_0: uint64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_49((var_0: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_1: EnvHeap17))
and method_52((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_6: Env8) = method_53((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    let (var_10: uint64) = method_4((var_9: (uint64 ref)))
    method_57((var_10: uint64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_60((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
    let (var_7: (int64 ref)) = var_4.mem_7
    let (var_8: EnvHeap14) = var_4.mem_8
    let (var_9: ManagedCuda.CudaBlas.CudaBlasHandle) = var_6.get_CublasHandle()
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.set_Stream(var_10)
    let (var_11: ManagedCuda.CudaBlas.SideMode) = ManagedCuda.CudaBlas.SideMode.Right
    let (var_12: ManagedCuda.CudaBlas.FillMode) = ManagedCuda.CudaBlas.FillMode.Upper
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.DiagType) = ManagedCuda.CudaBlas.DiagType.NonUnit
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_1: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_3: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasStrsm_v2(var_9, var_11, var_12, var_13, var_14, 8, 8, var_15, var_18, 8, var_21, 8)
    if var_22 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_22)
and method_63((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 8, 8, 8, var_15, var_18, 8, var_21, 8, var_22, var_25, 8)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_65((var_0: ResizeArray<Env11>), (var_1: int32), (var_2: int32)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: Env11) = var_0.[var_2]
        let (var_5: (int64 ref)) = var_4.mem_0
        let (var_6: Env15) = var_4.mem_1
        let (var_7: EnvHeap14) = var_6.mem_0
        let (var_8: int64) = (!var_5)
        let (var_9: int64) = (var_8 - 1L)
        var_5 := var_9
        let (var_10: int64) = (!var_5)
        let (var_11: bool) = (var_10 = 0L)
        if var_11 then
            let (var_12: ManagedCuda.CudaStream) = var_7.mem_2
            var_12.Dispose()
            let (var_13: ManagedCuda.CudaEvent) = var_7.mem_0
            var_13.Dispose()
            let (var_14: (bool ref)) = var_7.mem_1
            var_14 := false
        else
            ()
        let (var_15: int32) = (var_2 + 1)
        method_65((var_0: ResizeArray<Env11>), (var_1: int32), (var_15: int32))
    else
        ()
and method_67((var_0: ResizeArray<Env8>), (var_1: int32), (var_2: int32)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: Env8) = var_0.[var_2]
        let (var_5: (int64 ref)) = var_4.mem_0
        let (var_6: Env22) = var_4.mem_1
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: int64) = (!var_5)
        let (var_9: int64) = (var_8 - 1L)
        var_5 := var_9
        let (var_10: int64) = (!var_5)
        let (var_11: bool) = (var_10 = 0L)
        if var_11 then
            var_7 := 0UL
        else
            ()
        let (var_12: int32) = (var_2 + 1)
        method_67((var_0: ResizeArray<Env8>), (var_1: int32), (var_12: int32))
    else
        ()
and method_3((var_0: EnvStack1), (var_1: ResizeArray<Env25>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: Env25) = var_1.[var_3]
        let (var_6: Env22) = var_5.mem_0
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: uint64) = var_5.mem_1
        let (var_9: uint64) = (!var_7)
        let (var_10: bool) = (var_9 = 0UL)
        let (var_11: bool) = (var_10 <> true)
        if var_11 then
            let (var_12: ResizeArray<Env25>) = var_0.mem_0
            var_12.Add((Env25((Env22(var_7)), var_8)))
        else
            ()
        let (var_13: int32) = (var_3 + 1)
        method_3((var_0: EnvStack1), (var_1: ResizeArray<Env25>), (var_2: int32), (var_13: int32))
    else
        ()
and method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env8 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env22) = method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack9) = var_0.mem_4
    method_26((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack9))
    (Env8(var_9, (Env22(var_8))))
and method_38((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_38((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_39((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64)): int64 =
    let (var_10: bool) = (var_9 < var_6)
    if var_10 then
        let (var_11: bool) = (var_8 < 1000L)
        if var_11 then
            let (var_12: bool) = (var_9 >= 0L)
            let (var_13: bool) = (var_12 = false)
            if var_13 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_14: int64) = (var_9 * var_4)
            let (var_15: int64) = (var_3 + var_14)
            let (var_16: int64) = 0L
            method_40((var_0: System.Text.StringBuilder), (var_16: int64))
            let (var_17: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_18: int64) = 0L
            let (var_19: int64) = method_41((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_15: int64), (var_5: int64), (var_7: int64), (var_1: string), (var_8: int64), (var_18: int64))
            let (var_20: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_21: int64) = (var_9 + 1L)
            method_39((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_19: int64), (var_21: int64))
        else
            let (var_23: int64) = 0L
            method_38((var_0: System.Text.StringBuilder), (var_23: int64))
            let (var_24: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_8
    else
        var_8
and method_44((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_45((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_45", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(2u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_47((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 4L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_49((var_0: uint64), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17)): unit =
    // Cuda join point
    // method_50((var_0: uint64))
    let (var_3: ManagedCuda.CudaContext) = var_2.mem_0
    let (var_4: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_50", var_1, var_3)
    let (var_5: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_4.set_GridDimensions(var_5)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_4.set_BlockDimensions(var_6)
    let (var_7: (int64 ref)) = var_2.mem_7
    let (var_8: EnvHeap14) = var_2.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    let (var_11: (System.Object [])) = [|var_0|]: (System.Object [])
    var_4.RunAsync(var_9, var_11)
and method_53((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 256L
    method_54((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_57((var_0: uint64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_58((var_0: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_1: EnvHeap17))
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env22 =
    let (var_3: EnvHeap4) = var_0.mem_6
    let (var_4: (uint64 ref)) = var_3.mem_4
    let (var_5: uint64) = var_3.mem_5
    let (var_6: (int32 ref)) = var_3.mem_0
    let (var_7: EnvStack3) = var_3.mem_1
    let (var_8: EnvStack3) = var_3.mem_2
    let (var_9: EnvStack2) = var_3.mem_3
    method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_10: Tuple27) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_11: uint64) = var_10.mem_0
    let (var_12: uint64) = var_10.mem_1
    let (var_13: bool) = (var_11 >= var_2)
    let (var_34: Env25) =
        if var_13 then
            let (var_14: (uint64 ref)) = (ref var_12)
            (Env25((Env22(var_14)), var_2))
        else
            let (var_15: ResizeArray<EnvStack1>) = var_9.mem_0
            let (var_16: int32) = var_15.get_Count()
            let (var_17: int32) = 0
            let (var_18: Env28) = method_23((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2), (var_16: int32), (var_17: int32))
            let (var_19: int32) = var_18.mem_0
            let (var_20: uint64) = var_18.mem_1
            var_6 := var_19
            method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_21: Tuple27) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_22: uint64) = var_21.mem_0
            let (var_23: uint64) = var_21.mem_1
            let (var_24: bool) = (var_22 >= var_2)
            if var_24 then
                let (var_25: (uint64 ref)) = (ref var_23)
                (Env25((Env22(var_25)), var_2))
            else
                method_25((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_26: Tuple27) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_27: uint64) = var_26.mem_0
                let (var_28: uint64) = var_26.mem_1
                let (var_29: bool) = (var_27 >= var_2)
                if var_29 then
                    let (var_30: (uint64 ref)) = (ref var_28)
                    (Env25((Env22(var_30)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_35: Env22) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_35.mem_0
    let (var_37: uint64) = var_34.mem_1
    let (var_38: int32) = (!var_6)
    let (var_39: ResizeArray<EnvStack1>) = var_9.mem_0
    let (var_40: EnvStack1) = var_39.[var_38]
    let (var_41: ResizeArray<Env25>) = var_40.mem_0
    var_41.Add((Env25((Env22(var_36)), var_37)))
    (Env22(var_36))
and method_26((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack9)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env8>) = var_2.mem_0
    var_5.Add((Env8(var_0, (Env22(var_1)))))
and method_40((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_40((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_41((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64), (var_7: int64)): int64 =
    let (var_8: bool) = (var_7 < var_4)
    if var_8 then
        let (var_9: bool) = (var_6 < 1000L)
        if var_9 then
            let (var_10: System.Text.StringBuilder) = var_0.Append(var_5)
            let (var_11: bool) = (var_7 >= 0L)
            let (var_12: bool) = (var_11 = false)
            if var_12 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_13: int64) = (var_7 * var_3)
            let (var_14: int64) = (var_2 + var_13)
            let (var_15: float32) = var_1.[int32 var_14]
            let (var_16: string) = System.String.Format("{0}",var_15)
            let (var_17: System.Text.StringBuilder) = var_0.Append(var_16)
            let (var_18: string) = "; "
            let (var_19: int64) = (var_6 + 1L)
            let (var_20: int64) = (var_7 + 1L)
            method_41((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_18: string), (var_19: int64), (var_20: int64))
        else
            let (var_22: System.Text.StringBuilder) = var_0.Append("...")
            var_6
    else
        var_6
and method_54((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env8 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env22) = method_55((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack9) = var_0.mem_4
    method_26((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack9))
    (Env8(var_9, (Env22(var_8))))
and method_58((var_0: uint64), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17)): unit =
    // Cuda join point
    // method_59((var_0: uint64))
    let (var_3: ManagedCuda.CudaContext) = var_2.mem_0
    let (var_4: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_59", var_1, var_3)
    let (var_5: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(2u, 1u, 1u)
    var_4.set_GridDimensions(var_5)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 1u, 1u)
    var_4.set_BlockDimensions(var_6)
    let (var_7: (int64 ref)) = var_2.mem_7
    let (var_8: EnvHeap14) = var_2.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    let (var_11: (System.Object [])) = [|var_0|]: (System.Object [])
    var_4.RunAsync(var_9, var_11)
and method_21((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): unit =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<Env25>) = var_6.mem_0
    let (var_8: int32) = var_7.get_Count()
    let (var_9: int32) = (var_8 - 1)
    let (var_10: bool) = (var_9 >= 0)
    if var_10 then
        let (var_11: Env25) = var_7.[var_9]
        let (var_12: Env22) = var_11.mem_0
        let (var_13: (uint64 ref)) = var_12.mem_0
        let (var_14: uint64) = var_11.mem_1
        let (var_15: uint64) = (!var_13)
        let (var_16: bool) = (var_15 = 0UL)
        if var_16 then
            var_7.RemoveAt(var_9)
            method_21((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
    else
        let (var_17: bool) = (var_4 > 0)
        if var_17 then
            let (var_18: ResizeArray<uint64>) = var_2.mem_0
            let (var_19: uint64) = var_18.[var_4]
            let (var_20: int32) = (var_4 - 1)
            let (var_21: uint64) = var_18.[var_20]
            let (var_22: uint64) = (var_21 + var_19)
            var_18.[var_20] <- var_22
            var_18.RemoveAt(var_4)
            var_5.RemoveAt(var_4)
            let (var_23: ResizeArray<uint64>) = var_1.mem_0
            var_23.RemoveAt(var_4)
            var_0 := var_20
            method_21((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
and method_22((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): Tuple27 =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<uint64>) = var_1.mem_0
    let (var_8: uint64) = var_7.[var_4]
    let (var_9: ResizeArray<uint64>) = var_2.mem_0
    let (var_10: uint64) = var_9.[var_4]
    let (var_11: uint64) = (var_8 + var_10)
    let (var_12: ResizeArray<Env25>) = var_6.mem_0
    let (var_13: int32) = var_12.get_Count()
    let (var_14: bool) = (var_13 > 0)
    if var_14 then
        let (var_15: int32) = var_12.get_Count()
        let (var_16: int32) = (var_15 - 1)
        let (var_17: Env25) = var_12.[var_16]
        let (var_18: Env22) = var_17.mem_0
        let (var_19: (uint64 ref)) = var_18.mem_0
        let (var_20: uint64) = var_17.mem_1
        let (var_21: uint64) = (!var_19)
        let (var_22: uint64) = (var_21 + var_20)
        let (var_23: uint64) = (var_11 - var_22)
        Tuple27(var_23, var_22)
    else
        Tuple27(var_11, var_8)
and method_23((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32)): Env28 =
    let (var_6: bool) = (var_5 < var_4)
    if var_6 then
        let (var_7: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_8: EnvStack1) = var_7.[var_5]
        let (var_9: ResizeArray<Env25>) = var_8.mem_0
        let (var_10: int32) = var_9.get_Count()
        let (var_11: bool) = (var_10 > 0)
        let (var_28: uint64) =
            if var_11 then
                let (var_12: int32) = var_9.get_Count()
                let (var_13: int32) = (var_12 - 1)
                let (var_14: Env25) = var_9.[var_13]
                let (var_15: Env22) = var_14.mem_0
                let (var_16: (uint64 ref)) = var_15.mem_0
                let (var_17: uint64) = var_14.mem_1
                let (var_18: uint64) = (!var_16)
                let (var_19: uint64) = (var_18 + var_17)
                let (var_20: ResizeArray<uint64>) = var_1.mem_0
                let (var_21: uint64) = var_20.[var_5]
                let (var_22: ResizeArray<uint64>) = var_2.mem_0
                let (var_23: uint64) = var_22.[var_5]
                let (var_24: uint64) = (var_21 + var_23)
                (var_24 - var_19)
            else
                let (var_26: ResizeArray<uint64>) = var_2.mem_0
                var_26.[var_5]
        let (var_29: bool) = (0UL < var_28)
        let (var_30: Env28) =
            if var_29 then
                (Env28(var_5, var_28))
            else
                (Env28(0, 0UL))
        let (var_31: int32) = var_30.mem_0
        let (var_32: uint64) = var_30.mem_1
        let (var_33: int32) = (var_5 + 1)
        method_24((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_31: int32), (var_32: uint64), (var_33: int32))
    else
        (Env28(0, 0UL))
and method_25((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_6
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env25>) = ResizeArray<Env25>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env25>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env25>) = ResizeArray<Env25>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env25>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env25>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env25>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_55((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env22 =
    let (var_3: EnvHeap4) = var_0.mem_6
    let (var_4: (uint64 ref)) = var_3.mem_4
    let (var_5: uint64) = var_3.mem_5
    let (var_6: (int32 ref)) = var_3.mem_0
    let (var_7: EnvStack3) = var_3.mem_1
    let (var_8: EnvStack3) = var_3.mem_2
    let (var_9: EnvStack2) = var_3.mem_3
    method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_10: Tuple27) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_11: uint64) = var_10.mem_0
    let (var_12: uint64) = var_10.mem_1
    let (var_13: bool) = (var_11 >= var_2)
    let (var_34: Env25) =
        if var_13 then
            let (var_14: (uint64 ref)) = (ref var_12)
            (Env25((Env22(var_14)), var_2))
        else
            let (var_15: ResizeArray<EnvStack1>) = var_9.mem_0
            let (var_16: int32) = var_15.get_Count()
            let (var_17: int32) = 0
            let (var_18: Env28) = method_23((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2), (var_16: int32), (var_17: int32))
            let (var_19: int32) = var_18.mem_0
            let (var_20: uint64) = var_18.mem_1
            var_6 := var_19
            method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_21: Tuple27) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_22: uint64) = var_21.mem_0
            let (var_23: uint64) = var_21.mem_1
            let (var_24: bool) = (var_22 >= var_2)
            if var_24 then
                let (var_25: (uint64 ref)) = (ref var_23)
                (Env25((Env22(var_25)), var_2))
            else
                method_56((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_26: Tuple27) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_27: uint64) = var_26.mem_0
                let (var_28: uint64) = var_26.mem_1
                let (var_29: bool) = (var_27 >= var_2)
                if var_29 then
                    let (var_30: (uint64 ref)) = (ref var_28)
                    (Env25((Env22(var_30)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_35: Env22) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_35.mem_0
    let (var_37: uint64) = var_34.mem_1
    let (var_38: int32) = (!var_6)
    let (var_39: ResizeArray<EnvStack1>) = var_9.mem_0
    let (var_40: EnvStack1) = var_39.[var_38]
    let (var_41: ResizeArray<Env25>) = var_40.mem_0
    var_41.Add((Env25((Env22(var_36)), var_37)))
    (Env22(var_36))
and method_24((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32), (var_6: uint64), (var_7: int32)): Env28 =
    let (var_8: bool) = (var_7 < var_4)
    if var_8 then
        let (var_9: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_10: EnvStack1) = var_9.[var_7]
        let (var_11: ResizeArray<Env25>) = var_10.mem_0
        let (var_12: int32) = var_11.get_Count()
        let (var_13: bool) = (var_12 > 0)
        let (var_30: uint64) =
            if var_13 then
                let (var_14: int32) = var_11.get_Count()
                let (var_15: int32) = (var_14 - 1)
                let (var_16: Env25) = var_11.[var_15]
                let (var_17: Env22) = var_16.mem_0
                let (var_18: (uint64 ref)) = var_17.mem_0
                let (var_19: uint64) = var_16.mem_1
                let (var_20: uint64) = (!var_18)
                let (var_21: uint64) = (var_20 + var_19)
                let (var_22: ResizeArray<uint64>) = var_1.mem_0
                let (var_23: uint64) = var_22.[var_7]
                let (var_24: ResizeArray<uint64>) = var_2.mem_0
                let (var_25: uint64) = var_24.[var_7]
                let (var_26: uint64) = (var_23 + var_25)
                (var_26 - var_21)
            else
                let (var_28: ResizeArray<uint64>) = var_2.mem_0
                var_28.[var_7]
        let (var_31: bool) = (var_6 < var_30)
        let (var_32: Env28) =
            if var_31 then
                (Env28(var_7, var_30))
            else
                (Env28(var_5, var_6))
        let (var_33: int32) = var_32.mem_0
        let (var_34: uint64) = var_32.mem_1
        let (var_35: int32) = (var_7 + 1)
        method_24((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_33: int32), (var_34: uint64), (var_35: int32))
    else
        (Env28(var_5, var_6))
and method_56((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_6
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env25>) = ResizeArray<Env25>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env25>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env25>) = ResizeArray<Env25>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env25>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env25>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env25>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_11; "\" -I\"C:/cub-1.7.4\" -I\""; var_10; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1073741824UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_43: ResizeArray<EnvStack1>) = ResizeArray<EnvStack1>()
let (var_44: EnvStack2) = EnvStack2((var_43: ResizeArray<EnvStack1>))
let (var_45: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_46: EnvStack3) = EnvStack3((var_45: ResizeArray<uint64>))
let (var_47: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_48: EnvStack3) = EnvStack3((var_47: ResizeArray<uint64>))
let (var_49: (int32 ref)) = (ref 0)
let (var_50: EnvHeap4) = ({mem_0 = (var_49: (int32 ref)); mem_1 = (var_48: EnvStack3); mem_2 = (var_46: EnvStack3); mem_3 = (var_44: EnvStack2); mem_4 = (var_40: (uint64 ref)); mem_5 = (var_35: uint64)} : EnvHeap4)
let (var_51: EnvHeap5) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_50: EnvHeap4)} : EnvHeap5)
method_1((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_52: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_53: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_52)
let (var_54: ManagedCuda.CudaContext) = var_51.mem_0
let (var_55: EnvHeap4) = var_51.mem_1
let (var_56: EnvHeap6) = ({mem_0 = (var_54: ManagedCuda.CudaContext); mem_1 = (var_53: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_55: EnvHeap4)} : EnvHeap6)
let (var_57: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_58: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_59: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_57, var_58)
let (var_60: ManagedCuda.CudaContext) = var_56.mem_0
let (var_61: ManagedCuda.CudaRand.CudaRandDevice) = var_56.mem_1
let (var_62: EnvHeap4) = var_56.mem_2
let (var_63: EnvHeap7) = ({mem_0 = (var_60: ManagedCuda.CudaContext); mem_1 = (var_59: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_61: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_62: EnvHeap4)} : EnvHeap7)
let (var_70: ResizeArray<Env8>) = ResizeArray<Env8>()
let (var_71: EnvStack9) = EnvStack9((var_70: ResizeArray<Env8>))
let (var_72: ManagedCuda.CudaContext) = var_63.mem_0
let (var_73: ManagedCuda.CudaBlas.CudaBlas) = var_63.mem_1
let (var_74: ManagedCuda.CudaRand.CudaRandDevice) = var_63.mem_2
let (var_75: EnvHeap4) = var_63.mem_3
let (var_76: EnvHeap10) = ({mem_0 = (var_72: ManagedCuda.CudaContext); mem_1 = (var_73: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_74: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_71: EnvStack9); mem_4 = (var_75: EnvHeap4)} : EnvHeap10)
let (var_88: ResizeArray<Env11>) = ResizeArray<Env11>()
let (var_89: EnvStack12) = EnvStack12((var_88: ResizeArray<Env11>))
let (var_90: ManagedCuda.CudaContext) = var_76.mem_0
let (var_91: ManagedCuda.CudaBlas.CudaBlas) = var_76.mem_1
let (var_92: ManagedCuda.CudaRand.CudaRandDevice) = var_76.mem_2
let (var_93: EnvStack9) = var_76.mem_3
let (var_94: EnvHeap4) = var_76.mem_4
let (var_95: EnvHeap13) = ({mem_0 = (var_90: ManagedCuda.CudaContext); mem_1 = (var_91: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_92: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_93: EnvStack9); mem_4 = (var_89: EnvStack12); mem_5 = (var_94: EnvHeap4)} : EnvHeap13)
let (var_96: (bool ref)) = (ref true)
let (var_97: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_98: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_99: EnvHeap14) = ({mem_0 = (var_98: ManagedCuda.CudaEvent); mem_1 = (var_96: (bool ref)); mem_2 = (var_97: ManagedCuda.CudaStream)} : EnvHeap14)
let (var_100: Env11) = method_6((var_99: EnvHeap14), (var_95: EnvHeap13), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_101: (int64 ref)) = var_100.mem_0
let (var_102: Env15) = var_100.mem_1
let (var_103: EnvHeap14) = var_102.mem_0
let (var_104: ManagedCuda.CudaContext) = var_95.mem_0
let (var_105: ManagedCuda.CudaBlas.CudaBlas) = var_95.mem_1
let (var_106: ManagedCuda.CudaRand.CudaRandDevice) = var_95.mem_2
let (var_107: EnvStack9) = var_95.mem_3
let (var_108: EnvStack12) = var_95.mem_4
let (var_109: EnvHeap4) = var_95.mem_5
let (var_110: EnvHeap16) = ({mem_0 = (var_104: ManagedCuda.CudaContext); mem_1 = (var_105: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_106: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_107: EnvStack9); mem_4 = (var_108: EnvStack12); mem_5 = (var_109: EnvHeap4); mem_6 = (var_101: (int64 ref)); mem_7 = (var_103: EnvHeap14)} : EnvHeap16)
let (var_111: ManagedCuda.CudaSolve.cusolverDnHandle) = ManagedCuda.CudaSolve.cusolverDnHandle()
let (var_112: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = (ref var_111)
let (var_113: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnCreate(var_112)
if var_113 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_113)
let (var_114: ManagedCuda.CudaContext) = var_110.mem_0
let (var_115: ManagedCuda.CudaBlas.CudaBlas) = var_110.mem_1
let (var_116: ManagedCuda.CudaRand.CudaRandDevice) = var_110.mem_2
let (var_117: EnvStack9) = var_110.mem_3
let (var_118: EnvStack12) = var_110.mem_4
let (var_119: EnvHeap4) = var_110.mem_5
let (var_120: (int64 ref)) = var_110.mem_6
let (var_121: EnvHeap14) = var_110.mem_7
let (var_122: EnvHeap17) = ({mem_0 = (var_114: ManagedCuda.CudaContext); mem_1 = (var_115: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_112: (ManagedCuda.CudaSolve.cusolverDnHandle ref)); mem_3 = (var_116: ManagedCuda.CudaRand.CudaRandDevice); mem_4 = (var_117: EnvStack9); mem_5 = (var_118: EnvStack12); mem_6 = (var_119: EnvHeap4); mem_7 = (var_120: (int64 ref)); mem_8 = (var_121: EnvHeap14)} : EnvHeap17)
let (var_123: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-images.idx3-ubyte")
let (var_124: Tuple18) = method_8((var_123: string))
let (var_125: Tuple19) = var_124.mem_0
let (var_126: int64) = var_125.mem_0
let (var_127: int64) = var_125.mem_1
let (var_128: int64) = var_125.mem_2
let (var_129: (uint8 [])) = var_124.mem_1
let (var_130: bool) = (10000L = var_126)
let (var_134: bool) =
    if var_130 then
        let (var_131: bool) = (28L = var_127)
        if var_131 then
            (28L = var_128)
        else
            false
    else
        false
let (var_135: bool) = (var_134 = false)
if var_135 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_136: int64) = var_129.LongLength
let (var_137: bool) = (var_136 = 7840000L)
let (var_138: bool) = (var_137 = false)
if var_138 then
    (failwith "The length of the split dimension must be equal to that of the previous one.")
else
    ()
let (var_142: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(7840000L))
let (var_143: int64) = 0L
method_9((var_129: (uint8 [])), (var_142: (float32 [])), (var_143: int64))
let (var_144: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-labels.idx1-ubyte")
let (var_145: Tuple20) = method_11((var_144: string))
let (var_146: int64) = var_145.mem_0
let (var_147: (uint8 [])) = var_145.mem_1
let (var_148: bool) = (10000L = var_146)
let (var_149: bool) = (var_148 = false)
if var_149 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_153: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(100000L))
let (var_154: int64) = 0L
method_12((var_147: (uint8 [])), (var_153: (float32 [])), (var_154: int64))
let (var_155: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-images.idx3-ubyte")
let (var_156: Tuple18) = method_8((var_155: string))
let (var_157: Tuple19) = var_156.mem_0
let (var_158: int64) = var_157.mem_0
let (var_159: int64) = var_157.mem_1
let (var_160: int64) = var_157.mem_2
let (var_161: (uint8 [])) = var_156.mem_1
let (var_162: bool) = (60000L = var_158)
let (var_166: bool) =
    if var_162 then
        let (var_163: bool) = (28L = var_159)
        if var_163 then
            (28L = var_160)
        else
            false
    else
        false
let (var_167: bool) = (var_166 = false)
if var_167 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_168: int64) = var_161.LongLength
let (var_169: bool) = (var_168 = 47040000L)
let (var_170: bool) = (var_169 = false)
if var_170 then
    (failwith "The length of the split dimension must be equal to that of the previous one.")
else
    ()
let (var_174: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(47040000L))
let (var_175: int64) = 0L
method_14((var_161: (uint8 [])), (var_174: (float32 [])), (var_175: int64))
let (var_176: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-labels.idx1-ubyte")
let (var_177: Tuple20) = method_11((var_176: string))
let (var_178: int64) = var_177.mem_0
let (var_179: (uint8 [])) = var_177.mem_1
let (var_180: bool) = (60000L = var_178)
let (var_181: bool) = (var_180 = false)
if var_181 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_185: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(600000L))
let (var_186: int64) = 0L
method_15((var_179: (uint8 [])), (var_185: (float32 [])), (var_186: int64))
let (var_187: int64) = 10000L
let (var_188: int64) = 0L
let (var_189: int64) = 784L
let (var_190: int64) = 1L
let (var_191: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_187: int64), (var_142: (float32 [])), (var_188: int64), (var_189: int64), (var_190: int64))
let (var_192: Env8) = var_191.mem_0
let (var_193: (int64 ref)) = var_192.mem_0
let (var_194: Env22) = var_192.mem_1
let (var_195: (uint64 ref)) = var_194.mem_0
let (var_196: int64) = 10000L
let (var_197: int64) = 0L
let (var_198: int64) = 10L
let (var_199: int64) = 1L
let (var_200: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_196: int64), (var_153: (float32 [])), (var_197: int64), (var_198: int64), (var_199: int64))
let (var_201: Env8) = var_200.mem_0
let (var_202: (int64 ref)) = var_201.mem_0
let (var_203: Env22) = var_201.mem_1
let (var_204: (uint64 ref)) = var_203.mem_0
let (var_205: int64) = 60000L
let (var_206: int64) = 0L
let (var_207: int64) = 784L
let (var_208: int64) = 1L
let (var_209: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_205: int64), (var_174: (float32 [])), (var_206: int64), (var_207: int64), (var_208: int64))
let (var_210: Env8) = var_209.mem_0
let (var_211: (int64 ref)) = var_210.mem_0
let (var_212: Env22) = var_210.mem_1
let (var_213: (uint64 ref)) = var_212.mem_0
let (var_214: int64) = 60000L
let (var_215: int64) = 0L
let (var_216: int64) = 10L
let (var_217: int64) = 1L
let (var_218: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_214: int64), (var_185: (float32 [])), (var_215: int64), (var_216: int64), (var_217: int64))
let (var_219: Env8) = var_218.mem_0
let (var_220: (int64 ref)) = var_219.mem_0
let (var_221: Env22) = var_219.mem_1
let (var_222: (uint64 ref)) = var_221.mem_0
let (var_223: EnvStack23) = method_27((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_224: (int64 ref)) = var_223.mem_0
let (var_225: (uint64 ref)) = var_223.mem_1
let (var_226: EnvStack24) = method_30((var_211: (int64 ref)), (var_213: (uint64 ref)), (var_224: (int64 ref)), (var_225: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_227: (int64 ref)) = var_226.mem_0
let (var_228: (uint64 ref)) = var_226.mem_1
var_225 := 0UL
let (var_229: EnvStack24) = method_33((var_227: (int64 ref)), (var_228: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_230: (int64 ref)) = var_229.mem_0
let (var_231: (uint64 ref)) = var_229.mem_1
let (var_232: int64) = 0L
let (var_233: int64) = 8L
let (var_234: int64) = 1L
let (var_235: int64) = 8L
let (var_236: int64) = 8L
method_35((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_230: (int64 ref)), (var_231: (uint64 ref)), (var_232: int64), (var_233: int64), (var_234: int64), (var_235: int64), (var_236: int64))
System.Console.WriteLine("-----")
let (var_237: EnvStack24) = method_42((var_230: (int64 ref)), (var_231: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_238: (int64 ref)) = var_237.mem_0
let (var_239: (uint64 ref)) = var_237.mem_1
let (var_240: EnvStack24) = method_51((var_238: (int64 ref)), (var_239: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_241: (int64 ref)) = var_240.mem_0
let (var_242: (uint64 ref)) = var_240.mem_1
method_61((var_241: (int64 ref)), (var_242: (uint64 ref)), (var_238: (int64 ref)), (var_239: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
var_242 := 0UL
let (var_243: int64) = 0L
let (var_244: int64) = 8L
let (var_245: int64) = 1L
let (var_246: int64) = 8L
let (var_247: int64) = 8L
method_35((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_238: (int64 ref)), (var_239: (uint64 ref)), (var_243: int64), (var_244: int64), (var_245: int64), (var_246: int64), (var_247: int64))
let (var_248: EnvStack24) = method_62((var_230: (int64 ref)), (var_231: (uint64 ref)), (var_238: (int64 ref)), (var_239: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_249: (int64 ref)) = var_248.mem_0
let (var_250: (uint64 ref)) = var_248.mem_1
let (var_251: int64) = 0L
let (var_252: int64) = 8L
let (var_253: int64) = 1L
let (var_254: int64) = 8L
let (var_255: int64) = 8L
method_35((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_249: (int64 ref)), (var_250: (uint64 ref)), (var_251: int64), (var_252: int64), (var_253: int64), (var_254: int64), (var_255: int64))
let (var_256: (int64 ref)) = var_122.mem_7
let (var_257: EnvHeap14) = var_122.mem_8
let (var_258: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = var_122.mem_2
let (var_259: ManagedCuda.CudaSolve.cusolverDnHandle) = (!var_258)
let (var_260: ManagedCuda.BasicTypes.CUstream) = method_17((var_257: EnvHeap14))
let (var_261: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSetStream(var_259, var_260)
if var_261 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_261)
let (var_262: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnDestroy(var_259)
if var_262 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_262)
method_64((var_108: EnvStack12))
method_66((var_93: EnvStack9))
var_59.Dispose()
var_53.Dispose()
let (var_263: uint64) = method_4((var_40: (uint64 ref)))
let (var_264: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_263)
let (var_265: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_264)
var_54.FreeMemory(var_265)
var_40 := 0UL
var_1.Dispose()

