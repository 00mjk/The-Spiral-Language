module SpiralExample.Main
let cuda_kernels = """
#include <assert.h>

extern "C" {
    
}
"""

type Union0 =
    | Union0Case0
    | Union0Case1
    | Union0Case2
and Tuple1 =
    struct
    val mem_0: Tuple4
    val mem_1: Rec3
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeapMutable2 =
    {
    mutable mem_0: (Tuple1 [])
    mutable mem_1: int64
    mutable mem_2: int64
    }
and Rec3 =
    | Rec3Case0
    | Rec3Case1 of Tuple5
and Tuple4 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple5 =
    struct
    val mem_0: string
    val mem_1: Rec3
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Union6 =
    | Union6Case0 of Tuple7
    | Union6Case1
and Tuple7 =
    struct
    val mem_0: string
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0((var_0: bool), (var_1: string), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 >= 0L)
    let (var_6: bool) =
        if var_3 then
            let (var_4: int64) = (int64 var_1.Length)
            (var_2 < var_4)
        else
            false
    if var_6 then
        let (var_7: char) = var_1.[int32 var_2]
        let (var_8: bool) = (var_7 >= '0')
        let (var_10: bool) =
            if var_8 then
                (var_7 <= '9')
            else
                false
        let (var_11: int64) = (var_2 + 1L)
        if var_10 then
            let (var_12: int64) = System.Convert.ToInt64(var_7)
            let (var_13: int64) = System.Convert.ToInt64('0')
            let (var_14: int64) = (var_12 - var_13)
            method_1((var_0: bool), (var_1: string), (var_14: int64), (var_11: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_1((var_0: bool), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_1.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_1.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            let (var_16: bool) = (var_2 = 922337203685477580L)
            let (var_18: bool) =
                if var_16 then
                    (var_15 <= 7L)
                else
                    false
            let (var_20: bool) =
                if var_18 then
                    true
                else
                    (var_2 < 922337203685477580L)
            if var_20 then
                let (var_21: int64) = (var_2 * 10L)
                let (var_22: int64) = (var_21 + var_15)
                method_1((var_0: bool), (var_1: string), (var_22: int64), (var_12: int64))
            else
                (failwith "integer overflow")
        else
            let (var_24: int64) =
                if var_0 then
                    var_2
                else
                    (-var_2)
            let (var_25: int64) = 0L
            method_2((var_24: int64), (var_1: string), (var_25: int64), (var_3: int64))
    else
        let (var_27: int64) =
            if var_0 then
                var_2
            else
                (-var_2)
        let (var_28: int64) = 0L
        method_2((var_27: int64), (var_1: string), (var_28: int64), (var_3: int64))
and method_2((var_0: int64), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: int64) = (var_2 + 1L)
    let (var_5: bool) = (var_3 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_1.Length)
            (var_3 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_1.[int32 var_3]
        let (var_10: bool) = (var_9 = ' ')
        let (var_14: bool) =
            if var_10 then
                true
            else
                let (var_11: bool) = (var_9 = '\n')
                if var_11 then
                    true
                else
                    (var_9 = '\r')
        let (var_15: int64) = (var_3 + 1L)
        if var_14 then
            method_2((var_0: int64), (var_1: string), (var_4: int64), (var_15: int64))
        else
            let (var_18: bool) =
                if var_5 then
                    let (var_16: int64) = (int64 var_1.Length)
                    (var_3 < var_16)
                else
                    false
            if var_18 then
                let (var_19: bool) = ('-' = var_9)
                if var_19 then
                    let (var_20: bool) = false
                    method_3((var_20: bool), (var_0: int64), (var_1: string), (var_15: int64))
                else
                    let (var_21: bool) = true
                    method_3((var_21: bool), (var_0: int64), (var_1: string), (var_3: int64))
            else
                let (var_22: bool) = true
                method_3((var_22: bool), (var_0: int64), (var_1: string), (var_3: int64))
    else
        let (var_25: bool) =
            if var_5 then
                let (var_23: int64) = (int64 var_1.Length)
                (var_3 < var_23)
            else
                false
        if var_25 then
            let (var_26: char) = var_1.[int32 var_3]
            let (var_27: bool) = ('-' = var_26)
            let (var_28: int64) = (var_3 + 1L)
            if var_27 then
                let (var_29: bool) = false
                method_3((var_29: bool), (var_0: int64), (var_1: string), (var_28: int64))
            else
                let (var_30: bool) = true
                method_3((var_30: bool), (var_0: int64), (var_1: string), (var_3: int64))
        else
            let (var_31: bool) = true
            method_3((var_31: bool), (var_0: int64), (var_1: string), (var_3: int64))
and method_3((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_2.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_2.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            method_4((var_0: bool), (var_1: int64), (var_2: string), (var_15: int64), (var_12: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_4((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_2.Length)
            (var_4 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_2.[int32 var_4]
        let (var_10: bool) = (var_9 >= '0')
        let (var_12: bool) =
            if var_10 then
                (var_9 <= '9')
            else
                false
        let (var_13: int64) = (var_4 + 1L)
        if var_12 then
            let (var_14: int64) = System.Convert.ToInt64(var_9)
            let (var_15: int64) = System.Convert.ToInt64('0')
            let (var_16: int64) = (var_14 - var_15)
            let (var_17: bool) = (var_3 = 922337203685477580L)
            let (var_19: bool) =
                if var_17 then
                    (var_16 <= 7L)
                else
                    false
            let (var_21: bool) =
                if var_19 then
                    true
                else
                    (var_3 < 922337203685477580L)
            if var_21 then
                let (var_22: int64) = (var_3 * 10L)
                let (var_23: int64) = (var_22 + var_16)
                method_4((var_0: bool), (var_1: int64), (var_2: string), (var_23: int64), (var_13: int64))
            else
                (failwith "integer overflow")
        else
            let (var_25: int64) =
                if var_0 then
                    var_3
                else
                    (-var_3)
            let (var_26: int64) = 0L
            method_5((var_25: int64), (var_1: int64), (var_2: string), (var_26: int64), (var_4: int64))
    else
        let (var_28: int64) =
            if var_0 then
                var_3
            else
                (-var_3)
        let (var_29: int64) = 0L
        method_5((var_28: int64), (var_1: int64), (var_2: string), (var_29: int64), (var_4: int64))
and method_5((var_0: int64), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_3 + 1L)
    let (var_6: bool) = (var_4 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_2.Length)
            (var_4 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_2.[int32 var_4]
        let (var_11: bool) = (var_10 = ' ')
        let (var_15: bool) =
            if var_11 then
                true
            else
                let (var_12: bool) = (var_10 = '\n')
                if var_12 then
                    true
                else
                    (var_10 = '\r')
        let (var_16: int64) = (var_4 + 1L)
        if var_15 then
            method_5((var_0: int64), (var_1: int64), (var_2: string), (var_5: int64), (var_16: int64))
        else
            let (var_19: bool) =
                if var_6 then
                    let (var_17: int64) = (int64 var_2.Length)
                    (var_4 < var_17)
                else
                    false
            if var_19 then
                let (var_20: bool) = ('-' = var_10)
                if var_20 then
                    let (var_21: bool) = false
                    method_6((var_21: bool), (var_1: int64), (var_2: string), (var_16: int64))
                else
                    let (var_22: bool) = true
                    method_6((var_22: bool), (var_1: int64), (var_2: string), (var_4: int64))
            else
                let (var_23: bool) = true
                method_6((var_23: bool), (var_1: int64), (var_2: string), (var_4: int64))
    else
        let (var_26: bool) =
            if var_6 then
                let (var_24: int64) = (int64 var_2.Length)
                (var_4 < var_24)
            else
                false
        if var_26 then
            let (var_27: char) = var_2.[int32 var_4]
            let (var_28: bool) = ('-' = var_27)
            let (var_29: int64) = (var_4 + 1L)
            if var_28 then
                let (var_30: bool) = false
                method_6((var_30: bool), (var_1: int64), (var_2: string), (var_29: int64))
            else
                let (var_31: bool) = true
                method_6((var_31: bool), (var_1: int64), (var_2: string), (var_4: int64))
        else
            let (var_32: bool) = true
            method_6((var_32: bool), (var_1: int64), (var_2: string), (var_4: int64))
and method_6((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_2.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_2.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            method_7((var_0: bool), (var_1: int64), (var_2: string), (var_15: int64), (var_12: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_7((var_0: bool), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_2.Length)
            (var_4 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_2.[int32 var_4]
        let (var_10: bool) = (var_9 >= '0')
        let (var_12: bool) =
            if var_10 then
                (var_9 <= '9')
            else
                false
        let (var_13: int64) = (var_4 + 1L)
        if var_12 then
            let (var_14: int64) = System.Convert.ToInt64(var_9)
            let (var_15: int64) = System.Convert.ToInt64('0')
            let (var_16: int64) = (var_14 - var_15)
            let (var_17: bool) = (var_3 = 922337203685477580L)
            let (var_19: bool) =
                if var_17 then
                    (var_16 <= 7L)
                else
                    false
            let (var_21: bool) =
                if var_19 then
                    true
                else
                    (var_3 < 922337203685477580L)
            if var_21 then
                let (var_22: int64) = (var_3 * 10L)
                let (var_23: int64) = (var_22 + var_16)
                method_7((var_0: bool), (var_1: int64), (var_2: string), (var_23: int64), (var_13: int64))
            else
                (failwith "integer overflow")
        else
            let (var_25: int64) =
                if var_0 then
                    var_3
                else
                    (-var_3)
            let (var_26: int64) = 0L
            method_8((var_25: int64), (var_1: int64), (var_2: string), (var_26: int64), (var_4: int64))
    else
        let (var_28: int64) =
            if var_0 then
                var_3
            else
                (-var_3)
        let (var_29: int64) = 0L
        method_8((var_28: int64), (var_1: int64), (var_2: string), (var_29: int64), (var_4: int64))
and method_8((var_0: int64), (var_1: int64), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_3 + 1L)
    let (var_6: bool) = (var_4 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_2.Length)
            (var_4 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_2.[int32 var_4]
        let (var_11: bool) = (var_10 = ' ')
        let (var_15: bool) =
            if var_11 then
                true
            else
                let (var_12: bool) = (var_10 = '\n')
                if var_12 then
                    true
                else
                    (var_10 = '\r')
        let (var_16: int64) = (var_4 + 1L)
        if var_15 then
            method_8((var_0: int64), (var_1: int64), (var_2: string), (var_5: int64), (var_16: int64))
        else
            let (var_17: bool) = (var_1 >= 0L)
            if var_17 then
                let (var_19: ((Union0 []) [])) = Array.zeroCreate<(Union0 [])> (System.Convert.ToInt32(var_1))
                let (var_20: int64) = 0L
                method_9((var_19: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_20: int64), (var_17: bool), (var_4: int64))
            else
                (failwith "n in parse array must be >= 0")
    else
        let (var_21: bool) = (var_1 >= 0L)
        if var_21 then
            let (var_23: ((Union0 []) [])) = Array.zeroCreate<(Union0 [])> (System.Convert.ToInt32(var_1))
            let (var_24: int64) = 0L
            method_9((var_23: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_24: int64), (var_21: bool), (var_4: int64))
        else
            (failwith "n in parse array must be >= 0")
and method_9((var_0: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_3: int64), (var_4: bool), (var_5: int64)): unit =
    let (var_6: bool) = (var_3 < var_1)
    if var_6 then
        let (var_7: int64) = (var_3 + 1L)
        if var_4 then
            let (var_8: (Union0 [])) = Array.zeroCreate<Union0> (System.Convert.ToInt32(var_1))
            let (var_9: int64) = 0L
            method_10((var_8: (Union0 [])), (var_0: ((Union0 []) [])), (var_3: int64), (var_7: int64), (var_1: int64), (var_4: bool), (var_2: string), (var_9: int64), (var_5: int64))
        else
            (failwith "n in parse array must be >= 0")
    else
        let (var_10: int64) = 0L
        method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_10: int64))
and method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: bool) = (var_7 < var_4)
    if var_9 then
        let (var_10: int64) = (var_7 + 1L)
        let (var_11: bool) = (var_8 >= 0L)
        let (var_14: bool) =
            if var_11 then
                let (var_12: int64) = (int64 var_6.Length)
                (var_8 < var_12)
            else
                false
        if var_14 then
            let (var_15: char) = var_6.[int32 var_8]
            let (var_16: bool) = ('-' = var_15)
            let (var_17: int64) = (var_8 + 1L)
            if var_16 then
                var_0.[int32 var_7] <- Union0Case0
                method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_17: int64))
            else
                let (var_20: bool) =
                    if var_11 then
                        let (var_18: int64) = (int64 var_6.Length)
                        (var_8 < var_18)
                    else
                        false
                if var_20 then
                    let (var_21: bool) = ('p' = var_15)
                    if var_21 then
                        var_0.[int32 var_7] <- Union0Case2
                        method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_17: int64))
                    else
                        let (var_24: bool) =
                            if var_11 then
                                let (var_22: int64) = (int64 var_6.Length)
                                (var_8 < var_22)
                            else
                                false
                        if var_24 then
                            let (var_25: bool) = ('m' = var_15)
                            if var_25 then
                                var_0.[int32 var_7] <- Union0Case1
                                method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_17: int64))
                            else
                                (failwith "char")
                        else
                            (failwith "string index out of bounds")
                else
                    let (var_28: bool) =
                        if var_11 then
                            let (var_26: int64) = (int64 var_6.Length)
                            (var_8 < var_26)
                        else
                            false
                    if var_28 then
                        let (var_29: bool) = ('m' = var_15)
                        if var_29 then
                            var_0.[int32 var_7] <- Union0Case1
                            method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_17: int64))
                        else
                            (failwith "char")
                    else
                        (failwith "string index out of bounds")
        else
            let (var_32: bool) =
                if var_11 then
                    let (var_30: int64) = (int64 var_6.Length)
                    (var_8 < var_30)
                else
                    false
            if var_32 then
                let (var_33: char) = var_6.[int32 var_8]
                let (var_34: bool) = ('p' = var_33)
                let (var_35: int64) = (var_8 + 1L)
                if var_34 then
                    var_0.[int32 var_7] <- Union0Case2
                    method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_35: int64))
                else
                    let (var_38: bool) =
                        if var_11 then
                            let (var_36: int64) = (int64 var_6.Length)
                            (var_8 < var_36)
                        else
                            false
                    if var_38 then
                        let (var_39: bool) = ('m' = var_33)
                        if var_39 then
                            var_0.[int32 var_7] <- Union0Case1
                            method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_35: int64))
                        else
                            (failwith "char")
                    else
                        (failwith "string index out of bounds")
            else
                let (var_42: bool) =
                    if var_11 then
                        let (var_40: int64) = (int64 var_6.Length)
                        (var_8 < var_40)
                    else
                        false
                if var_42 then
                    let (var_43: char) = var_6.[int32 var_8]
                    let (var_44: bool) = ('m' = var_43)
                    let (var_45: int64) = (var_8 + 1L)
                    if var_44 then
                        var_0.[int32 var_7] <- Union0Case1
                        method_10((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_45: int64))
                    else
                        (failwith "char")
                else
                    (failwith "string index out of bounds")
    else
        let (var_46: int64) = 0L
        method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_46: int64), (var_8: int64))
and method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: int64) = 0L
        method_13((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_4: int64))
    else
        (failwith "Current position not found.")
and method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_7 + 1L)
    let (var_10: bool) = (var_8 >= 0L)
    let (var_13: bool) =
        if var_10 then
            let (var_11: int64) = (int64 var_6.Length)
            (var_8 < var_11)
        else
            false
    if var_13 then
        let (var_14: char) = var_6.[int32 var_8]
        let (var_15: bool) = (var_14 = ' ')
        let (var_19: bool) =
            if var_15 then
                true
            else
                let (var_16: bool) = (var_14 = '\n')
                if var_16 then
                    true
                else
                    (var_14 = '\r')
        let (var_20: int64) = (var_8 + 1L)
        if var_19 then
            method_11((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_9: int64), (var_20: int64))
        else
            var_1.[int32 var_2] <- var_0
            method_9((var_1: ((Union0 []) [])), (var_4: int64), (var_6: string), (var_3: int64), (var_5: bool), (var_8: int64))
    else
        var_1.[int32 var_2] <- var_0
        method_9((var_1: ((Union0 []) [])), (var_4: int64), (var_6: string), (var_3: int64), (var_5: bool), (var_8: int64))
and method_13((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: (Union0 [])) = var_0.[int32 var_1]
        let (var_6: Union0) = var_5.[int32 var_3]
        match var_6 with
        | Union0Case0 ->
            let (var_7: int64) = (var_3 + 1L)
            method_13((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_7: int64))
        | Union0Case1 ->
            let (var_8: int64) = (var_3 + 1L)
            method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_8: int64))
        | Union0Case2 ->
            let (var_9: int64) = (var_3 + 1L)
            method_34((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_9: int64))
    else
        let (var_10: int64) = (var_1 + 1L)
        method_12((var_0: ((Union0 []) [])), (var_2: int64), (var_10: int64))
and method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: (Union0 [])) = var_0.[int32 var_1]
        let (var_7: Union0) = var_6.[int32 var_4]
        match var_7 with
        | Union0Case0 ->
            let (var_8: int64) = (var_4 + 1L)
            method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_8: int64))
        | Union0Case1 ->
            let (var_9: int64) = (var_4 + 1L)
            method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_4: int64), (var_9: int64))
        | Union0Case2 ->
            method_33((var_3: int64), (var_1: int64), (var_2: int64), (var_4: int64))
    else
        let (var_10: int64) = (var_1 + 1L)
        method_15((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_3: int64), (var_10: int64))
and method_34((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: (Union0 [])) = var_0.[int32 var_1]
        let (var_7: Union0) = var_6.[int32 var_4]
        match var_7 with
        | Union0Case0 ->
            let (var_8: int64) = (var_4 + 1L)
            method_34((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_8: int64))
        | Union0Case1 ->
            method_33((var_4: int64), (var_1: int64), (var_2: int64), (var_3: int64))
        | Union0Case2 ->
            let (var_9: int64) = (var_4 + 1L)
            method_34((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_4: int64), (var_9: int64))
    else
        let (var_10: int64) = (var_1 + 1L)
        method_35((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_3: int64), (var_10: int64))
and method_33((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_2 > 0L)
    let (var_5: bool) = (var_4 = false)
    if var_5 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    if var_5 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_6: int64) = (var_2 * var_2)
    let (var_7: (bool [])) = Array.zeroCreate<bool> (System.Convert.ToInt32(var_6))
    let (var_8: int64) = 0L
    method_18((var_7: (bool [])), (var_2: int64), (var_8: int64))
    let (var_9: bool) = (var_1 >= 0L)
    let (var_11: bool) =
        if var_9 then
            (var_1 < var_2)
        else
            false
    let (var_12: bool) = (var_11 = false)
    if var_12 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_13: int64) = (var_1 * var_2)
    let (var_14: bool) = (var_0 >= 0L)
    let (var_16: bool) =
        if var_14 then
            (var_0 < var_2)
        else
            false
    let (var_17: bool) = (var_16 = false)
    if var_17 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_18: int64) = (var_13 + var_0)
    var_7.[int32 var_18] <- true
    let (var_19: string) = "UP"
    let (var_20: string) = "DOWN"
    let (var_21: string) = "LEFT"
    let (var_22: string) = "RIGHT"
    let (var_23: int64) = 0L
    let (var_24: int64) = 0L
    let (var_25: (Tuple1 [])) = Array.zeroCreate<Tuple1> (System.Convert.ToInt32(16L))
    let (var_26: EnvHeapMutable2) = ({mem_0 = (var_25: (Tuple1 [])); mem_1 = (var_23: int64); mem_2 = (var_24: int64)} : EnvHeapMutable2)
    let (var_27: Rec3) = Rec3Case0
    method_21((var_26: EnvHeapMutable2), (var_1: int64), (var_0: int64), (var_27: Rec3))
    method_25((var_20: string), (var_7: (bool [])), (var_2: int64), (var_3: int64), (var_1: int64), (var_26: EnvHeapMutable2), (var_21: string), (var_22: string), (var_19: string))
and method_15((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_1)
    if var_5 then
        let (var_6: int64) = 0L
        method_16((var_0: ((Union0 []) [])), (var_4: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: int64))
    else
        (failwith "Current position not found.")
and method_35((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_1)
    if var_5 then
        let (var_6: int64) = 0L
        method_36((var_0: ((Union0 []) [])), (var_4: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: int64))
    else
        (failwith "Current position not found.")
and method_18((var_0: (bool [])), (var_1: int64), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * var_1)
        let (var_7: int64) = 0L
        method_19((var_0: (bool [])), (var_6: int64), (var_1: int64), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_18((var_0: (bool [])), (var_1: int64), (var_8: int64))
    else
        ()
and method_21((var_0: EnvHeapMutable2), (var_1: int64), (var_2: int64), (var_3: Rec3)): unit =
    let (var_4: int64) = var_0.mem_1
    let (var_5: int64) = var_0.mem_2
    let (var_6: (Tuple1 [])) = var_0.mem_0
    var_6.[int32 var_5] <- Tuple1(Tuple4(var_1, var_2), var_3)
    let (var_7: int64) = var_6.LongLength
    let (var_8: int64) = (var_5 + 1L)
    let (var_9: bool) = (var_8 = var_7)
    let (var_10: int64) =
        if var_9 then
            0L
        else
            var_8
    let (var_11: bool) = (var_4 = var_10)
    if var_11 then
        let (var_12: int64) = (var_7 * 3L)
        let (var_13: int64) = (var_12 / 2L)
        let (var_14: int64) = (var_13 + 3L)
        let (var_15: (Tuple1 [])) = Array.zeroCreate<Tuple1> (System.Convert.ToInt32(var_14))
        method_22((var_6: (Tuple1 [])), (var_15: (Tuple1 [])), (var_4: int64), (var_7: int64))
        let (var_16: int64) = 0L
        method_24((var_6: (Tuple1 [])), (var_15: (Tuple1 [])), (var_4: int64), (var_7: int64), (var_16: int64))
        let (var_17: int64) = 0L
        var_0.mem_1 <- var_17
        var_0.mem_2 <- var_7
        var_0.mem_0 <- var_15
    else
        var_0.mem_2 <- var_10
and method_25((var_0: string), (var_1: (bool [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: EnvHeapMutable2), (var_6: string), (var_7: string), (var_8: string)): unit =
    let (var_9: Tuple1) = method_26((var_5: EnvHeapMutable2))
    let (var_10: Tuple4) = var_9.mem_0
    let (var_11: int64) = var_10.mem_0
    let (var_12: int64) = var_10.mem_1
    let (var_13: Rec3) = var_9.mem_1
    method_27((var_1: (bool [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_8: string), (var_5: EnvHeapMutable2), (var_0: string), (var_6: string), (var_7: string), (var_11: int64), (var_12: int64), (var_13: Rec3))
and method_16((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): unit =
    let (var_6: bool) = (var_5 < var_2)
    if var_6 then
        let (var_7: (Union0 [])) = var_0.[int32 var_1]
        let (var_8: Union0) = var_7.[int32 var_5]
        match var_8 with
        | Union0Case0 ->
            let (var_9: int64) = (var_5 + 1L)
            method_16((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_9: int64))
        | Union0Case1 ->
            let (var_10: int64) = (var_5 + 1L)
            method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_5: int64), (var_10: int64))
        | Union0Case2 ->
            method_17((var_4: int64), (var_3: int64), (var_2: int64), (var_5: int64), (var_1: int64))
    else
        let (var_11: int64) = (var_1 + 1L)
        method_15((var_0: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_11: int64))
and method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): unit =
    let (var_6: bool) = (var_5 < var_2)
    if var_6 then
        let (var_7: (Union0 [])) = var_0.[int32 var_1]
        let (var_8: Union0) = var_7.[int32 var_5]
        match var_8 with
        | Union0Case0 ->
            let (var_9: int64) = (var_5 + 1L)
            method_36((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_9: int64))
        | Union0Case1 ->
            method_17((var_5: int64), (var_1: int64), (var_2: int64), (var_4: int64), (var_3: int64))
        | Union0Case2 ->
            let (var_10: int64) = (var_5 + 1L)
            method_34((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_5: int64), (var_10: int64))
    else
        let (var_11: int64) = (var_1 + 1L)
        method_35((var_0: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_11: int64))
and method_19((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_1 + var_3)
        var_0.[int32 var_7] <- false
        let (var_8: int64) = (var_3 + 1L)
        method_19((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_8: int64))
    else
        ()
and method_22((var_0: (Tuple1 [])), (var_1: (Tuple1 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_2 < var_3)
    if var_4 then
        let (var_5: Tuple1) = var_0.[int32 var_2]
        var_1.[int32 0L] <- var_5
        let (var_6: int64) = (var_2 + 1L)
        method_23((var_0: (Tuple1 [])), (var_1: (Tuple1 [])), (var_2: int64), (var_3: int64), (var_6: int64))
    else
        ()
and method_24((var_0: (Tuple1 [])), (var_1: (Tuple1 [])), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: int64) = (var_3 - var_2)
        let (var_7: int64) = (var_6 + var_4)
        let (var_8: Tuple1) = var_0.[int32 var_4]
        var_1.[int32 var_7] <- var_8
        let (var_9: int64) = (var_4 + 1L)
        method_24((var_0: (Tuple1 [])), (var_1: (Tuple1 [])), (var_2: int64), (var_3: int64), (var_9: int64))
    else
        ()
and method_26((var_0: EnvHeapMutable2)): Tuple1 =
    let (var_1: int64) = var_0.mem_1
    let (var_2: int64) = var_0.mem_2
    let (var_3: (Tuple1 [])) = var_0.mem_0
    let (var_4: bool) = (var_1 <> var_2)
    let (var_5: bool) = (var_4 = false)
    if var_5 then
        (failwith "Cannot dequeue past the end of the queue.")
    else
        ()
    let (var_6: int64) = var_3.LongLength
    let (var_7: int64) = (var_1 + 1L)
    let (var_8: bool) = (var_7 = var_6)
    let (var_9: int64) =
        if var_8 then
            0L
        else
            var_7
    var_0.mem_1 <- var_9
    var_3.[int32 var_1]
and method_27((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: EnvHeapMutable2), (var_6: string), (var_7: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3)): unit =
    let (var_12: int64) = (var_9 - 1L)
    let (var_13: bool) = (var_12 >= 0L)
    let (var_15: bool) =
        if var_13 then
            (var_12 < var_1)
        else
            false
    let (var_19: bool) =
        if var_15 then
            let (var_16: bool) = (var_10 >= 0L)
            if var_16 then
                (var_10 < var_1)
            else
                false
        else
            false
    let (var_31: bool) =
        if var_19 then
            let (var_21: bool) =
                if var_13 then
                    (var_12 < var_1)
                else
                    false
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_12 * var_1)
            let (var_24: bool) = (var_10 >= 0L)
            let (var_26: bool) =
                if var_24 then
                    (var_10 < var_1)
                else
                    false
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 + var_10)
            let (var_29: bool) = var_0.[int32 var_28]
            (var_29 = false)
        else
            false
    if var_31 then
        let (var_32: bool) = (var_12 = var_3)
        let (var_34: bool) =
            if var_32 then
                (var_10 = var_2)
            else
                false
        if var_34 then
            method_28((var_4: string), (var_11: Rec3))
        else
            let (var_36: bool) =
                if var_13 then
                    (var_12 < var_1)
                else
                    false
            let (var_37: bool) = (var_36 = false)
            if var_37 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_38: int64) = (var_12 * var_1)
            let (var_39: bool) = (var_10 >= 0L)
            let (var_41: bool) =
                if var_39 then
                    (var_10 < var_1)
                else
                    false
            let (var_42: bool) = (var_41 = false)
            if var_42 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_43: int64) = (var_38 + var_10)
            var_0.[int32 var_43] <- true
            let (var_44: Rec3) = (Rec3Case1(Tuple5(var_4, var_11)))
            method_21((var_5: EnvHeapMutable2), (var_12: int64), (var_10: int64), (var_44: Rec3))
            method_30((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable2), (var_7: string), (var_8: string), (var_4: string), (var_9: int64), (var_10: int64), (var_11: Rec3))
    else
        method_30((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable2), (var_7: string), (var_8: string), (var_4: string), (var_9: int64), (var_10: int64), (var_11: Rec3))
and method_17((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_2 > 0L)
    let (var_6: bool) = (var_5 = false)
    if var_6 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    if var_6 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_7: int64) = (var_2 * var_2)
    let (var_8: (bool [])) = Array.zeroCreate<bool> (System.Convert.ToInt32(var_7))
    let (var_9: int64) = 0L
    method_18((var_8: (bool [])), (var_2: int64), (var_9: int64))
    let (var_10: bool) = (var_1 >= 0L)
    let (var_12: bool) =
        if var_10 then
            (var_1 < var_2)
        else
            false
    let (var_13: bool) = (var_12 = false)
    if var_13 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_14: int64) = (var_1 * var_2)
    let (var_15: bool) = (var_0 >= 0L)
    let (var_17: bool) =
        if var_15 then
            (var_0 < var_2)
        else
            false
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_19: int64) = (var_14 + var_0)
    var_8.[int32 var_19] <- true
    let (var_20: string) = "UP"
    let (var_21: string) = "DOWN"
    let (var_22: string) = "LEFT"
    let (var_23: string) = "RIGHT"
    let (var_24: int64) = 0L
    let (var_25: int64) = 0L
    let (var_26: (Tuple1 [])) = Array.zeroCreate<Tuple1> (System.Convert.ToInt32(16L))
    let (var_27: EnvHeapMutable2) = ({mem_0 = (var_26: (Tuple1 [])); mem_1 = (var_24: int64); mem_2 = (var_25: int64)} : EnvHeapMutable2)
    let (var_28: Rec3) = Rec3Case0
    method_21((var_27: EnvHeapMutable2), (var_1: int64), (var_0: int64), (var_28: Rec3))
    method_25((var_21: string), (var_8: (bool [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_27: EnvHeapMutable2), (var_22: string), (var_23: string), (var_20: string))
and method_23((var_0: (Tuple1 [])), (var_1: (Tuple1 [])), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_3)
    if var_5 then
        let (var_6: int64) = (var_4 - var_2)
        let (var_7: Tuple1) = var_0.[int32 var_4]
        var_1.[int32 var_6] <- var_7
        let (var_8: int64) = (var_4 + 1L)
        method_23((var_0: (Tuple1 [])), (var_1: (Tuple1 [])), (var_2: int64), (var_3: int64), (var_8: int64))
    else
        ()
and method_28((var_0: string), (var_1: Rec3)): unit =
    let (var_2: Union6) = method_29((var_1: Rec3), (var_0: string))
    match var_2 with
    | Union6Case0(var_3) ->
        let (var_4: string) = var_3.mem_0
        System.Console.WriteLine(var_4)
    | Union6Case1 ->
        (failwith "Error: No moves taken.")
and method_30((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: EnvHeapMutable2), (var_6: string), (var_7: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3)): unit =
    let (var_12: int64) = (var_9 + 1L)
    let (var_13: bool) = (var_12 >= 0L)
    let (var_15: bool) =
        if var_13 then
            (var_12 < var_1)
        else
            false
    let (var_19: bool) =
        if var_15 then
            let (var_16: bool) = (var_10 >= 0L)
            if var_16 then
                (var_10 < var_1)
            else
                false
        else
            false
    let (var_31: bool) =
        if var_19 then
            let (var_21: bool) =
                if var_13 then
                    (var_12 < var_1)
                else
                    false
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_12 * var_1)
            let (var_24: bool) = (var_10 >= 0L)
            let (var_26: bool) =
                if var_24 then
                    (var_10 < var_1)
                else
                    false
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 + var_10)
            let (var_29: bool) = var_0.[int32 var_28]
            (var_29 = false)
        else
            false
    if var_31 then
        let (var_32: bool) = (var_12 = var_3)
        let (var_34: bool) =
            if var_32 then
                (var_10 = var_2)
            else
                false
        if var_34 then
            method_28((var_4: string), (var_11: Rec3))
        else
            let (var_36: bool) =
                if var_13 then
                    (var_12 < var_1)
                else
                    false
            let (var_37: bool) = (var_36 = false)
            if var_37 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_38: int64) = (var_12 * var_1)
            let (var_39: bool) = (var_10 >= 0L)
            let (var_41: bool) =
                if var_39 then
                    (var_10 < var_1)
                else
                    false
            let (var_42: bool) = (var_41 = false)
            if var_42 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_43: int64) = (var_38 + var_10)
            var_0.[int32 var_43] <- true
            let (var_44: Rec3) = (Rec3Case1(Tuple5(var_4, var_11)))
            method_21((var_5: EnvHeapMutable2), (var_12: int64), (var_10: int64), (var_44: Rec3))
            method_31((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable2), (var_7: string), (var_4: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3))
    else
        method_31((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_5: EnvHeapMutable2), (var_7: string), (var_4: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3))
and method_29((var_0: Rec3), (var_1: string)): Union6 =
    match var_0 with
    | Rec3Case0 ->
        (Union6Case0(Tuple7(var_1)))
    | Rec3Case1(var_2) ->
        let (var_3: string) = var_2.mem_0
        let (var_4: Rec3) = var_2.mem_1
        method_29((var_4: Rec3), (var_3: string))
and method_31((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: EnvHeapMutable2), (var_6: string), (var_7: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3)): unit =
    let (var_12: int64) = (var_10 - 1L)
    let (var_13: bool) = (var_9 >= 0L)
    let (var_15: bool) =
        if var_13 then
            (var_9 < var_1)
        else
            false
    let (var_19: bool) =
        if var_15 then
            let (var_16: bool) = (var_12 >= 0L)
            if var_16 then
                (var_12 < var_1)
            else
                false
        else
            false
    let (var_31: bool) =
        if var_19 then
            let (var_21: bool) =
                if var_13 then
                    (var_9 < var_1)
                else
                    false
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_9 * var_1)
            let (var_24: bool) = (var_12 >= 0L)
            let (var_26: bool) =
                if var_24 then
                    (var_12 < var_1)
                else
                    false
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 + var_12)
            let (var_29: bool) = var_0.[int32 var_28]
            (var_29 = false)
        else
            false
    if var_31 then
        let (var_32: bool) = (var_9 = var_3)
        let (var_34: bool) =
            if var_32 then
                (var_12 = var_2)
            else
                false
        if var_34 then
            method_28((var_4: string), (var_11: Rec3))
        else
            let (var_36: bool) =
                if var_13 then
                    (var_9 < var_1)
                else
                    false
            let (var_37: bool) = (var_36 = false)
            if var_37 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_38: int64) = (var_9 * var_1)
            let (var_39: bool) = (var_12 >= 0L)
            let (var_41: bool) =
                if var_39 then
                    (var_12 < var_1)
                else
                    false
            let (var_42: bool) = (var_41 = false)
            if var_42 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_43: int64) = (var_38 + var_12)
            var_0.[int32 var_43] <- true
            let (var_44: Rec3) = (Rec3Case1(Tuple5(var_4, var_11)))
            method_21((var_5: EnvHeapMutable2), (var_9: int64), (var_12: int64), (var_44: Rec3))
            method_32((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_7: string), (var_5: EnvHeapMutable2), (var_4: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3))
    else
        method_32((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: string), (var_7: string), (var_5: EnvHeapMutable2), (var_4: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3))
and method_32((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: string), (var_6: EnvHeapMutable2), (var_7: string), (var_8: string), (var_9: int64), (var_10: int64), (var_11: Rec3)): unit =
    let (var_12: int64) = (var_10 + 1L)
    let (var_13: bool) = (var_9 >= 0L)
    let (var_15: bool) =
        if var_13 then
            (var_9 < var_1)
        else
            false
    let (var_19: bool) =
        if var_15 then
            let (var_16: bool) = (var_12 >= 0L)
            if var_16 then
                (var_12 < var_1)
            else
                false
        else
            false
    let (var_31: bool) =
        if var_19 then
            let (var_21: bool) =
                if var_13 then
                    (var_9 < var_1)
                else
                    false
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_9 * var_1)
            let (var_24: bool) = (var_12 >= 0L)
            let (var_26: bool) =
                if var_24 then
                    (var_12 < var_1)
                else
                    false
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 + var_12)
            let (var_29: bool) = var_0.[int32 var_28]
            (var_29 = false)
        else
            false
    if var_31 then
        let (var_32: bool) = (var_9 = var_3)
        let (var_34: bool) =
            if var_32 then
                (var_12 = var_2)
            else
                false
        if var_34 then
            method_28((var_4: string), (var_11: Rec3))
        else
            let (var_36: bool) =
                if var_13 then
                    (var_9 < var_1)
                else
                    false
            let (var_37: bool) = (var_36 = false)
            if var_37 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_38: int64) = (var_9 * var_1)
            let (var_39: bool) = (var_12 >= 0L)
            let (var_41: bool) =
                if var_39 then
                    (var_12 < var_1)
                else
                    false
            let (var_42: bool) = (var_41 = false)
            if var_42 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_43: int64) = (var_38 + var_12)
            var_0.[int32 var_43] <- true
            let (var_44: Rec3) = (Rec3Case1(Tuple5(var_4, var_11)))
            method_21((var_6: EnvHeapMutable2), (var_9: int64), (var_12: int64), (var_44: Rec3))
            method_25((var_5: string), (var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: EnvHeapMutable2), (var_7: string), (var_4: string), (var_8: string))
    else
        method_25((var_5: string), (var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_6: EnvHeapMutable2), (var_7: string), (var_4: string), (var_8: string))
let (var_0: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_1: System.IO.StreamReader) = System.IO.StreamReader(var_0)
let (var_2: string) = var_1.ReadToEnd()
let (var_3: int64) = 0L
let (var_4: bool) = (var_3 >= 0L)
let (var_7: bool) =
    if var_4 then
        let (var_5: int64) = (int64 var_2.Length)
        (var_3 < var_5)
    else
        false
if var_7 then
    let (var_8: char) = var_2.[int32 var_3]
    let (var_9: bool) = ('-' = var_8)
    let (var_10: int64) = (var_3 + 1L)
    if var_9 then
        let (var_11: bool) = false
        method_0((var_11: bool), (var_2: string), (var_10: int64))
    else
        let (var_12: bool) = true
        method_0((var_12: bool), (var_2: string), (var_3: int64))
else
    let (var_13: bool) = true
    method_0((var_13: bool), (var_2: string), (var_3: int64))

