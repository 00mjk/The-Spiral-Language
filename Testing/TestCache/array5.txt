let rec method_0 ((var_3 : (int64 [])), (var_4 : int64)) : unit =
    let ((var_5 : bool)) = var_4 < 16L
    if var_5 then
        let ((var_6 : int64)) = var_4 + 1L
        let ((var_7 : int64)) = method_4 (var_4)
        let () = var_3.[int32 var_4] <- var_7
        method_0 (var_3, var_6)
    else
        ()
and method_1 ((var_13 : (int64 [])), (var_3 : (int64 [])), (var_8 : int64), (var_14 : int64)) : unit =
    let ((var_15 : bool)) = var_14 < var_8
    if var_15 then
        let ((var_16 : int64)) = var_14 + 1L
        let ((var_19 : int64)) = method_5 (var_14, var_3)
        let () = var_13.[int32 var_14] <- var_19
        method_1 (var_13, var_3, var_8, var_16)
    else
        ()
and method_2 ((var_13 : (int64 [])), (var_22 : (int64 [])), (var_21 : int64), (var_24 : int64), (var_23 : int64)) : int64 =
    let ((var_25 : bool)) = var_24 < var_21
    if var_25 then
        let ((var_26 : int64)) = var_24 + 1L
        let ((var_27 : int64)) = var_13.[int32 var_24]
        let ((var_28 : bool)) = 15L < var_27
        let ((var_30 : int64)) =
            if var_28 then
                let () = var_22.[int32 var_23] <- var_27
                var_23 + 1L
            else
                var_23
        method_2 (var_13, var_22, var_21, var_26, var_30)
    else
        var_23
and method_3 ((var_37 : (int64 [])), (var_22 : (int64 [])), (var_33 : int64), (var_38 : int64)) : unit =
    let ((var_39 : bool)) = var_38 < var_33
    if var_39 then
        let ((var_40 : int64)) = var_38 + 1L
        let ((var_42 : int64)) = method_6 (var_38, var_22)
        let () = var_37.[int32 var_38] <- var_42
        method_3 (var_37, var_22, var_33, var_40)
    else
        ()
and method_4 ((var_4 : int64)) : int64 =
    var_4
and method_5 ((var_14 : int64), (var_3 : (int64 []))) : int64 =
    let ((var_17 : int64)) = var_3.[int32 var_14]
    2L * var_17
and method_6 ((var_38 : int64), (var_22 : (int64 []))) : int64 =
    var_22.[int32 var_38]
let ((var_3 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 16L)
let ((var_4 : int64)) = 0L
let () = method_0 (var_3, var_4)
let ((var_8 : int64)) = var_3.LongLength
let ((var_13 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 var_8)
let ((var_14 : int64)) = 0L
let () = method_1 (var_13, var_3, var_8, var_14)
let ((var_21 : int64)) = var_13.LongLength
let ((var_22 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 var_21)
let ((var_23 : int64)) = 0L
let ((var_24 : int64)) = 0L
let ((var_33 : int64)) = method_2 (var_13, var_22, var_21, var_24, var_23)
let ((var_37 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 var_33)
let ((var_38 : int64)) = 0L
let () = method_3 (var_37, var_22, var_33, var_38)
