module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 5L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 1L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 - 1L)
        let (var_6: int64) = (var_5 * 303L)
        let (var_7: int64) = 1L
        method_1((var_1: int64), (var_0: (int64 [])), (var_6: int64), (var_7: int64))
        let (var_8: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_8: int64))
    else
        ()
and method_3((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_3((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_4((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64)): int64 =
    let (var_5: bool) = (var_4 < 5L)
    if var_5 then
        let (var_6: bool) = (var_3 < 1000L)
        if var_6 then
            let (var_7: bool) = (var_4 >= 1L)
            let (var_8: bool) = (var_7 = false)
            if var_8 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_9: int64) = (var_4 - 1L)
            let (var_10: int64) = (var_9 * 303L)
            let (var_11: int64) = 0L
            method_5((var_0: System.Text.StringBuilder), (var_11: int64))
            let (var_12: System.Text.StringBuilder) = var_0.AppendLine("[|")
            let (var_13: int64) = 1L
            let (var_14: int64) = method_6((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_10: int64), (var_3: int64), (var_13: int64))
            let (var_15: int64) = 0L
            method_5((var_0: System.Text.StringBuilder), (var_15: int64))
            let (var_16: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_17: int64) = (var_4 + 1L)
            method_4((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_14: int64), (var_17: int64))
        else
            let (var_19: int64) = 0L
            method_3((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_3
    else
        var_3
and method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 4L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 1L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_3 - 1L)
        let (var_8: int64) = (var_7 * 101L)
        let (var_9: int64) = (var_2 + var_8)
        let (var_10: int64) = 1L
        method_2((var_0: int64), (var_3: int64), (var_1: (int64 [])), (var_9: int64), (var_10: int64))
        let (var_11: int64) = (var_3 + 1L)
        method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_11: int64))
    else
        ()
and method_5((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_5((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_6((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64)): int64 =
    let (var_6: bool) = (var_5 < 4L)
    if var_6 then
        let (var_7: bool) = (var_4 < 1000L)
        if var_7 then
            let (var_8: bool) = (var_5 >= 1L)
            let (var_9: bool) = (var_8 = false)
            if var_9 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_10: int64) = (var_5 - 1L)
            let (var_11: int64) = (var_10 * 101L)
            let (var_12: int64) = (var_3 + var_11)
            let (var_13: int64) = 0L
            method_7((var_0: System.Text.StringBuilder), (var_13: int64))
            let (var_14: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_15: int64) = 1L
            let (var_16: int64) = method_8((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_12: int64), (var_1: string), (var_4: int64), (var_15: int64))
            let (var_17: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_18: int64) = (var_5 + 1L)
            method_6((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_16: int64), (var_18: int64))
        else
            let (var_20: int64) = 0L
            method_5((var_0: System.Text.StringBuilder), (var_20: int64))
            let (var_21: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_4
    else
        var_4
and method_2((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 102L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 1L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_4 - 1L)
        let (var_9: int64) = (var_3 + var_8)
        let (var_10: int64) = (var_0 * var_1)
        let (var_11: int64) = (var_10 * var_4)
        var_2.[int32 var_9] <- var_11
        let (var_12: int64) = (var_4 + 1L)
        method_2((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_12: int64))
    else
        ()
and method_7((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 8L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_7((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_8((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: string), (var_4: int64), (var_5: int64)): int64 =
    let (var_6: bool) = (var_5 < 102L)
    if var_6 then
        let (var_7: bool) = (var_4 < 1000L)
        if var_7 then
            let (var_8: System.Text.StringBuilder) = var_0.Append(var_3)
            let (var_9: bool) = (var_5 >= 1L)
            let (var_10: bool) = (var_9 = false)
            if var_10 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_11: int64) = (var_5 - 1L)
            let (var_12: int64) = (var_2 + var_11)
            let (var_13: int64) = var_1.[int32 var_12]
            let (var_14: string) = System.String.Format("{0}",var_13)
            let (var_15: System.Text.StringBuilder) = var_0.Append(var_14)
            let (var_16: string) = "; "
            let (var_17: int64) = (var_4 + 1L)
            let (var_18: int64) = (var_5 + 1L)
            method_8((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_16: string), (var_17: int64), (var_18: int64))
        else
            let (var_20: System.Text.StringBuilder) = var_0.Append("...")
            var_4
    else
        var_4
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(1212L))
let (var_1: int64) = 1L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_2: System.Text.StringBuilder) = System.Text.StringBuilder()
let (var_3: string) = ""
let (var_4: int64) = 0L
let (var_5: int64) = 0L
method_3((var_2: System.Text.StringBuilder), (var_5: int64))
let (var_6: System.Text.StringBuilder) = var_2.AppendLine("[|")
let (var_7: int64) = 1L
let (var_8: int64) = method_4((var_2: System.Text.StringBuilder), (var_3: string), (var_0: (int64 [])), (var_4: int64), (var_7: int64))
let (var_9: int64) = 0L
method_3((var_2: System.Text.StringBuilder), (var_9: int64))
let (var_10: System.Text.StringBuilder) = var_2.AppendLine("|]")
let (var_11: string) = var_2.ToString()
System.Console.WriteLine(var_11)

