module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

type Union0 =
    | Union0Case0
    | Union0Case1
    | Union0Case2
and Env1 =
    struct
    val mem_0: Union2
    val mem_1: Union2
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Union2 =
    | Union2Case0 of Tuple8
    | Union2Case1
and Tuple3 =
    struct
    val mem_0: Tuple4
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Tuple4 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple5 =
    struct
    val mem_0: Tuple4
    val mem_1: Rec6
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Rec6 =
    | Rec6Case0
    | Rec6Case1 of Tuple9
and Union7 =
    | Union7Case0 of Tuple10
    | Union7Case1
and Tuple8 =
    struct
    val mem_0: Tuple3
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Tuple9 =
    struct
    val mem_0: string
    val mem_1: Rec6
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple10 =
    struct
    val mem_0: Tuple11
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Tuple11 =
    struct
    val mem_0: Tuple5
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_1((var_0: bool), (var_1: string), (var_2: int64)): unit =
    let (var_4: bool) =
        if (var_2 >= 0L) then
            let (var_3: int64) = (int64 var_1.Length)
            (var_2 < var_3)
        else
            false
    if var_4 then
        let (var_5: char) = var_1.[int32 var_2]
        let (var_6: bool) =
            if (var_5 >= '0') then
                (var_5 <= '9')
            else
                false
        let (var_7: int64) = (var_2 + 1L)
        if var_6 then
            let (var_8: int64) = System.Convert.ToInt64(var_5)
            let (var_9: int64) = System.Convert.ToInt64('0')
            let (var_10: int64) = (var_8 - var_9)
            method_2((var_0: bool), (var_1: string), (var_10: int64), (var_7: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_2((var_0: bool), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_5: bool) =
        if (var_3 >= 0L) then
            let (var_4: int64) = (int64 var_1.Length)
            (var_3 < var_4)
        else
            false
    if var_5 then
        let (var_6: char) = var_1.[int32 var_3]
        let (var_7: bool) =
            if (var_6 >= '0') then
                (var_6 <= '9')
            else
                false
        let (var_8: int64) = (var_3 + 1L)
        if var_7 then
            let (var_9: int64) = System.Convert.ToInt64(var_6)
            let (var_10: int64) = System.Convert.ToInt64('0')
            let (var_11: int64) = (var_9 - var_10)
            let (var_12: bool) =
                if (var_2 = 922337203685477580L) then
                    (var_11 <= 7L)
                else
                    false
            let (var_13: bool) =
                if var_12 then
                    true
                else
                    (var_2 < 922337203685477580L)
            if var_13 then
                let (var_14: int64) = (var_2 * 10L)
                let (var_15: int64) = (var_14 + var_11)
                method_2((var_0: bool), (var_1: string), (var_15: int64), (var_8: int64))
            else
                (failwith "integer overflow")
        else
            let (var_16: int64) =
                if var_0 then
                    var_2
                else
                    (-var_2)
            let (var_17: int64) = 0L
            method_3((var_16: int64), (var_1: string), (var_17: int64), (var_3: int64))
    else
        let (var_18: int64) =
            if var_0 then
                var_2
            else
                (-var_2)
        let (var_19: int64) = 0L
        method_3((var_18: int64), (var_1: string), (var_19: int64), (var_3: int64))
and method_3((var_0: int64), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: int64) = (var_2 + 1L)
    let (var_6: bool) =
        if (var_3 >= 0L) then
            let (var_5: int64) = (int64 var_1.Length)
            (var_3 < var_5)
        else
            false
    if var_6 then
        let (var_7: char) = var_1.[int32 var_3]
        let (var_9: bool) =
            if (var_7 = ' ') then
                true
            else
                if (var_7 = '\n') then
                    true
                else
                    (var_7 = '\r')
        let (var_10: int64) = (var_3 + 1L)
        if var_9 then
            method_3((var_0: int64), (var_1: string), (var_4: int64), (var_10: int64))
        else
            let (var_11: bool) = (var_0 >= 0L)
            if var_11 then
                let (var_13: ((Union0 []) [])) = Array.zeroCreate<(Union0 [])> (System.Convert.ToInt32(var_0))
                let (var_14: int64) = 0L
                method_4((var_13: ((Union0 []) [])), (var_0: int64), (var_1: string), (var_14: int64), (var_11: bool), (var_3: int64))
            else
                (failwith "n in parse array must be >= 0")
    else
        let (var_15: bool) = (var_0 >= 0L)
        if var_15 then
            let (var_17: ((Union0 []) [])) = Array.zeroCreate<(Union0 [])> (System.Convert.ToInt32(var_0))
            let (var_18: int64) = 0L
            method_4((var_17: ((Union0 []) [])), (var_0: int64), (var_1: string), (var_18: int64), (var_15: bool), (var_3: int64))
        else
            (failwith "n in parse array must be >= 0")
and method_4((var_0: ((Union0 []) [])), (var_1: int64), (var_2: string), (var_3: int64), (var_4: bool), (var_5: int64)): unit =
    let (var_6: bool) = (var_3 < var_1)
    if var_6 then
        let (var_7: int64) = (var_3 + 1L)
        if var_4 then
            let (var_8: (Union0 [])) = Array.zeroCreate<Union0> (System.Convert.ToInt32(var_1))
            let (var_9: int64) = 0L
            method_5((var_8: (Union0 [])), (var_0: ((Union0 []) [])), (var_3: int64), (var_7: int64), (var_1: int64), (var_4: bool), (var_2: string), (var_9: int64), (var_5: int64))
        else
            (failwith "n in parse array must be >= 0")
    else
        let (var_10: int64) = 0L
        let (var_11: Env1) = method_7((var_0: ((Union0 []) [])), (var_1: int64), (var_10: int64))
        let (var_12: Union2) = var_11.mem_0
        let (var_13: Union2) = var_11.mem_1
        match var_12 with
        | Union2Case0(var_14) ->
            let (var_15: Tuple3) = var_14.mem_0
            let (var_16: Tuple4) = var_15.mem_0
            let (var_17: int64) = var_16.mem_0
            let (var_18: int64) = var_16.mem_1
            match var_13 with
            | Union2Case0(var_19) ->
                let (var_20: Tuple3) = var_19.mem_0
                let (var_21: Tuple4) = var_20.mem_0
                let (var_22: int64) = var_21.mem_0
                let (var_23: int64) = var_21.mem_1
                let (var_24: int64) =
                    if (0L > var_1) then
                        0L
                    else
                        var_1
                let (var_25: int64) =
                    if (0L > var_1) then
                        0L
                    else
                        var_1
                let (var_26: int64) = (var_25 * var_24)
                let (var_27: (bool [])) = Array.zeroCreate<bool> (System.Convert.ToInt32(var_26))
                let (var_28: int64) = 0L
                method_15((var_27: (bool [])), (var_24: int64), (var_1: int64), (var_28: int64))
                let (var_29: bool) =
                    if (var_17 >= 0L) then
                        (var_17 < var_1)
                    else
                        false
                if (var_29 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_30: int64) = (var_17 * var_24)
                let (var_31: bool) =
                    if (var_18 >= 0L) then
                        (var_18 < var_1)
                    else
                        false
                if (var_31 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_32: int64) = (var_30 + var_18)
                var_27.[int32 var_32] <- true
                let (var_33: string) = "UP"
                let (var_34: string) = "DOWN"
                let (var_35: string) = "LEFT"
                let (var_36: string) = "RIGHT"
                let (var_37: (Tuple5 [])) = Array.zeroCreate<Tuple5> (System.Convert.ToInt32(1L))
                var_37.[int32 0L] <- Tuple5(Tuple4(var_17, var_18), Rec6Case0)
                let (var_38: (Union7 ref)) = (ref Union7Case1)
                method_18((var_27: (bool [])), (var_24: int64), (var_1: int64), (var_23: int64), (var_22: int64), (var_33: string), (var_34: string), (var_35: string), (var_36: string), (var_38: (Union7 ref)), (var_37: (Tuple5 [])))
            | Union2Case1 ->
                (failwith "Current position not found.")
        | Union2Case1 ->
            (failwith "Current position not found.")
and method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: bool) = (var_7 < var_4)
    if var_9 then
        let (var_10: int64) = (var_7 + 1L)
        let (var_12: bool) =
            if (var_8 >= 0L) then
                let (var_11: int64) = (int64 var_6.Length)
                (var_8 < var_11)
            else
                false
        if var_12 then
            let (var_13: char) = var_6.[int32 var_8]
            let (var_14: bool) = ('-' = var_13)
            let (var_15: int64) = (var_8 + 1L)
            if var_14 then
                var_0.[int32 var_7] <- Union0Case0
                method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
            else
                let (var_17: bool) =
                    if (var_8 >= 0L) then
                        let (var_16: int64) = (int64 var_6.Length)
                        (var_8 < var_16)
                    else
                        false
                if var_17 then
                    let (var_18: bool) = ('p' = var_13)
                    if var_18 then
                        var_0.[int32 var_7] <- Union0Case2
                        method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
                    else
                        let (var_20: bool) =
                            if (var_8 >= 0L) then
                                let (var_19: int64) = (int64 var_6.Length)
                                (var_8 < var_19)
                            else
                                false
                        if var_20 then
                            let (var_21: bool) = ('m' = var_13)
                            if var_21 then
                                var_0.[int32 var_7] <- Union0Case1
                                method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
                            else
                                (failwith "char")
                        else
                            (failwith "string index out of bounds")
                else
                    let (var_23: bool) =
                        if (var_8 >= 0L) then
                            let (var_22: int64) = (int64 var_6.Length)
                            (var_8 < var_22)
                        else
                            false
                    if var_23 then
                        let (var_24: bool) = ('m' = var_13)
                        if var_24 then
                            var_0.[int32 var_7] <- Union0Case1
                            method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_15: int64))
                        else
                            (failwith "char")
                    else
                        (failwith "string index out of bounds")
        else
            let (var_26: bool) =
                if (var_8 >= 0L) then
                    let (var_25: int64) = (int64 var_6.Length)
                    (var_8 < var_25)
                else
                    false
            if var_26 then
                let (var_27: char) = var_6.[int32 var_8]
                let (var_28: bool) = ('p' = var_27)
                let (var_29: int64) = (var_8 + 1L)
                if var_28 then
                    var_0.[int32 var_7] <- Union0Case2
                    method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_29: int64))
                else
                    let (var_31: bool) =
                        if (var_8 >= 0L) then
                            let (var_30: int64) = (int64 var_6.Length)
                            (var_8 < var_30)
                        else
                            false
                    if var_31 then
                        let (var_32: bool) = ('m' = var_27)
                        if var_32 then
                            var_0.[int32 var_7] <- Union0Case1
                            method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_29: int64))
                        else
                            (failwith "char")
                    else
                        (failwith "string index out of bounds")
            else
                let (var_34: bool) =
                    if (var_8 >= 0L) then
                        let (var_33: int64) = (int64 var_6.Length)
                        (var_8 < var_33)
                    else
                        false
                if var_34 then
                    let (var_35: char) = var_6.[int32 var_8]
                    let (var_36: bool) = ('m' = var_35)
                    let (var_37: int64) = (var_8 + 1L)
                    if var_36 then
                        var_0.[int32 var_7] <- Union0Case1
                        method_5((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_10: int64), (var_37: int64))
                    else
                        (failwith "char")
                else
                    (failwith "string index out of bounds")
    else
        let (var_38: int64) = 0L
        method_6((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_38: int64), (var_8: int64))
and method_7((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64)): Env1 =
    if (var_2 < var_1) then
        let (var_3: int64) = 0L
        method_8((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_3: int64))
    else
        (Env1(Union2Case1, Union2Case1))
and method_15((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    if (var_3 < var_2) then
        let (var_4: bool) =
            if (var_3 >= 0L) then
                (var_3 < var_2)
            else
                false
        if (var_4 = false) then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_3 * var_1)
        let (var_6: int64) = 0L
        method_16((var_0: (bool [])), (var_5: int64), (var_2: int64), (var_6: int64))
        let (var_7: int64) = (var_3 + 1L)
        method_15((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_7: int64))
    else
        ()
and method_18((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: string), (var_6: string), (var_7: string), (var_8: string), (var_9: (Union7 ref)), (var_10: (Tuple5 []))): unit =
    let (var_11: int64) = var_10.LongLength
    let (var_12: bool) = (var_11 >= 0L)
    if (var_12 = false) then
        (failwith "The input to init needs to be greater or equal to 0.")
    else
        ()
    let (var_94: ((Tuple5 []) [])) = Array.zeroCreate<(Tuple5 [])> (System.Convert.ToInt32(var_11))
    let (var_95: int64) = 0L
    method_19((var_94: ((Tuple5 []) [])), (var_10: (Tuple5 [])), (var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: string), (var_6: string), (var_7: string), (var_8: string), (var_9: (Union7 ref)), (var_11: int64), (var_95: int64))
    let (var_96: int64) = 0L
    let (var_97: int64) = var_94.LongLength
    let (var_98: int64) = 0L
    let (var_99: int64) = method_20((var_94: ((Tuple5 []) [])), (var_97: int64), (var_98: int64), (var_96: int64))
    let (var_100: (Tuple5 [])) = Array.zeroCreate<Tuple5> (System.Convert.ToInt32(var_99))
    let (var_101: int64) = 0L
    let (var_102: int64) = var_94.LongLength
    let (var_103: int64) = 0L
    let (var_104: int64) = method_21((var_94: ((Tuple5 []) [])), (var_100: (Tuple5 [])), (var_102: int64), (var_103: int64), (var_101: int64))
    let (var_105: Union7) = (!var_9)
    match var_105 with
    | Union7Case0(var_106) ->
        let (var_107: Tuple11) = var_106.mem_0
        let (var_108: Tuple5) = var_107.mem_0
        let (var_109: Tuple4) = var_108.mem_0
        let (var_110: Rec6) = var_108.mem_1
        method_23((var_110: Rec6))
    | Union7Case1 ->
        method_18((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: string), (var_6: string), (var_7: string), (var_8: string), (var_9: (Union7 ref)), (var_100: (Tuple5 [])))
and method_6((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_7 + 1L)
    let (var_11: bool) =
        if (var_8 >= 0L) then
            let (var_10: int64) = (int64 var_6.Length)
            (var_8 < var_10)
        else
            false
    if var_11 then
        let (var_12: char) = var_6.[int32 var_8]
        let (var_14: bool) =
            if (var_12 = ' ') then
                true
            else
                if (var_12 = '\n') then
                    true
                else
                    (var_12 = '\r')
        let (var_15: int64) = (var_8 + 1L)
        if var_14 then
            method_6((var_0: (Union0 [])), (var_1: ((Union0 []) [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: bool), (var_6: string), (var_9: int64), (var_15: int64))
        else
            var_1.[int32 var_2] <- var_0
            method_4((var_1: ((Union0 []) [])), (var_4: int64), (var_6: string), (var_3: int64), (var_5: bool), (var_8: int64))
    else
        var_1.[int32 var_2] <- var_0
        method_4((var_1: ((Union0 []) [])), (var_4: int64), (var_6: string), (var_3: int64), (var_5: bool), (var_8: int64))
and method_8((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64)): Env1 =
    if (var_3 < var_2) then
        let (var_4: (Union0 [])) = var_0.[int32 var_1]
        let (var_5: Union0) = var_4.[int32 var_3]
        match var_5 with
        | Union0Case0 ->
            let (var_6: int64) = (var_3 + 1L)
            method_8((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_6: int64))
        | Union0Case1 ->
            let (var_8: int64) = (var_3 + 1L)
            method_9((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_3: int64))
        | Union0Case2 ->
            let (var_10: int64) = (var_3 + 1L)
            method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_10: int64), (var_3: int64))
    else
        let (var_13: int64) = (var_1 + 1L)
        method_7((var_0: ((Union0 []) [])), (var_2: int64), (var_13: int64))
and method_16((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    if (var_3 < var_2) then
        let (var_4: bool) =
            if (var_3 >= 0L) then
                (var_3 < var_2)
            else
                false
        if (var_4 = false) then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 + var_3)
        var_0.[int32 var_5] <- false
        let (var_6: int64) = (var_3 + 1L)
        method_16((var_0: (bool [])), (var_1: int64), (var_2: int64), (var_6: int64))
    else
        ()
and method_19((var_0: ((Tuple5 []) [])), (var_1: (Tuple5 [])), (var_2: (bool [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: string), (var_8: string), (var_9: string), (var_10: string), (var_11: (Union7 ref)), (var_12: int64), (var_13: int64)): unit =
    if (var_13 < var_12) then
        let (var_14: Tuple5) = var_1.[int32 var_13]
        let (var_15: Tuple4) = var_14.mem_0
        let (var_16: Rec6) = var_14.mem_1
        let (var_17: int64) = var_15.mem_0
        let (var_18: int64) = var_15.mem_1
        let (var_19: int64) = (var_17 - 1L)
        let (var_20: bool) =
            if (var_19 >= 0L) then
                (var_19 < var_4)
            else
                false
        let (var_22: bool) =
            if var_20 then
                if (var_18 >= 0L) then
                    (var_18 < var_4)
                else
                    false
            else
                false
        let (var_28: bool) =
            if var_22 then
                let (var_23: bool) =
                    if (var_19 >= 0L) then
                        (var_19 < var_4)
                    else
                        false
                if (var_23 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_24: int64) = (var_19 * var_3)
                let (var_25: bool) =
                    if (var_18 >= 0L) then
                        (var_18 < var_4)
                    else
                        false
                if (var_25 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_26: int64) = (var_24 + var_18)
                let (var_27: bool) = var_2.[int32 var_26]
                (var_27 = false)
            else
                false
        let (var_34: bool) =
            if var_28 then
                let (var_29: bool) =
                    if (var_19 = var_6) then
                        (var_18 = var_5)
                    else
                        false
                if var_29 then
                    var_11 := (Union7Case0(Tuple10(Tuple11(Tuple5(Tuple4(var_19, var_18), (Rec6Case1(Tuple9(var_7, var_16))))))))
                else
                    ()
                let (var_30: bool) =
                    if (var_19 >= 0L) then
                        (var_19 < var_4)
                    else
                        false
                if (var_30 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_31: int64) = (var_19 * var_3)
                let (var_32: bool) =
                    if (var_18 >= 0L) then
                        (var_18 < var_4)
                    else
                        false
                if (var_32 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_33: int64) = (var_31 + var_18)
                var_2.[int32 var_33] <- true
                true
            else
                false
        let (var_35: int64) = (var_17 + 1L)
        let (var_36: bool) =
            if (var_35 >= 0L) then
                (var_35 < var_4)
            else
                false
        let (var_38: bool) =
            if var_36 then
                if (var_18 >= 0L) then
                    (var_18 < var_4)
                else
                    false
            else
                false
        let (var_44: bool) =
            if var_38 then
                let (var_39: bool) =
                    if (var_35 >= 0L) then
                        (var_35 < var_4)
                    else
                        false
                if (var_39 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_40: int64) = (var_35 * var_3)
                let (var_41: bool) =
                    if (var_18 >= 0L) then
                        (var_18 < var_4)
                    else
                        false
                if (var_41 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_42: int64) = (var_40 + var_18)
                let (var_43: bool) = var_2.[int32 var_42]
                (var_43 = false)
            else
                false
        let (var_50: bool) =
            if var_44 then
                let (var_45: bool) =
                    if (var_35 = var_6) then
                        (var_18 = var_5)
                    else
                        false
                if var_45 then
                    var_11 := (Union7Case0(Tuple10(Tuple11(Tuple5(Tuple4(var_35, var_18), (Rec6Case1(Tuple9(var_8, var_16))))))))
                else
                    ()
                let (var_46: bool) =
                    if (var_35 >= 0L) then
                        (var_35 < var_4)
                    else
                        false
                if (var_46 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_47: int64) = (var_35 * var_3)
                let (var_48: bool) =
                    if (var_18 >= 0L) then
                        (var_18 < var_4)
                    else
                        false
                if (var_48 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_49: int64) = (var_47 + var_18)
                var_2.[int32 var_49] <- true
                true
            else
                false
        let (var_51: int64) = (var_18 - 1L)
        let (var_52: bool) =
            if (var_17 >= 0L) then
                (var_17 < var_4)
            else
                false
        let (var_54: bool) =
            if var_52 then
                if (var_51 >= 0L) then
                    (var_51 < var_4)
                else
                    false
            else
                false
        let (var_60: bool) =
            if var_54 then
                let (var_55: bool) =
                    if (var_17 >= 0L) then
                        (var_17 < var_4)
                    else
                        false
                if (var_55 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_56: int64) = (var_17 * var_3)
                let (var_57: bool) =
                    if (var_51 >= 0L) then
                        (var_51 < var_4)
                    else
                        false
                if (var_57 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_58: int64) = (var_56 + var_51)
                let (var_59: bool) = var_2.[int32 var_58]
                (var_59 = false)
            else
                false
        let (var_66: bool) =
            if var_60 then
                let (var_61: bool) =
                    if (var_17 = var_6) then
                        (var_51 = var_5)
                    else
                        false
                if var_61 then
                    var_11 := (Union7Case0(Tuple10(Tuple11(Tuple5(Tuple4(var_17, var_51), (Rec6Case1(Tuple9(var_9, var_16))))))))
                else
                    ()
                let (var_62: bool) =
                    if (var_17 >= 0L) then
                        (var_17 < var_4)
                    else
                        false
                if (var_62 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_63: int64) = (var_17 * var_3)
                let (var_64: bool) =
                    if (var_51 >= 0L) then
                        (var_51 < var_4)
                    else
                        false
                if (var_64 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_65: int64) = (var_63 + var_51)
                var_2.[int32 var_65] <- true
                true
            else
                false
        let (var_67: int64) = (var_18 + 1L)
        let (var_68: bool) =
            if (var_17 >= 0L) then
                (var_17 < var_4)
            else
                false
        let (var_70: bool) =
            if var_68 then
                if (var_67 >= 0L) then
                    (var_67 < var_4)
                else
                    false
            else
                false
        let (var_76: bool) =
            if var_70 then
                let (var_71: bool) =
                    if (var_17 >= 0L) then
                        (var_17 < var_4)
                    else
                        false
                if (var_71 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_72: int64) = (var_17 * var_3)
                let (var_73: bool) =
                    if (var_67 >= 0L) then
                        (var_67 < var_4)
                    else
                        false
                if (var_73 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_74: int64) = (var_72 + var_67)
                let (var_75: bool) = var_2.[int32 var_74]
                (var_75 = false)
            else
                false
        let (var_82: bool) =
            if var_76 then
                let (var_77: bool) =
                    if (var_17 = var_6) then
                        (var_67 = var_5)
                    else
                        false
                if var_77 then
                    var_11 := (Union7Case0(Tuple10(Tuple11(Tuple5(Tuple4(var_17, var_67), (Rec6Case1(Tuple9(var_10, var_16))))))))
                else
                    ()
                let (var_78: bool) =
                    if (var_17 >= 0L) then
                        (var_17 < var_4)
                    else
                        false
                if (var_78 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_79: int64) = (var_17 * var_3)
                let (var_80: bool) =
                    if (var_67 >= 0L) then
                        (var_67 < var_4)
                    else
                        false
                if (var_80 = false) then
                    (failwith "Argument out of bounds.")
                else
                    ()
                let (var_81: int64) = (var_79 + var_67)
                var_2.[int32 var_81] <- true
                true
            else
                false
        let (var_83: int64) =
            if var_34 then
                1L
            else
                0L
        let (var_84: int64) =
            if var_50 then
                1L
            else
                0L
        let (var_85: int64) = (var_83 + var_84)
        let (var_86: int64) =
            if var_66 then
                1L
            else
                0L
        let (var_87: int64) = (var_85 + var_86)
        let (var_88: int64) =
            if var_82 then
                1L
            else
                0L
        let (var_89: int64) = (var_87 + var_88)
        let (var_90: (Tuple5 [])) = Array.zeroCreate<Tuple5> (System.Convert.ToInt32(var_89))
        let (var_91: int64) =
            if var_34 then
                var_90.[int32 0L] <- Tuple5(Tuple4(var_19, var_18), (Rec6Case1(Tuple9(var_7, var_16))))
                1L
            else
                0L
        let (var_92: int64) =
            if var_50 then
                var_90.[int32 var_91] <- Tuple5(Tuple4(var_35, var_18), (Rec6Case1(Tuple9(var_8, var_16))))
                (var_91 + 1L)
            else
                var_91
        let (var_93: int64) =
            if var_66 then
                var_90.[int32 var_92] <- Tuple5(Tuple4(var_17, var_51), (Rec6Case1(Tuple9(var_9, var_16))))
                (var_92 + 1L)
            else
                var_92
        let (var_94: int64) =
            if var_82 then
                var_90.[int32 var_93] <- Tuple5(Tuple4(var_17, var_67), (Rec6Case1(Tuple9(var_10, var_16))))
                (var_93 + 1L)
            else
                var_93
        var_0.[int32 var_13] <- var_90
        let (var_95: int64) = (var_13 + 1L)
        method_19((var_0: ((Tuple5 []) [])), (var_1: (Tuple5 [])), (var_2: (bool [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: string), (var_8: string), (var_9: string), (var_10: string), (var_11: (Union7 ref)), (var_12: int64), (var_95: int64))
    else
        ()
and method_20((var_0: ((Tuple5 []) [])), (var_1: int64), (var_2: int64), (var_3: int64)): int64 =
    if (var_2 < var_1) then
        let (var_4: (Tuple5 [])) = var_0.[int32 var_2]
        let (var_5: int64) = var_4.LongLength
        let (var_6: int64) = (var_3 + var_5)
        let (var_7: int64) = (var_2 + 1L)
        method_20((var_0: ((Tuple5 []) [])), (var_1: int64), (var_7: int64), (var_6: int64))
    else
        var_3
and method_21((var_0: ((Tuple5 []) [])), (var_1: (Tuple5 [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    if (var_3 < var_2) then
        let (var_5: (Tuple5 [])) = var_0.[int32 var_3]
        let (var_6: int64) = var_5.LongLength
        let (var_7: int64) = 0L
        let (var_8: int64) = method_22((var_5: (Tuple5 [])), (var_1: (Tuple5 [])), (var_6: int64), (var_7: int64), (var_4: int64))
        let (var_9: int64) = (var_3 + 1L)
        method_21((var_0: ((Tuple5 []) [])), (var_1: (Tuple5 [])), (var_2: int64), (var_9: int64), (var_8: int64))
    else
        var_4
and method_23((var_0: Rec6)): unit =
    match var_0 with
    | Rec6Case0 ->
        ()
    | Rec6Case1(var_1) ->
        let (var_2: string) = var_1.mem_0
        let (var_3: Rec6) = var_1.mem_1
        method_23((var_3: Rec6))
        System.Console.WriteLine(var_2)
and method_9((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): Env1 =
    if (var_3 < var_2) then
        let (var_5: (Union0 [])) = var_0.[int32 var_1]
        let (var_6: Union0) = var_5.[int32 var_3]
        match var_6 with
        | Union0Case0 ->
            let (var_7: int64) = (var_3 + 1L)
            method_9((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_7: int64), (var_4: int64))
        | Union0Case1 ->
            let (var_9: int64) = (var_3 + 1L)
            method_9((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_9: int64), (var_3: int64))
        | Union0Case2 ->
            (Env1((Union2Case0(Tuple8(Tuple3(Tuple4(var_1, var_4))))), (Union2Case0(Tuple8(Tuple3(Tuple4(var_1, var_3)))))))
    else
        let (var_12: int64) = (var_1 + 1L)
        method_10((var_0: ((Union0 []) [])), (var_2: int64), (var_12: int64), (var_1: int64), (var_4: int64))
and method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): Env1 =
    if (var_3 < var_2) then
        let (var_5: (Union0 [])) = var_0.[int32 var_1]
        let (var_6: Union0) = var_5.[int32 var_3]
        match var_6 with
        | Union0Case0 ->
            let (var_7: int64) = (var_3 + 1L)
            method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_7: int64), (var_4: int64))
        | Union0Case1 ->
            (Env1((Union2Case0(Tuple8(Tuple3(Tuple4(var_1, var_3))))), (Union2Case0(Tuple8(Tuple3(Tuple4(var_1, var_4)))))))
        | Union0Case2 ->
            let (var_9: int64) = (var_3 + 1L)
            method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_9: int64), (var_3: int64))
    else
        let (var_12: int64) = (var_1 + 1L)
        method_13((var_0: ((Union0 []) [])), (var_2: int64), (var_12: int64), (var_1: int64), (var_4: int64))
and method_22((var_0: (Tuple5 [])), (var_1: (Tuple5 [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    if (var_3 < var_2) then
        let (var_5: Tuple5) = var_0.[int32 var_3]
        let (var_6: Tuple4) = var_5.mem_0
        let (var_7: Rec6) = var_5.mem_1
        var_1.[int32 var_4] <- Tuple5(var_6, var_7)
        let (var_8: int64) = (var_4 + 1L)
        let (var_9: int64) = (var_3 + 1L)
        method_22((var_0: (Tuple5 [])), (var_1: (Tuple5 [])), (var_2: int64), (var_9: int64), (var_8: int64))
    else
        var_4
and method_10((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): Env1 =
    if (var_2 < var_1) then
        let (var_5: int64) = 0L
        method_11((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_5: int64), (var_3: int64), (var_4: int64))
    else
        (Env1((Union2Case0(Tuple8(Tuple3(Tuple4(var_3, var_4))))), Union2Case1))
and method_13((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): Env1 =
    if (var_2 < var_1) then
        let (var_5: int64) = 0L
        method_14((var_0: ((Union0 []) [])), (var_2: int64), (var_1: int64), (var_5: int64), (var_3: int64), (var_4: int64))
    else
        (Env1(Union2Case1, (Union2Case0(Tuple8(Tuple3(Tuple4(var_3, var_4)))))))
and method_11((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): Env1 =
    if (var_3 < var_2) then
        let (var_6: (Union0 [])) = var_0.[int32 var_1]
        let (var_7: Union0) = var_6.[int32 var_3]
        match var_7 with
        | Union0Case0 ->
            let (var_8: int64) = (var_3 + 1L)
            method_11((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_4: int64), (var_5: int64))
        | Union0Case1 ->
            let (var_10: int64) = (var_3 + 1L)
            method_9((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_10: int64), (var_3: int64))
        | Union0Case2 ->
            (Env1((Union2Case0(Tuple8(Tuple3(Tuple4(var_4, var_5))))), (Union2Case0(Tuple8(Tuple3(Tuple4(var_1, var_3)))))))
    else
        let (var_13: int64) = (var_1 + 1L)
        method_10((var_0: ((Union0 []) [])), (var_2: int64), (var_13: int64), (var_4: int64), (var_5: int64))
and method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): Env1 =
    if (var_3 < var_2) then
        let (var_6: (Union0 [])) = var_0.[int32 var_1]
        let (var_7: Union0) = var_6.[int32 var_3]
        match var_7 with
        | Union0Case0 ->
            let (var_8: int64) = (var_3 + 1L)
            method_14((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_8: int64), (var_4: int64), (var_5: int64))
        | Union0Case1 ->
            (Env1((Union2Case0(Tuple8(Tuple3(Tuple4(var_1, var_3))))), (Union2Case0(Tuple8(Tuple3(Tuple4(var_4, var_5)))))))
        | Union0Case2 ->
            let (var_10: int64) = (var_3 + 1L)
            method_12((var_0: ((Union0 []) [])), (var_1: int64), (var_2: int64), (var_10: int64), (var_3: int64))
    else
        let (var_13: int64) = (var_1 + 1L)
        method_13((var_0: ((Union0 []) [])), (var_2: int64), (var_13: int64), (var_4: int64), (var_5: int64))
let (var_0: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_1: System.IO.StreamReader) = System.IO.StreamReader(var_0)
let (var_2: string) = var_1.ReadToEnd()
let (var_3: int64) = 0L
let (var_5: bool) =
    if (var_3 >= 0L) then
        let (var_4: int64) = (int64 var_2.Length)
        (var_3 < var_4)
    else
        false
if var_5 then
    let (var_6: char) = var_2.[int32 var_3]
    let (var_7: bool) = ('-' = var_6)
    let (var_8: int64) = (var_3 + 1L)
    if var_7 then
        let (var_9: bool) = false
        method_1((var_9: bool), (var_2: string), (var_8: int64))
    else
        let (var_10: bool) = true
        method_1((var_10: bool), (var_2: string), (var_3: int64))
else
    let (var_11: bool) = true
    method_1((var_11: bool), (var_2: string), (var_3: int64))

