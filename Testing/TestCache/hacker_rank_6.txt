module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: Tuple2
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Tuple2 =
    struct
    val mem_0: int64
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0((var_0: (Union0 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 15L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 0L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 * 30L)
        let (var_6: int64) = 0L
        method_1((var_0: (Union0 [])), (var_5: int64), (var_6: int64))
        let (var_7: int64) = (var_1 + 1L)
        method_0((var_0: (Union0 [])), (var_7: int64))
    else
        ()
and method_3((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_2.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_2.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            method_4((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_15: int64), (var_12: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_1((var_0: (Union0 [])), (var_1: int64), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 15L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 2L)
        let (var_7: int64) = (var_1 + var_6)
        let (var_8: int64) = 0L
        method_2((var_0: (Union0 [])), (var_7: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_1((var_0: (Union0 [])), (var_1: int64), (var_9: int64))
    else
        ()
and method_4((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_2.Length)
            (var_4 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_2.[int32 var_4]
        let (var_10: bool) = (var_9 >= '0')
        let (var_12: bool) =
            if var_10 then
                (var_9 <= '9')
            else
                false
        let (var_13: int64) = (var_4 + 1L)
        if var_12 then
            let (var_14: int64) = System.Convert.ToInt64(var_9)
            let (var_15: int64) = System.Convert.ToInt64('0')
            let (var_16: int64) = (var_14 - var_15)
            let (var_17: bool) = (var_3 = 922337203685477580L)
            let (var_19: bool) =
                if var_17 then
                    (var_16 <= 7L)
                else
                    false
            let (var_21: bool) =
                if var_19 then
                    true
                else
                    (var_3 < 922337203685477580L)
            if var_21 then
                let (var_22: int64) = (var_3 * 10L)
                let (var_23: int64) = (var_22 + var_16)
                method_4((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_23: int64), (var_13: int64))
            else
                (failwith "integer overflow")
        else
            let (var_25: int64) =
                if var_0 then
                    var_3
                else
                    (-var_3)
            let (var_26: int64) = 0L
            method_5((var_25: int64), (var_1: (Union0 [])), (var_2: string), (var_26: int64), (var_4: int64))
    else
        let (var_28: int64) =
            if var_0 then
                var_3
            else
                (-var_3)
        let (var_29: int64) = 0L
        method_5((var_28: int64), (var_1: (Union0 [])), (var_2: string), (var_29: int64), (var_4: int64))
and method_2((var_0: (Union0 [])), (var_1: int64), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 2L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_1 + var_2)
        var_0.[int32 var_6] <- Union0Case1
        let (var_7: int64) = (var_2 + 1L)
        method_2((var_0: (Union0 [])), (var_1: int64), (var_7: int64))
    else
        ()
and method_5((var_0: int64), (var_1: (Union0 [])), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_3 + 1L)
    let (var_6: bool) = (var_4 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_2.Length)
            (var_4 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_2.[int32 var_4]
        let (var_11: bool) = (var_10 = ' ')
        let (var_15: bool) =
            if var_11 then
                true
            else
                let (var_12: bool) = (var_10 = '\n')
                if var_12 then
                    true
                else
                    (var_10 = '\r')
        let (var_16: int64) = (var_4 + 1L)
        if var_15 then
            method_5((var_0: int64), (var_1: (Union0 [])), (var_2: string), (var_5: int64), (var_16: int64))
        else
            let (var_17: int64) = 0L
            method_6((var_2: string), (var_17: int64), (var_0: int64), (var_1: (Union0 [])), (var_4: int64))
    else
        let (var_18: int64) = 0L
        method_6((var_2: string), (var_18: int64), (var_0: int64), (var_1: (Union0 [])), (var_4: int64))
and method_6((var_0: string), (var_1: int64), (var_2: int64), (var_3: (Union0 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_1 < var_2)
    if var_5 then
        let (var_6: int64) = (var_1 + 1L)
        let (var_7: bool) = (var_4 >= 0L)
        let (var_10: bool) =
            if var_7 then
                let (var_8: int64) = (int64 var_0.Length)
                (var_4 < var_8)
            else
                false
        if var_10 then
            let (var_11: char) = var_0.[int32 var_4]
            let (var_12: bool) = ('-' = var_11)
            let (var_13: int64) = (var_4 + 1L)
            if var_12 then
                let (var_14: bool) = false
                method_7((var_14: bool), (var_3: (Union0 [])), (var_6: int64), (var_2: int64), (var_0: string), (var_13: int64))
            else
                let (var_15: bool) = true
                method_7((var_15: bool), (var_3: (Union0 [])), (var_6: int64), (var_2: int64), (var_0: string), (var_4: int64))
        else
            let (var_16: bool) = true
            method_7((var_16: bool), (var_3: (Union0 [])), (var_6: int64), (var_2: int64), (var_0: string), (var_4: int64))
    else
        ()
and method_7((var_0: bool), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64)): unit =
    let (var_6: bool) = (var_5 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_4.Length)
            (var_5 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_4.[int32 var_5]
        let (var_11: bool) = (var_10 >= '0')
        let (var_13: bool) =
            if var_11 then
                (var_10 <= '9')
            else
                false
        let (var_14: int64) = (var_5 + 1L)
        if var_13 then
            let (var_15: int64) = System.Convert.ToInt64(var_10)
            let (var_16: int64) = System.Convert.ToInt64('0')
            let (var_17: int64) = (var_15 - var_16)
            method_8((var_0: bool), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_17: int64), (var_14: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_8((var_0: bool), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64), (var_6: int64)): unit =
    let (var_7: bool) = (var_6 >= 0L)
    let (var_10: bool) =
        if var_7 then
            let (var_8: int64) = (int64 var_4.Length)
            (var_6 < var_8)
        else
            false
    if var_10 then
        let (var_11: char) = var_4.[int32 var_6]
        let (var_12: bool) = (var_11 >= '0')
        let (var_14: bool) =
            if var_12 then
                (var_11 <= '9')
            else
                false
        let (var_15: int64) = (var_6 + 1L)
        if var_14 then
            let (var_16: int64) = System.Convert.ToInt64(var_11)
            let (var_17: int64) = System.Convert.ToInt64('0')
            let (var_18: int64) = (var_16 - var_17)
            let (var_19: bool) = (var_5 = 922337203685477580L)
            let (var_21: bool) =
                if var_19 then
                    (var_18 <= 7L)
                else
                    false
            let (var_23: bool) =
                if var_21 then
                    true
                else
                    (var_5 < 922337203685477580L)
            if var_23 then
                let (var_24: int64) = (var_5 * 10L)
                let (var_25: int64) = (var_24 + var_18)
                method_8((var_0: bool), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_25: int64), (var_15: int64))
            else
                (failwith "integer overflow")
        else
            let (var_27: int64) =
                if var_0 then
                    var_5
                else
                    (-var_5)
            let (var_28: int64) = 0L
            method_9((var_27: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_28: int64), (var_6: int64))
    else
        let (var_30: int64) =
            if var_0 then
                var_5
            else
                (-var_5)
        let (var_31: int64) = 0L
        method_9((var_30: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_31: int64), (var_6: int64))
and method_9((var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64), (var_6: int64)): unit =
    let (var_7: int64) = (var_5 + 1L)
    let (var_8: bool) = (var_6 >= 0L)
    let (var_11: bool) =
        if var_8 then
            let (var_9: int64) = (int64 var_4.Length)
            (var_6 < var_9)
        else
            false
    if var_11 then
        let (var_12: char) = var_4.[int32 var_6]
        let (var_13: bool) = (var_12 = ' ')
        let (var_17: bool) =
            if var_13 then
                true
            else
                let (var_14: bool) = (var_12 = '\n')
                if var_14 then
                    true
                else
                    (var_12 = '\r')
        let (var_18: int64) = (var_6 + 1L)
        if var_17 then
            method_9((var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_7: int64), (var_18: int64))
        else
            let (var_21: bool) =
                if var_8 then
                    let (var_19: int64) = (int64 var_4.Length)
                    (var_6 < var_19)
                else
                    false
            if var_21 then
                let (var_22: bool) = ('-' = var_12)
                if var_22 then
                    let (var_23: bool) = false
                    method_10((var_23: bool), (var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_18: int64))
                else
                    let (var_24: bool) = true
                    method_10((var_24: bool), (var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_6: int64))
            else
                let (var_25: bool) = true
                method_10((var_25: bool), (var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_6: int64))
    else
        let (var_28: bool) =
            if var_8 then
                let (var_26: int64) = (int64 var_4.Length)
                (var_6 < var_26)
            else
                false
        if var_28 then
            let (var_29: char) = var_4.[int32 var_6]
            let (var_30: bool) = ('-' = var_29)
            let (var_31: int64) = (var_6 + 1L)
            if var_30 then
                let (var_32: bool) = false
                method_10((var_32: bool), (var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_31: int64))
            else
                let (var_33: bool) = true
                method_10((var_33: bool), (var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_6: int64))
        else
            let (var_34: bool) = true
            method_10((var_34: bool), (var_0: int64), (var_1: (Union0 [])), (var_2: int64), (var_3: int64), (var_4: string), (var_6: int64))
and method_10((var_0: bool), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64)): unit =
    let (var_7: bool) = (var_6 >= 0L)
    let (var_10: bool) =
        if var_7 then
            let (var_8: int64) = (int64 var_5.Length)
            (var_6 < var_8)
        else
            false
    if var_10 then
        let (var_11: char) = var_5.[int32 var_6]
        let (var_12: bool) = (var_11 >= '0')
        let (var_14: bool) =
            if var_12 then
                (var_11 <= '9')
            else
                false
        let (var_15: int64) = (var_6 + 1L)
        if var_14 then
            let (var_16: int64) = System.Convert.ToInt64(var_11)
            let (var_17: int64) = System.Convert.ToInt64('0')
            let (var_18: int64) = (var_16 - var_17)
            method_11((var_0: bool), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_18: int64), (var_15: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_11((var_0: bool), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64), (var_7: int64)): unit =
    let (var_8: bool) = (var_7 >= 0L)
    let (var_11: bool) =
        if var_8 then
            let (var_9: int64) = (int64 var_5.Length)
            (var_7 < var_9)
        else
            false
    if var_11 then
        let (var_12: char) = var_5.[int32 var_7]
        let (var_13: bool) = (var_12 >= '0')
        let (var_15: bool) =
            if var_13 then
                (var_12 <= '9')
            else
                false
        let (var_16: int64) = (var_7 + 1L)
        if var_15 then
            let (var_17: int64) = System.Convert.ToInt64(var_12)
            let (var_18: int64) = System.Convert.ToInt64('0')
            let (var_19: int64) = (var_17 - var_18)
            let (var_20: bool) = (var_6 = 922337203685477580L)
            let (var_22: bool) =
                if var_20 then
                    (var_19 <= 7L)
                else
                    false
            let (var_24: bool) =
                if var_22 then
                    true
                else
                    (var_6 < 922337203685477580L)
            if var_24 then
                let (var_25: int64) = (var_6 * 10L)
                let (var_26: int64) = (var_25 + var_19)
                method_11((var_0: bool), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_26: int64), (var_16: int64))
            else
                (failwith "integer overflow")
        else
            let (var_28: int64) =
                if var_0 then
                    var_6
                else
                    (-var_6)
            let (var_29: int64) = 0L
            method_12((var_28: int64), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_29: int64), (var_7: int64))
    else
        let (var_31: int64) =
            if var_0 then
                var_6
            else
                (-var_6)
        let (var_32: int64) = 0L
        method_12((var_31: int64), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_32: int64), (var_7: int64))
and method_12((var_0: int64), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64), (var_7: int64)): unit =
    let (var_8: int64) = (var_6 + 1L)
    let (var_9: bool) = (var_7 >= 0L)
    let (var_12: bool) =
        if var_9 then
            let (var_10: int64) = (int64 var_5.Length)
            (var_7 < var_10)
        else
            false
    if var_12 then
        let (var_13: char) = var_5.[int32 var_7]
        let (var_14: bool) = (var_13 = ' ')
        let (var_18: bool) =
            if var_14 then
                true
            else
                let (var_15: bool) = (var_13 = '\n')
                if var_15 then
                    true
                else
                    (var_13 = '\r')
        let (var_19: int64) = (var_7 + 1L)
        if var_18 then
            method_12((var_0: int64), (var_1: int64), (var_2: (Union0 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_8: int64), (var_19: int64))
        else
            let (var_20: int64) = 0L
            let (var_21: int64) = 1L
            let (var_22: int64) = method_13((var_2: (Union0 [])), (var_1: int64), (var_0: int64), (var_20: int64), (var_21: int64))
            let (var_23: bool) = (var_22 = 0L)
            if var_23 then
                System.Console.WriteLine("First")
            else
                System.Console.WriteLine("Second")
            method_6((var_5: string), (var_3: int64), (var_4: int64), (var_2: (Union0 [])), (var_7: int64))
    else
        let (var_24: int64) = 0L
        let (var_25: int64) = 1L
        let (var_26: int64) = method_13((var_2: (Union0 [])), (var_1: int64), (var_0: int64), (var_24: int64), (var_25: int64))
        let (var_27: bool) = (var_26 = 0L)
        if var_27 then
            System.Console.WriteLine("First")
        else
            System.Console.WriteLine("Second")
        method_6((var_5: string), (var_3: int64), (var_4: int64), (var_2: (Union0 [])), (var_7: int64))
and method_13((var_0: (Union0 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    let (var_5: int64) = (var_1 - 2L)
    let (var_6: int64) = (var_2 + 1L)
    let (var_7: int64) = (var_2 - 1L)
    let (var_8: int64) = (var_1 + 1L)
    let (var_9: int64) = (var_2 - 2L)
    let (var_10: int64) = (var_1 - 1L)
    let (var_11: bool) = (var_10 >= 0L)
    let (var_13: bool) =
        if var_11 then
            (var_10 < 15L)
        else
            false
    let (var_14: bool) = (var_13 = false)
    if var_14 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_15: int64) = (var_10 * 30L)
    let (var_16: bool) = (var_7 >= 0L)
    let (var_18: bool) =
        if var_16 then
            (var_7 < 15L)
        else
            false
    let (var_19: bool) = (var_18 = false)
    if var_19 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_20: int64) = (var_7 * 2L)
    let (var_21: int64) = (var_15 + var_20)
    let (var_22: bool) = (var_3 >= 0L)
    let (var_24: bool) =
        if var_22 then
            (var_3 < 2L)
        else
            false
    let (var_25: bool) = (var_24 = false)
    if var_25 then
        (failwith "Argument out of bounds.")
    else
        ()
    let (var_26: int64) = (var_21 + var_3)
    let (var_27: Union0) = var_0.[int32 var_26]
    match var_27 with
    | Union0Case0(var_28) ->
        let (var_29: Tuple2) = var_28.mem_0
        var_29.mem_0
    | Union0Case1 ->
        let (var_31: bool) = (var_5 >= 1L)
        let (var_33: bool) =
            if var_31 then
                (var_5 <= 15L)
            else
                false
        let (var_40: bool) =
            if var_33 then
                let (var_34: bool) = (var_6 >= 1L)
                let (var_36: bool) =
                    if var_34 then
                        (var_6 <= 15L)
                    else
                        false
                if var_36 then
                    let (var_37: int64) = method_13((var_0: (Union0 [])), (var_5: int64), (var_6: int64), (var_4: int64), (var_3: int64))
                    (var_37 = var_3)
                else
                    false
            else
                false
        let (var_73: int64) =
            if var_40 then
                var_3
            else
                let (var_42: bool) =
                    if var_31 then
                        (var_5 <= 15L)
                    else
                        false
                let (var_49: bool) =
                    if var_42 then
                        let (var_43: bool) = (var_7 >= 1L)
                        let (var_45: bool) =
                            if var_43 then
                                (var_7 <= 15L)
                            else
                                false
                        if var_45 then
                            let (var_46: int64) = method_13((var_0: (Union0 [])), (var_5: int64), (var_7: int64), (var_4: int64), (var_3: int64))
                            (var_46 = var_3)
                        else
                            false
                    else
                        false
                if var_49 then
                    var_3
                else
                    let (var_50: bool) = (var_8 >= 1L)
                    let (var_52: bool) =
                        if var_50 then
                            (var_8 <= 15L)
                        else
                            false
                    let (var_59: bool) =
                        if var_52 then
                            let (var_53: bool) = (var_9 >= 1L)
                            let (var_55: bool) =
                                if var_53 then
                                    (var_9 <= 15L)
                                else
                                    false
                            if var_55 then
                                let (var_56: int64) = method_13((var_0: (Union0 [])), (var_8: int64), (var_9: int64), (var_4: int64), (var_3: int64))
                                (var_56 = var_3)
                            else
                                false
                        else
                            false
                    if var_59 then
                        var_3
                    else
                        let (var_60: bool) = (var_10 >= 1L)
                        let (var_62: bool) =
                            if var_60 then
                                (var_10 <= 15L)
                            else
                                false
                        let (var_69: bool) =
                            if var_62 then
                                let (var_63: bool) = (var_9 >= 1L)
                                let (var_65: bool) =
                                    if var_63 then
                                        (var_9 <= 15L)
                                    else
                                        false
                                if var_65 then
                                    let (var_66: int64) = method_13((var_0: (Union0 [])), (var_10: int64), (var_9: int64), (var_4: int64), (var_3: int64))
                                    (var_66 = var_3)
                                else
                                    false
                            else
                                false
                        if var_69 then
                            var_3
                        else
                            var_4
        let (var_75: bool) =
            if var_11 then
                (var_10 < 15L)
            else
                false
        let (var_76: bool) = (var_75 = false)
        if var_76 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_78: bool) =
            if var_16 then
                (var_7 < 15L)
            else
                false
        let (var_79: bool) = (var_78 = false)
        if var_79 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_81: bool) =
            if var_22 then
                (var_3 < 2L)
            else
                false
        let (var_82: bool) = (var_81 = false)
        if var_82 then
            (failwith "Argument out of bounds.")
        else
            ()
        var_0.[int32 var_26] <- (Union0Case0(Tuple1(Tuple2(var_73))))
        var_73
let (var_0: (Union0 [])) = Array.zeroCreate<Union0> (System.Convert.ToInt32(450L))
let (var_1: int64) = 0L
method_0((var_0: (Union0 [])), (var_1: int64))
let (var_2: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_3: System.IO.StreamReader) = System.IO.StreamReader(var_2)
let (var_4: string) = var_3.ReadToEnd()
let (var_5: int64) = 0L
let (var_6: bool) = (var_5 >= 0L)
let (var_9: bool) =
    if var_6 then
        let (var_7: int64) = (int64 var_4.Length)
        (var_5 < var_7)
    else
        false
if var_9 then
    let (var_10: char) = var_4.[int32 var_5]
    let (var_11: bool) = ('-' = var_10)
    let (var_12: int64) = (var_5 + 1L)
    if var_11 then
        let (var_13: bool) = false
        method_3((var_13: bool), (var_0: (Union0 [])), (var_4: string), (var_12: int64))
    else
        let (var_14: bool) = true
        method_3((var_14: bool), (var_0: (Union0 [])), (var_4: string), (var_5: int64))
else
    let (var_15: bool) = true
    method_3((var_15: bool), (var_0: (Union0 [])), (var_4: string), (var_5: int64))

