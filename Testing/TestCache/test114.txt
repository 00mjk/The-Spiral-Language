module SpiralExample.Main
let cuda_kernels = """
#include <assert.h>

extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 2L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 0L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 * 12L)
        let (var_6: int64) = 0L
        method_1((var_1: int64), (var_0: (int64 [])), (var_5: int64), (var_6: int64))
        let (var_7: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_7: int64))
    else
        ()
and method_3((var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64)): unit =
    let (var_8: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_9: string) = ""
    let (var_10: int64) = 0L
    let (var_11: int64) = 0L
    method_4((var_8: System.Text.StringBuilder), (var_11: int64))
    let (var_12: System.Text.StringBuilder) = var_8.AppendLine("[|")
    let (var_13: int64) = 0L
    let (var_14: int64) = method_5((var_8: System.Text.StringBuilder), (var_9: string), (var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_10: int64), (var_13: int64))
    let (var_15: int64) = 0L
    method_4((var_8: System.Text.StringBuilder), (var_15: int64))
    let (var_16: System.Text.StringBuilder) = var_8.AppendLine("|]")
    let (var_17: string) = var_8.ToString()
    System.Console.WriteLine(var_17)
and method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 3L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_3 * 4L)
        let (var_8: int64) = (var_2 + var_7)
        let (var_9: int64) = 0L
        method_2((var_0: int64), (var_3: int64), (var_1: (int64 [])), (var_8: int64), (var_9: int64))
        let (var_10: int64) = (var_3 + 1L)
        method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_10: int64))
    else
        ()
and method_4((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_4((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_5((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_7)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: bool) = (var_11 >= 0L)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = (var_11 * var_4)
            let (var_17: int64) = (var_3 + var_16)
            let (var_18: int64) = 0L
            method_6((var_0: System.Text.StringBuilder), (var_18: int64))
            let (var_19: System.Text.StringBuilder) = var_0.AppendLine("[|")
            let (var_20: int64) = 0L
            let (var_21: int64) = method_7((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_17: int64), (var_5: int64), (var_6: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_20: int64))
            let (var_22: int64) = 0L
            method_6((var_0: System.Text.StringBuilder), (var_22: int64))
            let (var_23: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_24: int64) = (var_11 + 1L)
            method_5((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_21: int64), (var_24: int64))
        else
            let (var_26: int64) = 0L
            method_4((var_0: System.Text.StringBuilder), (var_26: int64))
            let (var_27: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
and method_2((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 4L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 0L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_3 + var_4)
        let (var_9: int64) = (var_0 * var_1)
        let (var_10: int64) = (var_9 * var_4)
        var_2.[int32 var_8] <- var_10
        let (var_11: int64) = (var_4 + 1L)
        method_2((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_11: int64))
    else
        ()
and method_6((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_6((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_7((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64)): int64 =
    let (var_10: bool) = (var_9 < var_6)
    if var_10 then
        let (var_11: bool) = (var_8 < 1000L)
        if var_11 then
            let (var_12: bool) = (var_9 >= 0L)
            let (var_13: bool) = (var_12 = false)
            if var_13 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_14: int64) = (var_9 * var_4)
            let (var_15: int64) = (var_3 + var_14)
            let (var_16: int64) = 0L
            method_8((var_0: System.Text.StringBuilder), (var_16: int64))
            let (var_17: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_18: int64) = 0L
            let (var_19: int64) = method_9((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_15: int64), (var_5: int64), (var_7: int64), (var_1: string), (var_8: int64), (var_18: int64))
            let (var_20: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_21: int64) = (var_9 + 1L)
            method_7((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_19: int64), (var_21: int64))
        else
            let (var_23: int64) = 0L
            method_6((var_0: System.Text.StringBuilder), (var_23: int64))
            let (var_24: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_8
    else
        var_8
and method_8((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 8L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_8((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_9((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64), (var_7: int64)): int64 =
    let (var_8: bool) = (var_7 < var_4)
    if var_8 then
        let (var_9: bool) = (var_6 < 1000L)
        if var_9 then
            let (var_10: System.Text.StringBuilder) = var_0.Append(var_5)
            let (var_11: bool) = (var_7 >= 0L)
            let (var_12: bool) = (var_11 = false)
            if var_12 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_13: int64) = (var_7 * var_3)
            let (var_14: int64) = (var_2 + var_13)
            let (var_15: int64) = var_1.[int32 var_14]
            let (var_16: string) = System.String.Format("{0}",var_15)
            let (var_17: System.Text.StringBuilder) = var_0.Append(var_16)
            let (var_18: string) = "; "
            let (var_19: int64) = (var_6 + 1L)
            let (var_20: int64) = (var_7 + 1L)
            method_9((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_18: string), (var_19: int64), (var_20: int64))
        else
            let (var_22: System.Text.StringBuilder) = var_0.Append("...")
            var_6
    else
        var_6
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(24L))
let (var_1: int64) = 0L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_2: int64) = 17L
let (var_3: int64) = 12L
let (var_4: int64) = 4L
let (var_5: int64) = 1L
let (var_6: int64) = 1L
let (var_7: int64) = 2L
let (var_8: int64) = 3L
method_3((var_0: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64))

