module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: Union2
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Union2 =
    | Union2Case0
    | Union2Case1
let rec method_0((var_0: (Union0 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 101L)
    if var_2 then
        var_0.[int32 var_1] <- Union0Case1
        let (var_3: int64) = (var_1 + 1L)
        method_0((var_0: (Union0 [])), (var_3: int64))
    else
        ()
and method_1((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_2.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_2.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            method_2((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_15: int64), (var_12: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_2((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_2.Length)
            (var_4 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_2.[int32 var_4]
        let (var_10: bool) = (var_9 >= '0')
        let (var_12: bool) =
            if var_10 then
                (var_9 <= '9')
            else
                false
        let (var_13: int64) = (var_4 + 1L)
        if var_12 then
            let (var_14: int64) = System.Convert.ToInt64(var_9)
            let (var_15: int64) = System.Convert.ToInt64('0')
            let (var_16: int64) = (var_14 - var_15)
            let (var_17: bool) = (var_3 = 922337203685477580L)
            let (var_19: bool) =
                if var_17 then
                    (var_16 <= 7L)
                else
                    false
            let (var_21: bool) =
                if var_19 then
                    true
                else
                    (var_3 < 922337203685477580L)
            if var_21 then
                let (var_22: int64) = (var_3 * 10L)
                let (var_23: int64) = (var_22 + var_16)
                method_2((var_0: bool), (var_1: (Union0 [])), (var_2: string), (var_23: int64), (var_13: int64))
            else
                (failwith "integer overflow")
        else
            let (var_25: int64) =
                if var_0 then
                    var_3
                else
                    (-var_3)
            let (var_26: int64) = 0L
            method_3((var_25: int64), (var_1: (Union0 [])), (var_2: string), (var_26: int64), (var_4: int64))
    else
        let (var_28: int64) =
            if var_0 then
                var_3
            else
                (-var_3)
        let (var_29: int64) = 0L
        method_3((var_28: int64), (var_1: (Union0 [])), (var_2: string), (var_29: int64), (var_4: int64))
and method_3((var_0: int64), (var_1: (Union0 [])), (var_2: string), (var_3: int64), (var_4: int64)): unit =
    let (var_5: int64) = (var_3 + 1L)
    let (var_6: bool) = (var_4 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_2.Length)
            (var_4 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_2.[int32 var_4]
        let (var_11: bool) = (var_10 = ' ')
        let (var_15: bool) =
            if var_11 then
                true
            else
                let (var_12: bool) = (var_10 = '\n')
                if var_12 then
                    true
                else
                    (var_10 = '\r')
        let (var_16: int64) = (var_4 + 1L)
        if var_15 then
            method_3((var_0: int64), (var_1: (Union0 [])), (var_2: string), (var_5: int64), (var_16: int64))
        else
            let (var_17: int64) = 0L
            method_4((var_2: string), (var_17: int64), (var_0: int64), (var_1: (Union0 [])), (var_4: int64))
    else
        let (var_18: int64) = 0L
        method_4((var_2: string), (var_18: int64), (var_0: int64), (var_1: (Union0 [])), (var_4: int64))
and method_4((var_0: string), (var_1: int64), (var_2: int64), (var_3: (Union0 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_1 < var_2)
    if var_5 then
        let (var_6: Union2) = Union2Case0
        let (var_7: Union2) = Union2Case1
        let (var_8: int64) = (var_1 + 1L)
        let (var_9: bool) = (var_4 >= 0L)
        let (var_12: bool) =
            if var_9 then
                let (var_10: int64) = (int64 var_0.Length)
                (var_4 < var_10)
            else
                false
        if var_12 then
            let (var_13: char) = var_0.[int32 var_4]
            let (var_14: bool) = ('-' = var_13)
            let (var_15: int64) = (var_4 + 1L)
            if var_14 then
                let (var_16: bool) = false
                method_5((var_16: bool), (var_7: Union2), (var_6: Union2), (var_3: (Union0 [])), (var_8: int64), (var_2: int64), (var_0: string), (var_15: int64))
            else
                let (var_17: bool) = true
                method_5((var_17: bool), (var_7: Union2), (var_6: Union2), (var_3: (Union0 [])), (var_8: int64), (var_2: int64), (var_0: string), (var_4: int64))
        else
            let (var_18: bool) = true
            method_5((var_18: bool), (var_7: Union2), (var_6: Union2), (var_3: (Union0 [])), (var_8: int64), (var_2: int64), (var_0: string), (var_4: int64))
    else
        ()
and method_5((var_0: bool), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64)): unit =
    let (var_8: bool) = (var_7 >= 0L)
    let (var_11: bool) =
        if var_8 then
            let (var_9: int64) = (int64 var_6.Length)
            (var_7 < var_9)
        else
            false
    if var_11 then
        let (var_12: char) = var_6.[int32 var_7]
        let (var_13: bool) = (var_12 >= '0')
        let (var_15: bool) =
            if var_13 then
                (var_12 <= '9')
            else
                false
        let (var_16: int64) = (var_7 + 1L)
        if var_15 then
            let (var_17: int64) = System.Convert.ToInt64(var_12)
            let (var_18: int64) = System.Convert.ToInt64('0')
            let (var_19: int64) = (var_17 - var_18)
            method_6((var_0: bool), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_19: int64), (var_16: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_6((var_0: bool), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: bool) = (var_8 >= 0L)
    let (var_12: bool) =
        if var_9 then
            let (var_10: int64) = (int64 var_6.Length)
            (var_8 < var_10)
        else
            false
    if var_12 then
        let (var_13: char) = var_6.[int32 var_8]
        let (var_14: bool) = (var_13 >= '0')
        let (var_16: bool) =
            if var_14 then
                (var_13 <= '9')
            else
                false
        let (var_17: int64) = (var_8 + 1L)
        if var_16 then
            let (var_18: int64) = System.Convert.ToInt64(var_13)
            let (var_19: int64) = System.Convert.ToInt64('0')
            let (var_20: int64) = (var_18 - var_19)
            let (var_21: bool) = (var_7 = 922337203685477580L)
            let (var_23: bool) =
                if var_21 then
                    (var_20 <= 7L)
                else
                    false
            let (var_25: bool) =
                if var_23 then
                    true
                else
                    (var_7 < 922337203685477580L)
            if var_25 then
                let (var_26: int64) = (var_7 * 10L)
                let (var_27: int64) = (var_26 + var_20)
                method_6((var_0: bool), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_27: int64), (var_17: int64))
            else
                (failwith "integer overflow")
        else
            let (var_29: int64) =
                if var_0 then
                    var_7
                else
                    (-var_7)
            let (var_30: int64) = 0L
            method_7((var_29: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_30: int64), (var_8: int64))
    else
        let (var_32: int64) =
            if var_0 then
                var_7
            else
                (-var_7)
        let (var_33: int64) = 0L
        method_7((var_32: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_33: int64), (var_8: int64))
and method_7((var_0: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_7 + 1L)
    let (var_10: bool) = (var_8 >= 0L)
    let (var_13: bool) =
        if var_10 then
            let (var_11: int64) = (int64 var_6.Length)
            (var_8 < var_11)
        else
            false
    if var_13 then
        let (var_14: char) = var_6.[int32 var_8]
        let (var_15: bool) = (var_14 = ' ')
        let (var_19: bool) =
            if var_15 then
                true
            else
                let (var_16: bool) = (var_14 = '\n')
                if var_16 then
                    true
                else
                    (var_14 = '\r')
        let (var_20: int64) = (var_8 + 1L)
        if var_19 then
            method_7((var_0: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_9: int64), (var_20: int64))
        else
            let (var_21: Union2) = method_8((var_0: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])))
            match var_21 with
            | Union2Case0 ->
                System.Console.WriteLine("First")
            | Union2Case1 ->
                System.Console.WriteLine("Second")
            method_4((var_6: string), (var_4: int64), (var_5: int64), (var_3: (Union0 [])), (var_8: int64))
    else
        let (var_22: Union2) = method_8((var_0: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 [])))
        match var_22 with
        | Union2Case0 ->
            System.Console.WriteLine("First")
        | Union2Case1 ->
            System.Console.WriteLine("Second")
        method_4((var_6: string), (var_4: int64), (var_5: int64), (var_3: (Union0 [])), (var_8: int64))
and method_8((var_0: int64), (var_1: Union2), (var_2: Union2), (var_3: (Union0 []))): Union2 =
    let (var_4: bool) =
        match var_2 with
        | Union2Case0 ->
            true
        | Union2Case1 ->
            false
    if var_4 then
        let (var_5: Union0) = var_3.[int32 var_0]
        match var_5 with
        | Union0Case0(var_6) ->
            var_6.mem_0
        | Union0Case1 ->
            let (var_8: Union2) = method_9((var_1: Union2), (var_0: int64), (var_2: Union2), (var_3: (Union0 [])))
            var_3.[int32 var_0] <- (Union0Case0(Tuple1(var_8)))
            var_8
    else
        method_9((var_1: Union2), (var_0: int64), (var_2: Union2), (var_3: (Union0 [])))
and method_9((var_0: Union2), (var_1: int64), (var_2: Union2), (var_3: (Union0 []))): Union2 =
    let (var_4: bool) = (var_1 >= 2L)
    let (var_8: bool) =
        if var_4 then
            let (var_5: int64) = (var_1 - 2L)
            let (var_6: Union2) = method_8((var_5: int64), (var_2: Union2), (var_0: Union2), (var_3: (Union0 [])))
            method_10((var_6: Union2), (var_2: Union2))
        else
            false
    if var_8 then
        var_2
    else
        let (var_9: bool) = (var_1 >= 3L)
        let (var_13: bool) =
            if var_9 then
                let (var_10: int64) = (var_1 - 3L)
                let (var_11: Union2) = method_8((var_10: int64), (var_2: Union2), (var_0: Union2), (var_3: (Union0 [])))
                method_10((var_11: Union2), (var_2: Union2))
            else
                false
        if var_13 then
            var_2
        else
            let (var_14: bool) = (var_1 >= 5L)
            let (var_18: bool) =
                if var_14 then
                    let (var_15: int64) = (var_1 - 5L)
                    let (var_16: Union2) = method_8((var_15: int64), (var_2: Union2), (var_0: Union2), (var_3: (Union0 [])))
                    method_10((var_16: Union2), (var_2: Union2))
                else
                    false
            if var_18 then
                var_2
            else
                var_0
and method_10((var_0: Union2), (var_1: Union2)): bool =
    match var_0 with
    | Union2Case0 ->
        match var_1 with
        | Union2Case0 ->
            true
        | Union2Case1 ->
            false
    | Union2Case1 ->
        match var_1 with
        | Union2Case0 ->
            false
        | Union2Case1 ->
            true
let (var_0: (Union0 [])) = Array.zeroCreate<Union0> (System.Convert.ToInt32(101L))
let (var_1: int64) = 0L
method_0((var_0: (Union0 [])), (var_1: int64))
let (var_2: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_3: System.IO.StreamReader) = System.IO.StreamReader(var_2)
let (var_4: string) = var_3.ReadToEnd()
let (var_5: int64) = 0L
let (var_6: bool) = (var_5 >= 0L)
let (var_9: bool) =
    if var_6 then
        let (var_7: int64) = (int64 var_4.Length)
        (var_5 < var_7)
    else
        false
if var_9 then
    let (var_10: char) = var_4.[int32 var_5]
    let (var_11: bool) = ('-' = var_10)
    let (var_12: int64) = (var_5 + 1L)
    if var_11 then
        let (var_13: bool) = false
        method_1((var_13: bool), (var_0: (Union0 [])), (var_4: string), (var_12: int64))
    else
        let (var_14: bool) = true
        method_1((var_14: bool), (var_0: (Union0 [])), (var_4: string), (var_5: int64))
else
    let (var_15: bool) = true
    method_1((var_15: bool), (var_0: (Union0 [])), (var_4: string), (var_5: int64))

