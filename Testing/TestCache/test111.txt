module SpiralExample.Main
let cuda_kernels = """
#include <assert.h>

extern "C" {
    
}
"""

type Union0 =
    | Union0Case0 of int64
    | Union0Case1 of Tuple1
and Tuple1 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0(): Union0 =
    (Union0Case0(3L))
and method_1((var_0: Union0), (var_1: Union0)): bool =
    match var_0 with
    | Union0Case0(var_2) ->
        match var_1 with
        | Union0Case0(var_4) ->
            (var_2 = var_4)
        | Union0Case1(var_5) ->
            let (var_7: int64) = var_5.mem_0
            let (var_8: int64) = var_5.mem_1
            false
    | Union0Case1(var_3) ->
        let (var_10: int64) = var_3.mem_0
        let (var_11: int64) = var_3.mem_1
        match var_1 with
        | Union0Case0(var_12) ->
            false
        | Union0Case1(var_13) ->
            let (var_14: int64) = var_13.mem_0
            let (var_15: int64) = var_13.mem_1
            let (var_16: bool) = (var_10 = var_14)
            if var_16 then
                (var_11 = var_15)
            else
                false
let (var_0: Union0) = method_0()
let (var_1: Union0) = method_0()
method_1((var_0: Union0), (var_1: Union0))
