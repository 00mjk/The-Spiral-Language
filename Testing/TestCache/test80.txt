module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

type EnvHeapMutable0 =
    {
    mutable mem_0: (int64 [])
    mutable mem_1: int64
    mutable mem_2: int64
    }
let rec method_0((var_0: EnvHeapMutable0), (var_1: int64)): unit =
    let (var_2: int64) = var_0.mem_1
    let (var_3: int64) = var_0.mem_2
    let (var_4: (int64 [])) = var_0.mem_0
    var_4.[int32 var_3] <- var_1
    let (var_5: int64) = var_4.LongLength
    let (var_6: int64) = (var_3 + 1L)
    let (var_7: bool) = (var_6 = var_5)
    let (var_8: int64) =
        if var_7 then
            0L
        else
            var_6
    let (var_9: bool) = (var_2 = var_8)
    if var_9 then
        let (var_10: int64) = (var_5 * 3L)
        let (var_11: int64) = (var_10 / 2L)
        let (var_12: int64) = (var_11 + 3L)
        let (var_13: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_12))
        method_1((var_4: (int64 [])), (var_13: (int64 [])), (var_2: int64), (var_5: int64))
        let (var_14: int64) = 0L
        method_3((var_4: (int64 [])), (var_13: (int64 [])), (var_2: int64), (var_5: int64), (var_14: int64))
        let (var_15: int64) = 0L
        var_0.mem_1 <- var_15
        var_0.mem_2 <- var_5
        var_0.mem_0 <- var_13
    else
        var_0.mem_2 <- var_8
and method_4((var_0: EnvHeapMutable0)): int64 =
    let (var_1: int64) = var_0.mem_1
    let (var_2: int64) = var_0.mem_2
    let (var_3: (int64 [])) = var_0.mem_0
    let (var_4: bool) = (var_1 <> var_2)
    let (var_5: bool) = (var_4 = false)
    if var_5 then
        (failwith "Cannot dequeue past the end of the queue.")
    else
        ()
    let (var_6: int64) = var_3.LongLength
    let (var_7: int64) = (var_1 + 1L)
    let (var_8: bool) = (var_7 = var_6)
    let (var_9: int64) =
        if var_8 then
            0L
        else
            var_7
    var_0.mem_1 <- var_9
    var_3.[int32 var_1]
and method_1((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_2 < var_3)
    if var_4 then
        let (var_5: int64) = var_0.[int32 var_2]
        var_1.[int32 0L] <- var_5
        let (var_6: int64) = (var_2 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_6: int64))
    else
        ()
and method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: int64) = (var_3 - var_2)
        let (var_7: int64) = (var_6 + var_4)
        let (var_8: int64) = var_0.[int32 var_4]
        var_1.[int32 var_7] <- var_8
        let (var_9: int64) = (var_4 + 1L)
        method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_9: int64))
    else
        ()
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < var_3)
    if var_5 then
        let (var_6: int64) = (var_4 - var_2)
        let (var_7: int64) = var_0.[int32 var_4]
        var_1.[int32 var_6] <- var_7
        let (var_8: int64) = (var_4 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_8: int64))
    else
        ()
let (var_0: int64) = 0L
let (var_1: int64) = 0L
let (var_2: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(1L))
let (var_3: EnvHeapMutable0) = ({mem_0 = (var_2: (int64 [])); mem_1 = (var_0: int64); mem_2 = (var_1: int64)} : EnvHeapMutable0)
let (var_4: int64) = 1L
method_0((var_3: EnvHeapMutable0), (var_4: int64))
let (var_5: int64) = 2L
method_0((var_3: EnvHeapMutable0), (var_5: int64))
let (var_6: int64) = 3L
method_0((var_3: EnvHeapMutable0), (var_6: int64))
let (var_7: int64) = 4L
method_0((var_3: EnvHeapMutable0), (var_7: int64))
let (var_8: int64) = method_4((var_3: EnvHeapMutable0))
let (var_9: string) = System.String.Format("{0}",var_8)
System.Console.WriteLine(var_9)
let (var_10: int64) = method_4((var_3: EnvHeapMutable0))
let (var_11: string) = System.String.Format("{0}",var_10)
System.Console.WriteLine(var_11)
let (var_12: int64) = 1L
method_0((var_3: EnvHeapMutable0), (var_12: int64))
let (var_13: int64) = 2L
method_0((var_3: EnvHeapMutable0), (var_13: int64))
let (var_14: int64) = 3L
method_0((var_3: EnvHeapMutable0), (var_14: int64))
let (var_15: int64) = 4L
method_0((var_3: EnvHeapMutable0), (var_15: int64))
let (var_16: int64) = 1L
method_0((var_3: EnvHeapMutable0), (var_16: int64))
let (var_17: int64) = 2L
method_0((var_3: EnvHeapMutable0), (var_17: int64))
let (var_18: int64) = 3L
method_0((var_3: EnvHeapMutable0), (var_18: int64))
let (var_19: int64) = 4L
method_0((var_3: EnvHeapMutable0), (var_19: int64))
let (var_20: int64) = method_4((var_3: EnvHeapMutable0))
let (var_21: string) = System.String.Format("{0}",var_20)
System.Console.WriteLine(var_21)
let (var_22: int64) = method_4((var_3: EnvHeapMutable0))
let (var_23: string) = System.String.Format("{0}",var_22)
System.Console.WriteLine(var_23)
let (var_24: int64) = method_4((var_3: EnvHeapMutable0))
let (var_25: string) = System.String.Format("{0}",var_24)
System.Console.WriteLine(var_25)
let (var_26: int64) = method_4((var_3: EnvHeapMutable0))
let (var_27: string) = System.String.Format("{0}",var_26)
System.Console.WriteLine(var_27)
let (var_28: int64) = method_4((var_3: EnvHeapMutable0))
let (var_29: string) = System.String.Format("{0}",var_28)
System.Console.WriteLine(var_29)
let (var_30: int64) = method_4((var_3: EnvHeapMutable0))
let (var_31: string) = System.String.Format("{0}",var_30)
System.Console.WriteLine(var_31)
let (var_32: int64) = method_4((var_3: EnvHeapMutable0))
let (var_33: string) = System.String.Format("{0}",var_32)
System.Console.WriteLine(var_33)
let (var_34: int64) = method_4((var_3: EnvHeapMutable0))
let (var_35: string) = System.String.Format("{0}",var_34)
System.Console.WriteLine(var_35)
let (var_36: int64) = method_4((var_3: EnvHeapMutable0))
let (var_37: string) = System.String.Format("{0}",var_36)
System.Console.WriteLine(var_37)
let (var_38: int64) = method_4((var_3: EnvHeapMutable0))
let (var_39: string) = System.String.Format("{0}",var_38)
System.Console.WriteLine(var_39)

