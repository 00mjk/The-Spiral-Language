module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

let rec method_1((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 1001L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 1L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 - 1L)
        let (var_6: int64) = (var_5 * 9L)
        let (var_7: int64) = 2L
        method_2((var_1: int64), (var_0: (int64 [])), (var_6: int64), (var_7: int64))
        let (var_8: int64) = (var_1 + 1L)
        method_1((var_0: (int64 [])), (var_8: int64))
    else
        ()
and method_5((var_0: bool), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64)): unit =
    let (var_7: bool) = (var_6 >= 0L)
    let (var_10: bool) =
        if var_7 then
            let (var_8: int64) = (int64 var_5.Length)
            (var_6 < var_8)
        else
            false
    if var_10 then
        let (var_11: char) = var_5.[int32 var_6]
        let (var_12: bool) = (var_11 >= '0')
        let (var_14: bool) =
            if var_12 then
                (var_11 <= '9')
            else
                false
        let (var_15: int64) = (var_6 + 1L)
        if var_14 then
            let (var_16: int64) = System.Convert.ToInt64(var_11)
            let (var_17: int64) = System.Convert.ToInt64('0')
            let (var_18: int64) = (var_16 - var_17)
            method_6((var_0: bool), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_18: int64), (var_15: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_2((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 11L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 2L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_3 - 2L)
        let (var_8: int64) = (var_2 + var_7)
        let (var_9: int64) = 2L
        let (var_10: int64) = method_3((var_0: int64), (var_3: int64), (var_9: int64))
        var_1.[int32 var_8] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_2((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_11: int64))
    else
        ()
and method_6((var_0: bool), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64), (var_7: int64)): unit =
    let (var_8: bool) = (var_7 >= 0L)
    let (var_11: bool) =
        if var_8 then
            let (var_9: int64) = (int64 var_5.Length)
            (var_7 < var_9)
        else
            false
    if var_11 then
        let (var_12: char) = var_5.[int32 var_7]
        let (var_13: bool) = (var_12 >= '0')
        let (var_15: bool) =
            if var_13 then
                (var_12 <= '9')
            else
                false
        let (var_16: int64) = (var_7 + 1L)
        if var_15 then
            let (var_17: int64) = System.Convert.ToInt64(var_12)
            let (var_18: int64) = System.Convert.ToInt64('0')
            let (var_19: int64) = (var_17 - var_18)
            let (var_20: bool) = (var_6 = 922337203685477580L)
            let (var_22: bool) =
                if var_20 then
                    (var_19 <= 7L)
                else
                    false
            let (var_24: bool) =
                if var_22 then
                    true
                else
                    (var_6 < 922337203685477580L)
            if var_24 then
                let (var_25: int64) = (var_6 * 10L)
                let (var_26: int64) = (var_25 + var_19)
                method_6((var_0: bool), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_26: int64), (var_16: int64))
            else
                (failwith "integer overflow")
        else
            let (var_28: int64) =
                if var_0 then
                    var_6
                else
                    (-var_6)
            let (var_29: int64) = 0L
            method_7((var_28: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_29: int64), (var_7: int64))
    else
        let (var_31: int64) =
            if var_0 then
                var_6
            else
                (-var_6)
        let (var_32: int64) = 0L
        method_7((var_31: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_32: int64), (var_7: int64))
and method_3((var_0: int64), (var_1: int64), (var_2: int64)): int64 =
    let (var_3: bool) = (var_2 <= var_1)
    if var_3 then
        let (var_4: int64) = (var_0 * var_0)
        let (var_5: int64) = (var_2 + 1L)
        method_4((var_0: int64), (var_1: int64), (var_4: int64), (var_5: int64))
    else
        var_0
and method_7((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64), (var_7: int64)): unit =
    let (var_8: int64) = (var_6 + 1L)
    let (var_9: bool) = (var_7 >= 0L)
    let (var_12: bool) =
        if var_9 then
            let (var_10: int64) = (int64 var_5.Length)
            (var_7 < var_10)
        else
            false
    if var_12 then
        let (var_13: char) = var_5.[int32 var_7]
        let (var_14: bool) = (var_13 = ' ')
        let (var_18: bool) =
            if var_14 then
                true
            else
                let (var_15: bool) = (var_13 = '\n')
                if var_15 then
                    true
                else
                    (var_13 = '\r')
        let (var_19: int64) = (var_7 + 1L)
        if var_18 then
            method_7((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_8: int64), (var_19: int64))
        else
            let (var_22: bool) =
                if var_9 then
                    let (var_20: int64) = (int64 var_5.Length)
                    (var_7 < var_20)
                else
                    false
            if var_22 then
                let (var_23: bool) = ('-' = var_13)
                if var_23 then
                    let (var_24: bool) = false
                    method_8((var_24: bool), (var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_19: int64))
                else
                    let (var_25: bool) = true
                    method_8((var_25: bool), (var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_7: int64))
            else
                let (var_26: bool) = true
                method_8((var_26: bool), (var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_7: int64))
    else
        let (var_29: bool) =
            if var_9 then
                let (var_27: int64) = (int64 var_5.Length)
                (var_7 < var_27)
            else
                false
        if var_29 then
            let (var_30: char) = var_5.[int32 var_7]
            let (var_31: bool) = ('-' = var_30)
            let (var_32: int64) = (var_7 + 1L)
            if var_31 then
                let (var_33: bool) = false
                method_8((var_33: bool), (var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_32: int64))
            else
                let (var_34: bool) = true
                method_8((var_34: bool), (var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_7: int64))
        else
            let (var_35: bool) = true
            method_8((var_35: bool), (var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: string), (var_7: int64))
and method_4((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64)): int64 =
    let (var_4: bool) = (var_3 <= var_1)
    if var_4 then
        let (var_5: int64) = (var_0 * var_2)
        let (var_6: int64) = (var_3 + 1L)
        method_4((var_0: int64), (var_1: int64), (var_5: int64), (var_6: int64))
    else
        var_2
and method_8((var_0: bool), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64)): unit =
    let (var_8: bool) = (var_7 >= 0L)
    let (var_11: bool) =
        if var_8 then
            let (var_9: int64) = (int64 var_6.Length)
            (var_7 < var_9)
        else
            false
    if var_11 then
        let (var_12: char) = var_6.[int32 var_7]
        let (var_13: bool) = (var_12 >= '0')
        let (var_15: bool) =
            if var_13 then
                (var_12 <= '9')
            else
                false
        let (var_16: int64) = (var_7 + 1L)
        if var_15 then
            let (var_17: int64) = System.Convert.ToInt64(var_12)
            let (var_18: int64) = System.Convert.ToInt64('0')
            let (var_19: int64) = (var_17 - var_18)
            method_9((var_0: bool), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_19: int64), (var_16: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_9((var_0: bool), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: bool) = (var_8 >= 0L)
    let (var_12: bool) =
        if var_9 then
            let (var_10: int64) = (int64 var_6.Length)
            (var_8 < var_10)
        else
            false
    if var_12 then
        let (var_13: char) = var_6.[int32 var_8]
        let (var_14: bool) = (var_13 >= '0')
        let (var_16: bool) =
            if var_14 then
                (var_13 <= '9')
            else
                false
        let (var_17: int64) = (var_8 + 1L)
        if var_16 then
            let (var_18: int64) = System.Convert.ToInt64(var_13)
            let (var_19: int64) = System.Convert.ToInt64('0')
            let (var_20: int64) = (var_18 - var_19)
            let (var_21: bool) = (var_7 = 922337203685477580L)
            let (var_23: bool) =
                if var_21 then
                    (var_20 <= 7L)
                else
                    false
            let (var_25: bool) =
                if var_23 then
                    true
                else
                    (var_7 < 922337203685477580L)
            if var_25 then
                let (var_26: int64) = (var_7 * 10L)
                let (var_27: int64) = (var_26 + var_20)
                method_9((var_0: bool), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_27: int64), (var_17: int64))
            else
                (failwith "integer overflow")
        else
            let (var_29: int64) =
                if var_0 then
                    var_7
                else
                    (-var_7)
            let (var_30: int64) = 0L
            method_10((var_29: int64), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_30: int64), (var_8: int64))
    else
        let (var_32: int64) =
            if var_0 then
                var_7
            else
                (-var_7)
        let (var_33: int64) = 0L
        method_10((var_32: int64), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_33: int64), (var_8: int64))
and method_10((var_0: int64), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_7 + 1L)
    let (var_10: bool) = (var_8 >= 0L)
    let (var_13: bool) =
        if var_10 then
            let (var_11: int64) = (int64 var_6.Length)
            (var_8 < var_11)
        else
            false
    if var_13 then
        let (var_14: char) = var_6.[int32 var_8]
        let (var_15: bool) = (var_14 = ' ')
        let (var_19: bool) =
            if var_15 then
                true
            else
                let (var_16: bool) = (var_14 = '\n')
                if var_16 then
                    true
                else
                    (var_14 = '\r')
        let (var_20: int64) = (var_8 + 1L)
        if var_19 then
            method_10((var_0: int64), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: string), (var_9: int64), (var_20: int64))
        else
            let (var_21: int64) = method_11((var_2: int64), (var_0: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_1: int64))
            let (var_22: string) = System.String.Format("{0}",var_21)
            System.Console.WriteLine(var_22)
    else
        let (var_23: int64) = method_11((var_2: int64), (var_0: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_1: int64))
        let (var_24: string) = System.String.Format("{0}",var_23)
        System.Console.WriteLine(var_24)
and method_11((var_0: int64), (var_1: int64), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64)): int64 =
    method_12((var_1: int64), (var_2: (int64 [])), (var_4: int64), (var_5: int64), (var_3: int64), (var_0: int64))
and method_12((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64)): int64 =
    let (var_6: bool) = (var_5 <= var_3)
    if var_6 then
        let (var_7: bool) = (var_5 >= 1L)
        let (var_9: bool) =
            if var_7 then
                (var_5 < 1001L)
            else
                false
        let (var_10: bool) = (var_9 = false)
        if var_10 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_11: int64) = (var_5 - 1L)
        let (var_12: int64) = (var_11 * 9L)
        let (var_13: bool) = (var_0 >= 2L)
        let (var_15: bool) =
            if var_13 then
                (var_0 < 11L)
            else
                false
        let (var_16: bool) = (var_15 = false)
        if var_16 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_17: int64) = (var_0 - 2L)
        let (var_18: int64) = (var_12 + var_17)
        let (var_19: int64) = var_1.[int32 var_18]
        let (var_20: int64) = (var_2 + var_19)
        let (var_21: bool) = (var_20 = var_3)
        if var_21 then
            (var_4 + 1L)
        else
            let (var_23: bool) = (var_20 < var_3)
            if var_23 then
                let (var_24: int64) = (var_5 + 1L)
                let (var_25: int64) = method_11((var_24: int64), (var_0: int64), (var_1: (int64 [])), (var_4: int64), (var_20: int64), (var_3: int64))
                method_12((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_25: int64), (var_24: int64))
            else
                var_4
    else
        var_4
let (var_2: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(9000L))
let (var_3: int64) = 1L
method_1((var_2: (int64 [])), (var_3: int64))
let (var_4: int64) = 0L
let (var_5: int64) = 0L
let (var_6: int64) = 1L
let (var_7: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_8: System.IO.StreamReader) = System.IO.StreamReader(var_7)
let (var_9: string) = var_8.ReadToEnd()
let (var_10: int64) = 0L
let (var_11: bool) = (var_10 >= 0L)
let (var_14: bool) =
    if var_11 then
        let (var_12: int64) = (int64 var_9.Length)
        (var_10 < var_12)
    else
        false
if var_14 then
    let (var_15: char) = var_9.[int32 var_10]
    let (var_16: bool) = ('-' = var_15)
    let (var_17: int64) = (var_10 + 1L)
    if var_16 then
        let (var_18: bool) = false
        method_5((var_18: bool), (var_6: int64), (var_2: (int64 [])), (var_4: int64), (var_5: int64), (var_9: string), (var_17: int64))
    else
        let (var_19: bool) = true
        method_5((var_19: bool), (var_6: int64), (var_2: (int64 [])), (var_4: int64), (var_5: int64), (var_9: string), (var_10: int64))
else
    let (var_20: bool) = true
    method_5((var_20: bool), (var_6: int64), (var_2: (int64 [])), (var_4: int64), (var_5: int64), (var_9: string), (var_10: int64))

