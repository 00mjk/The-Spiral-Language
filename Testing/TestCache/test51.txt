module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 16L)
    if var_2 then
        var_0.[int32 var_1] <- var_1
        let (var_3: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_3: int64))
    else
        ()
and method_1((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: int64) = var_1.[int32 var_3]
        let (var_6: int64) = (2L * var_5)
        var_0.[int32 var_3] <- var_6
        let (var_7: int64) = (var_3 + 1L)
        method_1((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_7: int64))
    else
        ()
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64)): int64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: int64) = var_0.[int32 var_4]
        let (var_7: bool) = (15L < var_6)
        let (var_9: int64) =
            if var_7 then
                var_1.[int32 var_3] <- var_6
                (var_3 + 1L)
            else
                var_3
        let (var_10: int64) = (var_4 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_9: int64), (var_10: int64))
    else
        var_3
and method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: int64) = var_1.[int32 var_3]
        var_0.[int32 var_3] <- var_5
        let (var_6: int64) = (var_3 + 1L)
        method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64), (var_6: int64))
    else
        ()
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(16L))
let (var_1: int64) = 0L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_2: int64) = var_0.LongLength
let (var_3: bool) = (var_2 >= 0L)
let (var_4: bool) = (var_3 = false)
if var_4 then
    (failwith "The input to init needs to be greater or equal to 0.")
else
    ()
let (var_7: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_2))
let (var_8: int64) = 0L
method_1((var_7: (int64 [])), (var_0: (int64 [])), (var_2: int64), (var_8: int64))
let (var_9: int64) = var_7.LongLength
let (var_10: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_9))
let (var_11: int64) = 0L
let (var_12: int64) = var_7.LongLength
let (var_13: int64) = 0L
let (var_14: int64) = method_2((var_7: (int64 [])), (var_10: (int64 [])), (var_12: int64), (var_11: int64), (var_13: int64))
let (var_15: bool) = (var_14 >= 0L)
let (var_16: bool) = (var_15 = false)
if var_16 then
    (failwith "The input to init needs to be greater or equal to 0.")
else
    ()
let (var_18: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_14))
let (var_19: int64) = 0L
method_3((var_18: (int64 [])), (var_10: (int64 [])), (var_14: int64), (var_19: int64))
var_18
