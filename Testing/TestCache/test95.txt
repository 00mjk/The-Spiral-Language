module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

[<System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential,Pack=1)>]
type EnvPackedStack0 =
    struct
    val mem_0: float
    val mem_1: float
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0((var_0: (EnvPackedStack0 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 8L)
    if var_2 then
        let (var_3: float) = (float var_1)
        let (var_4: float) = (var_3 - 30.000000)
        let (var_5: EnvPackedStack0) = EnvPackedStack0((var_3: float), (var_4: float))
        var_0.[int32 var_1] <- var_5
        let (var_6: int64) = (var_1 + 1L)
        method_0((var_0: (EnvPackedStack0 [])), (var_6: int64))
    else
        ()
and method_1((var_0: (EnvPackedStack0 [])), (var_1: int64)): string =
    let (var_2: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_3: System.Text.StringBuilder) = var_2.Append("[|")
    let (var_4: int64) = var_0.LongLength
    let (var_5: bool) = (var_4 > var_1)
    let (var_6: int64) =
        if var_5 then
            var_1
        else
            var_4
    let (var_7: string) = ""
    let (var_8: int64) = 0L
    let (var_9: string) = method_2((var_2: System.Text.StringBuilder), (var_0: (EnvPackedStack0 [])), (var_6: int64), (var_8: int64), (var_7: string))
    let (var_10: System.Text.StringBuilder) = var_2.Append("|]")
    var_2.ToString()
and method_2((var_0: System.Text.StringBuilder), (var_1: (EnvPackedStack0 [])), (var_2: int64), (var_3: int64), (var_4: string)): string =
    let (var_5: bool) = (var_3 < var_2)
    if var_5 then
        let (var_6: System.Text.StringBuilder) = var_0.Append(var_4)
        let (var_7: EnvPackedStack0) = var_1.[int32 var_3]
        let (var_8: float) = var_7.mem_1
        let (var_9: string) = System.String.Format("{0}",var_8)
        let (var_10: string) = System.String.Format("{0} = {1}","y",var_9)
        let (var_11: float) = var_7.mem_0
        let (var_12: string) = System.String.Format("{0}",var_11)
        let (var_13: string) = System.String.Format("{0} = {1}","x",var_12)
        let (var_14: string) = String.concat "; " [|var_13; var_10|]
        let (var_15: string) = System.String.Format("{0}{1}{2}","{",var_14,"}")
        let (var_16: System.Text.StringBuilder) = var_0.Append(var_15)
        let (var_17: string) = "; "
        let (var_18: int64) = (var_3 + 1L)
        method_2((var_0: System.Text.StringBuilder), (var_1: (EnvPackedStack0 [])), (var_2: int64), (var_18: int64), (var_17: string))
    else
        var_4
let (var_3: (EnvPackedStack0 [])) = Array.zeroCreate<EnvPackedStack0> (System.Convert.ToInt32(8L))
let (var_4: int64) = 0L
method_0((var_3: (EnvPackedStack0 [])), (var_4: int64))
let (var_5: int64) = 30L
method_1((var_3: (EnvPackedStack0 [])), (var_5: int64))
