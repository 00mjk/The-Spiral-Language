module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 6L)
    if var_2 then
        var_0.[int32 var_1] <- var_1
        let (var_3: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_3: int64))
    else
        ()
and method_1((var_0: (int64 [])), (var_1: int64), (var_2: (int64 [])), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = var_0.[int32 var_3]
        var_2.[int32 var_3] <- var_7
        let (var_8: int64) = (var_3 + 1L)
        method_1((var_0: (int64 [])), (var_1: int64), (var_2: (int64 [])), (var_8: int64))
    else
        ()
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(6L))
let (var_1: int64) = 0L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_2: int64) = var_0.LongLength
let (var_6: bool) = (var_2 > 0L)
let (var_7: bool) = (var_6 = false)
if var_7 then
    (failwith "Tensor must be at least of size 1.")
else
    ()
let (var_8: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_2))
let (var_9: int64) = 0L
method_1((var_0: (int64 [])), (var_2: int64), (var_8: (int64 [])), (var_9: int64))
let (var_10: int64) = 2L
let (var_11: int64) = 3L
let (var_12: int64) = (var_10 * var_11)
let (var_13: bool) = (var_12 = var_2)
let (var_14: bool) = (var_13 = false)
if var_14 then
    (failwith "The product of dimensions of the new tensor must equal that of the previous one.")
else
    ()
let (var_15: bool) = (var_10 = 2L)
let (var_17: bool) =
    if var_15 then
        (var_11 = 3L)
    else
        false
let (var_18: bool) = (var_17 = false)
if var_18 then
    (failwith "The dimensions do not match.")
else
    ()
let (var_19: bool) = (6L = var_12)
let (var_20: bool) = (var_19 = false)
if var_20 then
    (failwith "The product of dimensions of the new tensor must equal that of the previous one.")
else
    ()
let (var_21: int64) = var_8.[int32 3L]

