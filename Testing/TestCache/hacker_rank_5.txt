module SpiralExample.Main
let cuda_kernels = """
#include <assert.h>

extern "C" {
    
}
"""

let rec method_0((var_0: bool), (var_1: string), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 >= 0L)
    let (var_6: bool) =
        if var_3 then
            let (var_4: int64) = (int64 var_1.Length)
            (var_2 < var_4)
        else
            false
    if var_6 then
        let (var_7: char) = var_1.[int32 var_2]
        let (var_8: bool) = (var_7 >= '0')
        let (var_10: bool) =
            if var_8 then
                (var_7 <= '9')
            else
                false
        let (var_11: int64) = (var_2 + 1L)
        if var_10 then
            let (var_12: int64) = System.Convert.ToInt64(var_7)
            let (var_13: int64) = System.Convert.ToInt64('0')
            let (var_14: int64) = (var_12 - var_13)
            method_1((var_0: bool), (var_1: string), (var_14: int64), (var_11: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_1((var_0: bool), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_1.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_1.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            let (var_16: bool) = (var_2 = 922337203685477580L)
            let (var_18: bool) =
                if var_16 then
                    (var_15 <= 7L)
                else
                    false
            let (var_20: bool) =
                if var_18 then
                    true
                else
                    (var_2 < 922337203685477580L)
            if var_20 then
                let (var_21: int64) = (var_2 * 10L)
                let (var_22: int64) = (var_21 + var_15)
                method_1((var_0: bool), (var_1: string), (var_22: int64), (var_12: int64))
            else
                (failwith "integer overflow")
        else
            let (var_24: int64) =
                if var_0 then
                    var_2
                else
                    (-var_2)
            let (var_25: int64) = 0L
            method_2((var_24: int64), (var_1: string), (var_25: int64), (var_3: int64))
    else
        let (var_27: int64) =
            if var_0 then
                var_2
            else
                (-var_2)
        let (var_28: int64) = 0L
        method_2((var_27: int64), (var_1: string), (var_28: int64), (var_3: int64))
and method_2((var_0: int64), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: int64) = (var_2 + 1L)
    let (var_5: bool) = (var_3 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_1.Length)
            (var_3 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_1.[int32 var_3]
        let (var_10: bool) = (var_9 = ' ')
        let (var_14: bool) =
            if var_10 then
                true
            else
                let (var_11: bool) = (var_9 = '\n')
                if var_11 then
                    true
                else
                    (var_9 = '\r')
        let (var_15: int64) = (var_3 + 1L)
        if var_14 then
            method_2((var_0: int64), (var_1: string), (var_4: int64), (var_15: int64))
        else
            let (var_16: int64) = 0L
            method_3((var_1: string), (var_16: int64), (var_0: int64), (var_3: int64))
    else
        let (var_17: int64) = 0L
        method_3((var_1: string), (var_17: int64), (var_0: int64), (var_3: int64))
and method_3((var_0: string), (var_1: int64), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_1 < var_2)
    if var_4 then
        let (var_5: int64) = (var_1 + 1L)
        let (var_6: bool) = (var_3 >= 0L)
        let (var_9: bool) =
            if var_6 then
                let (var_7: int64) = (int64 var_0.Length)
                (var_3 < var_7)
            else
                false
        if var_9 then
            let (var_10: char) = var_0.[int32 var_3]
            let (var_11: bool) = ('-' = var_10)
            let (var_12: int64) = (var_3 + 1L)
            if var_11 then
                let (var_13: bool) = false
                method_4((var_13: bool), (var_5: int64), (var_2: int64), (var_0: string), (var_12: int64))
            else
                let (var_14: bool) = true
                method_4((var_14: bool), (var_5: int64), (var_2: int64), (var_0: string), (var_3: int64))
        else
            let (var_15: bool) = true
            method_4((var_15: bool), (var_5: int64), (var_2: int64), (var_0: string), (var_3: int64))
    else
        ()
and method_4((var_0: bool), (var_1: int64), (var_2: int64), (var_3: string), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_3.Length)
            (var_4 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_3.[int32 var_4]
        let (var_10: bool) = (var_9 >= '0')
        let (var_12: bool) =
            if var_10 then
                (var_9 <= '9')
            else
                false
        let (var_13: int64) = (var_4 + 1L)
        if var_12 then
            let (var_14: int64) = System.Convert.ToInt64(var_9)
            let (var_15: int64) = System.Convert.ToInt64('0')
            let (var_16: int64) = (var_14 - var_15)
            method_5((var_0: bool), (var_1: int64), (var_2: int64), (var_3: string), (var_16: int64), (var_13: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_5((var_0: bool), (var_1: int64), (var_2: int64), (var_3: string), (var_4: int64), (var_5: int64)): unit =
    let (var_6: bool) = (var_5 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_3.Length)
            (var_5 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_3.[int32 var_5]
        let (var_11: bool) = (var_10 >= '0')
        let (var_13: bool) =
            if var_11 then
                (var_10 <= '9')
            else
                false
        let (var_14: int64) = (var_5 + 1L)
        if var_13 then
            let (var_15: int64) = System.Convert.ToInt64(var_10)
            let (var_16: int64) = System.Convert.ToInt64('0')
            let (var_17: int64) = (var_15 - var_16)
            let (var_18: bool) = (var_4 = 922337203685477580L)
            let (var_20: bool) =
                if var_18 then
                    (var_17 <= 7L)
                else
                    false
            let (var_22: bool) =
                if var_20 then
                    true
                else
                    (var_4 < 922337203685477580L)
            if var_22 then
                let (var_23: int64) = (var_4 * 10L)
                let (var_24: int64) = (var_23 + var_17)
                method_5((var_0: bool), (var_1: int64), (var_2: int64), (var_3: string), (var_24: int64), (var_14: int64))
            else
                (failwith "integer overflow")
        else
            let (var_26: int64) =
                if var_0 then
                    var_4
                else
                    (-var_4)
            let (var_27: int64) = 0L
            method_6((var_26: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_27: int64), (var_5: int64))
    else
        let (var_29: int64) =
            if var_0 then
                var_4
            else
                (-var_4)
        let (var_30: int64) = 0L
        method_6((var_29: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_30: int64), (var_5: int64))
and method_6((var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_4: int64), (var_5: int64)): unit =
    let (var_6: int64) = (var_4 + 1L)
    let (var_7: bool) = (var_5 >= 0L)
    let (var_10: bool) =
        if var_7 then
            let (var_8: int64) = (int64 var_3.Length)
            (var_5 < var_8)
        else
            false
    if var_10 then
        let (var_11: char) = var_3.[int32 var_5]
        let (var_12: bool) = (var_11 = ' ')
        let (var_16: bool) =
            if var_12 then
                true
            else
                let (var_13: bool) = (var_11 = '\n')
                if var_13 then
                    true
                else
                    (var_11 = '\r')
        let (var_17: int64) = (var_5 + 1L)
        if var_16 then
            method_6((var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_6: int64), (var_17: int64))
        else
            let (var_20: bool) =
                if var_7 then
                    let (var_18: int64) = (int64 var_3.Length)
                    (var_5 < var_18)
                else
                    false
            if var_20 then
                let (var_21: bool) = ('-' = var_11)
                if var_21 then
                    let (var_22: bool) = false
                    method_7((var_22: bool), (var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_17: int64))
                else
                    let (var_23: bool) = true
                    method_7((var_23: bool), (var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_5: int64))
            else
                let (var_24: bool) = true
                method_7((var_24: bool), (var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_5: int64))
    else
        let (var_27: bool) =
            if var_7 then
                let (var_25: int64) = (int64 var_3.Length)
                (var_5 < var_25)
            else
                false
        if var_27 then
            let (var_28: char) = var_3.[int32 var_5]
            let (var_29: bool) = ('-' = var_28)
            let (var_30: int64) = (var_5 + 1L)
            if var_29 then
                let (var_31: bool) = false
                method_7((var_31: bool), (var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_30: int64))
            else
                let (var_32: bool) = true
                method_7((var_32: bool), (var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_5: int64))
        else
            let (var_33: bool) = true
            method_7((var_33: bool), (var_0: int64), (var_1: int64), (var_2: int64), (var_3: string), (var_5: int64))
and method_7((var_0: bool), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64)): unit =
    let (var_6: bool) = (var_5 >= 0L)
    let (var_9: bool) =
        if var_6 then
            let (var_7: int64) = (int64 var_4.Length)
            (var_5 < var_7)
        else
            false
    if var_9 then
        let (var_10: char) = var_4.[int32 var_5]
        let (var_11: bool) = (var_10 >= '0')
        let (var_13: bool) =
            if var_11 then
                (var_10 <= '9')
            else
                false
        let (var_14: int64) = (var_5 + 1L)
        if var_13 then
            let (var_15: int64) = System.Convert.ToInt64(var_10)
            let (var_16: int64) = System.Convert.ToInt64('0')
            let (var_17: int64) = (var_15 - var_16)
            method_8((var_0: bool), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_17: int64), (var_14: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_8((var_0: bool), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64), (var_6: int64)): unit =
    let (var_7: bool) = (var_6 >= 0L)
    let (var_10: bool) =
        if var_7 then
            let (var_8: int64) = (int64 var_4.Length)
            (var_6 < var_8)
        else
            false
    if var_10 then
        let (var_11: char) = var_4.[int32 var_6]
        let (var_12: bool) = (var_11 >= '0')
        let (var_14: bool) =
            if var_12 then
                (var_11 <= '9')
            else
                false
        let (var_15: int64) = (var_6 + 1L)
        if var_14 then
            let (var_16: int64) = System.Convert.ToInt64(var_11)
            let (var_17: int64) = System.Convert.ToInt64('0')
            let (var_18: int64) = (var_16 - var_17)
            let (var_19: bool) = (var_5 = 922337203685477580L)
            let (var_21: bool) =
                if var_19 then
                    (var_18 <= 7L)
                else
                    false
            let (var_23: bool) =
                if var_21 then
                    true
                else
                    (var_5 < 922337203685477580L)
            if var_23 then
                let (var_24: int64) = (var_5 * 10L)
                let (var_25: int64) = (var_24 + var_18)
                method_8((var_0: bool), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_25: int64), (var_15: int64))
            else
                (failwith "integer overflow")
        else
            let (var_27: int64) =
                if var_0 then
                    var_5
                else
                    (-var_5)
            let (var_28: int64) = 0L
            method_9((var_27: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_28: int64), (var_6: int64))
    else
        let (var_30: int64) =
            if var_0 then
                var_5
            else
                (-var_5)
        let (var_31: int64) = 0L
        method_9((var_30: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_31: int64), (var_6: int64))
and method_9((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_5: int64), (var_6: int64)): unit =
    let (var_7: int64) = (var_5 + 1L)
    let (var_8: bool) = (var_6 >= 0L)
    let (var_11: bool) =
        if var_8 then
            let (var_9: int64) = (int64 var_4.Length)
            (var_6 < var_9)
        else
            false
    if var_11 then
        let (var_12: char) = var_4.[int32 var_6]
        let (var_13: bool) = (var_12 = ' ')
        let (var_17: bool) =
            if var_13 then
                true
            else
                let (var_14: bool) = (var_12 = '\n')
                if var_14 then
                    true
                else
                    (var_12 = '\r')
        let (var_18: int64) = (var_6 + 1L)
        if var_17 then
            method_9((var_0: int64), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: string), (var_7: int64), (var_18: int64))
        else
            let (var_19: bool) = (var_0 = 1L)
            let (var_22: bool) =
                if var_19 then
                    true
                else
                    let (var_20: int64) = (var_1 % 2L)
                    (var_20 = 0L)
            let (var_23: int64) =
                if var_22 then
                    2L
                else
                    1L
            let (var_24: string) = System.String.Format("{0}",var_23)
            System.Console.WriteLine(var_24)
            method_3((var_4: string), (var_2: int64), (var_3: int64), (var_6: int64))
    else
        let (var_25: bool) = (var_0 = 1L)
        let (var_28: bool) =
            if var_25 then
                true
            else
                let (var_26: int64) = (var_1 % 2L)
                (var_26 = 0L)
        let (var_29: int64) =
            if var_28 then
                2L
            else
                1L
        let (var_30: string) = System.String.Format("{0}",var_29)
        System.Console.WriteLine(var_30)
        method_3((var_4: string), (var_2: int64), (var_3: int64), (var_6: int64))
let (var_0: System.IO.Stream) = System.Console.OpenStandardInput()
let (var_1: System.IO.StreamReader) = System.IO.StreamReader(var_0)
let (var_2: string) = var_1.ReadToEnd()
let (var_3: int64) = 0L
let (var_4: bool) = (var_3 >= 0L)
let (var_7: bool) =
    if var_4 then
        let (var_5: int64) = (int64 var_2.Length)
        (var_3 < var_5)
    else
        false
if var_7 then
    let (var_8: char) = var_2.[int32 var_3]
    let (var_9: bool) = ('-' = var_8)
    let (var_10: int64) = (var_3 + 1L)
    if var_9 then
        let (var_11: bool) = false
        method_0((var_11: bool), (var_2: string), (var_10: int64))
    else
        let (var_12: bool) = true
        method_0((var_12: bool), (var_2: string), (var_3: int64))
else
    let (var_13: bool) = true
    method_0((var_13: bool), (var_2: string), (var_3: int64))

