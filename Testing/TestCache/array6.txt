let rec method_0 ((var_3 : (int64 [])), (var_4 : int64)) : unit =
    let ((var_5 : bool)) = var_4 < 16L
    if var_5 then
        let ((var_6 : int64)) = var_4 + 1L
        let ((var_7 : int64)) = method_2 (var_4)
        let () = var_3.[int32 var_4] <- var_7
        method_0 (var_3, var_6)
    else
        ()
and method_1 ((var_3 : (int64 [])), (var_8 : int64), (var_9 : int64)) : unit =
    let ((var_10 : bool)) = var_9 < var_8
    if var_10 then
        let ((var_11 : int64)) = var_9 + 1L
        let ((var_12 : int64)) = var_3.[int32 var_9]
        let () = System.Console.WriteLine(var_12)
        method_1 (var_3, var_8, var_11)
    else
        ()
and method_2 ((var_1 : int64)) : int64 =
    var_1
let ((var_3 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 16L)
let ((var_4 : int64)) = 0L
let () = method_0 (var_3, var_4)
let ((var_8 : int64)) = var_3.LongLength
let ((var_9 : int64)) = 0L
let () = method_1 (var_3, var_8, var_9)
