module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

type Env0 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple1 =
    struct
    val mem_0: Env0
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env2 =
    struct
    val mem_0: (int64 [])
    val mem_1: Tuple1
    val mem_2: int64
    val mem_3: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3}
    end
and Env3 =
    struct
    val mem_0: int64
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple4 =
    struct
    val mem_0: Env3
    val mem_1: Env3
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env5 =
    struct
    val mem_0: Env2
    val mem_1: Tuple4
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env6 =
    struct
    val mem_0: Env5
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 2L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 0L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 * 2L)
        let (var_6: int64) = 0L
        method_1((var_1: int64), (var_0: (int64 [])), (var_5: int64), (var_6: int64))
        let (var_7: int64) = (var_1 + 1L)
        method_0((var_0: (int64 [])), (var_7: int64))
    else
        ()
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 2L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 2L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_3((var_0: (int64 [])), (var_6: int64), (var_1: (int64 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_8: int64))
    else
        ()
and method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 2L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_2 + var_3)
        let (var_8: int64) = (var_0 * 2L)
        let (var_9: int64) = (var_8 + var_3)
        var_1.[int32 var_7] <- var_9
        let (var_10: int64) = (var_3 + 1L)
        method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_10: int64))
    else
        ()
and method_3((var_0: (int64 [])), (var_1: int64), (var_2: (int64 [])), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 2L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_1 + var_3)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = var_0.[int32 var_7]
        let (var_9: int64) = (2L * var_8)
        var_2.[int32 var_7] <- var_9
        let (var_10: int64) = (var_3 + 1L)
        method_3((var_0: (int64 [])), (var_1: int64), (var_2: (int64 [])), (var_10: int64))
    else
        ()
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(4L))
let (var_1: int64) = 0L
method_0((var_0: (int64 [])), (var_1: int64))
let (var_4: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(4L))
let (var_5: int64) = 0L
method_2((var_0: (int64 [])), (var_4: (int64 [])), (var_5: int64))
(Env6((Env5((Env2(var_4, Tuple1((Env0(0L, 1L))), 0L, 2L)), Tuple4((Env3(0L, 2L)), (Env3(0L, 2L)))))))
