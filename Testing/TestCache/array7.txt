let rec method_0 ((var_10 : ((int64 []) [])), (var_11 : int64)) : unit =
    let ((var_12 : bool)) = var_11 < 4L
    if var_12 then
        let ((var_13 : int64)) = var_11 + 1L
        let ((var_18 : (int64 []))) = method_3 (var_11)
        let () = var_10.[int32 var_11] <- var_18
        method_0 (var_10, var_13)
    else
        ()
and method_1 ((var_10 : ((int64 []) [])), (var_20 : int64), (var_21 : int64), (var_19 : int64)) : int64 =
    let ((var_22 : bool)) = var_21 < var_20
    if var_22 then
        let ((var_23 : int64)) = var_21 + 1L
        let ((var_24 : (int64 []))) = var_10.[int32 var_21]
        let ((var_25 : int64)) = var_24.LongLength
        let ((var_26 : int64)) = var_19 + var_25
        method_1 (var_10, var_20, var_23, var_26)
    else
        var_19
and method_2 ((var_10 : ((int64 []) [])), (var_32 : (int64 [])), (var_20 : int64), (var_34 : int64), (var_33 : int64)) : int64 =
    let ((var_35 : bool)) = var_34 < var_20
    if var_35 then
        let ((var_36 : int64)) = var_34 + 1L
        let ((var_37 : (int64 []))) = var_10.[int32 var_34]
        let ((var_38 : int64)) = var_37.LongLength
        let ((var_39 : int64)) = 0L
        let ((var_46 : int64)) = method_4 (var_37, var_32, var_38, var_39, var_33)
        method_2 (var_10, var_32, var_20, var_36, var_46)
    else
        var_33
and method_3 ((var_11 : int64)) : (int64 []) =
    let ((var_16 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 8L)
    let ((var_17 : int64)) = 0L
    let () = method_5 (var_16, var_17)
    var_16
and method_4 ((var_37 : (int64 [])), (var_32 : (int64 [])), (var_38 : int64), (var_39 : int64), (var_33 : int64)) : int64 =
    let ((var_40 : bool)) = var_39 < var_38
    if var_40 then
        let ((var_41 : int64)) = var_39 + 1L
        let ((var_42 : int64)) = var_37.[int32 var_39]
        let () = var_32.[int32 var_33] <- var_42
        let ((var_43 : int64)) = var_33 + 1L
        method_4 (var_37, var_32, var_38, var_41, var_43)
    else
        var_33
and method_5 ((var_4 : (int64 [])), (var_5 : int64)) : unit =
    let ((var_6 : bool)) = var_5 < 8L
    if var_6 then
        let ((var_7 : int64)) = var_5 + 1L
        let ((var_8 : int64)) = method_6 (var_5)
        let () = var_4.[int32 var_5] <- var_8
        method_5 (var_4, var_7)
    else
        ()
and method_6 ((var_5 : int64)) : int64 =
    var_5
let ((var_10 : ((int64 []) []))) = Array.zeroCreate (System.Convert.ToInt32 4L)
let ((var_11 : int64)) = 0L
let () = method_0 (var_10, var_11)
let ((var_19 : int64)) = 0L
let ((var_20 : int64)) = var_10.LongLength
let ((var_21 : int64)) = 0L
let ((var_29 : int64)) = method_1 (var_10, var_20, var_21, var_19)
let ((var_32 : (int64 []))) = Array.zeroCreate (System.Convert.ToInt32 var_29)
let ((var_33 : int64)) = 0L
let ((var_34 : int64)) = 0L
let ((var_49 : int64)) = method_2 (var_10, var_32, var_20, var_34, var_33)
