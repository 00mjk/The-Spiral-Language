module SpiralExample.Main
let cuda_kernels = """

extern "C" {
    
}
"""

let rec method_0((var_0: bool), (var_1: string), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 >= 0L)
    let (var_6: bool) =
        if var_3 then
            let (var_4: int64) = (int64 var_1.Length)
            (var_2 < var_4)
        else
            false
    if var_6 then
        let (var_7: char) = var_1.[int32 var_2]
        let (var_8: bool) = (var_7 >= '0')
        let (var_10: bool) =
            if var_8 then
                (var_7 <= '9')
            else
                false
        let (var_11: int64) = (var_2 + 1L)
        if var_10 then
            let (var_12: int64) = System.Convert.ToInt64(var_7)
            let (var_13: int64) = System.Convert.ToInt64('0')
            let (var_14: int64) = (var_12 - var_13)
            method_1((var_0: bool), (var_1: string), (var_14: int64), (var_11: int64))
        else
            (failwith "pint64")
    else
        (failwith "pint64")
and method_1((var_0: bool), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 >= 0L)
    let (var_7: bool) =
        if var_4 then
            let (var_5: int64) = (int64 var_1.Length)
            (var_3 < var_5)
        else
            false
    if var_7 then
        let (var_8: char) = var_1.[int32 var_3]
        let (var_9: bool) = (var_8 >= '0')
        let (var_11: bool) =
            if var_9 then
                (var_8 <= '9')
            else
                false
        let (var_12: int64) = (var_3 + 1L)
        if var_11 then
            let (var_13: int64) = System.Convert.ToInt64(var_8)
            let (var_14: int64) = System.Convert.ToInt64('0')
            let (var_15: int64) = (var_13 - var_14)
            let (var_16: bool) = (var_2 = 922337203685477580L)
            let (var_18: bool) =
                if var_16 then
                    (var_15 <= 7L)
                else
                    false
            let (var_20: bool) =
                if var_18 then
                    true
                else
                    (var_2 < 922337203685477580L)
            if var_20 then
                let (var_21: int64) = (var_2 * 10L)
                let (var_22: int64) = (var_21 + var_15)
                method_1((var_0: bool), (var_1: string), (var_22: int64), (var_12: int64))
            else
                (failwith "integer overflow")
        else
            let (var_24: int64) =
                if var_0 then
                    var_2
                else
                    (-var_2)
            let (var_25: int64) = 0L
            method_2((var_24: int64), (var_1: string), (var_25: int64), (var_3: int64))
    else
        let (var_27: int64) =
            if var_0 then
                var_2
            else
                (-var_2)
        let (var_28: int64) = 0L
        method_2((var_27: int64), (var_1: string), (var_28: int64), (var_3: int64))
and method_2((var_0: int64), (var_1: string), (var_2: int64), (var_3: int64)): unit =
    let (var_4: int64) = (var_2 + 1L)
    let (var_5: bool) = (var_3 >= 0L)
    let (var_8: bool) =
        if var_5 then
            let (var_6: int64) = (int64 var_1.Length)
            (var_3 < var_6)
        else
            false
    if var_8 then
        let (var_9: char) = var_1.[int32 var_3]
        let (var_10: bool) = (var_9 = ' ')
        let (var_14: bool) =
            if var_10 then
                true
            else
                let (var_11: bool) = (var_9 = '\n')
                if var_11 then
                    true
                else
                    (var_9 = '\r')
        let (var_15: int64) = (var_3 + 1L)
        if var_14 then
            method_2((var_0: int64), (var_1: string), (var_4: int64), (var_15: int64))
        else
            let (var_16: string) = System.String.Format("{0}",var_0)
            System.Console.WriteLine(var_16)
    else
        let (var_17: string) = System.String.Format("{0}",var_0)
        System.Console.WriteLine(var_17)
let (var_0: string) = "1 2 3"
let (var_1: int64) = 0L
let (var_2: bool) = (var_1 >= 0L)
let (var_5: bool) =
    if var_2 then
        let (var_3: int64) = (int64 var_0.Length)
        (var_1 < var_3)
    else
        false
if var_5 then
    let (var_6: char) = var_0.[int32 var_1]
    let (var_7: bool) = ('-' = var_6)
    let (var_8: int64) = (var_1 + 1L)
    if var_7 then
        let (var_9: bool) = false
        method_0((var_9: bool), (var_0: string), (var_8: int64))
    else
        let (var_10: bool) = true
        method_0((var_10: bool), (var_0: string), (var_1: int64))
else
    let (var_11: bool) = true
    method_0((var_11: bool), (var_0: string), (var_1: int64))

