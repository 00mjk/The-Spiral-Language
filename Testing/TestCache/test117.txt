module SpiralExample.Main
let cuda_kernels = """
#include <assert.h>

extern "C" {
    
}
"""

let rec method_0((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 1L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 5L)
        let (var_7: int64) = 0L
        method_1((var_2: int64), (var_0: (int64 [])), (var_6: int64), (var_1: (int64 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_0((var_0: (int64 [])), (var_1: (int64 [])), (var_8: int64))
    else
        ()
and method_2((var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64)): unit =
    let (var_10: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_11: string) = ""
    let (var_12: int64) = 0L
    let (var_13: int64) = 0L
    method_3((var_10: System.Text.StringBuilder), (var_13: int64))
    let (var_14: System.Text.StringBuilder) = var_10.AppendLine("[|")
    let (var_15: int64) = 0L
    let (var_16: int64) = method_4((var_10: System.Text.StringBuilder), (var_11: string), (var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_12: int64), (var_15: int64))
    let (var_17: int64) = 0L
    method_3((var_10: System.Text.StringBuilder), (var_17: int64))
    let (var_18: System.Text.StringBuilder) = var_10.AppendLine("|]")
    let (var_19: string) = var_10.ToString()
    System.Console.Write(var_19)
and method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 5L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 0L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_2 + var_4)
        var_1.[int32 var_8] <- var_0
        var_3.[int32 var_8] <- var_4
        let (var_9: int64) = (var_4 + 1L)
        method_1((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_9: int64))
    else
        ()
and method_3((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_3((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_4((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64)): int64 =
    let (var_14: bool) = (var_13 < var_10)
    if var_14 then
        let (var_15: bool) = (var_12 < 1000L)
        if var_15 then
            let (var_16: bool) = (var_13 >= 0L)
            let (var_17: bool) = (var_16 = false)
            if var_17 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_18: int64) = (var_13 * var_4)
            let (var_19: int64) = (var_3 + var_18)
            let (var_20: int64) = (var_13 * var_8)
            let (var_21: int64) = (var_7 + var_20)
            let (var_22: int64) = 0L
            method_5((var_0: System.Text.StringBuilder), (var_22: int64))
            let (var_23: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_24: int64) = 0L
            let (var_25: int64) = method_6((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_19: int64), (var_5: int64), (var_6: (int64 [])), (var_21: int64), (var_9: int64), (var_11: int64), (var_1: string), (var_12: int64), (var_24: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_27: int64) = (var_13 + 1L)
            method_4((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_25: int64), (var_27: int64))
        else
            let (var_29: int64) = 0L
            method_3((var_0: System.Text.StringBuilder), (var_29: int64))
            let (var_30: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_12
    else
        var_12
and method_5((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_5((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_6((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: string), (var_9: int64), (var_10: int64)): int64 =
    let (var_11: bool) = (var_10 < var_7)
    if var_11 then
        let (var_12: bool) = (var_9 < 1000L)
        if var_12 then
            let (var_13: System.Text.StringBuilder) = var_0.Append(var_8)
            let (var_14: bool) = (var_10 >= 0L)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = (var_10 * var_3)
            let (var_17: int64) = (var_2 + var_16)
            let (var_18: int64) = (var_10 * var_6)
            let (var_19: int64) = (var_5 + var_18)
            let (var_20: int64) = var_1.[int32 var_17]
            let (var_21: int64) = var_4.[int32 var_19]
            let (var_22: string) = System.String.Format("{0}",var_21)
            let (var_23: string) = System.String.Format("{0}",var_20)
            let (var_24: string) = String.concat ", " [|var_23; var_22|]
            let (var_25: string) = System.String.Format("[{0}]",var_24)
            let (var_26: System.Text.StringBuilder) = var_0.Append(var_25)
            let (var_27: string) = "; "
            let (var_28: int64) = (var_9 + 1L)
            let (var_29: int64) = (var_10 + 1L)
            method_6((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_27: string), (var_28: int64), (var_29: int64))
        else
            let (var_31: System.Text.StringBuilder) = var_0.Append("...")
            var_9
    else
        var_9
let (var_0: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(5L))
let (var_1: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(5L))
let (var_2: int64) = 0L
method_0((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64))
let (var_3: int64) = 0L
let (var_4: int64) = 0L
let (var_5: int64) = 1L
let (var_6: int64) = 0L
let (var_7: int64) = 0L
let (var_8: int64) = 1L
let (var_9: int64) = 5L
let (var_10: int64) = 5L
method_2((var_0: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_1: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64))

