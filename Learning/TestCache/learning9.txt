module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    struct Tuple1 {
        float mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple1 make_Tuple1(float mem_0, float mem_1){
        Tuple1 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef float(*FunPointer0)(float, float);
    struct Tuple4 {
        Tuple1 mem_0;
        Tuple1 mem_1;
    };
    __device__ __forceinline__ Tuple4 make_Tuple4(Tuple1 mem_0, Tuple1 mem_1){
        Tuple4 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef Tuple1(*FunPointer2)(Tuple1, Tuple1);
    struct Tuple3 {
        float mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ Tuple3 make_Tuple3(float mem_0, float mem_1, float mem_2){
        Tuple3 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    __global__ void method_112(float * var_0, float * var_1);
    __global__ void method_115(float * var_0, float * var_1);
    __global__ void method_119(float * var_0, float * var_1);
    __global__ void method_122(float * var_0, float * var_1);
    __global__ void method_54(float * var_0, float * var_1, float * var_2);
    __global__ void method_83(float * var_0, float * var_1, float * var_2);
    __global__ void method_96(float * var_0, float * var_1, float * var_2);
    __global__ void method_101(float * var_0, float * var_1);
    __global__ void method_136(long long int * var_0, long long int * var_1);
    __global__ void method_60(float * var_0, float * var_1);
    __global__ void method_130(float * var_0, float * var_1, long long int * var_2);
    __global__ void method_66(float * var_0, float * var_1, float * var_2);
    __global__ void method_71(float * var_0, float * var_1);
    __global__ void method_91(float * var_0, float * var_1);
    __global__ void method_106(float * var_0, float * var_1, float * var_2);
    __device__ char method_55(long long int * var_0);
    __device__ char method_116(long long int * var_0);
    __device__ char method_84(long long int * var_0);
    __device__ char method_123(long long int * var_0);
    __device__ char method_56(long long int * var_0);
    __device__ char method_61(long long int * var_0);
    __device__ float method_97(float var_0, float var_1);
    __device__ char method_72(long long int * var_0, float * var_1);
    __device__ char method_137(long long int * var_0, long long int * var_1);
    __device__ char method_131(long long int * var_0, float * var_1, float * var_2);
    __device__ Tuple1 method_132(Tuple1 var_0, Tuple1 var_1);
    __device__ char method_73(long long int * var_0, float * var_1);
    __device__ char method_74(long long int var_0, long long int * var_1, float * var_2);
    
    __global__ void method_112(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_55(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 256);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 256);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_115(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_116(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 200704);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 200704);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_119(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_84(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 10);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 128);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_122(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_123(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 2560);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 2560);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 2560);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_54(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (32 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_55(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 256);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_56(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 128);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_26 = (var_21 * 256);
                char var_28;
                if (var_10) {
                    var_28 = (var_9 < 256);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_26 + var_9);
                char var_32;
                if (var_22) {
                    var_32 = (var_21 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                char var_35;
                if (var_10) {
                    var_35 = (var_9 < 256);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                float var_37 = var_1[var_30];
                float var_38 = var_2[var_30];
                float var_39 = (var_14 + var_37);
                var_2[var_30] = var_39;
                long long int var_40 = (var_21 + 32);
                var_19[0] = var_40;
            }
            long long int var_41 = var_19[0];
            long long int var_42 = (var_9 + 256);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_83(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_84(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 10);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_56(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 128);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_26 = (var_21 * 10);
                char var_28;
                if (var_10) {
                    var_28 = (var_9 < 10);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_26 + var_9);
                char var_32;
                if (var_22) {
                    var_32 = (var_21 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                char var_35;
                if (var_10) {
                    var_35 = (var_9 < 10);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                float var_37 = var_1[var_30];
                float var_38 = var_2[var_30];
                float var_39 = (var_14 + var_37);
                var_2[var_30] = var_39;
                long long int var_40 = (var_21 + 32);
                var_19[0] = var_40;
            }
            long long int var_41 = var_19[0];
            long long int var_42 = (var_9 + 10);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_96(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_56(var_10)) {
            long long int var_12 = var_10[0];
            float var_26[1];
            long long int var_27[1];
            var_27[0] = 0;
            while (method_61(var_27)) {
                long long int var_29 = var_27[0];
                long long int var_30 = (10 * var_29);
                long long int var_31 = (var_6 + var_30);
                long long int var_32 = (10 - var_30);
                char var_33 = (var_31 < 10);
                if (var_33) {
                    char var_34 = (var_29 >= 0);
                    char var_36;
                    if (var_34) {
                        var_36 = (var_29 < 1);
                    } else {
                        var_36 = 0;
                    }
                    char var_37 = (var_36 == 0);
                    if (var_37) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_38 = (var_12 >= 0);
                    char var_40;
                    if (var_38) {
                        var_40 = (var_12 < 128);
                    } else {
                        var_40 = 0;
                    }
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 * 10);
                    char var_43 = (var_31 >= 0);
                    char var_44 = (var_43 == 0);
                    if (var_44) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_45 = (var_42 + var_31);
                    float var_46 = var_0[var_45];
                    var_26[var_29] = var_46;
                } else {
                }
                long long int var_47 = (var_29 + 1);
                var_27[0] = var_47;
            }
            long long int var_48 = var_27[0];
            FunPointer0 var_51 = method_97;
            float var_52 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_26, var_51);
            __shared__ float var_53[1];
            long long int var_54 = threadIdx.x;
            char var_55 = (var_54 == 0);
            if (var_55) {
                var_53[0] = var_52;
            } else {
            }
            __syncthreads();
            float var_56 = var_53[0];
            float var_66[1];
            long long int var_67[1];
            var_67[0] = 0;
            while (method_61(var_67)) {
                long long int var_69 = var_67[0];
                long long int var_70 = (10 * var_69);
                long long int var_71 = (var_6 + var_70);
                long long int var_72 = (10 - var_70);
                char var_73 = (var_71 < 10);
                if (var_73) {
                    char var_74 = (var_69 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_69 < 1);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_79;
                    if (var_74) {
                        var_79 = (var_69 < 1);
                    } else {
                        var_79 = 0;
                    }
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_81 = var_26[var_69];
                    float var_82 = (var_81 - var_56);
                    float var_83 = exp(var_82);
                    var_66[var_69] = var_83;
                } else {
                }
                long long int var_84 = (var_69 + 1);
                var_67[0] = var_84;
            }
            long long int var_85 = var_67[0];
            float var_86 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_66);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            float var_113[1];
            long long int var_114[1];
            var_114[0] = 0;
            while (method_61(var_114)) {
                long long int var_116 = var_114[0];
                long long int var_117 = (10 * var_116);
                long long int var_118 = (var_6 + var_117);
                long long int var_119 = (10 - var_117);
                char var_120 = (var_118 < 10);
                if (var_120) {
                    char var_121 = (var_116 >= 0);
                    char var_123;
                    if (var_121) {
                        var_123 = (var_116 < 1);
                    } else {
                        var_123 = 0;
                    }
                    char var_124 = (var_123 == 0);
                    if (var_124) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_126;
                    if (var_121) {
                        var_126 = (var_116 < 1);
                    } else {
                        var_126 = 0;
                    }
                    char var_127 = (var_126 == 0);
                    if (var_127) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_128 = var_66[var_116];
                    float var_129 = (var_128 / var_90);
                    char var_130 = (var_12 >= 0);
                    char var_132;
                    if (var_130) {
                        var_132 = (var_12 < 128);
                    } else {
                        var_132 = 0;
                    }
                    char var_133 = (var_132 == 0);
                    if (var_133) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_134 = (var_12 * 10);
                    char var_135 = (var_118 >= 0);
                    char var_136 = (var_135 == 0);
                    if (var_136) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_137 = (var_134 + var_118);
                    float var_138 = var_1[var_137];
                    float var_139 = (-var_138);
                    float var_140 = log(var_129);
                    float var_141 = (var_139 * var_140);
                    var_113[var_116] = var_141;
                } else {
                }
                long long int var_142 = (var_116 + 1);
                var_114[0] = var_142;
            }
            long long int var_143 = var_114[0];
            float var_144 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_113);
            long long int var_145[1];
            var_145[0] = 0;
            while (method_61(var_145)) {
                long long int var_147 = var_145[0];
                long long int var_148 = (10 * var_147);
                long long int var_149 = (var_6 + var_148);
                long long int var_150 = (10 - var_148);
                char var_151 = (var_149 < 10);
                if (var_151) {
                    char var_152 = (var_147 >= 0);
                    char var_154;
                    if (var_152) {
                        var_154 = (var_147 < 1);
                    } else {
                        var_154 = 0;
                    }
                    char var_155 = (var_154 == 0);
                    if (var_155) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_156 = var_113[var_147];
                    long long int var_157 = threadIdx.x;
                    char var_158 = (var_157 == 0);
                    if (var_158) {
                        char var_159 = (var_12 >= 0);
                        char var_161;
                        if (var_159) {
                            var_161 = (var_12 < 128);
                        } else {
                            var_161 = 0;
                        }
                        char var_162 = (var_161 == 0);
                        if (var_162) {
                            // "Argument out of bounds."
                        } else {
                        }
                        float var_163 = (var_144 / 128);
                        var_2[var_12] = var_163;
                    } else {
                    }
                } else {
                }
                long long int var_164 = (var_147 + 1);
                var_145[0] = var_164;
            }
            long long int var_165 = var_145[0];
            long long int var_166 = (var_12 + 64);
            var_10[0] = var_166;
        }
        long long int var_167 = var_10[0];
    }
    __global__ void method_101(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        float var_6 = 0;
        long long int var_7[1];
        float var_8[1];
        var_7[0] = var_5;
        var_8[0] = var_6;
        while (method_72(var_7, var_8)) {
            long long int var_10 = var_7[0];
            float var_11 = var_8[0];
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_10];
            float var_17 = (var_11 + var_16);
            long long int var_18 = (var_10 + 128);
            var_7[0] = var_18;
            var_8[0] = var_17;
        }
        long long int var_19 = var_7[0];
        float var_20 = var_8[0];
        float var_21 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_20);
        long long int var_22 = threadIdx.x;
        char var_23 = (var_22 == 0);
        if (var_23) {
            long long int var_24 = blockIdx.x;
            char var_25 = (var_24 >= 0);
            char var_27;
            if (var_25) {
                var_27 = (var_24 < 1);
            } else {
                var_27 = 0;
            }
            char var_28 = (var_27 == 0);
            if (var_28) {
                // "Argument out of bounds."
            } else {
            }
            var_1[var_24] = var_21;
        } else {
        }
    }
    __global__ void method_136(long long int * var_0, long long int * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6 = 0;
        long long int var_7[1];
        long long int var_8[1];
        var_7[0] = var_5;
        var_8[0] = var_6;
        while (method_137(var_7, var_8)) {
            long long int var_10 = var_7[0];
            long long int var_11 = var_8[0];
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = var_0[var_10];
            long long int var_17 = (var_11 + var_16);
            long long int var_18 = (var_10 + 128);
            var_7[0] = var_18;
            var_8[0] = var_17;
        }
        long long int var_19 = var_7[0];
        long long int var_20 = var_8[0];
        long long int var_21 = cub::BlockReduce<long long int,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_20);
        long long int var_22 = threadIdx.x;
        char var_23 = (var_22 == 0);
        if (var_23) {
            long long int var_24 = blockIdx.x;
            char var_25 = (var_24 >= 0);
            char var_27;
            if (var_25) {
                var_27 = (var_24 < 1);
            } else {
                var_27 = 0;
            }
            char var_28 = (var_27 == 0);
            if (var_28) {
                // "Argument out of bounds."
            } else {
            }
            var_1[var_24] = var_21;
        } else {
        }
    }
    __global__ void method_60(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (256 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6 = threadIdx.y;
        long long int var_7 = blockIdx.y;
        long long int var_8 = (var_6 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_56(var_9)) {
            long long int var_11 = var_9[0];
            float var_25[1];
            long long int var_26[1];
            var_26[0] = 0;
            while (method_61(var_26)) {
                long long int var_28 = var_26[0];
                long long int var_29 = (256 * var_28);
                long long int var_30 = (var_5 + var_29);
                long long int var_31 = (256 - var_29);
                char var_32 = (var_30 < 256);
                if (var_32) {
                    char var_33 = (var_28 >= 0);
                    char var_35;
                    if (var_33) {
                        var_35 = (var_28 < 1);
                    } else {
                        var_35 = 0;
                    }
                    char var_36 = (var_35 == 0);
                    if (var_36) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_37 = (var_11 >= 0);
                    char var_39;
                    if (var_37) {
                        var_39 = (var_11 < 128);
                    } else {
                        var_39 = 0;
                    }
                    char var_40 = (var_39 == 0);
                    if (var_40) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_41 = (var_11 * 256);
                    char var_42 = (var_30 >= 0);
                    char var_43 = (var_42 == 0);
                    if (var_43) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_44 = (var_41 + var_30);
                    float var_45 = var_0[var_44];
                    var_25[var_28] = var_45;
                } else {
                }
                long long int var_46 = (var_28 + 1);
                var_26[0] = var_46;
            }
            long long int var_47 = var_26[0];
            float var_48 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_25);
            __shared__ float var_49[1];
            long long int var_50 = threadIdx.x;
            char var_51 = (var_50 == 0);
            if (var_51) {
                var_49[0] = var_48;
            } else {
            }
            __syncthreads();
            float var_52 = var_49[0];
            float var_62[1];
            long long int var_63[1];
            var_63[0] = 0;
            while (method_61(var_63)) {
                long long int var_65 = var_63[0];
                long long int var_66 = (256 * var_65);
                long long int var_67 = (var_5 + var_66);
                long long int var_68 = (256 - var_66);
                char var_69 = (var_67 < 256);
                if (var_69) {
                    char var_70 = (var_65 >= 0);
                    char var_72;
                    if (var_70) {
                        var_72 = (var_65 < 1);
                    } else {
                        var_72 = 0;
                    }
                    char var_73 = (var_72 == 0);
                    if (var_73) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_75;
                    if (var_70) {
                        var_75 = (var_65 < 1);
                    } else {
                        var_75 = 0;
                    }
                    char var_76 = (var_75 == 0);
                    if (var_76) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_77 = var_25[var_65];
                    float var_78 = (var_52 / 256);
                    float var_79 = (var_77 - var_78);
                    var_62[var_65] = var_79;
                } else {
                }
                long long int var_80 = (var_65 + 1);
                var_63[0] = var_80;
            }
            long long int var_81 = var_63[0];
            float var_90[1];
            long long int var_91[1];
            var_91[0] = 0;
            while (method_61(var_91)) {
                long long int var_93 = var_91[0];
                long long int var_94 = (256 * var_93);
                long long int var_95 = (var_5 + var_94);
                long long int var_96 = (256 - var_94);
                char var_97 = (var_95 < 256);
                if (var_97) {
                    char var_98 = (var_93 >= 0);
                    char var_100;
                    if (var_98) {
                        var_100 = (var_93 < 1);
                    } else {
                        var_100 = 0;
                    }
                    char var_101 = (var_100 == 0);
                    if (var_101) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_103;
                    if (var_98) {
                        var_103 = (var_93 < 1);
                    } else {
                        var_103 = 0;
                    }
                    char var_104 = (var_103 == 0);
                    if (var_104) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_105 = var_62[var_93];
                    float var_106 = (var_105 * var_105);
                    var_90[var_93] = var_106;
                } else {
                }
                long long int var_107 = (var_93 + 1);
                var_91[0] = var_107;
            }
            long long int var_108 = var_91[0];
            float var_109 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_90);
            __shared__ float var_110[1];
            long long int var_111 = threadIdx.x;
            char var_112 = (var_111 == 0);
            if (var_112) {
                var_110[0] = var_109;
            } else {
            }
            __syncthreads();
            float var_113 = var_110[0];
            long long int var_114[1];
            var_114[0] = 0;
            while (method_61(var_114)) {
                long long int var_116 = var_114[0];
                long long int var_117 = (256 * var_116);
                long long int var_118 = (var_5 + var_117);
                long long int var_119 = (256 - var_117);
                char var_120 = (var_118 < 256);
                if (var_120) {
                    char var_121 = (var_116 >= 0);
                    char var_123;
                    if (var_121) {
                        var_123 = (var_116 < 1);
                    } else {
                        var_123 = 0;
                    }
                    char var_124 = (var_123 == 0);
                    if (var_124) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_125 = var_62[var_116];
                    char var_126 = (var_11 >= 0);
                    char var_128;
                    if (var_126) {
                        var_128 = (var_11 < 128);
                    } else {
                        var_128 = 0;
                    }
                    char var_129 = (var_128 == 0);
                    if (var_129) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_130 = (var_11 * 256);
                    char var_131 = (var_118 >= 0);
                    char var_132 = (var_131 == 0);
                    if (var_132) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_133 = (var_130 + var_118);
                    float var_134 = var_1[var_133];
                    float var_135 = (var_113 / 256);
                    float var_136 = sqrt(var_135);
                    float var_137 = (var_125 / var_136);
                    char var_138 = (var_137 > 0);
                    float var_139;
                    if (var_138) {
                        var_139 = var_137;
                    } else {
                        var_139 = 0;
                    }
                    var_1[var_133] = var_139;
                } else {
                }
                long long int var_140 = (var_116 + 1);
                var_114[0] = var_140;
            }
            long long int var_141 = var_114[0];
            long long int var_142 = (var_11 + 64);
            var_9[0] = var_142;
        }
        long long int var_143 = var_9[0];
    }
    __global__ void method_130(float * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.y;
        long long int var_4 = blockIdx.y;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_56(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_8 * 10);
            char var_15;
            if (var_9) {
                var_15 = (var_8 < 128);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.x;
            long long int var_18 = blockIdx.x;
            long long int var_19 = (10 * var_18);
            long long int var_20 = (var_17 + var_19);
            float var_21 = __int_as_float(0xff800000);
            float var_22 = 0;
            long long int var_23[1];
            float var_24[1];
            float var_25[1];
            var_23[0] = var_20;
            var_24[0] = var_21;
            var_25[0] = var_22;
            while (method_131(var_23, var_24, var_25)) {
                long long int var_27 = var_23[0];
                float var_28 = var_24[0];
                float var_29 = var_25[0];
                char var_30 = (var_27 >= 0);
                char var_32;
                if (var_30) {
                    var_32 = (var_27 < 10);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_13 + var_27);
                float var_35 = var_0[var_34];
                float var_36 = var_1[var_34];
                char var_37 = (var_28 > var_35);
                Tuple1 var_38;
                if (var_37) {
                    var_38 = make_Tuple1(var_28, var_29);
                } else {
                    var_38 = make_Tuple1(var_35, var_36);
                }
                float var_39 = var_38.mem_0;
                float var_40 = var_38.mem_1;
                long long int var_41 = (var_27 + 10);
                var_23[0] = var_41;
                var_24[0] = var_39;
                var_25[0] = var_40;
            }
            long long int var_42 = var_23[0];
            float var_43 = var_24[0];
            float var_44 = var_25[0];
            FunPointer2 var_47 = method_132;
            Tuple1 var_48 = cub::BlockReduce<Tuple1,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(make_Tuple1(var_43, var_44), var_47);
            float var_49 = var_48.mem_0;
            float var_50 = var_48.mem_1;
            long long int var_51 = threadIdx.x;
            char var_52 = (var_51 == 0);
            if (var_52) {
                char var_54;
                if (var_9) {
                    var_54 = (var_8 < 128);
                } else {
                    var_54 = 0;
                }
                char var_55 = (var_54 == 0);
                if (var_55) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_56 = var_2[var_8];
                long long int var_57 = ((long long int) (var_50));
                var_2[var_8] = var_57;
            } else {
            }
            long long int var_58 = (var_8 + 64);
            var_6[0] = var_58;
        }
        long long int var_59 = var_6[0];
    }
    __global__ void method_66(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (256 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_56(var_10)) {
            long long int var_12 = var_10[0];
            Tuple1 var_27[1];
            long long int var_28[1];
            var_28[0] = 0;
            while (method_61(var_28)) {
                long long int var_30 = var_28[0];
                long long int var_31 = (256 * var_30);
                long long int var_32 = (var_6 + var_31);
                long long int var_33 = (256 - var_31);
                char var_34 = (var_32 < 256);
                if (var_34) {
                    char var_35 = (var_30 >= 0);
                    char var_37;
                    if (var_35) {
                        var_37 = (var_30 < 1);
                    } else {
                        var_37 = 0;
                    }
                    char var_38 = (var_37 == 0);
                    if (var_38) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_39 = (var_12 >= 0);
                    char var_41;
                    if (var_39) {
                        var_41 = (var_12 < 128);
                    } else {
                        var_41 = 0;
                    }
                    char var_42 = (var_41 == 0);
                    if (var_42) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_43 = (var_12 * 256);
                    char var_44 = (var_32 >= 0);
                    char var_45 = (var_44 == 0);
                    if (var_45) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_46 = (var_43 + var_32);
                    float var_47 = var_0[var_46];
                    float var_48 = var_1[var_46];
                    var_27[var_30] = make_Tuple1(var_47, var_48);
                } else {
                }
                long long int var_49 = (var_30 + 1);
                var_28[0] = var_49;
            }
            long long int var_50 = var_28[0];
            float var_60[1];
            long long int var_61[1];
            var_61[0] = 0;
            while (method_61(var_61)) {
                long long int var_63 = var_61[0];
                long long int var_64 = (256 * var_63);
                long long int var_65 = (var_6 + var_64);
                long long int var_66 = (256 - var_64);
                char var_67 = (var_65 < 256);
                if (var_67) {
                    char var_68 = (var_63 >= 0);
                    char var_70;
                    if (var_68) {
                        var_70 = (var_63 < 1);
                    } else {
                        var_70 = 0;
                    }
                    char var_71 = (var_70 == 0);
                    if (var_71) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_73;
                    if (var_68) {
                        var_73 = (var_63 < 1);
                    } else {
                        var_73 = 0;
                    }
                    char var_74 = (var_73 == 0);
                    if (var_74) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_75 = var_27[var_63];
                    float var_76 = var_75.mem_0;
                    float var_77 = var_75.mem_1;
                    var_60[var_63] = var_77;
                } else {
                }
                long long int var_78 = (var_63 + 1);
                var_61[0] = var_78;
            }
            long long int var_79 = var_61[0];
            float var_80 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_60);
            __shared__ float var_81[1];
            long long int var_82 = threadIdx.x;
            char var_83 = (var_82 == 0);
            if (var_83) {
                var_81[0] = var_80;
            } else {
            }
            __syncthreads();
            float var_84 = var_81[0];
            Tuple1 var_96[1];
            long long int var_97[1];
            var_97[0] = 0;
            while (method_61(var_97)) {
                long long int var_99 = var_97[0];
                long long int var_100 = (256 * var_99);
                long long int var_101 = (var_6 + var_100);
                long long int var_102 = (256 - var_100);
                char var_103 = (var_101 < 256);
                if (var_103) {
                    char var_104 = (var_99 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_99 < 1);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_109;
                    if (var_104) {
                        var_109 = (var_99 < 1);
                    } else {
                        var_109 = 0;
                    }
                    char var_110 = (var_109 == 0);
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_111 = var_27[var_99];
                    float var_112 = var_111.mem_0;
                    float var_113 = var_111.mem_1;
                    float var_114 = (var_84 / 256);
                    float var_115 = (var_113 - var_114);
                    var_96[var_99] = make_Tuple1(var_112, var_115);
                } else {
                }
                long long int var_116 = (var_99 + 1);
                var_97[0] = var_116;
            }
            long long int var_117 = var_97[0];
            float var_128[1];
            long long int var_129[1];
            var_129[0] = 0;
            while (method_61(var_129)) {
                long long int var_131 = var_129[0];
                long long int var_132 = (256 * var_131);
                long long int var_133 = (var_6 + var_132);
                long long int var_134 = (256 - var_132);
                char var_135 = (var_133 < 256);
                if (var_135) {
                    char var_136 = (var_131 >= 0);
                    char var_138;
                    if (var_136) {
                        var_138 = (var_131 < 1);
                    } else {
                        var_138 = 0;
                    }
                    char var_139 = (var_138 == 0);
                    if (var_139) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_141;
                    if (var_136) {
                        var_141 = (var_131 < 1);
                    } else {
                        var_141 = 0;
                    }
                    char var_142 = (var_141 == 0);
                    if (var_142) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_143 = var_96[var_131];
                    float var_144 = var_143.mem_0;
                    float var_145 = var_143.mem_1;
                    float var_146 = (var_145 * var_145);
                    var_128[var_131] = var_146;
                } else {
                }
                long long int var_147 = (var_131 + 1);
                var_129[0] = var_147;
            }
            long long int var_148 = var_129[0];
            float var_149 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_128);
            __shared__ float var_150[1];
            long long int var_151 = threadIdx.x;
            char var_152 = (var_151 == 0);
            if (var_152) {
                var_150[0] = var_149;
            } else {
            }
            __syncthreads();
            float var_153 = var_150[0];
            Tuple3 var_167[1];
            long long int var_168[1];
            var_168[0] = 0;
            while (method_61(var_168)) {
                long long int var_170 = var_168[0];
                long long int var_171 = (256 * var_170);
                long long int var_172 = (var_6 + var_171);
                long long int var_173 = (256 - var_171);
                char var_174 = (var_172 < 256);
                if (var_174) {
                    char var_175 = (var_170 >= 0);
                    char var_177;
                    if (var_175) {
                        var_177 = (var_170 < 1);
                    } else {
                        var_177 = 0;
                    }
                    char var_178 = (var_177 == 0);
                    if (var_178) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_180;
                    if (var_175) {
                        var_180 = (var_170 < 1);
                    } else {
                        var_180 = 0;
                    }
                    char var_181 = (var_180 == 0);
                    if (var_181) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_182 = var_96[var_170];
                    float var_183 = var_182.mem_0;
                    float var_184 = var_182.mem_1;
                    char var_185 = (var_184 > 0);
                    float var_186;
                    if (var_185) {
                        var_186 = var_183;
                    } else {
                        var_186 = 0;
                    }
                    float var_187 = (var_153 / 256);
                    float var_188 = sqrt(var_187);
                    var_167[var_170] = make_Tuple3(var_186, var_184, var_188);
                } else {
                }
                long long int var_189 = (var_170 + 1);
                var_168[0] = var_189;
            }
            long long int var_190 = var_168[0];
            float var_205[1];
            long long int var_206[1];
            var_206[0] = 0;
            while (method_61(var_206)) {
                long long int var_208 = var_206[0];
                long long int var_209 = (256 * var_208);
                long long int var_210 = (var_6 + var_209);
                long long int var_211 = (256 - var_209);
                char var_212 = (var_210 < 256);
                if (var_212) {
                    char var_213 = (var_208 >= 0);
                    char var_215;
                    if (var_213) {
                        var_215 = (var_208 < 1);
                    } else {
                        var_215 = 0;
                    }
                    char var_216 = (var_215 == 0);
                    if (var_216) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_218;
                    if (var_213) {
                        var_218 = (var_208 < 1);
                    } else {
                        var_218 = 0;
                    }
                    char var_219 = (var_218 == 0);
                    if (var_219) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_220 = var_167[var_208];
                    float var_221 = var_220.mem_0;
                    float var_222 = var_220.mem_1;
                    float var_223 = var_220.mem_2;
                    float var_224 = (-var_221);
                    float var_225 = (var_224 * var_222);
                    float var_226 = (var_223 * var_223);
                    float var_227 = (var_225 / var_226);
                    var_205[var_208] = var_227;
                } else {
                }
                long long int var_228 = (var_208 + 1);
                var_206[0] = var_228;
            }
            long long int var_229 = var_206[0];
            float var_230 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_205);
            __shared__ float var_231[1];
            long long int var_232 = threadIdx.x;
            char var_233 = (var_232 == 0);
            if (var_233) {
                var_231[0] = var_230;
            } else {
            }
            __syncthreads();
            float var_234 = var_231[0];
            float var_250[1];
            long long int var_251[1];
            var_251[0] = 0;
            while (method_61(var_251)) {
                long long int var_253 = var_251[0];
                long long int var_254 = (256 * var_253);
                long long int var_255 = (var_6 + var_254);
                long long int var_256 = (256 - var_254);
                char var_257 = (var_255 < 256);
                if (var_257) {
                    char var_258 = (var_253 >= 0);
                    char var_260;
                    if (var_258) {
                        var_260 = (var_253 < 1);
                    } else {
                        var_260 = 0;
                    }
                    char var_261 = (var_260 == 0);
                    if (var_261) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_263;
                    if (var_258) {
                        var_263 = (var_253 < 1);
                    } else {
                        var_263 = 0;
                    }
                    char var_264 = (var_263 == 0);
                    if (var_264) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_265 = var_167[var_253];
                    float var_266 = var_265.mem_0;
                    float var_267 = var_265.mem_1;
                    float var_268 = var_265.mem_2;
                    float var_269 = (var_266 / var_268);
                    float var_270 = (var_234 * var_267);
                    float var_271 = (var_268 * 256);
                    float var_272 = (var_270 / var_271);
                    float var_273 = (var_269 + var_272);
                    var_250[var_253] = var_273;
                } else {
                }
                long long int var_274 = (var_253 + 1);
                var_251[0] = var_274;
            }
            long long int var_275 = var_251[0];
            float var_276 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_250);
            __shared__ float var_277[1];
            long long int var_278 = threadIdx.x;
            char var_279 = (var_278 == 0);
            if (var_279) {
                var_277[0] = var_276;
            } else {
            }
            __syncthreads();
            float var_280 = var_277[0];
            long long int var_281[1];
            var_281[0] = 0;
            while (method_61(var_281)) {
                long long int var_283 = var_281[0];
                long long int var_284 = (256 * var_283);
                long long int var_285 = (var_6 + var_284);
                long long int var_286 = (256 - var_284);
                char var_287 = (var_285 < 256);
                if (var_287) {
                    char var_288 = (var_283 >= 0);
                    char var_290;
                    if (var_288) {
                        var_290 = (var_283 < 1);
                    } else {
                        var_290 = 0;
                    }
                    char var_291 = (var_290 == 0);
                    if (var_291) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_292 = var_250[var_283];
                    char var_293 = (var_12 >= 0);
                    char var_295;
                    if (var_293) {
                        var_295 = (var_12 < 128);
                    } else {
                        var_295 = 0;
                    }
                    char var_296 = (var_295 == 0);
                    if (var_296) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_297 = (var_12 * 256);
                    char var_298 = (var_285 >= 0);
                    char var_299 = (var_298 == 0);
                    if (var_299) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_300 = (var_297 + var_285);
                    float var_301 = var_2[var_300];
                    float var_302 = (var_301 + var_292);
                    float var_303 = (var_280 / 256);
                    float var_304 = (var_302 - var_303);
                    var_2[var_300] = var_304;
                } else {
                }
                long long int var_305 = (var_283 + 1);
                var_281[0] = var_305;
            }
            long long int var_306 = var_281[0];
            long long int var_307 = (var_12 + 64);
            var_10[0] = var_307;
        }
        long long int var_308 = var_10[0];
    }
    __global__ void method_71(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_55(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 256);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_20 = 0;
            long long int var_21[1];
            float var_22[1];
            var_21[0] = var_19;
            var_22[0] = var_20;
            while (method_72(var_21, var_22)) {
                long long int var_24 = var_21[0];
                float var_25 = var_22[0];
                char var_26 = (var_24 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_24 < 128);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_24 * 256);
                char var_32;
                if (var_9) {
                    var_32 = (var_8 < 256);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_8);
                float var_35 = var_0[var_34];
                float var_36 = (var_25 + var_35);
                long long int var_37 = (var_24 + 32);
                var_21[0] = var_37;
                var_22[0] = var_36;
            }
            long long int var_38 = var_21[0];
            float var_39 = var_22[0];
            long long int var_40 = threadIdx.x;
            long long int var_41 = threadIdx.y;
            __shared__ float var_42[992];
            long long int var_43[1];
            float var_44[1];
            var_43[0] = 32;
            var_44[0] = var_39;
            while (method_73(var_43, var_44)) {
                long long int var_46 = var_43[0];
                float var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                char var_49 = (var_41 < var_46);
                char var_51;
                if (var_49) {
                    var_51 = (var_41 >= var_48);
                } else {
                    var_51 = 0;
                }
                if (var_51) {
                    char var_52 = (var_41 >= 1);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_41 < 32);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_41 - 1);
                    long long int var_57 = (var_56 * 32);
                    char var_58 = (var_40 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_40 < 32);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 + var_40);
                    var_42[var_62] = var_47;
                } else {
                }
                __syncthreads();
                char var_63 = (var_41 < var_48);
                float var_86;
                if (var_63) {
                    long long int var_64 = (var_41 + var_48);
                    long long int var_65[1];
                    float var_66[1];
                    var_65[0] = var_64;
                    var_66[0] = var_47;
                    while (method_74(var_46, var_65, var_66)) {
                        long long int var_68 = var_65[0];
                        float var_69 = var_66[0];
                        char var_70 = (var_68 >= 1);
                        char var_72;
                        if (var_70) {
                            var_72 = (var_68 < 32);
                        } else {
                            var_72 = 0;
                        }
                        char var_73 = (var_72 == 0);
                        if (var_73) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_74 = (var_68 - 1);
                        long long int var_75 = (var_74 * 32);
                        char var_76 = (var_40 >= 0);
                        char var_78;
                        if (var_76) {
                            var_78 = (var_40 < 32);
                        } else {
                            var_78 = 0;
                        }
                        char var_79 = (var_78 == 0);
                        if (var_79) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_80 = (var_75 + var_40);
                        float var_81 = var_42[var_80];
                        float var_82 = (var_69 + var_81);
                        long long int var_83 = (var_68 + var_48);
                        var_65[0] = var_83;
                        var_66[0] = var_82;
                    }
                    long long int var_84 = var_65[0];
                    var_86 = var_66[0];
                } else {
                    var_86 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_86;
            }
            long long int var_87 = var_43[0];
            float var_88 = var_44[0];
            long long int var_89 = threadIdx.y;
            char var_90 = (var_89 == 0);
            if (var_90) {
                float var_91 = var_1[var_8];
                float var_92 = (var_88 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 256);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_91(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (10 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_84(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 10);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_20 = 0;
            long long int var_21[1];
            float var_22[1];
            var_21[0] = var_19;
            var_22[0] = var_20;
            while (method_72(var_21, var_22)) {
                long long int var_24 = var_21[0];
                float var_25 = var_22[0];
                char var_26 = (var_24 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_24 < 128);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_24 * 10);
                char var_32;
                if (var_9) {
                    var_32 = (var_8 < 10);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_8);
                float var_35 = var_0[var_34];
                float var_36 = (var_25 + var_35);
                long long int var_37 = (var_24 + 32);
                var_21[0] = var_37;
                var_22[0] = var_36;
            }
            long long int var_38 = var_21[0];
            float var_39 = var_22[0];
            long long int var_40 = threadIdx.x;
            long long int var_41 = threadIdx.y;
            __shared__ float var_42[310];
            long long int var_43[1];
            float var_44[1];
            var_43[0] = 32;
            var_44[0] = var_39;
            while (method_73(var_43, var_44)) {
                long long int var_46 = var_43[0];
                float var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                char var_49 = (var_41 < var_46);
                char var_51;
                if (var_49) {
                    var_51 = (var_41 >= var_48);
                } else {
                    var_51 = 0;
                }
                if (var_51) {
                    char var_52 = (var_41 >= 1);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_41 < 32);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_41 - 1);
                    long long int var_57 = (var_56 * 10);
                    char var_58 = (var_40 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_40 < 10);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 + var_40);
                    var_42[var_62] = var_47;
                } else {
                }
                __syncthreads();
                char var_63 = (var_41 < var_48);
                float var_86;
                if (var_63) {
                    long long int var_64 = (var_41 + var_48);
                    long long int var_65[1];
                    float var_66[1];
                    var_65[0] = var_64;
                    var_66[0] = var_47;
                    while (method_74(var_46, var_65, var_66)) {
                        long long int var_68 = var_65[0];
                        float var_69 = var_66[0];
                        char var_70 = (var_68 >= 1);
                        char var_72;
                        if (var_70) {
                            var_72 = (var_68 < 32);
                        } else {
                            var_72 = 0;
                        }
                        char var_73 = (var_72 == 0);
                        if (var_73) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_74 = (var_68 - 1);
                        long long int var_75 = (var_74 * 10);
                        char var_76 = (var_40 >= 0);
                        char var_78;
                        if (var_76) {
                            var_78 = (var_40 < 10);
                        } else {
                            var_78 = 0;
                        }
                        char var_79 = (var_78 == 0);
                        if (var_79) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_80 = (var_75 + var_40);
                        float var_81 = var_42[var_80];
                        float var_82 = (var_69 + var_81);
                        long long int var_83 = (var_68 + var_48);
                        var_65[0] = var_83;
                        var_66[0] = var_82;
                    }
                    long long int var_84 = var_65[0];
                    var_86 = var_66[0];
                } else {
                    var_86 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_86;
            }
            long long int var_87 = var_43[0];
            float var_88 = var_44[0];
            long long int var_89 = threadIdx.y;
            char var_90 = (var_89 == 0);
            if (var_90) {
                float var_91 = var_1[var_8];
                float var_92 = (var_88 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 10);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_106(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_56(var_10)) {
            long long int var_12 = var_10[0];
            float var_26[1];
            long long int var_27[1];
            var_27[0] = 0;
            while (method_61(var_27)) {
                long long int var_29 = var_27[0];
                long long int var_30 = (10 * var_29);
                long long int var_31 = (var_6 + var_30);
                long long int var_32 = (10 - var_30);
                char var_33 = (var_31 < 10);
                if (var_33) {
                    char var_34 = (var_29 >= 0);
                    char var_36;
                    if (var_34) {
                        var_36 = (var_29 < 1);
                    } else {
                        var_36 = 0;
                    }
                    char var_37 = (var_36 == 0);
                    if (var_37) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_38 = (var_12 >= 0);
                    char var_40;
                    if (var_38) {
                        var_40 = (var_12 < 128);
                    } else {
                        var_40 = 0;
                    }
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 * 10);
                    char var_43 = (var_31 >= 0);
                    char var_44 = (var_43 == 0);
                    if (var_44) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_45 = (var_42 + var_31);
                    float var_46 = var_0[var_45];
                    var_26[var_29] = var_46;
                } else {
                }
                long long int var_47 = (var_29 + 1);
                var_27[0] = var_47;
            }
            long long int var_48 = var_27[0];
            FunPointer0 var_51 = method_97;
            float var_52 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_26, var_51);
            __shared__ float var_53[1];
            long long int var_54 = threadIdx.x;
            char var_55 = (var_54 == 0);
            if (var_55) {
                var_53[0] = var_52;
            } else {
            }
            __syncthreads();
            float var_56 = var_53[0];
            float var_66[1];
            long long int var_67[1];
            var_67[0] = 0;
            while (method_61(var_67)) {
                long long int var_69 = var_67[0];
                long long int var_70 = (10 * var_69);
                long long int var_71 = (var_6 + var_70);
                long long int var_72 = (10 - var_70);
                char var_73 = (var_71 < 10);
                if (var_73) {
                    char var_74 = (var_69 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_69 < 1);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_79;
                    if (var_74) {
                        var_79 = (var_69 < 1);
                    } else {
                        var_79 = 0;
                    }
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_81 = var_26[var_69];
                    float var_82 = (var_81 - var_56);
                    float var_83 = exp(var_82);
                    var_66[var_69] = var_83;
                } else {
                }
                long long int var_84 = (var_69 + 1);
                var_67[0] = var_84;
            }
            long long int var_85 = var_67[0];
            float var_86 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_66);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            long long int var_91[1];
            var_91[0] = 0;
            while (method_61(var_91)) {
                long long int var_93 = var_91[0];
                long long int var_94 = (10 * var_93);
                long long int var_95 = (var_6 + var_94);
                long long int var_96 = (10 - var_94);
                char var_97 = (var_95 < 10);
                if (var_97) {
                    char var_98 = (var_93 >= 0);
                    char var_100;
                    if (var_98) {
                        var_100 = (var_93 < 1);
                    } else {
                        var_100 = 0;
                    }
                    char var_101 = (var_100 == 0);
                    if (var_101) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_102 = var_66[var_93];
                    float var_103 = (var_102 / var_90);
                    char var_104 = (var_12 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_12 < 128);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_108 = (var_12 * 10);
                    char var_109 = (var_95 >= 0);
                    char var_110 = (var_109 == 0);
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_111 = (var_108 + var_95);
                    float var_112 = var_2[var_111];
                    char var_114;
                    if (var_104) {
                        var_114 = (var_12 < 128);
                    } else {
                        var_114 = 0;
                    }
                    char var_115 = (var_114 == 0);
                    if (var_115) {
                        // "Argument out of bounds."
                    } else {
                    }
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_117;
                    if (var_104) {
                        var_117 = (var_12 < 128);
                    } else {
                        var_117 = 0;
                    }
                    char var_118 = (var_117 == 0);
                    if (var_118) {
                        // "Argument out of bounds."
                    } else {
                    }
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_119 = var_1[var_111];
                    float var_120 = (var_103 - var_112);
                    float var_121 = (var_120 / 128);
                    float var_122 = (var_119 + var_121);
                    var_1[var_111] = var_122;
                } else {
                }
                long long int var_123 = (var_93 + 1);
                var_91[0] = var_123;
            }
            long long int var_124 = var_91[0];
            long long int var_125 = (var_12 + 64);
            var_10[0] = var_125;
        }
        long long int var_126 = var_10[0];
    }
    __device__ char method_55(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 256);
    }
    __device__ char method_116(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 200704);
    }
    __device__ char method_84(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 10);
    }
    __device__ char method_123(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 2560);
    }
    __device__ char method_56(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 128);
    }
    __device__ char method_61(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1);
    }
    __device__ float method_97(float var_0, float var_1) {
        char var_2 = (var_0 > var_1);
        if (var_2) {
            return var_0;
        } else {
            return var_1;
        }
    }
    __device__ char method_72(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_137(long long int * var_0, long long int * var_1) {
        long long int var_2 = var_0[0];
        long long int var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_131(long long int * var_0, float * var_1, float * var_2) {
        long long int var_3 = var_0[0];
        float var_4 = var_1[0];
        float var_5 = var_2[0];
        return (var_3 < 10);
    }
    __device__ Tuple1 method_132(Tuple1 var_0, Tuple1 var_1) {
        float var_2 = var_0.mem_0;
        float var_3 = var_0.mem_1;
        float var_4 = var_1.mem_0;
        float var_5 = var_1.mem_1;
        char var_6 = (var_2 > var_4);
        Tuple1 var_7;
        if (var_6) {
            var_7 = make_Tuple1(var_2, var_3);
        } else {
            var_7 = make_Tuple1(var_4, var_5);
        }
        float var_8 = var_7.mem_0;
        float var_9 = var_7.mem_1;
        return make_Tuple1(var_8, var_9);
    }
    __device__ char method_73(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_74(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and Env1 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<Env1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: Env22
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack4 =
    struct
    val mem_0: ResizeArray<Env3>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap5 =
    {
    mem_0: EnvStack2
    mem_1: (uint64 ref)
    mem_2: uint64
    mem_3: EnvStack4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap5
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap5
    }
and EnvHeap8 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap5
    }
and Env9 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env22
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack10 =
    struct
    val mem_0: ResizeArray<Env9>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap11 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvHeap5
    }
and Env12 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env16
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack13 =
    struct
    val mem_0: ResizeArray<Env12>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    }
and EnvHeap15 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env16 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    mem_6: (int64 ref)
    mem_7: EnvHeap15
    }
and Tuple18 =
    struct
    val mem_0: Tuple19
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple19 =
    struct
    val mem_0: int64
    val mem_1: int64
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and Tuple20 =
    struct
    val mem_0: int64
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env21 =
    struct
    val mem_0: Env9
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env22 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack23 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack24 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap25 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    }
and EnvStack26 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack27 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap28 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    }
and Tuple29 =
    struct
    val mem_0: float
    val mem_1: int64
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack30 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack31 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack32 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack33 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack34 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack35 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack36 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack37 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack38 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap6), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_7((var_0: EnvHeap15), (var_1: EnvHeap14), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_9((var_0: string)): Tuple18 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2051)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2051i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int32) = var_5.ReadInt32()
    let (var_13: int32) = System.Net.IPAddress.NetworkToHostOrder(var_12)
    let (var_14: int32) = var_5.ReadInt32()
    let (var_15: int32) = System.Net.IPAddress.NetworkToHostOrder(var_14)
    let (var_16: int64) = (int64 var_11)
    let (var_17: int64) = (int64 var_13)
    let (var_18: int64) = (int64 var_15)
    let (var_19: int32) = (var_11 * var_13)
    let (var_20: int32) = (var_19 * var_15)
    let (var_22: (uint8 [])) = var_5.ReadBytes(var_20)
    var_5.Dispose()
    var_4.Dispose()
    Tuple18(Tuple19(var_16, var_17, var_18), var_22)
and method_10((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_11((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_10((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_12((var_0: string)): Tuple20 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2049)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2049i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int64) = (int64 var_11)
    let (var_14: (uint8 [])) = var_5.ReadBytes(var_11)
    var_5.Dispose()
    var_4.Dispose()
    Tuple20(var_12, var_14)
and method_13((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_14((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_13((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_11((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_16((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_14((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_16((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_17((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (float32 [])), (var_4: int64), (var_5: int64), (var_6: int64)): Env21 =
    let (var_7: (int64 ref)) = var_0.mem_6
    let (var_8: EnvHeap15) = var_0.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    let (var_10: int64) = (var_2 * var_5)
    let (var_11: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_3,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_12: int64) = var_11.AddrOfPinnedObject().ToInt64()
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: int64) = (var_4 * 4L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_15 + var_13)
    let (var_17: Env9) = method_19((var_10: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: Env22) = var_17.mem_1
    let (var_20: (uint64 ref)) = var_19.mem_0
    let (var_21: uint64) = method_5((var_20: (uint64 ref)))
    let (var_22: int64) = (var_10 * 4L)
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_24: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_23)
    let (var_25: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_26: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_25)
    let (var_27: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_28: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_24, var_26, var_27, var_9)
    if var_28 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_28)
    var_11.Free()
    (Env21((Env9(var_18, (Env22(var_20))))))
and method_26((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_2: Env9) = method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_28((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack23((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_29((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_4: Env9) = method_27((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_30((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack23((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_31((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_2: Env9) = method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: ManagedCuda.CudaContext) = var_0.mem_0
    method_33((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_9: ManagedCuda.CudaContext), (var_8: ManagedCuda.BasicTypes.CUstream))
    EnvStack24((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_33((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack24((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_35((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_2: Env9) = method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_37((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack26((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_38((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_4: Env9) = method_36((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_39((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack26((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_40((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack27 =
    let (var_2: Env9) = method_41((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: ManagedCuda.CudaContext) = var_0.mem_0
    method_42((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_9: ManagedCuda.CudaContext), (var_8: ManagedCuda.BasicTypes.CUstream))
    EnvStack27((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_43((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack27 =
    let (var_4: Env9) = method_41((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_42((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack27((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_44((var_0: EnvHeap25), (var_1: EnvHeap28), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: int64)): unit =
    let (var_13: bool) = (var_12 < 10L)
    if var_13 then
        let (var_14: int64) = 0L
        let (var_15: float) = 0.000000
        let (var_16: int64) = 0L
        let (var_17: float) = method_45((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_14: int64), (var_15: float), (var_0: EnvHeap25), (var_1: EnvHeap28), (var_16: int64))
        let (var_18: string) = System.String.Format("Training: {0}",var_17)
        System.Console.WriteLine(var_18)
        if (System.Double.IsNaN var_17) then
            System.Console.WriteLine("Training diverged. Aborting...")
        else
            let (var_19: int64) = 0L
            let (var_20: float) = 0.000000
            let (var_21: int64) = 0L
            let (var_22: int64) = 0L
            let (var_23: int64) = 0L
            let (var_24: Tuple29) = method_124((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_21: int64), (var_22: int64), (var_19: int64), (var_20: float), (var_0: EnvHeap25), (var_1: EnvHeap28), (var_23: int64))
            let (var_25: float) = var_24.mem_0
            let (var_26: int64) = var_24.mem_1
            let (var_27: int64) = var_24.mem_2
            let (var_28: string) = System.String.Format("Testing: {0}({1}/{2})",var_25,var_26,var_27)
            System.Console.WriteLine(var_28)
            let (var_29: int64) = (var_12 + 1L)
            method_44((var_0: EnvHeap25), (var_1: EnvHeap28), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_29: int64))
    else
        ()
and method_139((var_0: EnvStack13)): unit =
    let (var_1: ResizeArray<Env12>) = var_0.mem_0
    let (var_3: (Env12 -> unit)) = method_140
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_108((var_0: EnvStack10)): unit =
    let (var_1: ResizeArray<Env9>) = var_0.mem_0
    let (var_3: (Env9 -> unit)) = method_109
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_5((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_2 ((var_0: Env3)): bool =
    let (var_1: Env22) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: uint64) = (!var_2)
    (var_4 = 0UL)
and method_3 ((var_0: Env3)): (Env3 -> int32) =
    let (var_1: Env22) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    method_4((var_2: (uint64 ref)))
and method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_3: uint64), (var_4: int32)): uint64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: ResizeArray<Env3>) = var_1.mem_0
        let (var_7: Env3) = var_6.[var_4]
        let (var_8: Env22) = var_7.mem_0
        let (var_9: (uint64 ref)) = var_8.mem_0
        let (var_10: uint64) = var_7.mem_1
        let (var_11: uint64) = method_5((var_9: (uint64 ref)))
        let (var_12: bool) = (var_11 >= var_3)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "The next pointer should be higher than the last.")
        else
            ()
        let (var_14: uint64) = method_5((var_9: (uint64 ref)))
        let (var_15: uint64) = (var_14 - var_3)
        let (var_16: uint64) = (var_3 + 256UL)
        let (var_17: uint64) = (var_16 - 1UL)
        let (var_18: uint64) = (var_17 &&& 18446744073709551360UL)
        let (var_19: uint64) = (var_18 - var_3)
        let (var_20: bool) = (var_15 > var_19)
        if var_20 then
            let (var_21: ResizeArray<Env1>) = var_0.mem_0
            let (var_22: uint64) = (var_15 - var_19)
            var_21.Add((Env1(var_18, var_22)))
        else
            ()
        let (var_23: uint64) = (var_14 + var_10)
        let (var_24: int32) = (var_4 + 1)
        method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_23: uint64), (var_24: int32))
    else
        var_3
and method_8((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: EnvStack13)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env12>) = var_2.mem_0
    var_5.Add((Env12(var_0, (Env16(var_1)))))
and method_11((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 784L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_1 + var_3)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: uint8) = var_0.[int32 var_7]
        let (var_9: float32) = (float32 var_8)
        let (var_10: float32) = (var_9 / 255.000000f)
        var_2.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_11((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_11: int64))
    else
        ()
and method_14((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 10L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_2 + var_3)
        let (var_8: uint8) = (uint8 var_3)
        let (var_9: bool) = (var_8 = var_0)
        let (var_10: float32) =
            if var_9 then
                1.000000f
            else
                0.000000f
        var_1.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_14((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_11: int64))
    else
        ()
and method_18((var_0: EnvHeap15)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_19((var_0: int64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_3: int64) = (var_0 * 4L)
    method_20((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: int64))
and method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 802816L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_28((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(200704L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.031009f)
and method_30((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(802816L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 1024L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_33((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(1024L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 10240L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_37((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2560L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.086711f)
and method_39((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(10240L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_41((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 40L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_42((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(40L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: int64), (var_7: float), (var_8: EnvHeap25), (var_9: EnvHeap28), (var_10: int64)): float =
    let (var_11: bool) = (var_10 < 468L)
    if var_11 then
        let (var_12: bool) = (var_10 >= 0L)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_14: int64) = (var_10 * 100352L)
        if var_13 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_15: int64) = (var_10 * 1280L)
        method_24((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_22: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_23: EnvStack10) = EnvStack10((var_22: ResizeArray<Env9>))
        let (var_24: ManagedCuda.CudaContext) = var_4.mem_0
        let (var_25: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
        let (var_26: ManagedCuda.CudaRand.CudaRandDevice) = var_4.mem_2
        let (var_27: EnvStack10) = var_4.mem_3
        let (var_28: EnvStack13) = var_4.mem_4
        let (var_29: EnvHeap5) = var_4.mem_5
        let (var_30: (int64 ref)) = var_4.mem_6
        let (var_31: EnvHeap15) = var_4.mem_7
        let (var_32: EnvHeap17) = ({mem_0 = (var_24: ManagedCuda.CudaContext); mem_1 = (var_25: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_26: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_23: EnvStack10); mem_4 = (var_28: EnvStack13); mem_5 = (var_29: EnvHeap5); mem_6 = (var_30: (int64 ref)); mem_7 = (var_31: EnvHeap15)} : EnvHeap17)
        let (var_33: EnvStack30) = method_46((var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: int64), (var_8: EnvHeap25))
        let (var_34: (int64 ref)) = var_33.mem_0
        let (var_35: (uint64 ref)) = var_33.mem_1
        let (var_36: (int64 ref)) = var_33.mem_2
        let (var_37: (uint64 ref)) = var_33.mem_3
        let (var_38: (unit -> unit)) = var_33.mem_4
        let (var_39: EnvStack31) = method_75((var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_9: EnvHeap28))
        let (var_40: (int64 ref)) = var_39.mem_0
        let (var_41: (uint64 ref)) = var_39.mem_1
        let (var_42: (int64 ref)) = var_39.mem_2
        let (var_43: (uint64 ref)) = var_39.mem_3
        let (var_44: (unit -> unit)) = var_39.mem_4
        let (var_45: EnvStack32) = method_92((var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_15: int64))
        let (var_46: (int64 ref)) = var_45.mem_0
        let (var_47: (uint64 ref)) = var_45.mem_1
        let (var_48: (unit -> unit)) = var_45.mem_2
        let (var_49: int64) = 1L
        let (var_50: int64) = 0L
        let (var_51: (float32 [])) = method_107((var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_49: int64), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_50: int64))
        let (var_52: float32) = var_51.[int32 0L]
        let (var_53: float) = (float var_52)
        let (var_54: float) = (var_7 + var_53)
        let (var_55: int64) = (var_6 + 1L)
        if (System.Double.IsNaN var_54) then
            let (var_56: EnvStack10) = var_32.mem_3
            method_108((var_56: EnvStack10))
            let (var_57: float) = (float var_55)
            (var_54 / var_57)
        else
            var_48()
            var_44()
            var_38()
            let (var_59: (int64 ref)) = var_8.mem_0
            let (var_60: (uint64 ref)) = var_8.mem_1
            let (var_61: (int64 ref)) = var_8.mem_2
            let (var_62: (uint64 ref)) = var_8.mem_3
            let (var_63: (int64 ref)) = var_8.mem_4
            let (var_64: (uint64 ref)) = var_8.mem_5
            let (var_65: (int64 ref)) = var_8.mem_6
            let (var_66: (uint64 ref)) = var_8.mem_7
            method_110((var_61: (int64 ref)), (var_62: (uint64 ref)), (var_59: (int64 ref)), (var_60: (uint64 ref)), (var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            method_113((var_65: (int64 ref)), (var_66: (uint64 ref)), (var_63: (int64 ref)), (var_64: (uint64 ref)), (var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            let (var_67: (int64 ref)) = var_9.mem_0
            let (var_68: (uint64 ref)) = var_9.mem_1
            let (var_69: (int64 ref)) = var_9.mem_2
            let (var_70: (uint64 ref)) = var_9.mem_3
            let (var_71: (int64 ref)) = var_9.mem_4
            let (var_72: (uint64 ref)) = var_9.mem_5
            let (var_73: (int64 ref)) = var_9.mem_6
            let (var_74: (uint64 ref)) = var_9.mem_7
            method_117((var_69: (int64 ref)), (var_70: (uint64 ref)), (var_67: (int64 ref)), (var_68: (uint64 ref)), (var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            method_120((var_73: (int64 ref)), (var_74: (uint64 ref)), (var_71: (int64 ref)), (var_72: (uint64 ref)), (var_32: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            let (var_75: EnvStack10) = var_32.mem_3
            method_108((var_75: EnvStack10))
            let (var_76: int64) = (var_10 + 1L)
            method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_55: int64), (var_54: float), (var_8: EnvHeap25), (var_9: EnvHeap28), (var_76: int64))
    else
        let (var_79: float) = (float var_6)
        (var_7 / var_79)
and method_124((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: float), (var_10: EnvHeap25), (var_11: EnvHeap28), (var_12: int64)): Tuple29 =
    let (var_13: bool) = (var_12 < 78L)
    if var_13 then
        let (var_14: bool) = (var_12 >= 0L)
        let (var_15: bool) = (var_14 = false)
        if var_15 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_16: int64) = (var_12 * 100352L)
        if var_15 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_17: int64) = (var_12 * 1280L)
        method_24((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_24: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_25: EnvStack10) = EnvStack10((var_24: ResizeArray<Env9>))
        let (var_26: ManagedCuda.CudaContext) = var_4.mem_0
        let (var_27: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
        let (var_28: ManagedCuda.CudaRand.CudaRandDevice) = var_4.mem_2
        let (var_29: EnvStack10) = var_4.mem_3
        let (var_30: EnvStack13) = var_4.mem_4
        let (var_31: EnvHeap5) = var_4.mem_5
        let (var_32: (int64 ref)) = var_4.mem_6
        let (var_33: EnvHeap15) = var_4.mem_7
        let (var_34: EnvHeap17) = ({mem_0 = (var_26: ManagedCuda.CudaContext); mem_1 = (var_27: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_28: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_25: EnvStack10); mem_4 = (var_30: EnvStack13); mem_5 = (var_31: EnvHeap5); mem_6 = (var_32: (int64 ref)); mem_7 = (var_33: EnvHeap15)} : EnvHeap17)
        let (var_35: EnvStack30) = method_46((var_34: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_16: int64), (var_10: EnvHeap25))
        let (var_36: (int64 ref)) = var_35.mem_0
        let (var_37: (uint64 ref)) = var_35.mem_1
        let (var_38: (int64 ref)) = var_35.mem_2
        let (var_39: (uint64 ref)) = var_35.mem_3
        let (var_40: (unit -> unit)) = var_35.mem_4
        let (var_41: EnvStack31) = method_75((var_34: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_11: EnvHeap28))
        let (var_42: (int64 ref)) = var_41.mem_0
        let (var_43: (uint64 ref)) = var_41.mem_1
        let (var_44: (int64 ref)) = var_41.mem_2
        let (var_45: (uint64 ref)) = var_41.mem_3
        let (var_46: (unit -> unit)) = var_41.mem_4
        let (var_47: EnvStack32) = method_92((var_34: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_44: (int64 ref)), (var_45: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_17: int64))
        let (var_48: (int64 ref)) = var_47.mem_0
        let (var_49: (uint64 ref)) = var_47.mem_1
        let (var_50: (unit -> unit)) = var_47.mem_2
        let (var_51: EnvStack33) = method_125((var_34: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_44: (int64 ref)), (var_45: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_17: int64))
        let (var_52: (int64 ref)) = var_51.mem_0
        let (var_53: (uint64 ref)) = var_51.mem_1
        let (var_54: int64) = 1L
        let (var_55: int64) = 0L
        let (var_56: (float32 [])) = method_107((var_34: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_54: int64), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_55: int64))
        let (var_57: float32) = var_56.[int32 0L]
        let (var_58: float) = (float var_57)
        let (var_59: float) = (var_9 + var_58)
        let (var_60: int64) = 1L
        let (var_61: int64) = 0L
        let (var_62: (int64 [])) = method_138((var_34: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_60: int64), (var_52: (int64 ref)), (var_53: (uint64 ref)), (var_61: int64))
        let (var_63: int64) = var_62.[int32 0L]
        let (var_64: int64) = (var_6 + var_63)
        let (var_65: int64) = (var_7 + 128L)
        let (var_66: int64) = (var_8 + 1L)
        if (System.Double.IsNaN var_59) then
            let (var_67: EnvStack10) = var_34.mem_3
            method_108((var_67: EnvStack10))
            let (var_68: float) = (float var_66)
            let (var_69: float) = (var_59 / var_68)
            Tuple29(var_69, var_64, var_65)
        else
            let (var_70: EnvStack10) = var_34.mem_3
            method_108((var_70: EnvStack10))
            let (var_71: int64) = (var_12 + 1L)
            method_124((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_64: int64), (var_65: int64), (var_66: int64), (var_59: float), (var_10: EnvHeap25), (var_11: EnvHeap28), (var_71: int64))
    else
        let (var_74: float) = (float var_8)
        let (var_75: float) = (var_9 / var_74)
        Tuple29(var_75, var_6, var_7)
and method_140 ((var_0: Env12)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env16) = var_0.mem_1
    let (var_3: EnvHeap15) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        let (var_8: ManagedCuda.CudaStream) = var_3.mem_2
        var_8.Dispose()
        let (var_9: ManagedCuda.CudaEvent) = var_3.mem_0
        var_9.Dispose()
        let (var_10: (bool ref)) = var_3.mem_1
        var_10 := false
    else
        ()
and method_109 ((var_0: Env9)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env22) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        var_3 := 0UL
    else
        ()
and method_4 ((var_1: (uint64 ref))) ((var_0: Env3)): int32 =
    let (var_2: Env22) = var_0.mem_0
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: uint64) = var_0.mem_1
    let (var_5: uint64) = method_5((var_1: (uint64 ref)))
    let (var_6: uint64) = method_5((var_3: (uint64 ref)))
    let (var_7: bool) = (var_5 < var_6)
    if var_7 then
        -1
    else
        let (var_8: bool) = (var_5 = var_6)
        if var_8 then
            0
        else
            1
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env9 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env22) = method_21((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack10) = var_0.mem_3
    method_25((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack10))
    (Env9(var_9, (Env22(var_8))))
and method_24((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_5
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_46((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: EnvHeap25)): EnvStack30 =
    let (var_6: (int64 ref)) = var_5.mem_4
    let (var_7: (uint64 ref)) = var_5.mem_5
    let (var_8: (int64 ref)) = var_5.mem_6
    let (var_9: (uint64 ref)) = var_5.mem_7
    let (var_10: (int64 ref)) = var_5.mem_0
    let (var_11: (uint64 ref)) = var_5.mem_1
    let (var_12: (int64 ref)) = var_5.mem_2
    let (var_13: (uint64 ref)) = var_5.mem_3
    let (var_14: EnvStack34) = method_47((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_15: (int64 ref)) = var_14.mem_0
    let (var_16: (uint64 ref)) = var_14.mem_1
    let (var_17: EnvStack34) = method_50((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: (uint64 ref)) = var_17.mem_1
    method_52((var_12: (int64 ref)), (var_13: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: EnvStack34) = method_57((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: (int64 ref)) = var_20.mem_0
    let (var_22: (uint64 ref)) = var_20.mem_1
    let (var_23: EnvStack34) = method_50((var_21: (int64 ref)), (var_22: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_24: (int64 ref)) = var_23.mem_0
    let (var_25: (uint64 ref)) = var_23.mem_1
    let (var_26: (unit -> unit)) = method_62((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)))
    EnvStack30((var_24: (int64 ref)), (var_25: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_26: (unit -> unit)))
and method_75((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap28)): EnvStack31 =
    let (var_7: (int64 ref)) = var_6.mem_4
    let (var_8: (uint64 ref)) = var_6.mem_5
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: (uint64 ref)) = var_6.mem_7
    let (var_11: (int64 ref)) = var_6.mem_0
    let (var_12: (uint64 ref)) = var_6.mem_1
    let (var_13: (int64 ref)) = var_6.mem_2
    let (var_14: (uint64 ref)) = var_6.mem_3
    let (var_15: EnvStack35) = method_76((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_16: (int64 ref)) = var_15.mem_0
    let (var_17: (uint64 ref)) = var_15.mem_1
    let (var_18: EnvStack35) = method_79((var_16: (int64 ref)), (var_17: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_19: (int64 ref)) = var_18.mem_0
    let (var_20: (uint64 ref)) = var_18.mem_1
    method_81((var_13: (int64 ref)), (var_14: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: (unit -> unit)) = method_85((var_19: (int64 ref)), (var_20: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack31((var_19: (int64 ref)), (var_20: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_21: (unit -> unit)))
and method_92((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64)): EnvStack32 =
    let (var_9: Env9) = method_93((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: Env22) = var_9.mem_1
    let (var_12: (uint64 ref)) = var_11.mem_0
    let (var_13: uint64) = method_5((var_5: (uint64 ref)))
    let (var_14: uint64) = method_5((var_7: (uint64 ref)))
    let (var_15: int64) = (var_8 * 4L)
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: uint64) = (var_14 + var_16)
    let (var_18: uint64) = method_5((var_12: (uint64 ref)))
    method_94((var_13: uint64), (var_17: uint64), (var_18: uint64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_19: EnvStack36) = method_98((var_10: (int64 ref)), (var_12: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: (int64 ref)) = var_19.mem_0
    let (var_21: (uint64 ref)) = var_19.mem_1
    let (var_22: (unit -> unit)) = method_102((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack32((var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (unit -> unit)))
and method_107((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (float32 []) =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: uint64) = method_5((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 4L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 4L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_110((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_111((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_113((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_114((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_117((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_118((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_120((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_121((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_125((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64)): EnvStack33 =
    let (var_9: EnvStack37) = method_126((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: (uint64 ref)) = var_9.mem_1
    let (var_12: EnvStack38) = method_133((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    EnvStack33((var_13: (int64 ref)), (var_14: (uint64 ref)))
and method_138((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (int64 []) =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: uint64) = method_5((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 8L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 8L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_21((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env22 =
    let (var_3: EnvHeap5) = var_0.mem_5
    let (var_4: (uint64 ref)) = var_3.mem_1
    let (var_5: uint64) = var_3.mem_2
    let (var_6: EnvStack4) = var_3.mem_3
    let (var_7: EnvStack2) = var_3.mem_0
    let (var_8: ResizeArray<Env1>) = var_7.mem_0
    let (var_9: int32) = var_8.get_Count()
    let (var_10: bool) = (var_9 > 0)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Out of memory in the designated section.")
    else
        ()
    let (var_12: Env1) = var_8.[0]
    let (var_13: uint64) = var_12.mem_0
    let (var_14: uint64) = var_12.mem_1
    let (var_15: bool) = (var_2 <= var_14)
    let (var_42: Env3) =
        if var_15 then
            let (var_16: uint64) = (var_13 + var_2)
            let (var_17: uint64) = (var_14 - var_2)
            var_8.[0] <- (Env1(var_16, var_17))
            let (var_18: (uint64 ref)) = (ref var_13)
            (Env3((Env22(var_18)), var_2))
        else
            let (var_20: (Env1 -> (Env1 -> int32))) = method_22
            let (var_21: System.Comparison<Env1>) = System.Comparison<Env1>(var_20)
            var_8.Sort(var_21)
            let (var_22: Env1) = var_8.[0]
            let (var_23: uint64) = var_22.mem_0
            let (var_24: uint64) = var_22.mem_1
            let (var_25: bool) = (var_2 <= var_24)
            if var_25 then
                let (var_26: uint64) = (var_23 + var_2)
                let (var_27: uint64) = (var_24 - var_2)
                var_8.[0] <- (Env1(var_26, var_27))
                let (var_28: (uint64 ref)) = (ref var_23)
                (Env3((Env22(var_28)), var_2))
            else
                method_24((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                let (var_30: (Env1 -> (Env1 -> int32))) = method_22
                let (var_31: System.Comparison<Env1>) = System.Comparison<Env1>(var_30)
                var_8.Sort(var_31)
                let (var_32: Env1) = var_8.[0]
                let (var_33: uint64) = var_32.mem_0
                let (var_34: uint64) = var_32.mem_1
                let (var_35: bool) = (var_2 <= var_34)
                if var_35 then
                    let (var_36: uint64) = (var_33 + var_2)
                    let (var_37: uint64) = (var_34 - var_2)
                    var_8.[0] <- (Env1(var_36, var_37))
                    let (var_38: (uint64 ref)) = (ref var_33)
                    (Env3((Env22(var_38)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_43: Env22) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_43.mem_0
    let (var_45: uint64) = var_42.mem_1
    let (var_46: ResizeArray<Env3>) = var_6.mem_0
    var_46.Add((Env3((Env22(var_44)), var_45)))
    (Env22(var_44))
and method_25((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack10)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env9>) = var_2.mem_0
    var_5.Add((Env9(var_0, (Env22(var_1)))))
and method_47((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack34 =
    let (var_7: Env9) = method_48((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_49((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack34((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_50((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack34 =
    let (var_4: Env9) = method_48((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_51((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack34((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_52((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_53((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack34 =
    let (var_12: Env9) = method_48((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: Env22) = var_12.mem_1
    let (var_15: (uint64 ref)) = var_14.mem_0
    let (var_16: uint64) = method_5((var_1: (uint64 ref)))
    let (var_17: uint64) = method_5((var_15: (uint64 ref)))
    method_58((var_16: uint64), (var_17: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack34((var_13: (int64 ref)), (var_15: (uint64 ref)))
and method_62 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref))) (): unit =
    method_63((var_17: (int64 ref)), (var_18: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
    method_67((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
and method_76((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack35 =
    let (var_6: Env9) = method_77((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_78((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack35((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_79((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack35 =
    let (var_4: Env9) = method_77((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_80((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack35((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_81((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_82((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_85 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)) (): unit =
    method_86((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_93((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 512L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_94((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_95((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_98((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack36 =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: Env9) = method_99((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env22) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_5((var_8: (uint64 ref)))
    method_100((var_4: uint64), (var_9: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
    EnvStack36((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_102 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)) (): unit =
    method_103((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_111((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_112((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_112", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(2u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_114((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_115((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_115", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_118((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_119((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_119", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_121((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_122((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_122", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(20u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_126((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack37 =
    let (var_7: Env9) = method_127((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_128((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack37((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_133((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack38 =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: Env9) = method_134((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env22) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_5((var_8: (uint64 ref)))
    method_135((var_4: uint64), (var_9: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
    EnvStack38((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_22 ((var_0: Env1)): (Env1 -> int32) =
    let (var_1: uint64) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_23((var_2: uint64))
and method_48((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 131072L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_49((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_6
    let (var_11: EnvHeap15) = var_7.mem_7
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_18((var_11: EnvHeap15))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_5((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_5((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 0.000000f)
    let (var_27: uint64) = method_5((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 256, 128, 784, var_16, var_19, 256, var_25, 784, var_26, var_29, 256)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_51((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(131072L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_53((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_54((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_54", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_58((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_59((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_63((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_1: (uint64 ref)))
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = method_5((var_5: (uint64 ref)))
    method_64((var_8: uint64), (var_9: uint64), (var_10: uint64), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
and method_67((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_68((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
    method_69((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
and method_77((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 5120L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_78((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 10, 128, 256, var_15, var_18, 10, var_21, 256, var_22, var_25, 10)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_80((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(5120L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_82((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_83((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_83", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_86((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_87((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_88((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_89((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_95((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_96((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_96", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_99((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 4L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_100((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_101((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_101", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_103((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_5((var_1: (uint64 ref)))
    let (var_10: uint64) = method_5((var_3: (uint64 ref)))
    let (var_11: uint64) = method_5((var_5: (uint64 ref)))
    let (var_12: int64) = (var_6 * 4L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_11 + var_13)
    method_104((var_10: uint64), (var_9: uint64), (var_14: uint64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_127((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 1024L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_128((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_5((var_1: (uint64 ref)))
    let (var_10: uint64) = method_5((var_3: (uint64 ref)))
    let (var_11: int64) = (var_4 * 4L)
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (var_10 + var_12)
    let (var_14: uint64) = method_5((var_6: (uint64 ref)))
    method_129((var_9: uint64), (var_13: uint64), (var_14: uint64), (var_8: ManagedCuda.BasicTypes.CUmodule), (var_7: EnvHeap17))
and method_134((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 8L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_135((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_136((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_136", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_23 ((var_1: uint64)) ((var_0: Env1)): int32 =
    let (var_2: uint64) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        -1
    else
        let (var_5: bool) = (var_3 = var_1)
        if var_5 then
            0
        else
            1
and method_59((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_60((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_60", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_64((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_65((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_68((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_6
    let (var_11: EnvHeap15) = var_7.mem_7
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_18((var_11: EnvHeap15))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_5((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_5((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 1.000000f)
    let (var_27: uint64) = method_5((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 256, 784, 128, var_16, var_19, 256, var_25, 784, var_26, var_29, 256)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_69((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_70((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_87((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 256, 128, 10, var_15, var_18, 10, var_21, 10, var_22, var_25, 256)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 10, 256, 128, var_15, var_18, 10, var_21, 256, var_22, var_25, 10)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_89((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_90((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_104((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_105((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_129((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_130((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_130", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_65((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_66((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_66", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_70((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_71((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_71", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_90((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_91((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_91", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_105((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_106((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_106", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_11; "\" -I\"C:/cub-1.7.4\" -I\""; var_10; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1073741824UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_41: ResizeArray<Env1>) = ResizeArray<Env1>()
let (var_42: EnvStack2) = EnvStack2((var_41: ResizeArray<Env1>))
let (var_43: ResizeArray<Env3>) = ResizeArray<Env3>()
let (var_44: EnvStack4) = EnvStack4((var_43: ResizeArray<Env3>))
let (var_45: EnvHeap5) = ({mem_0 = (var_42: EnvStack2); mem_1 = (var_40: (uint64 ref)); mem_2 = (var_35: uint64); mem_3 = (var_44: EnvStack4)} : EnvHeap5)
let (var_46: EnvHeap6) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_45: EnvHeap5)} : EnvHeap6)
method_1((var_46: EnvHeap6), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_47: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_48: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_47)
let (var_49: ManagedCuda.CudaContext) = var_46.mem_0
let (var_50: EnvHeap5) = var_46.mem_1
let (var_51: EnvHeap7) = ({mem_0 = (var_49: ManagedCuda.CudaContext); mem_1 = (var_48: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_50: EnvHeap5)} : EnvHeap7)
let (var_52: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_53: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_54: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_52, var_53)
let (var_55: ManagedCuda.CudaContext) = var_51.mem_0
let (var_56: ManagedCuda.CudaRand.CudaRandDevice) = var_51.mem_1
let (var_57: EnvHeap5) = var_51.mem_2
let (var_58: EnvHeap8) = ({mem_0 = (var_55: ManagedCuda.CudaContext); mem_1 = (var_54: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_56: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_57: EnvHeap5)} : EnvHeap8)
let (var_65: ResizeArray<Env9>) = ResizeArray<Env9>()
let (var_66: EnvStack10) = EnvStack10((var_65: ResizeArray<Env9>))
let (var_67: ManagedCuda.CudaContext) = var_58.mem_0
let (var_68: ManagedCuda.CudaBlas.CudaBlas) = var_58.mem_1
let (var_69: ManagedCuda.CudaRand.CudaRandDevice) = var_58.mem_2
let (var_70: EnvHeap5) = var_58.mem_3
let (var_71: EnvHeap11) = ({mem_0 = (var_67: ManagedCuda.CudaContext); mem_1 = (var_68: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_69: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_66: EnvStack10); mem_4 = (var_70: EnvHeap5)} : EnvHeap11)
let (var_83: ResizeArray<Env12>) = ResizeArray<Env12>()
let (var_84: EnvStack13) = EnvStack13((var_83: ResizeArray<Env12>))
let (var_85: ManagedCuda.CudaContext) = var_71.mem_0
let (var_86: ManagedCuda.CudaBlas.CudaBlas) = var_71.mem_1
let (var_87: ManagedCuda.CudaRand.CudaRandDevice) = var_71.mem_2
let (var_88: EnvStack10) = var_71.mem_3
let (var_89: EnvHeap5) = var_71.mem_4
let (var_90: EnvHeap14) = ({mem_0 = (var_85: ManagedCuda.CudaContext); mem_1 = (var_86: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_87: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_88: EnvStack10); mem_4 = (var_84: EnvStack13); mem_5 = (var_89: EnvHeap5)} : EnvHeap14)
let (var_91: (bool ref)) = (ref true)
let (var_92: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_93: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_94: EnvHeap15) = ({mem_0 = (var_93: ManagedCuda.CudaEvent); mem_1 = (var_91: (bool ref)); mem_2 = (var_92: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_95: Env12) = method_7((var_94: EnvHeap15), (var_90: EnvHeap14), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_96: (int64 ref)) = var_95.mem_0
let (var_97: Env16) = var_95.mem_1
let (var_98: EnvHeap15) = var_97.mem_0
let (var_99: ManagedCuda.CudaContext) = var_90.mem_0
let (var_100: ManagedCuda.CudaBlas.CudaBlas) = var_90.mem_1
let (var_101: ManagedCuda.CudaRand.CudaRandDevice) = var_90.mem_2
let (var_102: EnvStack10) = var_90.mem_3
let (var_103: EnvStack13) = var_90.mem_4
let (var_104: EnvHeap5) = var_90.mem_5
let (var_105: EnvHeap17) = ({mem_0 = (var_99: ManagedCuda.CudaContext); mem_1 = (var_100: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_101: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_102: EnvStack10); mem_4 = (var_103: EnvStack13); mem_5 = (var_104: EnvHeap5); mem_6 = (var_96: (int64 ref)); mem_7 = (var_98: EnvHeap15)} : EnvHeap17)
let (var_106: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-images.idx3-ubyte")
let (var_107: Tuple18) = method_9((var_106: string))
let (var_108: Tuple19) = var_107.mem_0
let (var_109: int64) = var_108.mem_0
let (var_110: int64) = var_108.mem_1
let (var_111: int64) = var_108.mem_2
let (var_112: (uint8 [])) = var_107.mem_1
let (var_113: bool) = (10000L = var_109)
let (var_117: bool) =
    if var_113 then
        let (var_114: bool) = (28L = var_110)
        if var_114 then
            (28L = var_111)
        else
            false
    else
        false
let (var_118: bool) = (var_117 = false)
if var_118 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_119: int64) = var_112.LongLength
let (var_120: bool) = (var_119 > 0L)
let (var_121: bool) = (var_120 = false)
if var_121 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_122: bool) = (var_119 = 7840000L)
let (var_123: bool) = (var_122 = false)
if var_123 then
    (failwith "The product of the split dimension must equal to that of the previous one.")
else
    ()
let (var_127: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(7840000L))
let (var_128: int64) = 0L
method_10((var_112: (uint8 [])), (var_127: (float32 [])), (var_128: int64))
let (var_129: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-labels.idx1-ubyte")
let (var_130: Tuple20) = method_12((var_129: string))
let (var_131: int64) = var_130.mem_0
let (var_132: (uint8 [])) = var_130.mem_1
let (var_133: bool) = (10000L = var_131)
let (var_134: bool) = (var_133 = false)
if var_134 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_138: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(100000L))
let (var_139: int64) = 0L
method_13((var_132: (uint8 [])), (var_138: (float32 [])), (var_139: int64))
let (var_140: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-images.idx3-ubyte")
let (var_141: Tuple18) = method_9((var_140: string))
let (var_142: Tuple19) = var_141.mem_0
let (var_143: int64) = var_142.mem_0
let (var_144: int64) = var_142.mem_1
let (var_145: int64) = var_142.mem_2
let (var_146: (uint8 [])) = var_141.mem_1
let (var_147: bool) = (60000L = var_143)
let (var_151: bool) =
    if var_147 then
        let (var_148: bool) = (28L = var_144)
        if var_148 then
            (28L = var_145)
        else
            false
    else
        false
let (var_152: bool) = (var_151 = false)
if var_152 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_153: int64) = var_146.LongLength
let (var_154: bool) = (var_153 > 0L)
let (var_155: bool) = (var_154 = false)
if var_155 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_156: bool) = (var_153 = 47040000L)
let (var_157: bool) = (var_156 = false)
if var_157 then
    (failwith "The product of the split dimension must equal to that of the previous one.")
else
    ()
let (var_161: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(47040000L))
let (var_162: int64) = 0L
method_15((var_146: (uint8 [])), (var_161: (float32 [])), (var_162: int64))
let (var_163: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-labels.idx1-ubyte")
let (var_164: Tuple20) = method_12((var_163: string))
let (var_165: int64) = var_164.mem_0
let (var_166: (uint8 [])) = var_164.mem_1
let (var_167: bool) = (60000L = var_165)
let (var_168: bool) = (var_167 = false)
if var_168 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_172: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(600000L))
let (var_173: int64) = 0L
method_16((var_166: (uint8 [])), (var_172: (float32 [])), (var_173: int64))
let (var_174: int64) = 10000L
let (var_175: int64) = 0L
let (var_176: int64) = 784L
let (var_177: int64) = 1L
let (var_178: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_174: int64), (var_127: (float32 [])), (var_175: int64), (var_176: int64), (var_177: int64))
let (var_179: Env9) = var_178.mem_0
let (var_180: (int64 ref)) = var_179.mem_0
let (var_181: Env22) = var_179.mem_1
let (var_182: (uint64 ref)) = var_181.mem_0
let (var_183: int64) = 10000L
let (var_184: int64) = 0L
let (var_185: int64) = 10L
let (var_186: int64) = 1L
let (var_187: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_183: int64), (var_138: (float32 [])), (var_184: int64), (var_185: int64), (var_186: int64))
let (var_188: Env9) = var_187.mem_0
let (var_189: (int64 ref)) = var_188.mem_0
let (var_190: Env22) = var_188.mem_1
let (var_191: (uint64 ref)) = var_190.mem_0
let (var_192: int64) = 60000L
let (var_193: int64) = 0L
let (var_194: int64) = 784L
let (var_195: int64) = 1L
let (var_196: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_192: int64), (var_161: (float32 [])), (var_193: int64), (var_194: int64), (var_195: int64))
let (var_197: Env9) = var_196.mem_0
let (var_198: (int64 ref)) = var_197.mem_0
let (var_199: Env22) = var_197.mem_1
let (var_200: (uint64 ref)) = var_199.mem_0
let (var_201: int64) = 60000L
let (var_202: int64) = 0L
let (var_203: int64) = 10L
let (var_204: int64) = 1L
let (var_205: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_201: int64), (var_172: (float32 [])), (var_202: int64), (var_203: int64), (var_204: int64))
let (var_206: Env9) = var_205.mem_0
let (var_207: (int64 ref)) = var_206.mem_0
let (var_208: Env22) = var_206.mem_1
let (var_209: (uint64 ref)) = var_208.mem_0
let (var_210: EnvStack23) = method_26((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_211: (int64 ref)) = var_210.mem_0
let (var_212: (uint64 ref)) = var_210.mem_1
let (var_213: EnvStack23) = method_29((var_211: (int64 ref)), (var_212: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_214: (int64 ref)) = var_213.mem_0
let (var_215: (uint64 ref)) = var_213.mem_1
let (var_216: EnvStack24) = method_31((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_217: (int64 ref)) = var_216.mem_0
let (var_218: (uint64 ref)) = var_216.mem_1
let (var_219: EnvStack24) = method_34((var_217: (int64 ref)), (var_218: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_220: (int64 ref)) = var_219.mem_0
let (var_221: (uint64 ref)) = var_219.mem_1
let (var_222: EnvHeap25) = ({mem_0 = (var_220: (int64 ref)); mem_1 = (var_221: (uint64 ref)); mem_2 = (var_217: (int64 ref)); mem_3 = (var_218: (uint64 ref)); mem_4 = (var_214: (int64 ref)); mem_5 = (var_215: (uint64 ref)); mem_6 = (var_211: (int64 ref)); mem_7 = (var_212: (uint64 ref))} : EnvHeap25)
let (var_223: EnvStack26) = method_35((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_224: (int64 ref)) = var_223.mem_0
let (var_225: (uint64 ref)) = var_223.mem_1
let (var_226: EnvStack26) = method_38((var_224: (int64 ref)), (var_225: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_227: (int64 ref)) = var_226.mem_0
let (var_228: (uint64 ref)) = var_226.mem_1
let (var_229: EnvStack27) = method_40((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_230: (int64 ref)) = var_229.mem_0
let (var_231: (uint64 ref)) = var_229.mem_1
let (var_232: EnvStack27) = method_43((var_230: (int64 ref)), (var_231: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_233: (int64 ref)) = var_232.mem_0
let (var_234: (uint64 ref)) = var_232.mem_1
let (var_235: EnvHeap28) = ({mem_0 = (var_233: (int64 ref)); mem_1 = (var_234: (uint64 ref)); mem_2 = (var_230: (int64 ref)); mem_3 = (var_231: (uint64 ref)); mem_4 = (var_227: (int64 ref)); mem_5 = (var_228: (uint64 ref)); mem_6 = (var_224: (int64 ref)); mem_7 = (var_225: (uint64 ref))} : EnvHeap28)
let (var_236: int64) = 0L
method_44((var_222: EnvHeap25), (var_235: EnvHeap28), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_180: (int64 ref)), (var_182: (uint64 ref)), (var_189: (int64 ref)), (var_191: (uint64 ref)), (var_198: (int64 ref)), (var_200: (uint64 ref)), (var_207: (int64 ref)), (var_209: (uint64 ref)), (var_236: int64))
method_139((var_103: EnvStack13))
method_108((var_88: EnvStack10))
var_54.Dispose()
var_48.Dispose()
let (var_237: uint64) = method_5((var_40: (uint64 ref)))
let (var_238: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_237)
let (var_239: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_238)
var_49.FreeMemory(var_239)
var_40 := 0UL
var_1.Dispose()

