module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    struct Tuple0 {
        float mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple0 make_Tuple0(float mem_0, float mem_1){
        Tuple0 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    struct Tuple1 {
        float mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ Tuple1 make_Tuple1(float mem_0, float mem_1, float mem_2){
        Tuple1 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    typedef float(*FunPointer2)(float, float);
    struct Tuple4 {
        Tuple0 mem_0;
        Tuple0 mem_1;
    };
    __device__ __forceinline__ Tuple4 make_Tuple4(Tuple0 mem_0, Tuple0 mem_1){
        Tuple4 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef Tuple0(*FunPointer3)(Tuple0, Tuple0);
    __global__ void method_113(float * var_0, float * var_1);
    __global__ void method_116(float * var_0, float * var_1);
    __global__ void method_120(float * var_0, float * var_1);
    __global__ void method_123(float * var_0, float * var_1);
    __global__ void method_54(float * var_0, float * var_1, float * var_2);
    __global__ void method_82(float * var_0, float * var_1, float * var_2);
    __global__ void method_100(float * var_0, float * var_1, float * var_2);
    __global__ void method_137(long long int * var_0, long long int * var_1);
    __global__ void method_60(float * var_0, float * var_1);
    __global__ void method_65(float * var_0, float * var_1, float * var_2);
    __global__ void method_95(float * var_0, float * var_1);
    __global__ void method_131(float * var_0, float * var_1, long long int * var_2);
    __global__ void method_70(float * var_0, float * var_1);
    __global__ void method_90(float * var_0, float * var_1);
    __global__ void method_106(float * var_0, float * var_1, float * var_2);
    __device__ char method_55(long long int * var_0);
    __device__ char method_117(long long int * var_0);
    __device__ char method_83(long long int * var_0);
    __device__ char method_124(long long int * var_0);
    __device__ char method_56(long long int * var_0);
    __device__ char method_101(long long int * var_0, float * var_1);
    __device__ char method_138(long long int * var_0, long long int * var_1);
    __device__ char method_61(long long int * var_0);
    __device__ float method_96(float var_0, float var_1);
    __device__ char method_132(long long int * var_0, float * var_1, float * var_2);
    __device__ Tuple0 method_133(Tuple0 var_0, Tuple0 var_1);
    __device__ char method_71(long long int * var_0, float * var_1);
    __device__ char method_72(long long int * var_0, float * var_1);
    __device__ char method_73(long long int var_0, long long int * var_1, float * var_2);
    __device__ char method_107(long long int * var_0);
    
    __global__ void method_113(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_55(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 256);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 256);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_116(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_117(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 200704);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 200704);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_120(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_83(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 10);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 128);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_123(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_124(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 2560);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 2560);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.3 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 2560);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_54(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (32 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_55(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 256);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_56(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 128);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_26 = (var_21 * 256);
                char var_28;
                if (var_10) {
                    var_28 = (var_9 < 256);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_26 + var_9);
                char var_32;
                if (var_22) {
                    var_32 = (var_21 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                char var_35;
                if (var_10) {
                    var_35 = (var_9 < 256);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                float var_37 = var_1[var_30];
                float var_38 = var_2[var_30];
                float var_39 = (var_14 + var_37);
                var_2[var_30] = var_39;
                long long int var_40 = (var_21 + 32);
                var_19[0] = var_40;
            }
            long long int var_41 = var_19[0];
            long long int var_42 = (var_9 + 256);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_82(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_83(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 10);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_56(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 128);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_26 = (var_21 * 10);
                char var_28;
                if (var_10) {
                    var_28 = (var_9 < 10);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_26 + var_9);
                char var_32;
                if (var_22) {
                    var_32 = (var_21 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                char var_35;
                if (var_10) {
                    var_35 = (var_9 < 10);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                float var_37 = var_1[var_30];
                float var_38 = var_2[var_30];
                float var_39 = (var_14 + var_37);
                var_2[var_30] = var_39;
                long long int var_40 = (var_21 + 32);
                var_19[0] = var_40;
            }
            long long int var_41 = var_19[0];
            long long int var_42 = (var_9 + 10);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_100(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (1024 * var_4);
        long long int var_6 = (var_3 + var_5);
        float var_7 = 0;
        long long int var_8[1];
        float var_9[1];
        var_8[0] = var_6;
        var_9[0] = var_7;
        while (method_101(var_8, var_9)) {
            long long int var_11 = var_8[0];
            float var_12 = var_9[0];
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 1280);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_0[var_11];
            float var_18 = var_1[var_11];
            float var_19 = (-var_18);
            float var_20 = log(var_17);
            float var_21 = (var_19 * var_20);
            float var_22 = (var_12 + var_21);
            long long int var_23 = (var_11 + 1024);
            var_8[0] = var_23;
            var_9[0] = var_22;
        }
        long long int var_24 = var_8[0];
        float var_25 = var_9[0];
        float var_26 = cub::BlockReduce<float,1024,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_25);
        float var_27 = (var_26 / 128);
        long long int var_28 = threadIdx.x;
        char var_29 = (var_28 == 0);
        if (var_29) {
            long long int var_30 = blockIdx.x;
            char var_31 = (var_30 >= 0);
            char var_33;
            if (var_31) {
                var_33 = (var_30 < 1);
            } else {
                var_33 = 0;
            }
            char var_34 = (var_33 == 0);
            if (var_34) {
                // "Argument out of bounds."
            } else {
            }
            var_2[var_30] = var_27;
        } else {
        }
    }
    __global__ void method_137(long long int * var_0, long long int * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6 = 0;
        long long int var_7[1];
        long long int var_8[1];
        var_7[0] = var_5;
        var_8[0] = var_6;
        while (method_138(var_7, var_8)) {
            long long int var_10 = var_7[0];
            long long int var_11 = var_8[0];
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = var_0[var_10];
            long long int var_17 = (var_11 + var_16);
            long long int var_18 = (var_10 + 128);
            var_7[0] = var_18;
            var_8[0] = var_17;
        }
        long long int var_19 = var_7[0];
        long long int var_20 = var_8[0];
        long long int var_21 = cub::BlockReduce<long long int,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_20);
        long long int var_22 = threadIdx.x;
        char var_23 = (var_22 == 0);
        if (var_23) {
            long long int var_24 = blockIdx.x;
            char var_25 = (var_24 >= 0);
            char var_27;
            if (var_25) {
                var_27 = (var_24 < 1);
            } else {
                var_27 = 0;
            }
            char var_28 = (var_27 == 0);
            if (var_28) {
                // "Argument out of bounds."
            } else {
            }
            var_1[var_24] = var_21;
        } else {
        }
    }
    __global__ void method_60(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.y;
        long long int var_3 = blockIdx.y;
        long long int var_4 = (var_2 + var_3);
        long long int var_5[1];
        var_5[0] = var_4;
        while (method_56(var_5)) {
            long long int var_7 = var_5[0];
            char var_8 = (var_7 >= 0);
            char var_10;
            if (var_8) {
                var_10 = (var_7 < 128);
            } else {
                var_10 = 0;
            }
            char var_11 = (var_10 == 0);
            if (var_11) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_12 = (var_7 * 256);
            char var_14;
            if (var_8) {
                var_14 = (var_7 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.x;
            long long int var_17 = blockIdx.x;
            long long int var_18 = (256 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_27[1];
            long long int var_28[1];
            var_28[0] = 0;
            while (method_61(var_28)) {
                long long int var_30 = var_28[0];
                long long int var_31 = (256 * var_30);
                long long int var_32 = (var_19 + var_31);
                long long int var_33 = (256 - var_31);
                char var_34 = (var_32 < 256);
                if (var_34) {
                    char var_35 = (var_30 >= 0);
                    char var_37;
                    if (var_35) {
                        var_37 = (var_30 < 1);
                    } else {
                        var_37 = 0;
                    }
                    char var_38 = (var_37 == 0);
                    if (var_38) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_39 = (var_32 >= 0);
                    char var_40 = (var_39 == 0);
                    if (var_40) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_41 = (var_12 + var_32);
                    float var_42 = var_0[var_41];
                    var_27[var_30] = var_42;
                } else {
                }
                long long int var_43 = (var_30 + 1);
                var_28[0] = var_43;
            }
            long long int var_44 = var_28[0];
            float var_45 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_27);
            __shared__ float var_46[1];
            long long int var_47 = threadIdx.x;
            char var_48 = (var_47 == 0);
            if (var_48) {
                var_46[0] = var_45;
            } else {
            }
            __syncthreads();
            float var_49 = var_46[0];
            float var_52[1];
            long long int var_53[1];
            var_53[0] = 0;
            while (method_61(var_53)) {
                long long int var_55 = var_53[0];
                long long int var_56 = (256 * var_55);
                long long int var_57 = (var_19 + var_56);
                long long int var_58 = (256 - var_56);
                char var_59 = (var_57 < 256);
                if (var_59) {
                    char var_60 = (var_55 >= 0);
                    char var_62;
                    if (var_60) {
                        var_62 = (var_55 < 1);
                    } else {
                        var_62 = 0;
                    }
                    char var_63 = (var_62 == 0);
                    if (var_63) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_64 = var_27[var_55];
                    float var_65 = (var_49 / 256);
                    float var_66 = (var_64 - var_65);
                    char var_68;
                    if (var_60) {
                        var_68 = (var_55 < 1);
                    } else {
                        var_68 = 0;
                    }
                    char var_69 = (var_68 == 0);
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_52[var_55] = var_66;
                } else {
                }
                long long int var_70 = (var_55 + 1);
                var_53[0] = var_70;
            }
            long long int var_71 = var_53[0];
            float var_73[1];
            long long int var_74[1];
            var_74[0] = 0;
            while (method_61(var_74)) {
                long long int var_76 = var_74[0];
                long long int var_77 = (256 * var_76);
                long long int var_78 = (var_19 + var_77);
                long long int var_79 = (256 - var_77);
                char var_80 = (var_78 < 256);
                if (var_80) {
                    char var_81 = (var_76 >= 0);
                    char var_83;
                    if (var_81) {
                        var_83 = (var_76 < 1);
                    } else {
                        var_83 = 0;
                    }
                    char var_84 = (var_83 == 0);
                    if (var_84) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_85 = var_52[var_76];
                    float var_86 = (var_85 * var_85);
                    char var_88;
                    if (var_81) {
                        var_88 = (var_76 < 1);
                    } else {
                        var_88 = 0;
                    }
                    char var_89 = (var_88 == 0);
                    if (var_89) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_73[var_76] = var_86;
                } else {
                }
                long long int var_90 = (var_76 + 1);
                var_74[0] = var_90;
            }
            long long int var_91 = var_74[0];
            float var_92 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_73);
            __shared__ float var_93[1];
            long long int var_94 = threadIdx.x;
            char var_95 = (var_94 == 0);
            if (var_95) {
                var_93[0] = var_92;
            } else {
            }
            __syncthreads();
            float var_96 = var_93[0];
            long long int var_97[1];
            var_97[0] = 0;
            while (method_61(var_97)) {
                long long int var_99 = var_97[0];
                long long int var_100 = (256 * var_99);
                long long int var_101 = (var_19 + var_100);
                long long int var_102 = (256 - var_100);
                char var_103 = (var_101 < 256);
                if (var_103) {
                    char var_104 = (var_101 >= 0);
                    char var_105 = (var_104 == 0);
                    if (var_105) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_106 = (var_12 + var_101);
                    char var_107 = (var_99 >= 0);
                    char var_109;
                    if (var_107) {
                        var_109 = (var_99 < 1);
                    } else {
                        var_109 = 0;
                    }
                    char var_110 = (var_109 == 0);
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_111 = var_52[var_99];
                    float var_112 = var_1[var_106];
                    float var_113 = (var_96 / 256);
                    float var_114 = sqrt(var_113);
                    float var_115 = (var_111 / var_114);
                    char var_116 = (var_115 > 0);
                    float var_117;
                    if (var_116) {
                        var_117 = var_115;
                    } else {
                        var_117 = 0;
                    }
                    var_1[var_106] = var_117;
                } else {
                }
                long long int var_118 = (var_99 + 1);
                var_97[0] = var_118;
            }
            long long int var_119 = var_97[0];
            long long int var_120 = (var_7 + 64);
            var_5[0] = var_120;
        }
        long long int var_121 = var_5[0];
    }
    __global__ void method_65(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.y;
        long long int var_4 = blockIdx.y;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_56(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_8 * 256);
            char var_15;
            if (var_9) {
                var_15 = (var_8 < 128);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.x;
            long long int var_18 = blockIdx.x;
            long long int var_19 = (256 * var_18);
            long long int var_20 = (var_17 + var_19);
            Tuple0 var_29[1];
            long long int var_30[1];
            var_30[0] = 0;
            while (method_61(var_30)) {
                long long int var_32 = var_30[0];
                long long int var_33 = (256 * var_32);
                long long int var_34 = (var_20 + var_33);
                long long int var_35 = (256 - var_33);
                char var_36 = (var_34 < 256);
                if (var_36) {
                    char var_37 = (var_32 >= 0);
                    char var_39;
                    if (var_37) {
                        var_39 = (var_32 < 1);
                    } else {
                        var_39 = 0;
                    }
                    char var_40 = (var_39 == 0);
                    if (var_40) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_41 = (var_34 >= 0);
                    char var_42 = (var_41 == 0);
                    if (var_42) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_43 = (var_13 + var_34);
                    float var_44 = var_0[var_43];
                    float var_45 = var_1[var_43];
                    var_29[var_32] = make_Tuple0(var_44, var_45);
                } else {
                }
                long long int var_46 = (var_32 + 1);
                var_30[0] = var_46;
            }
            long long int var_47 = var_30[0];
            float var_48[1];
            long long int var_49[1];
            var_49[0] = 0;
            while (method_61(var_49)) {
                long long int var_51 = var_49[0];
                long long int var_52 = (256 * var_51);
                long long int var_53 = (var_20 + var_52);
                long long int var_54 = (256 - var_52);
                char var_55 = (var_53 < 256);
                if (var_55) {
                    char var_56 = (var_51 >= 0);
                    char var_58;
                    if (var_56) {
                        var_58 = (var_51 < 1);
                    } else {
                        var_58 = 0;
                    }
                    char var_59 = (var_58 == 0);
                    if (var_59) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_60 = var_29[var_51];
                    float var_61 = var_60.mem_0;
                    float var_62 = var_60.mem_1;
                    char var_64;
                    if (var_56) {
                        var_64 = (var_51 < 1);
                    } else {
                        var_64 = 0;
                    }
                    char var_65 = (var_64 == 0);
                    if (var_65) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_48[var_51] = var_62;
                } else {
                }
                long long int var_66 = (var_51 + 1);
                var_49[0] = var_66;
            }
            long long int var_67 = var_49[0];
            float var_68 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_48);
            __shared__ float var_69[1];
            long long int var_70 = threadIdx.x;
            char var_71 = (var_70 == 0);
            if (var_71) {
                var_69[0] = var_68;
            } else {
            }
            __syncthreads();
            float var_72 = var_69[0];
            Tuple0 var_75[1];
            long long int var_76[1];
            var_76[0] = 0;
            while (method_61(var_76)) {
                long long int var_78 = var_76[0];
                long long int var_79 = (256 * var_78);
                long long int var_80 = (var_20 + var_79);
                long long int var_81 = (256 - var_79);
                char var_82 = (var_80 < 256);
                if (var_82) {
                    char var_83 = (var_78 >= 0);
                    char var_85;
                    if (var_83) {
                        var_85 = (var_78 < 1);
                    } else {
                        var_85 = 0;
                    }
                    char var_86 = (var_85 == 0);
                    if (var_86) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_87 = var_29[var_78];
                    float var_88 = var_87.mem_0;
                    float var_89 = var_87.mem_1;
                    float var_90 = (var_72 / 256);
                    float var_91 = (var_89 - var_90);
                    char var_93;
                    if (var_83) {
                        var_93 = (var_78 < 1);
                    } else {
                        var_93 = 0;
                    }
                    char var_94 = (var_93 == 0);
                    if (var_94) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_75[var_78] = make_Tuple0(var_88, var_91);
                } else {
                }
                long long int var_95 = (var_78 + 1);
                var_76[0] = var_95;
            }
            long long int var_96 = var_76[0];
            float var_98[1];
            long long int var_99[1];
            var_99[0] = 0;
            while (method_61(var_99)) {
                long long int var_101 = var_99[0];
                long long int var_102 = (256 * var_101);
                long long int var_103 = (var_20 + var_102);
                long long int var_104 = (256 - var_102);
                char var_105 = (var_103 < 256);
                if (var_105) {
                    char var_106 = (var_101 >= 0);
                    char var_108;
                    if (var_106) {
                        var_108 = (var_101 < 1);
                    } else {
                        var_108 = 0;
                    }
                    char var_109 = (var_108 == 0);
                    if (var_109) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_110 = var_75[var_101];
                    float var_111 = var_110.mem_0;
                    float var_112 = var_110.mem_1;
                    float var_113 = (var_112 * var_112);
                    char var_115;
                    if (var_106) {
                        var_115 = (var_101 < 1);
                    } else {
                        var_115 = 0;
                    }
                    char var_116 = (var_115 == 0);
                    if (var_116) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_98[var_101] = var_113;
                } else {
                }
                long long int var_117 = (var_101 + 1);
                var_99[0] = var_117;
            }
            long long int var_118 = var_99[0];
            float var_119 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_98);
            __shared__ float var_120[1];
            long long int var_121 = threadIdx.x;
            char var_122 = (var_121 == 0);
            if (var_122) {
                var_120[0] = var_119;
            } else {
            }
            __syncthreads();
            float var_123 = var_120[0];
            Tuple1 var_128[1];
            long long int var_129[1];
            var_129[0] = 0;
            while (method_61(var_129)) {
                long long int var_131 = var_129[0];
                long long int var_132 = (256 * var_131);
                long long int var_133 = (var_20 + var_132);
                long long int var_134 = (256 - var_132);
                char var_135 = (var_133 < 256);
                if (var_135) {
                    char var_136 = (var_131 >= 0);
                    char var_138;
                    if (var_136) {
                        var_138 = (var_131 < 1);
                    } else {
                        var_138 = 0;
                    }
                    char var_139 = (var_138 == 0);
                    if (var_139) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_140 = var_75[var_131];
                    float var_141 = var_140.mem_0;
                    float var_142 = var_140.mem_1;
                    char var_143 = (var_142 > 0);
                    float var_144;
                    if (var_143) {
                        var_144 = var_141;
                    } else {
                        var_144 = 0;
                    }
                    float var_145 = (var_123 / 256);
                    float var_146 = sqrt(var_145);
                    char var_148;
                    if (var_136) {
                        var_148 = (var_131 < 1);
                    } else {
                        var_148 = 0;
                    }
                    char var_149 = (var_148 == 0);
                    if (var_149) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_128[var_131] = make_Tuple1(var_144, var_142, var_146);
                } else {
                }
                long long int var_150 = (var_131 + 1);
                var_129[0] = var_150;
            }
            long long int var_151 = var_129[0];
            float var_156[1];
            long long int var_157[1];
            var_157[0] = 0;
            while (method_61(var_157)) {
                long long int var_159 = var_157[0];
                long long int var_160 = (256 * var_159);
                long long int var_161 = (var_20 + var_160);
                long long int var_162 = (256 - var_160);
                char var_163 = (var_161 < 256);
                if (var_163) {
                    char var_164 = (var_159 >= 0);
                    char var_166;
                    if (var_164) {
                        var_166 = (var_159 < 1);
                    } else {
                        var_166 = 0;
                    }
                    char var_167 = (var_166 == 0);
                    if (var_167) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_168 = var_128[var_159];
                    float var_169 = var_168.mem_0;
                    float var_170 = var_168.mem_1;
                    float var_171 = var_168.mem_2;
                    float var_172 = (-var_169);
                    float var_173 = (var_172 * var_170);
                    float var_174 = (var_171 * var_171);
                    float var_175 = (var_173 / var_174);
                    char var_177;
                    if (var_164) {
                        var_177 = (var_159 < 1);
                    } else {
                        var_177 = 0;
                    }
                    char var_178 = (var_177 == 0);
                    if (var_178) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_156[var_159] = var_175;
                } else {
                }
                long long int var_179 = (var_159 + 1);
                var_157[0] = var_179;
            }
            long long int var_180 = var_157[0];
            float var_181 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_156);
            __shared__ float var_182[1];
            long long int var_183 = threadIdx.x;
            char var_184 = (var_183 == 0);
            if (var_184) {
                var_182[0] = var_181;
            } else {
            }
            __syncthreads();
            float var_185 = var_182[0];
            float var_191[1];
            long long int var_192[1];
            var_192[0] = 0;
            while (method_61(var_192)) {
                long long int var_194 = var_192[0];
                long long int var_195 = (256 * var_194);
                long long int var_196 = (var_20 + var_195);
                long long int var_197 = (256 - var_195);
                char var_198 = (var_196 < 256);
                if (var_198) {
                    char var_199 = (var_194 >= 0);
                    char var_201;
                    if (var_199) {
                        var_201 = (var_194 < 1);
                    } else {
                        var_201 = 0;
                    }
                    char var_202 = (var_201 == 0);
                    if (var_202) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_203 = var_128[var_194];
                    float var_204 = var_203.mem_0;
                    float var_205 = var_203.mem_1;
                    float var_206 = var_203.mem_2;
                    float var_207 = (var_204 / var_206);
                    float var_208 = (var_185 * var_205);
                    float var_209 = (var_206 * 256);
                    float var_210 = (var_208 / var_209);
                    float var_211 = (var_207 + var_210);
                    char var_213;
                    if (var_199) {
                        var_213 = (var_194 < 1);
                    } else {
                        var_213 = 0;
                    }
                    char var_214 = (var_213 == 0);
                    if (var_214) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_191[var_194] = var_211;
                } else {
                }
                long long int var_215 = (var_194 + 1);
                var_192[0] = var_215;
            }
            long long int var_216 = var_192[0];
            float var_217 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_191);
            __shared__ float var_218[1];
            long long int var_219 = threadIdx.x;
            char var_220 = (var_219 == 0);
            if (var_220) {
                var_218[0] = var_217;
            } else {
            }
            __syncthreads();
            float var_221 = var_218[0];
            long long int var_222[1];
            var_222[0] = 0;
            while (method_61(var_222)) {
                long long int var_224 = var_222[0];
                long long int var_225 = (256 * var_224);
                long long int var_226 = (var_20 + var_225);
                long long int var_227 = (256 - var_225);
                char var_228 = (var_226 < 256);
                if (var_228) {
                    char var_229 = (var_226 >= 0);
                    char var_230 = (var_229 == 0);
                    if (var_230) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_231 = (var_13 + var_226);
                    char var_232 = (var_224 >= 0);
                    char var_234;
                    if (var_232) {
                        var_234 = (var_224 < 1);
                    } else {
                        var_234 = 0;
                    }
                    char var_235 = (var_234 == 0);
                    if (var_235) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_236 = var_191[var_224];
                    float var_237 = var_2[var_231];
                    float var_238 = (var_237 + var_236);
                    float var_239 = (var_221 / 256);
                    float var_240 = (var_238 - var_239);
                    var_2[var_231] = var_240;
                } else {
                }
                long long int var_241 = (var_224 + 1);
                var_222[0] = var_241;
            }
            long long int var_242 = var_222[0];
            long long int var_243 = (var_8 + 64);
            var_6[0] = var_243;
        }
        long long int var_244 = var_6[0];
    }
    __global__ void method_95(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.y;
        long long int var_3 = blockIdx.y;
        long long int var_4 = (var_2 + var_3);
        long long int var_5[1];
        var_5[0] = var_4;
        while (method_56(var_5)) {
            long long int var_7 = var_5[0];
            char var_8 = (var_7 >= 0);
            char var_10;
            if (var_8) {
                var_10 = (var_7 < 128);
            } else {
                var_10 = 0;
            }
            char var_11 = (var_10 == 0);
            if (var_11) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_12 = (var_7 * 10);
            char var_14;
            if (var_8) {
                var_14 = (var_7 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.x;
            long long int var_17 = blockIdx.x;
            long long int var_18 = (10 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_27[1];
            long long int var_28[1];
            var_28[0] = 0;
            while (method_61(var_28)) {
                long long int var_30 = var_28[0];
                long long int var_31 = (10 * var_30);
                long long int var_32 = (var_19 + var_31);
                long long int var_33 = (10 - var_31);
                char var_34 = (var_32 < 10);
                if (var_34) {
                    char var_35 = (var_30 >= 0);
                    char var_37;
                    if (var_35) {
                        var_37 = (var_30 < 1);
                    } else {
                        var_37 = 0;
                    }
                    char var_38 = (var_37 == 0);
                    if (var_38) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_39 = (var_32 >= 0);
                    char var_40 = (var_39 == 0);
                    if (var_40) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_41 = (var_12 + var_32);
                    float var_42 = var_0[var_41];
                    var_27[var_30] = var_42;
                } else {
                }
                long long int var_43 = (var_30 + 1);
                var_28[0] = var_43;
            }
            long long int var_44 = var_28[0];
            FunPointer2 var_47 = method_96;
            float var_48 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_27, var_47);
            __shared__ float var_49[1];
            long long int var_50 = threadIdx.x;
            char var_51 = (var_50 == 0);
            if (var_51) {
                var_49[0] = var_48;
            } else {
            }
            __syncthreads();
            float var_52 = var_49[0];
            float var_55[1];
            long long int var_56[1];
            var_56[0] = 0;
            while (method_61(var_56)) {
                long long int var_58 = var_56[0];
                long long int var_59 = (10 * var_58);
                long long int var_60 = (var_19 + var_59);
                long long int var_61 = (10 - var_59);
                char var_62 = (var_60 < 10);
                if (var_62) {
                    char var_63 = (var_58 >= 0);
                    char var_65;
                    if (var_63) {
                        var_65 = (var_58 < 1);
                    } else {
                        var_65 = 0;
                    }
                    char var_66 = (var_65 == 0);
                    if (var_66) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_67 = var_27[var_58];
                    float var_68 = (var_67 - var_52);
                    float var_69 = exp(var_68);
                    char var_71;
                    if (var_63) {
                        var_71 = (var_58 < 1);
                    } else {
                        var_71 = 0;
                    }
                    char var_72 = (var_71 == 0);
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_55[var_58] = var_69;
                } else {
                }
                long long int var_73 = (var_58 + 1);
                var_56[0] = var_73;
            }
            long long int var_74 = var_56[0];
            float var_75 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_55);
            __shared__ float var_76[1];
            long long int var_77 = threadIdx.x;
            char var_78 = (var_77 == 0);
            if (var_78) {
                var_76[0] = var_75;
            } else {
            }
            __syncthreads();
            float var_79 = var_76[0];
            long long int var_80[1];
            var_80[0] = 0;
            while (method_61(var_80)) {
                long long int var_82 = var_80[0];
                long long int var_83 = (10 * var_82);
                long long int var_84 = (var_19 + var_83);
                long long int var_85 = (10 - var_83);
                char var_86 = (var_84 < 10);
                if (var_86) {
                    char var_87 = (var_84 >= 0);
                    char var_88 = (var_87 == 0);
                    if (var_88) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_89 = (var_12 + var_84);
                    char var_90 = (var_82 >= 0);
                    char var_92;
                    if (var_90) {
                        var_92 = (var_82 < 1);
                    } else {
                        var_92 = 0;
                    }
                    char var_93 = (var_92 == 0);
                    if (var_93) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_94 = var_55[var_82];
                    float var_95 = var_1[var_89];
                    float var_96 = (var_94 / var_79);
                    var_1[var_89] = var_96;
                } else {
                }
                long long int var_97 = (var_82 + 1);
                var_80[0] = var_97;
            }
            long long int var_98 = var_80[0];
            long long int var_99 = (var_7 + 64);
            var_5[0] = var_99;
        }
        long long int var_100 = var_5[0];
    }
    __global__ void method_131(float * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.y;
        long long int var_4 = blockIdx.y;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_56(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_8 * 10);
            char var_15;
            if (var_9) {
                var_15 = (var_8 < 128);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.x;
            long long int var_18 = blockIdx.x;
            long long int var_19 = (10 * var_18);
            long long int var_20 = (var_17 + var_19);
            float var_21 = __int_as_float(0xff800000);
            float var_22 = 0;
            long long int var_23[1];
            float var_24[1];
            float var_25[1];
            var_23[0] = var_20;
            var_24[0] = var_21;
            var_25[0] = var_22;
            while (method_132(var_23, var_24, var_25)) {
                long long int var_27 = var_23[0];
                float var_28 = var_24[0];
                float var_29 = var_25[0];
                char var_30 = (var_27 >= 0);
                char var_32;
                if (var_30) {
                    var_32 = (var_27 < 10);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_13 + var_27);
                float var_35 = var_0[var_34];
                float var_36 = var_1[var_34];
                char var_37 = (var_28 > var_35);
                Tuple0 var_38;
                if (var_37) {
                    var_38 = make_Tuple0(var_28, var_29);
                } else {
                    var_38 = make_Tuple0(var_35, var_36);
                }
                float var_39 = var_38.mem_0;
                float var_40 = var_38.mem_1;
                long long int var_41 = (var_27 + 10);
                var_23[0] = var_41;
                var_24[0] = var_39;
                var_25[0] = var_40;
            }
            long long int var_42 = var_23[0];
            float var_43 = var_24[0];
            float var_44 = var_25[0];
            FunPointer3 var_47 = method_133;
            Tuple0 var_48 = cub::BlockReduce<Tuple0,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(make_Tuple0(var_43, var_44), var_47);
            float var_49 = var_48.mem_0;
            float var_50 = var_48.mem_1;
            long long int var_51 = threadIdx.x;
            char var_52 = (var_51 == 0);
            if (var_52) {
                char var_54;
                if (var_9) {
                    var_54 = (var_8 < 128);
                } else {
                    var_54 = 0;
                }
                char var_55 = (var_54 == 0);
                if (var_55) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_56 = var_2[var_8];
                long long int var_57 = ((long long int) (var_50));
                var_2[var_8] = var_57;
            } else {
            }
            long long int var_58 = (var_8 + 64);
            var_6[0] = var_58;
        }
        long long int var_59 = var_6[0];
    }
    __global__ void method_70(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_55(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 256);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_20 = 0;
            long long int var_21[1];
            float var_22[1];
            var_21[0] = var_19;
            var_22[0] = var_20;
            while (method_71(var_21, var_22)) {
                long long int var_24 = var_21[0];
                float var_25 = var_22[0];
                char var_26 = (var_24 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_24 < 128);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_24 * 256);
                char var_32;
                if (var_9) {
                    var_32 = (var_8 < 256);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_8);
                float var_35 = var_0[var_34];
                float var_36 = (var_25 + var_35);
                long long int var_37 = (var_24 + 32);
                var_21[0] = var_37;
                var_22[0] = var_36;
            }
            long long int var_38 = var_21[0];
            float var_39 = var_22[0];
            long long int var_40 = threadIdx.x;
            long long int var_41 = threadIdx.y;
            __shared__ float var_42[992];
            long long int var_43[1];
            float var_44[1];
            var_43[0] = 32;
            var_44[0] = var_39;
            while (method_72(var_43, var_44)) {
                long long int var_46 = var_43[0];
                float var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                char var_49 = (var_41 < var_46);
                char var_51;
                if (var_49) {
                    var_51 = (var_41 >= var_48);
                } else {
                    var_51 = 0;
                }
                if (var_51) {
                    char var_52 = (var_41 >= 1);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_41 < 32);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_41 - 1);
                    long long int var_57 = (var_56 * 32);
                    char var_58 = (var_40 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_40 < 32);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 + var_40);
                    var_42[var_62] = var_47;
                } else {
                }
                __syncthreads();
                char var_63 = (var_41 < var_48);
                float var_86;
                if (var_63) {
                    long long int var_64 = (var_41 + var_48);
                    long long int var_65[1];
                    float var_66[1];
                    var_65[0] = var_64;
                    var_66[0] = var_47;
                    while (method_73(var_46, var_65, var_66)) {
                        long long int var_68 = var_65[0];
                        float var_69 = var_66[0];
                        char var_70 = (var_68 >= 1);
                        char var_72;
                        if (var_70) {
                            var_72 = (var_68 < 32);
                        } else {
                            var_72 = 0;
                        }
                        char var_73 = (var_72 == 0);
                        if (var_73) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_74 = (var_68 - 1);
                        long long int var_75 = (var_74 * 32);
                        char var_76 = (var_40 >= 0);
                        char var_78;
                        if (var_76) {
                            var_78 = (var_40 < 32);
                        } else {
                            var_78 = 0;
                        }
                        char var_79 = (var_78 == 0);
                        if (var_79) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_80 = (var_75 + var_40);
                        float var_81 = var_42[var_80];
                        float var_82 = (var_69 + var_81);
                        long long int var_83 = (var_68 + var_48);
                        var_65[0] = var_83;
                        var_66[0] = var_82;
                    }
                    long long int var_84 = var_65[0];
                    var_86 = var_66[0];
                } else {
                    var_86 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_86;
            }
            long long int var_87 = var_43[0];
            float var_88 = var_44[0];
            long long int var_89 = threadIdx.y;
            char var_90 = (var_89 == 0);
            if (var_90) {
                float var_91 = var_1[var_8];
                float var_92 = (var_88 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 256);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_90(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (10 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_83(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 10);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_20 = 0;
            long long int var_21[1];
            float var_22[1];
            var_21[0] = var_19;
            var_22[0] = var_20;
            while (method_71(var_21, var_22)) {
                long long int var_24 = var_21[0];
                float var_25 = var_22[0];
                char var_26 = (var_24 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_24 < 128);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_24 * 10);
                char var_32;
                if (var_9) {
                    var_32 = (var_8 < 10);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_8);
                float var_35 = var_0[var_34];
                float var_36 = (var_25 + var_35);
                long long int var_37 = (var_24 + 32);
                var_21[0] = var_37;
                var_22[0] = var_36;
            }
            long long int var_38 = var_21[0];
            float var_39 = var_22[0];
            long long int var_40 = threadIdx.x;
            long long int var_41 = threadIdx.y;
            __shared__ float var_42[310];
            long long int var_43[1];
            float var_44[1];
            var_43[0] = 32;
            var_44[0] = var_39;
            while (method_72(var_43, var_44)) {
                long long int var_46 = var_43[0];
                float var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                char var_49 = (var_41 < var_46);
                char var_51;
                if (var_49) {
                    var_51 = (var_41 >= var_48);
                } else {
                    var_51 = 0;
                }
                if (var_51) {
                    char var_52 = (var_41 >= 1);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_41 < 32);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_41 - 1);
                    long long int var_57 = (var_56 * 10);
                    char var_58 = (var_40 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_40 < 10);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 + var_40);
                    var_42[var_62] = var_47;
                } else {
                }
                __syncthreads();
                char var_63 = (var_41 < var_48);
                float var_86;
                if (var_63) {
                    long long int var_64 = (var_41 + var_48);
                    long long int var_65[1];
                    float var_66[1];
                    var_65[0] = var_64;
                    var_66[0] = var_47;
                    while (method_73(var_46, var_65, var_66)) {
                        long long int var_68 = var_65[0];
                        float var_69 = var_66[0];
                        char var_70 = (var_68 >= 1);
                        char var_72;
                        if (var_70) {
                            var_72 = (var_68 < 32);
                        } else {
                            var_72 = 0;
                        }
                        char var_73 = (var_72 == 0);
                        if (var_73) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_74 = (var_68 - 1);
                        long long int var_75 = (var_74 * 10);
                        char var_76 = (var_40 >= 0);
                        char var_78;
                        if (var_76) {
                            var_78 = (var_40 < 10);
                        } else {
                            var_78 = 0;
                        }
                        char var_79 = (var_78 == 0);
                        if (var_79) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_80 = (var_75 + var_40);
                        float var_81 = var_42[var_80];
                        float var_82 = (var_69 + var_81);
                        long long int var_83 = (var_68 + var_48);
                        var_65[0] = var_83;
                        var_66[0] = var_82;
                    }
                    long long int var_84 = var_65[0];
                    var_86 = var_66[0];
                } else {
                    var_86 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_86;
            }
            long long int var_87 = var_43[0];
            float var_88 = var_44[0];
            long long int var_89 = threadIdx.y;
            char var_90 = (var_89 == 0);
            if (var_90) {
                float var_91 = var_1[var_8];
                float var_92 = (var_88 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 10);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_106(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (128 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_107(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 1280);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            char var_15;
            if (var_10) {
                var_15 = (var_9 < 1280);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_0[var_9];
            float var_18 = var_1[var_9];
            float var_19 = var_2[var_9];
            float var_20 = (var_17 - var_18);
            float var_21 = (var_20 / 128);
            float var_22 = (var_19 + var_21);
            var_2[var_9] = var_22;
            long long int var_23 = (var_9 + 1280);
            var_7[0] = var_23;
        }
        long long int var_24 = var_7[0];
    }
    __device__ char method_55(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 256);
    }
    __device__ char method_117(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 200704);
    }
    __device__ char method_83(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 10);
    }
    __device__ char method_124(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 2560);
    }
    __device__ char method_56(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 128);
    }
    __device__ char method_101(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 1280);
    }
    __device__ char method_138(long long int * var_0, long long int * var_1) {
        long long int var_2 = var_0[0];
        long long int var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_61(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1);
    }
    __device__ float method_96(float var_0, float var_1) {
        char var_2 = (var_0 > var_1);
        if (var_2) {
            return var_0;
        } else {
            return var_1;
        }
    }
    __device__ char method_132(long long int * var_0, float * var_1, float * var_2) {
        long long int var_3 = var_0[0];
        float var_4 = var_1[0];
        float var_5 = var_2[0];
        return (var_3 < 10);
    }
    __device__ Tuple0 method_133(Tuple0 var_0, Tuple0 var_1) {
        float var_2 = var_0.mem_0;
        float var_3 = var_0.mem_1;
        float var_4 = var_1.mem_0;
        float var_5 = var_1.mem_1;
        char var_6 = (var_2 > var_4);
        Tuple0 var_7;
        if (var_6) {
            var_7 = make_Tuple0(var_2, var_3);
        } else {
            var_7 = make_Tuple0(var_4, var_5);
        }
        float var_8 = var_7.mem_0;
        float var_9 = var_7.mem_1;
        return make_Tuple0(var_8, var_9);
    }
    __device__ char method_71(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_72(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_73(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
    __device__ char method_107(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1280);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and Env1 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<Env1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: Env22
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack4 =
    struct
    val mem_0: ResizeArray<Env3>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap5 =
    {
    mem_0: EnvStack2
    mem_1: (uint64 ref)
    mem_2: uint64
    mem_3: EnvStack4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap5
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap5
    }
and EnvHeap8 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap5
    }
and Env9 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env22
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack10 =
    struct
    val mem_0: ResizeArray<Env9>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap11 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvHeap5
    }
and Env12 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env16
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack13 =
    struct
    val mem_0: ResizeArray<Env12>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    }
and EnvHeap15 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env16 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    mem_6: (int64 ref)
    mem_7: EnvHeap15
    }
and Tuple18 =
    struct
    val mem_0: Tuple19
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple19 =
    struct
    val mem_0: int64
    val mem_1: int64
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and Tuple20 =
    struct
    val mem_0: int64
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env21 =
    struct
    val mem_0: Env9
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env22 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack23 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack24 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack25 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack26 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple27 =
    struct
    val mem_0: float
    val mem_1: int64
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack28 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack29 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack30 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack31 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack32 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack33 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack34 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack35 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack36 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap6), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_7((var_0: EnvHeap15), (var_1: EnvHeap14), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_9((var_0: string)): Tuple18 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2051)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2051i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int32) = var_5.ReadInt32()
    let (var_13: int32) = System.Net.IPAddress.NetworkToHostOrder(var_12)
    let (var_14: int32) = var_5.ReadInt32()
    let (var_15: int32) = System.Net.IPAddress.NetworkToHostOrder(var_14)
    let (var_16: int64) = (int64 var_11)
    let (var_17: int64) = (int64 var_13)
    let (var_18: int64) = (int64 var_15)
    let (var_19: int32) = (var_11 * var_13)
    let (var_20: int32) = (var_19 * var_15)
    let (var_22: (uint8 [])) = var_5.ReadBytes(var_20)
    var_5.Dispose()
    var_4.Dispose()
    Tuple18(Tuple19(var_16, var_17, var_18), var_22)
and method_10((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_11((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_10((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_12((var_0: string)): Tuple20 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2049)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2049i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int64) = (int64 var_11)
    let (var_14: (uint8 [])) = var_5.ReadBytes(var_11)
    var_5.Dispose()
    var_4.Dispose()
    Tuple20(var_12, var_14)
and method_13((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_14((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_13((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_11((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_16((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_14((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_16((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_17((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (float32 [])), (var_4: int64), (var_5: int64), (var_6: int64)): Env21 =
    let (var_7: (int64 ref)) = var_0.mem_6
    let (var_8: EnvHeap15) = var_0.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    let (var_10: int64) = (var_2 * var_5)
    let (var_11: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_3,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_12: int64) = var_11.AddrOfPinnedObject().ToInt64()
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: int64) = (var_4 * 4L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_15 + var_13)
    let (var_17: Env9) = method_19((var_10: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: Env22) = var_17.mem_1
    let (var_20: (uint64 ref)) = var_19.mem_0
    let (var_21: uint64) = method_5((var_20: (uint64 ref)))
    let (var_22: int64) = (var_10 * 4L)
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_24: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_23)
    let (var_25: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_26: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_25)
    let (var_27: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_28: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_24, var_26, var_27, var_9)
    if var_28 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_28)
    var_11.Free()
    (Env21((Env9(var_18, (Env22(var_20))))))
and method_26((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_2: Env9) = method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_28((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack23((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_29((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_4: Env9) = method_27((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_30((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack23((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_31((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_2: Env9) = method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: ManagedCuda.CudaContext) = var_0.mem_0
    method_33((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_9: ManagedCuda.CudaContext), (var_8: ManagedCuda.BasicTypes.CUstream))
    EnvStack24((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_33((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack24((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_35((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack25 =
    let (var_2: Env9) = method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_37((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack25((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_38((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack25 =
    let (var_4: Env9) = method_36((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_39((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack25((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_40((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_2: Env9) = method_41((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: ManagedCuda.CudaContext) = var_0.mem_0
    method_42((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_9: ManagedCuda.CudaContext), (var_8: ManagedCuda.BasicTypes.CUstream))
    EnvStack26((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_43((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_4: Env9) = method_41((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_42((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack26((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_44((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: int64)): unit =
    let (var_27: bool) = (var_26 < 10L)
    if var_27 then
        let (var_28: int64) = 0L
        let (var_29: float) = 0.000000
        let (var_30: int64) = 0L
        let (var_31: float) = method_45((var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_28: int64), (var_29: float), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_30: int64))
        let (var_32: string) = System.String.Format("Training: {0}",var_31)
        System.Console.WriteLine(var_32)
        if (System.Double.IsNaN var_31) then
            System.Console.WriteLine("Training diverged. Aborting...")
        else
            let (var_33: int64) = 0L
            let (var_34: float) = 0.000000
            let (var_35: int64) = 0L
            let (var_36: int64) = 0L
            let (var_37: int64) = 0L
            let (var_38: Tuple27) = method_125((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_35: int64), (var_36: int64), (var_33: int64), (var_34: float), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_37: int64))
            let (var_39: float) = var_38.mem_0
            let (var_40: int64) = var_38.mem_1
            let (var_41: int64) = var_38.mem_2
            let (var_42: string) = System.String.Format("Testing: {0}({1}/{2})",var_39,var_40,var_41)
            System.Console.WriteLine(var_42)
            let (var_43: int64) = (var_26 + 1L)
            method_44((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_43: int64))
    else
        ()
and method_140((var_0: EnvStack13)): unit =
    let (var_1: ResizeArray<Env12>) = var_0.mem_0
    let (var_3: (Env12 -> unit)) = method_141
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_109((var_0: EnvStack10)): unit =
    let (var_1: ResizeArray<Env9>) = var_0.mem_0
    let (var_3: (Env9 -> unit)) = method_110
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_5((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_2 ((var_0: Env3)): bool =
    let (var_1: Env22) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: uint64) = (!var_2)
    (var_4 = 0UL)
and method_3 ((var_0: Env3)): (Env3 -> int32) =
    let (var_1: Env22) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    method_4((var_2: (uint64 ref)))
and method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_3: uint64), (var_4: int32)): uint64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: ResizeArray<Env3>) = var_1.mem_0
        let (var_7: Env3) = var_6.[var_4]
        let (var_8: Env22) = var_7.mem_0
        let (var_9: (uint64 ref)) = var_8.mem_0
        let (var_10: uint64) = var_7.mem_1
        let (var_11: uint64) = method_5((var_9: (uint64 ref)))
        let (var_12: bool) = (var_11 >= var_3)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "The next pointer should be higher than the last.")
        else
            ()
        let (var_14: uint64) = method_5((var_9: (uint64 ref)))
        let (var_15: uint64) = (var_14 - var_3)
        let (var_16: uint64) = (var_3 + 256UL)
        let (var_17: uint64) = (var_16 - 1UL)
        let (var_18: uint64) = (var_17 &&& 18446744073709551360UL)
        let (var_19: uint64) = (var_18 - var_3)
        let (var_20: bool) = (var_15 > var_19)
        if var_20 then
            let (var_21: ResizeArray<Env1>) = var_0.mem_0
            let (var_22: uint64) = (var_15 - var_19)
            var_21.Add((Env1(var_18, var_22)))
        else
            ()
        let (var_23: uint64) = (var_14 + var_10)
        let (var_24: int32) = (var_4 + 1)
        method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_23: uint64), (var_24: int32))
    else
        var_3
and method_8((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: EnvStack13)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env12>) = var_2.mem_0
    var_5.Add((Env12(var_0, (Env16(var_1)))))
and method_11((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 784L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_1 + var_3)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: uint8) = var_0.[int32 var_7]
        let (var_9: float32) = (float32 var_8)
        let (var_10: float32) = (var_9 / 255.000000f)
        var_2.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_11((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_11: int64))
    else
        ()
and method_14((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 10L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_2 + var_3)
        let (var_8: uint8) = (uint8 var_3)
        let (var_9: bool) = (var_8 = var_0)
        let (var_10: float32) =
            if var_9 then
                1.000000f
            else
                0.000000f
        var_1.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_14((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_11: int64))
    else
        ()
and method_18((var_0: EnvHeap15)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_19((var_0: int64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_3: int64) = (var_0 * 4L)
    method_20((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: int64))
and method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 802816L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_28((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(200704L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.031009f)
and method_30((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(802816L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 1024L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_33((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(1024L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 10240L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_37((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2560L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.086711f)
and method_39((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(10240L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_41((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 40L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_42((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(40L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: int64), (var_7: float), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: int64)): float =
    let (var_25: bool) = (var_24 < 468L)
    if var_25 then
        let (var_26: bool) = (var_24 >= 0L)
        let (var_27: bool) = (var_26 = false)
        if var_27 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_28: int64) = (var_24 * 100352L)
        if var_27 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_29: int64) = (var_24 * 1280L)
        method_24((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_36: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_37: EnvStack10) = EnvStack10((var_36: ResizeArray<Env9>))
        let (var_38: ManagedCuda.CudaContext) = var_4.mem_0
        let (var_39: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
        let (var_40: ManagedCuda.CudaRand.CudaRandDevice) = var_4.mem_2
        let (var_41: EnvStack10) = var_4.mem_3
        let (var_42: EnvStack13) = var_4.mem_4
        let (var_43: EnvHeap5) = var_4.mem_5
        let (var_44: (int64 ref)) = var_4.mem_6
        let (var_45: EnvHeap15) = var_4.mem_7
        let (var_46: EnvHeap17) = ({mem_0 = (var_38: ManagedCuda.CudaContext); mem_1 = (var_39: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_40: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_37: EnvStack10); mem_4 = (var_42: EnvStack13); mem_5 = (var_43: EnvHeap5); mem_6 = (var_44: (int64 ref)); mem_7 = (var_45: EnvHeap15)} : EnvHeap17)
        let (var_47: EnvStack28) = method_46((var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_28: int64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)))
        let (var_48: (int64 ref)) = var_47.mem_0
        let (var_49: (uint64 ref)) = var_47.mem_1
        let (var_50: (int64 ref)) = var_47.mem_2
        let (var_51: (uint64 ref)) = var_47.mem_3
        let (var_52: (unit -> unit)) = var_47.mem_4
        let (var_53: EnvStack29) = method_74((var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_50: (int64 ref)), (var_51: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)))
        let (var_54: (int64 ref)) = var_53.mem_0
        let (var_55: (uint64 ref)) = var_53.mem_1
        let (var_56: (int64 ref)) = var_53.mem_2
        let (var_57: (uint64 ref)) = var_53.mem_3
        let (var_58: (unit -> unit)) = var_53.mem_4
        let (var_59: EnvStack30) = method_91((var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_54: (int64 ref)), (var_55: (uint64 ref)), (var_56: (int64 ref)), (var_57: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_29: int64))
        let (var_60: (int64 ref)) = var_59.mem_0
        let (var_61: (uint64 ref)) = var_59.mem_1
        let (var_62: (unit -> unit)) = var_59.mem_2
        let (var_63: int64) = 1L
        let (var_64: int64) = 0L
        let (var_65: (float32 [])) = method_108((var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_63: int64), (var_60: (int64 ref)), (var_61: (uint64 ref)), (var_64: int64))
        let (var_66: float32) = var_65.[int32 0L]
        let (var_67: float) = (float var_66)
        let (var_68: float) = (var_7 + var_67)
        let (var_69: int64) = (var_6 + 1L)
        if (System.Double.IsNaN var_68) then
            let (var_70: EnvStack10) = var_46.mem_3
            method_109((var_70: EnvStack10))
            let (var_71: float) = (float var_69)
            (var_68 / var_71)
        else
            var_62()
            var_58()
            var_52()
            method_111((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            method_114((var_14: (int64 ref)), (var_15: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            method_118((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            method_121((var_22: (int64 ref)), (var_23: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_46: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
            let (var_73: EnvStack10) = var_46.mem_3
            method_109((var_73: EnvStack10))
            let (var_74: int64) = (var_24 + 1L)
            method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_69: int64), (var_68: float), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_74: int64))
    else
        let (var_77: float) = (float var_6)
        (var_7 / var_77)
and method_125((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: float), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: int64)): Tuple27 =
    let (var_27: bool) = (var_26 < 78L)
    if var_27 then
        let (var_28: bool) = (var_26 >= 0L)
        let (var_29: bool) = (var_28 = false)
        if var_29 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_30: int64) = (var_26 * 100352L)
        if var_29 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_31: int64) = (var_26 * 1280L)
        method_24((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_38: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_39: EnvStack10) = EnvStack10((var_38: ResizeArray<Env9>))
        let (var_40: ManagedCuda.CudaContext) = var_4.mem_0
        let (var_41: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
        let (var_42: ManagedCuda.CudaRand.CudaRandDevice) = var_4.mem_2
        let (var_43: EnvStack10) = var_4.mem_3
        let (var_44: EnvStack13) = var_4.mem_4
        let (var_45: EnvHeap5) = var_4.mem_5
        let (var_46: (int64 ref)) = var_4.mem_6
        let (var_47: EnvHeap15) = var_4.mem_7
        let (var_48: EnvHeap17) = ({mem_0 = (var_40: ManagedCuda.CudaContext); mem_1 = (var_41: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_42: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_39: EnvStack10); mem_4 = (var_44: EnvStack13); mem_5 = (var_45: EnvHeap5); mem_6 = (var_46: (int64 ref)); mem_7 = (var_47: EnvHeap15)} : EnvHeap17)
        let (var_49: EnvStack28) = method_46((var_48: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_30: int64), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)))
        let (var_50: (int64 ref)) = var_49.mem_0
        let (var_51: (uint64 ref)) = var_49.mem_1
        let (var_52: (int64 ref)) = var_49.mem_2
        let (var_53: (uint64 ref)) = var_49.mem_3
        let (var_54: (unit -> unit)) = var_49.mem_4
        let (var_55: EnvStack29) = method_74((var_48: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_50: (int64 ref)), (var_51: (uint64 ref)), (var_52: (int64 ref)), (var_53: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)))
        let (var_56: (int64 ref)) = var_55.mem_0
        let (var_57: (uint64 ref)) = var_55.mem_1
        let (var_58: (int64 ref)) = var_55.mem_2
        let (var_59: (uint64 ref)) = var_55.mem_3
        let (var_60: (unit -> unit)) = var_55.mem_4
        let (var_61: EnvStack30) = method_91((var_48: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_56: (int64 ref)), (var_57: (uint64 ref)), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_31: int64))
        let (var_62: (int64 ref)) = var_61.mem_0
        let (var_63: (uint64 ref)) = var_61.mem_1
        let (var_64: (unit -> unit)) = var_61.mem_2
        let (var_65: EnvStack31) = method_126((var_48: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_56: (int64 ref)), (var_57: (uint64 ref)), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_31: int64))
        let (var_66: (int64 ref)) = var_65.mem_0
        let (var_67: (uint64 ref)) = var_65.mem_1
        let (var_68: int64) = 1L
        let (var_69: int64) = 0L
        let (var_70: (float32 [])) = method_108((var_48: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_68: int64), (var_62: (int64 ref)), (var_63: (uint64 ref)), (var_69: int64))
        let (var_71: float32) = var_70.[int32 0L]
        let (var_72: float) = (float var_71)
        let (var_73: float) = (var_9 + var_72)
        let (var_74: int64) = 1L
        let (var_75: int64) = 0L
        let (var_76: (int64 [])) = method_139((var_48: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_74: int64), (var_66: (int64 ref)), (var_67: (uint64 ref)), (var_75: int64))
        let (var_77: int64) = var_76.[int32 0L]
        let (var_78: int64) = (var_6 + var_77)
        let (var_79: int64) = (var_7 + 128L)
        let (var_80: int64) = (var_8 + 1L)
        if (System.Double.IsNaN var_73) then
            let (var_81: EnvStack10) = var_48.mem_3
            method_109((var_81: EnvStack10))
            let (var_82: float) = (float var_80)
            let (var_83: float) = (var_73 / var_82)
            Tuple27(var_83, var_78, var_79)
        else
            let (var_84: EnvStack10) = var_48.mem_3
            method_109((var_84: EnvStack10))
            let (var_85: int64) = (var_26 + 1L)
            method_125((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_78: int64), (var_79: int64), (var_80: int64), (var_73: float), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_85: int64))
    else
        let (var_88: float) = (float var_8)
        let (var_89: float) = (var_9 / var_88)
        Tuple27(var_89, var_6, var_7)
and method_141 ((var_0: Env12)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env16) = var_0.mem_1
    let (var_3: EnvHeap15) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        let (var_8: ManagedCuda.CudaStream) = var_3.mem_2
        var_8.Dispose()
        let (var_9: ManagedCuda.CudaEvent) = var_3.mem_0
        var_9.Dispose()
        let (var_10: (bool ref)) = var_3.mem_1
        var_10 := false
    else
        ()
and method_110 ((var_0: Env9)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env22) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        var_3 := 0UL
    else
        ()
and method_4 ((var_1: (uint64 ref))) ((var_0: Env3)): int32 =
    let (var_2: Env22) = var_0.mem_0
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: uint64) = var_0.mem_1
    let (var_5: uint64) = method_5((var_1: (uint64 ref)))
    let (var_6: uint64) = method_5((var_3: (uint64 ref)))
    let (var_7: bool) = (var_5 < var_6)
    if var_7 then
        -1
    else
        let (var_8: bool) = (var_5 = var_6)
        if var_8 then
            0
        else
            1
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env9 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env22) = method_21((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack10) = var_0.mem_3
    method_25((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack10))
    (Env9(var_9, (Env22(var_8))))
and method_24((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_5
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_46((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref))): EnvStack28 =
    let (var_13: EnvStack32) = method_47((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_14: (int64 ref)) = var_13.mem_0
    let (var_15: (uint64 ref)) = var_13.mem_1
    let (var_16: EnvStack32) = method_50((var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_17: (int64 ref)) = var_16.mem_0
    let (var_18: (uint64 ref)) = var_16.mem_1
    method_52((var_7: (int64 ref)), (var_8: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_19: EnvStack32) = method_57((var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: (int64 ref)) = var_19.mem_0
    let (var_21: (uint64 ref)) = var_19.mem_1
    let (var_22: EnvStack32) = method_50((var_20: (int64 ref)), (var_21: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_23: (int64 ref)) = var_22.mem_0
    let (var_24: (uint64 ref)) = var_22.mem_1
    let (var_25: (unit -> unit)) = method_62((var_17: (int64 ref)), (var_18: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)))
    EnvStack28((var_23: (int64 ref)), (var_24: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_25: (unit -> unit)))
and method_74((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref))): EnvStack29 =
    let (var_14: EnvStack33) = method_75((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_15: (int64 ref)) = var_14.mem_0
    let (var_16: (uint64 ref)) = var_14.mem_1
    let (var_17: EnvStack33) = method_78((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: (uint64 ref)) = var_17.mem_1
    method_80((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: (unit -> unit)) = method_84((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack29((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_20: (unit -> unit)))
and method_91((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64)): EnvStack30 =
    let (var_9: EnvStack33) = method_92((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: (uint64 ref)) = var_9.mem_1
    let (var_12: EnvStack34) = method_97((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    let (var_15: (unit -> unit)) = method_102((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack30((var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (unit -> unit)))
and method_108((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (float32 []) =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: uint64) = method_5((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 4L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 4L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_111((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_112((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_114((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_115((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_118((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_119((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_121((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_122((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_126((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64)): EnvStack31 =
    let (var_9: EnvStack35) = method_127((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: (uint64 ref)) = var_9.mem_1
    let (var_12: EnvStack36) = method_134((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    EnvStack31((var_13: (int64 ref)), (var_14: (uint64 ref)))
and method_139((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (int64 []) =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_18((var_7: EnvHeap15))
    let (var_9: uint64) = method_5((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 8L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 8L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_21((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env22 =
    let (var_3: EnvHeap5) = var_0.mem_5
    let (var_4: (uint64 ref)) = var_3.mem_1
    let (var_5: uint64) = var_3.mem_2
    let (var_6: EnvStack4) = var_3.mem_3
    let (var_7: EnvStack2) = var_3.mem_0
    let (var_8: ResizeArray<Env1>) = var_7.mem_0
    let (var_9: int32) = var_8.get_Count()
    let (var_10: bool) = (var_9 > 0)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Out of memory in the designated section.")
    else
        ()
    let (var_12: Env1) = var_8.[0]
    let (var_13: uint64) = var_12.mem_0
    let (var_14: uint64) = var_12.mem_1
    let (var_15: bool) = (var_2 <= var_14)
    let (var_42: Env3) =
        if var_15 then
            let (var_16: uint64) = (var_13 + var_2)
            let (var_17: uint64) = (var_14 - var_2)
            var_8.[0] <- (Env1(var_16, var_17))
            let (var_18: (uint64 ref)) = (ref var_13)
            (Env3((Env22(var_18)), var_2))
        else
            let (var_20: (Env1 -> (Env1 -> int32))) = method_22
            let (var_21: System.Comparison<Env1>) = System.Comparison<Env1>(var_20)
            var_8.Sort(var_21)
            let (var_22: Env1) = var_8.[0]
            let (var_23: uint64) = var_22.mem_0
            let (var_24: uint64) = var_22.mem_1
            let (var_25: bool) = (var_2 <= var_24)
            if var_25 then
                let (var_26: uint64) = (var_23 + var_2)
                let (var_27: uint64) = (var_24 - var_2)
                var_8.[0] <- (Env1(var_26, var_27))
                let (var_28: (uint64 ref)) = (ref var_23)
                (Env3((Env22(var_28)), var_2))
            else
                method_24((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                let (var_30: (Env1 -> (Env1 -> int32))) = method_22
                let (var_31: System.Comparison<Env1>) = System.Comparison<Env1>(var_30)
                var_8.Sort(var_31)
                let (var_32: Env1) = var_8.[0]
                let (var_33: uint64) = var_32.mem_0
                let (var_34: uint64) = var_32.mem_1
                let (var_35: bool) = (var_2 <= var_34)
                if var_35 then
                    let (var_36: uint64) = (var_33 + var_2)
                    let (var_37: uint64) = (var_34 - var_2)
                    var_8.[0] <- (Env1(var_36, var_37))
                    let (var_38: (uint64 ref)) = (ref var_33)
                    (Env3((Env22(var_38)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_43: Env22) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_43.mem_0
    let (var_45: uint64) = var_42.mem_1
    let (var_46: ResizeArray<Env3>) = var_6.mem_0
    var_46.Add((Env3((Env22(var_44)), var_45)))
    (Env22(var_44))
and method_25((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack10)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env9>) = var_2.mem_0
    var_5.Add((Env9(var_0, (Env22(var_1)))))
and method_47((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack32 =
    let (var_7: Env9) = method_48((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_49((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack32((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_50((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack32 =
    let (var_4: Env9) = method_48((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_51((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack32((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_52((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_53((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack32 =
    let (var_12: Env9) = method_48((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: Env22) = var_12.mem_1
    let (var_15: (uint64 ref)) = var_14.mem_0
    method_58((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_13: (int64 ref)), (var_15: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack32((var_13: (int64 ref)), (var_15: (uint64 ref)))
and method_62 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref))) (): unit =
    method_63((var_17: (int64 ref)), (var_18: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
    method_66((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
and method_75((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack33 =
    let (var_6: Env9) = method_76((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_77((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack33((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_78((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack33 =
    let (var_4: Env9) = method_76((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_79((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack33((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_80((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_81((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_84 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)) (): unit =
    method_85((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_92((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack33 =
    let (var_7: Env9) = method_76((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_93((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack33((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_97((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack34 =
    let (var_7: uint64) = method_5((var_1: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    let (var_9: int64) = (var_4 * 4L)
    let (var_10: uint64) = (uint64 var_9)
    let (var_11: uint64) = (var_8 + var_10)
    let (var_16: Env9) = method_98((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_17: (int64 ref)) = var_16.mem_0
    let (var_18: Env22) = var_16.mem_1
    let (var_19: (uint64 ref)) = var_18.mem_0
    let (var_20: uint64) = method_5((var_19: (uint64 ref)))
    method_99((var_7: uint64), (var_11: uint64), (var_20: uint64), (var_6: ManagedCuda.BasicTypes.CUmodule), (var_5: EnvHeap17))
    EnvStack34((var_17: (int64 ref)), (var_19: (uint64 ref)))
and method_102 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)) (): unit =
    method_103((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_112((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_113((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_113", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(2u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_115((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_116((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_116", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_119((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_120((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_120", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_122((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_123((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_123", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(20u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_127((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack35 =
    let (var_7: Env9) = method_128((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_129((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack35((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_134((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack36 =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: Env9) = method_135((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env22) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_5((var_8: (uint64 ref)))
    method_136((var_4: uint64), (var_9: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
    EnvStack36((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_22 ((var_0: Env1)): (Env1 -> int32) =
    let (var_1: uint64) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_23((var_2: uint64))
and method_48((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 131072L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_49((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_6
    let (var_11: EnvHeap15) = var_7.mem_7
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_18((var_11: EnvHeap15))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_5((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_5((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 0.000000f)
    let (var_27: uint64) = method_5((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 256, 128, 784, var_16, var_19, 256, var_25, 784, var_26, var_29, 256)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_51((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(131072L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_53((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_54((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_54", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_58((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_59((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_63((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_1: (uint64 ref)))
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = method_5((var_5: (uint64 ref)))
    method_64((var_8: uint64), (var_9: uint64), (var_10: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap17))
and method_66((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_67((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
    method_68((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
and method_76((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 5120L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_77((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 10, 128, 256, var_15, var_18, 10, var_21, 256, var_22, var_25, 10)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_79((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(5120L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_81((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_82((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_82", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_85((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_86((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_87((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_93((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_94((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_98((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 4L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_99((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_100((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_100", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1024u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_103((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_104((var_5: (int64 ref)), (var_6: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_128((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 1024L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_129((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_5((var_1: (uint64 ref)))
    let (var_10: uint64) = method_5((var_3: (uint64 ref)))
    let (var_11: int64) = (var_4 * 4L)
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (var_10 + var_12)
    let (var_14: uint64) = method_5((var_6: (uint64 ref)))
    method_130((var_9: uint64), (var_13: uint64), (var_14: uint64), (var_8: ManagedCuda.BasicTypes.CUmodule), (var_7: EnvHeap17))
and method_135((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 8L
    method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_136((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_137((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_137", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_23 ((var_1: uint64)) ((var_0: Env1)): int32 =
    let (var_2: uint64) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        -1
    else
        let (var_5: bool) = (var_3 = var_1)
        if var_5 then
            0
        else
            1
and method_59((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_60((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_60", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_64((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_65((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_65", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_67((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_6
    let (var_11: EnvHeap15) = var_7.mem_7
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_18((var_11: EnvHeap15))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_5((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_5((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 1.000000f)
    let (var_27: uint64) = method_5((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 256, 784, 128, var_16, var_19, 256, var_25, 784, var_26, var_29, 256)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_68((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_69((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_86((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 256, 128, 10, var_15, var_18, 10, var_21, 10, var_22, var_25, 256)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_87((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 10, 256, 128, var_15, var_18, 10, var_21, 256, var_22, var_25, 10)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_89((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_94((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_95((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_95", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_104((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_5((var_1: (uint64 ref)))
    let (var_10: uint64) = method_5((var_3: (uint64 ref)))
    let (var_11: int64) = (var_4 * 4L)
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (var_10 + var_12)
    let (var_14: uint64) = method_5((var_6: (uint64 ref)))
    method_105((var_9: uint64), (var_13: uint64), (var_14: uint64), (var_8: ManagedCuda.BasicTypes.CUmodule), (var_7: EnvHeap17))
and method_130((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_131((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_131", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_69((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_70((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_70", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_89((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_90((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_90", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_18((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_105((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_106((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_106", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1073741824UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_41: ResizeArray<Env1>) = ResizeArray<Env1>()
let (var_42: EnvStack2) = EnvStack2((var_41: ResizeArray<Env1>))
let (var_43: ResizeArray<Env3>) = ResizeArray<Env3>()
let (var_44: EnvStack4) = EnvStack4((var_43: ResizeArray<Env3>))
let (var_45: EnvHeap5) = ({mem_0 = (var_42: EnvStack2); mem_1 = (var_40: (uint64 ref)); mem_2 = (var_35: uint64); mem_3 = (var_44: EnvStack4)} : EnvHeap5)
let (var_46: EnvHeap6) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_45: EnvHeap5)} : EnvHeap6)
method_1((var_46: EnvHeap6), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_47: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_48: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_47)
let (var_49: ManagedCuda.CudaContext) = var_46.mem_0
let (var_50: EnvHeap5) = var_46.mem_1
let (var_51: EnvHeap7) = ({mem_0 = (var_49: ManagedCuda.CudaContext); mem_1 = (var_48: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_50: EnvHeap5)} : EnvHeap7)
let (var_52: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_53: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_54: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_52, var_53)
let (var_55: ManagedCuda.CudaContext) = var_51.mem_0
let (var_56: ManagedCuda.CudaRand.CudaRandDevice) = var_51.mem_1
let (var_57: EnvHeap5) = var_51.mem_2
let (var_58: EnvHeap8) = ({mem_0 = (var_55: ManagedCuda.CudaContext); mem_1 = (var_54: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_56: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_57: EnvHeap5)} : EnvHeap8)
let (var_65: ResizeArray<Env9>) = ResizeArray<Env9>()
let (var_66: EnvStack10) = EnvStack10((var_65: ResizeArray<Env9>))
let (var_67: ManagedCuda.CudaContext) = var_58.mem_0
let (var_68: ManagedCuda.CudaBlas.CudaBlas) = var_58.mem_1
let (var_69: ManagedCuda.CudaRand.CudaRandDevice) = var_58.mem_2
let (var_70: EnvHeap5) = var_58.mem_3
let (var_71: EnvHeap11) = ({mem_0 = (var_67: ManagedCuda.CudaContext); mem_1 = (var_68: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_69: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_66: EnvStack10); mem_4 = (var_70: EnvHeap5)} : EnvHeap11)
let (var_83: ResizeArray<Env12>) = ResizeArray<Env12>()
let (var_84: EnvStack13) = EnvStack13((var_83: ResizeArray<Env12>))
let (var_85: ManagedCuda.CudaContext) = var_71.mem_0
let (var_86: ManagedCuda.CudaBlas.CudaBlas) = var_71.mem_1
let (var_87: ManagedCuda.CudaRand.CudaRandDevice) = var_71.mem_2
let (var_88: EnvStack10) = var_71.mem_3
let (var_89: EnvHeap5) = var_71.mem_4
let (var_90: EnvHeap14) = ({mem_0 = (var_85: ManagedCuda.CudaContext); mem_1 = (var_86: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_87: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_88: EnvStack10); mem_4 = (var_84: EnvStack13); mem_5 = (var_89: EnvHeap5)} : EnvHeap14)
let (var_91: (bool ref)) = (ref true)
let (var_92: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_93: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_94: EnvHeap15) = ({mem_0 = (var_93: ManagedCuda.CudaEvent); mem_1 = (var_91: (bool ref)); mem_2 = (var_92: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_95: Env12) = method_7((var_94: EnvHeap15), (var_90: EnvHeap14), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_96: (int64 ref)) = var_95.mem_0
let (var_97: Env16) = var_95.mem_1
let (var_98: EnvHeap15) = var_97.mem_0
let (var_99: ManagedCuda.CudaContext) = var_90.mem_0
let (var_100: ManagedCuda.CudaBlas.CudaBlas) = var_90.mem_1
let (var_101: ManagedCuda.CudaRand.CudaRandDevice) = var_90.mem_2
let (var_102: EnvStack10) = var_90.mem_3
let (var_103: EnvStack13) = var_90.mem_4
let (var_104: EnvHeap5) = var_90.mem_5
let (var_105: EnvHeap17) = ({mem_0 = (var_99: ManagedCuda.CudaContext); mem_1 = (var_100: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_101: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_102: EnvStack10); mem_4 = (var_103: EnvStack13); mem_5 = (var_104: EnvHeap5); mem_6 = (var_96: (int64 ref)); mem_7 = (var_98: EnvHeap15)} : EnvHeap17)
let (var_106: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-images.idx3-ubyte")
let (var_107: Tuple18) = method_9((var_106: string))
let (var_108: Tuple19) = var_107.mem_0
let (var_109: int64) = var_108.mem_0
let (var_110: int64) = var_108.mem_1
let (var_111: int64) = var_108.mem_2
let (var_112: (uint8 [])) = var_107.mem_1
let (var_113: bool) = (10000L = var_109)
let (var_117: bool) =
    if var_113 then
        let (var_114: bool) = (28L = var_110)
        if var_114 then
            (28L = var_111)
        else
            false
    else
        false
let (var_118: bool) = (var_117 = false)
if var_118 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_119: int64) = var_112.LongLength
let (var_120: bool) = (var_119 > 0L)
let (var_121: bool) = (var_120 = false)
if var_121 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_122: bool) = (var_119 = 7840000L)
let (var_123: bool) = (var_122 = false)
if var_123 then
    (failwith "The product of the split dimension must equal to that of the previous one.")
else
    ()
let (var_127: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(7840000L))
let (var_128: int64) = 0L
method_10((var_112: (uint8 [])), (var_127: (float32 [])), (var_128: int64))
let (var_129: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-labels.idx1-ubyte")
let (var_130: Tuple20) = method_12((var_129: string))
let (var_131: int64) = var_130.mem_0
let (var_132: (uint8 [])) = var_130.mem_1
let (var_133: bool) = (10000L = var_131)
let (var_134: bool) = (var_133 = false)
if var_134 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_138: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(100000L))
let (var_139: int64) = 0L
method_13((var_132: (uint8 [])), (var_138: (float32 [])), (var_139: int64))
let (var_140: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-images.idx3-ubyte")
let (var_141: Tuple18) = method_9((var_140: string))
let (var_142: Tuple19) = var_141.mem_0
let (var_143: int64) = var_142.mem_0
let (var_144: int64) = var_142.mem_1
let (var_145: int64) = var_142.mem_2
let (var_146: (uint8 [])) = var_141.mem_1
let (var_147: bool) = (60000L = var_143)
let (var_151: bool) =
    if var_147 then
        let (var_148: bool) = (28L = var_144)
        if var_148 then
            (28L = var_145)
        else
            false
    else
        false
let (var_152: bool) = (var_151 = false)
if var_152 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_153: int64) = var_146.LongLength
let (var_154: bool) = (var_153 > 0L)
let (var_155: bool) = (var_154 = false)
if var_155 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_156: bool) = (var_153 = 47040000L)
let (var_157: bool) = (var_156 = false)
if var_157 then
    (failwith "The product of the split dimension must equal to that of the previous one.")
else
    ()
let (var_161: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(47040000L))
let (var_162: int64) = 0L
method_15((var_146: (uint8 [])), (var_161: (float32 [])), (var_162: int64))
let (var_163: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-labels.idx1-ubyte")
let (var_164: Tuple20) = method_12((var_163: string))
let (var_165: int64) = var_164.mem_0
let (var_166: (uint8 [])) = var_164.mem_1
let (var_167: bool) = (60000L = var_165)
let (var_168: bool) = (var_167 = false)
if var_168 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_172: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(600000L))
let (var_173: int64) = 0L
method_16((var_166: (uint8 [])), (var_172: (float32 [])), (var_173: int64))
let (var_174: int64) = 10000L
let (var_175: int64) = 0L
let (var_176: int64) = 784L
let (var_177: int64) = 1L
let (var_178: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_174: int64), (var_127: (float32 [])), (var_175: int64), (var_176: int64), (var_177: int64))
let (var_179: Env9) = var_178.mem_0
let (var_180: (int64 ref)) = var_179.mem_0
let (var_181: Env22) = var_179.mem_1
let (var_182: (uint64 ref)) = var_181.mem_0
let (var_183: int64) = 10000L
let (var_184: int64) = 0L
let (var_185: int64) = 10L
let (var_186: int64) = 1L
let (var_187: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_183: int64), (var_138: (float32 [])), (var_184: int64), (var_185: int64), (var_186: int64))
let (var_188: Env9) = var_187.mem_0
let (var_189: (int64 ref)) = var_188.mem_0
let (var_190: Env22) = var_188.mem_1
let (var_191: (uint64 ref)) = var_190.mem_0
let (var_192: int64) = 60000L
let (var_193: int64) = 0L
let (var_194: int64) = 784L
let (var_195: int64) = 1L
let (var_196: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_192: int64), (var_161: (float32 [])), (var_193: int64), (var_194: int64), (var_195: int64))
let (var_197: Env9) = var_196.mem_0
let (var_198: (int64 ref)) = var_197.mem_0
let (var_199: Env22) = var_197.mem_1
let (var_200: (uint64 ref)) = var_199.mem_0
let (var_201: int64) = 60000L
let (var_202: int64) = 0L
let (var_203: int64) = 10L
let (var_204: int64) = 1L
let (var_205: Env21) = method_17((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_201: int64), (var_172: (float32 [])), (var_202: int64), (var_203: int64), (var_204: int64))
let (var_206: Env9) = var_205.mem_0
let (var_207: (int64 ref)) = var_206.mem_0
let (var_208: Env22) = var_206.mem_1
let (var_209: (uint64 ref)) = var_208.mem_0
let (var_210: EnvStack23) = method_26((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_211: (int64 ref)) = var_210.mem_0
let (var_212: (uint64 ref)) = var_210.mem_1
let (var_213: EnvStack23) = method_29((var_211: (int64 ref)), (var_212: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_214: (int64 ref)) = var_213.mem_0
let (var_215: (uint64 ref)) = var_213.mem_1
let (var_216: EnvStack24) = method_31((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_217: (int64 ref)) = var_216.mem_0
let (var_218: (uint64 ref)) = var_216.mem_1
let (var_219: EnvStack24) = method_34((var_217: (int64 ref)), (var_218: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_220: (int64 ref)) = var_219.mem_0
let (var_221: (uint64 ref)) = var_219.mem_1
let (var_222: EnvStack25) = method_35((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_223: (int64 ref)) = var_222.mem_0
let (var_224: (uint64 ref)) = var_222.mem_1
let (var_225: EnvStack25) = method_38((var_223: (int64 ref)), (var_224: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_226: (int64 ref)) = var_225.mem_0
let (var_227: (uint64 ref)) = var_225.mem_1
let (var_228: EnvStack26) = method_40((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_229: (int64 ref)) = var_228.mem_0
let (var_230: (uint64 ref)) = var_228.mem_1
let (var_231: EnvStack26) = method_43((var_229: (int64 ref)), (var_230: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_232: (int64 ref)) = var_231.mem_0
let (var_233: (uint64 ref)) = var_231.mem_1
let (var_234: int64) = 0L
method_44((var_220: (int64 ref)), (var_221: (uint64 ref)), (var_217: (int64 ref)), (var_218: (uint64 ref)), (var_214: (int64 ref)), (var_215: (uint64 ref)), (var_211: (int64 ref)), (var_212: (uint64 ref)), (var_232: (int64 ref)), (var_233: (uint64 ref)), (var_229: (int64 ref)), (var_230: (uint64 ref)), (var_226: (int64 ref)), (var_227: (uint64 ref)), (var_223: (int64 ref)), (var_224: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_180: (int64 ref)), (var_182: (uint64 ref)), (var_189: (int64 ref)), (var_191: (uint64 ref)), (var_198: (int64 ref)), (var_200: (uint64 ref)), (var_207: (int64 ref)), (var_209: (uint64 ref)), (var_234: int64))
method_140((var_103: EnvStack13))
method_109((var_88: EnvStack10))
var_54.Dispose()
var_48.Dispose()
let (var_235: uint64) = method_5((var_40: (uint64 ref)))
let (var_236: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_235)
let (var_237: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_236)
var_49.FreeMemory(var_237)
var_40 := 0UL
var_1.Dispose()

