Error trace on line: 7, column: 5 in file "random1".
inl CudaRandom = CudaRandomModule {stream Cuda CudaTensor}
    ^
Error trace on line: 13, column: 29 in file "random1".
inl sigmoid_initializer dim ret = 
                            ^
Error trace on line: 21, column: 17 in file "Allocator".
            | 0 ret ->
                ^
Error trace on line: 22, column: 21 in file "Allocator".
                inl tns = Tuple.foldr (inl x create -> create x) vars create
                    ^
Error trace on line: 23, column: 25 in file "Allocator".
                inl r = ret tns
                        ^
Error trace on line: 14, column: 9 in file "random1".
    inb x = CudaTensor.create {elem_type=float32; dim}
        ^
Error trace on line: 15, column: 5 in file "random1".
    sigmoid_initializer' (x.view_span (const (3,4)))
    ^
Error trace on line: 9, column: 26 in file "random1".
inl sigmoid_initializer' x = 
                         ^
Error trace on line: 10, column: 9 in file "random1".
    inl stddev = sqrt (2.0f32 / to float32 (Tuple.foldl (inl s x -> s + HostTensor.span x) 0 x.dim))
        ^
Error trace on line: 11, column: 5 in file "random1".
    CudaRandom.fill {dst=.Normal; stddev mean=0f32} x
    ^
Error trace on line: 43, column: 21 in file "CudaRandom".
        inl fill op (!zip in) =
                    ^
Error trace on line: 44, column: 23 in file "CudaRandom".
            inl in' = to_1d in |> to_dev_tensor
                      ^
Error trace on line: 277, column: 11 in file "HostTensor".
inl to_1d tns = reshape (const tns.length) tns
          ^
Error trace on line: 261, column: 15 in file "HostTensor".
inl reshape f tns = 
              ^
Error trace on line: 262, column: 9 in file "HostTensor".
    inl dim' = tns.dim
        ^
Error trace on line: 263, column: 9 in file "HostTensor".
    inl dim = tensor_update_dim f dim' |> map_dims
        ^
Error trace on line: 265, column: 5 in file "HostTensor".
    tns .update_dim (const dim)
    ^
Error trace on line: 130, column: 46 in file "HostTensor".
        update_body = inl {data with bodies} f -> {data with bodies=toa_map f bodies} |> facade
                                             ^
Error trace on line: 4, column: 15 in file "HostTensor".
inl toa_map f x = 
              ^
Error trace on line: 11, column: 5 in file "HostTensor".
    loop x
    ^
Error trace on line: 6, column: 11 in file "HostTensor".
        | x when caseable_box_is x -> f x
          ^
Error trace on line: 7, column: 11 in file "HostTensor".
        | x :: xs -> loop x :: loop xs
          ^
Error trace on line: 8, column: 11 in file "HostTensor".
        | () -> ()
          ^
Error trace on line: 9, column: 11 in file "HostTensor".
        | {!block_toa_map} & x -> module_map (inl _ -> loop) x
          ^
Error trace on line: 10, column: 11 in file "HostTensor".
        | x -> f x
          ^
Error trace on line: 3, column: 15 in file "Lazy".
    met f x = f x
              ^
Error trace on line: 266, column: 27 in file "HostTensor".
        .update_body (inl {d with size=size' offset=o::o' ar} ->
                          ^
Error trace on line: 270, column: 21 in file "HostTensor".
                inl {size} = make_body dim'
                    ^
Error trace on line: 271, column: 17 in file "HostTensor".
                assert (size = size') "The inner sizes of the tensor being reshaped must be contiguous."
                ^
Error trace on line: 168, column: 14 in file "Core".
inl assert c msg = 
             ^
Error trace on line: 169, column: 9 in file "Core".
    inl raise = 
        ^
Error trace on line: 173, column: 5 in file "Core".
    if c = false then raise msg
    ^
Error trace on line: 6, column: 16 in file "Core".
inl error_type x = !ErrorType(x)
               ^
lit The inner sizes of the tensor being reshaped must be contiguous.
