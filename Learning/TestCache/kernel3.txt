module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_10(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7);
    __global__ void method_12(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3);
    __device__ char method_11(long long int * var_0);
    
    __global__ void method_10(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7) {
        long long int var_8 = threadIdx.x;
        long long int var_9 = blockIdx.x;
        long long int var_10 = (8 * var_9);
        long long int var_11 = (var_8 + var_10);
        long long int var_12[1];
        var_12[0] = var_11;
        while (method_11(var_12)) {
            long long int var_14 = var_12[0];
            char var_15 = (var_14 >= 0);
            char var_17;
            if (var_15) {
                var_17 = (var_14 < 8);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_19 = threadIdx.y;
            long long int var_20 = blockIdx.y;
            long long int var_21 = (8 * var_20);
            long long int var_22 = (var_19 + var_21);
            long long int var_23[1];
            var_23[0] = var_22;
            while (method_11(var_23)) {
                long long int var_25 = var_23[0];
                char var_26 = (var_25 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_25 < 8);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_25 * 8);
                char var_32;
                if (var_15) {
                    var_32 = (var_14 < 8);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_14);
                char var_36;
                if (var_26) {
                    var_36 = (var_25 < 8);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                char var_39;
                if (var_15) {
                    var_39 = (var_14 < 8);
                } else {
                    var_39 = 0;
                }
                char var_40 = (var_39 == 0);
                if (var_40) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_41 = var_0[var_14];
                long long int var_42 = var_1[var_14];
                long long int var_43 = var_2[var_34];
                long long int var_44 = var_3[var_34];
                long long int var_45 = var_4[var_34];
                long long int var_46 = var_5[var_34];
                long long int var_47 = var_6[var_34];
                long long int var_48 = var_7[var_34];
                var_4[var_34] = var_41;
                var_5[var_34] = var_42;
                var_6[var_34] = var_43;
                var_7[var_34] = var_44;
                long long int var_49 = (var_25 + 8);
                var_23[0] = var_49;
            }
            long long int var_50 = var_23[0];
            long long int var_51 = (var_14 + 8);
            var_12[0] = var_51;
        }
        long long int var_52 = var_12[0];
    }
    __global__ void method_12(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (8 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_11(var_8)) {
            long long int var_10 = var_8[0];
            char var_11 = (var_10 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_10 < 8);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (8 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_11(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 8);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                char var_27;
                if (var_11) {
                    var_27 = (var_10 < 8);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                char var_30;
                if (var_22) {
                    var_30 = (var_21 < 8);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_21 * 8);
                char var_34;
                if (var_11) {
                    var_34 = (var_10 < 8);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_36 = (var_32 + var_10);
                long long int var_37 = var_0[var_10];
                long long int var_38 = var_1[var_10];
                long long int var_39 = var_2[var_36];
                long long int var_40 = var_3[var_36];
                var_2[var_36] = var_37;
                var_3[var_36] = var_38;
                long long int var_41 = (var_21 + 8);
                var_19[0] = var_41;
            }
            long long int var_42 = var_19[0];
            long long int var_43 = (var_10 + 8);
            var_8[0] = var_43;
        }
        long long int var_44 = var_8[0];
    }
    __device__ char method_11(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 8);
    }
}
"""

type EnvStack0 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env1 =
    struct
    val mem_0: EnvStack0
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: EnvStack0
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        var_0.[int32 var_2] <- 2L
        var_1.[int32 var_2] <- 2L
        let (var_6: int64) = (var_2 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_6: int64))
    else
        ()
and method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 8L)
        let (var_7: int64) = 0L
        method_4((var_2: int64), (var_0: (int64 [])), (var_6: int64), (var_1: (int64 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_8: int64))
    else
        ()
and method_5((var_0: uint64), (var_1: uint64), (var_2: System.Collections.Generic.Stack<Env1>), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64)): EnvStack2 =
    let (var_7: int64) = (var_3 * var_6)
    let (var_8: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_4,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_9: int64) = var_8.AddrOfPinnedObject().ToInt64()
    let (var_10: uint64) = (uint64 var_9)
    let (var_11: int64) = (var_5 * 8L)
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (var_12 + var_10)
    let (var_14: int64) = (var_7 * 8L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_15 % 256UL)
    let (var_17: uint64) = (var_15 - var_16)
    let (var_18: uint64) = (var_17 + 256UL)
    let (var_19: EnvStack0) = method_6((var_0: uint64), (var_2: System.Collections.Generic.Stack<Env1>), (var_1: uint64), (var_18: uint64))
    let (var_20: EnvStack2) = EnvStack2((var_19: EnvStack0))
    let (var_21: EnvStack0) = var_20.mem_0
    let (var_22: (uint64 ref)) = var_21.mem_0
    let (var_23: uint64) = method_1((var_22: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_27: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_26)
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_29: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_25, var_27, var_28)
    if var_29 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_29)
    var_8.Free()
    var_20
and method_9((var_0: uint64), (var_1: uint64), (var_2: System.Collections.Generic.Stack<Env1>), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64)): EnvStack2 =
    let (var_8: int64) = (var_3 * var_6)
    let (var_9: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_4,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_10: int64) = var_9.AddrOfPinnedObject().ToInt64()
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: int64) = (var_5 * 8L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_13 + var_11)
    let (var_15: int64) = (var_8 * 8L)
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: uint64) = (var_16 % 256UL)
    let (var_18: uint64) = (var_16 - var_17)
    let (var_19: uint64) = (var_18 + 256UL)
    let (var_20: EnvStack0) = method_6((var_0: uint64), (var_2: System.Collections.Generic.Stack<Env1>), (var_1: uint64), (var_19: uint64))
    let (var_21: EnvStack2) = EnvStack2((var_20: EnvStack0))
    let (var_22: EnvStack0) = var_21.mem_0
    let (var_23: (uint64 ref)) = var_22.mem_0
    let (var_24: uint64) = method_1((var_23: (uint64 ref)))
    let (var_25: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_24)
    let (var_26: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_25)
    let (var_27: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_28: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_27)
    let (var_29: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_15)
    let (var_30: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_26, var_28, var_29)
    if var_30 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_30)
    var_9.Free()
    var_21
and method_6((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env1>), (var_2: uint64), (var_3: uint64)): EnvStack0 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env1) = var_1.Peek()
        let (var_7: EnvStack0) = var_6.mem_0
        let (var_8: uint64) = var_6.mem_1
        let (var_9: (uint64 ref)) = var_7.mem_0
        let (var_10: uint64) = (!var_9)
        let (var_11: bool) = (var_10 = 0UL)
        if var_11 then
            let (var_12: Env1) = var_1.Pop()
            let (var_13: EnvStack0) = var_12.mem_0
            let (var_14: uint64) = var_12.mem_1
            method_6((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env1>), (var_2: uint64), (var_3: uint64))
        else
            method_7((var_10: uint64), (var_0: uint64), (var_2: uint64), (var_3: uint64), (var_1: System.Collections.Generic.Stack<Env1>), (var_8: uint64))
    else
        method_8((var_0: uint64), (var_2: uint64), (var_3: uint64), (var_1: System.Collections.Generic.Stack<Env1>))
and method_13((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: EnvStack2), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64)): unit =
    let (var_13: int64) = (var_12 - var_11)
    let (var_14: bool) = (var_13 > 0L)
    let (var_15: bool) = (var_14 = false)
    if var_15 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_16: (int64 [])) = method_14((var_13: int64), (var_5: EnvStack2), (var_6: int64), (var_7: int64))
    let (var_17: (int64 [])) = method_14((var_13: int64), (var_8: EnvStack2), (var_9: int64), (var_10: int64))
    let (var_18: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_19: string) = ""
    let (var_20: int64) = 0L
    let (var_21: int64) = 0L
    method_15((var_18: System.Text.StringBuilder), (var_21: int64))
    let (var_22: System.Text.StringBuilder) = var_18.Append("[|")
    let (var_23: int64) = method_16((var_18: System.Text.StringBuilder), (var_16: (int64 [])), (var_6: int64), (var_7: int64), (var_17: (int64 [])), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_19: string), (var_20: int64))
    let (var_24: System.Text.StringBuilder) = var_18.AppendLine("|]")
    let (var_25: string) = var_18.ToString()
    let (var_26: string) = System.String.Format("{0}",var_25)
    System.Console.WriteLine(var_26)
and method_18((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: EnvStack2), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64)): unit =
    let (var_17: int64) = (var_14 - var_13)
    let (var_18: int64) = (var_16 - var_15)
    let (var_19: int64) = (var_17 * var_18)
    let (var_20: bool) = (var_19 > 0L)
    let (var_21: bool) = (var_20 = false)
    if var_21 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_22: int64) = (var_18 * var_8)
    let (var_23: bool) = (var_7 = var_22)
    let (var_24: bool) = (var_23 = false)
    if var_24 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_25: int64) = (var_17 * var_7)
    let (var_26: int64) = (var_18 * var_12)
    let (var_27: bool) = (var_11 = var_26)
    let (var_28: bool) = (var_27 = false)
    if var_28 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_29: int64) = (var_17 * var_11)
    let (var_30: (int64 [])) = method_19((var_17: int64), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64))
    let (var_31: (int64 [])) = method_19((var_17: int64), (var_9: EnvStack2), (var_10: int64), (var_11: int64), (var_12: int64))
    let (var_32: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_33: string) = ""
    let (var_34: int64) = 0L
    let (var_35: int64) = 0L
    method_15((var_32: System.Text.StringBuilder), (var_35: int64))
    let (var_36: System.Text.StringBuilder) = var_32.AppendLine("[|")
    let (var_37: int64) = method_20((var_32: System.Text.StringBuilder), (var_33: string), (var_30: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_31: (int64 [])), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_34: int64))
    let (var_38: int64) = 0L
    method_15((var_32: System.Text.StringBuilder), (var_38: int64))
    let (var_39: System.Text.StringBuilder) = var_32.AppendLine("|]")
    let (var_40: string) = var_32.ToString()
    let (var_41: string) = System.String.Format("{0}",var_40)
    System.Console.WriteLine(var_41)
and method_23((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: EnvStack2), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: EnvStack2), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: EnvStack2), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64)): unit =
    let (var_25: int64) = (var_22 - var_21)
    let (var_26: int64) = (var_24 - var_23)
    let (var_27: int64) = (var_25 * var_26)
    let (var_28: bool) = (var_27 > 0L)
    let (var_29: bool) = (var_28 = false)
    if var_29 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_30: int64) = (var_26 * var_8)
    let (var_31: bool) = (var_7 = var_30)
    let (var_32: bool) = (var_31 = false)
    if var_32 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_33: int64) = (var_25 * var_7)
    let (var_34: int64) = (var_26 * var_12)
    let (var_35: bool) = (var_11 = var_34)
    let (var_36: bool) = (var_35 = false)
    if var_36 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_37: int64) = (var_25 * var_11)
    let (var_38: int64) = (var_26 * var_16)
    let (var_39: bool) = (var_15 = var_38)
    let (var_40: bool) = (var_39 = false)
    if var_40 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_41: int64) = (var_25 * var_15)
    let (var_42: int64) = (var_26 * var_20)
    let (var_43: bool) = (var_19 = var_42)
    let (var_44: bool) = (var_43 = false)
    if var_44 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_45: int64) = (var_25 * var_19)
    let (var_46: (int64 [])) = method_19((var_25: int64), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64))
    let (var_47: (int64 [])) = method_19((var_25: int64), (var_9: EnvStack2), (var_10: int64), (var_11: int64), (var_12: int64))
    let (var_48: (int64 [])) = method_19((var_25: int64), (var_13: EnvStack2), (var_14: int64), (var_15: int64), (var_16: int64))
    let (var_49: (int64 [])) = method_19((var_25: int64), (var_17: EnvStack2), (var_18: int64), (var_19: int64), (var_20: int64))
    let (var_50: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_51: string) = ""
    let (var_52: int64) = 0L
    let (var_53: int64) = 0L
    method_15((var_50: System.Text.StringBuilder), (var_53: int64))
    let (var_54: System.Text.StringBuilder) = var_50.AppendLine("[|")
    let (var_55: int64) = method_24((var_50: System.Text.StringBuilder), (var_51: string), (var_46: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_47: (int64 [])), (var_10: int64), (var_11: int64), (var_12: int64), (var_48: (int64 [])), (var_14: int64), (var_15: int64), (var_16: int64), (var_49: (int64 [])), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64), (var_52: int64))
    let (var_56: int64) = 0L
    method_15((var_50: System.Text.StringBuilder), (var_56: int64))
    let (var_57: System.Text.StringBuilder) = var_50.AppendLine("|]")
    let (var_58: string) = var_50.ToString()
    let (var_59: string) = System.String.Format("{0}",var_58)
    System.Console.WriteLine(var_59)
and method_4((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 8L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 0L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_2 + var_4)
        var_1.[int32 var_8] <- var_0
        var_3.[int32 var_8] <- var_4
        let (var_9: int64) = (var_4 + 1L)
        method_4((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_9: int64))
    else
        ()
and method_7((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: uint64)): EnvStack0 =
    let (var_6: uint64) = (var_0 + var_5)
    let (var_7: uint64) = (var_1 + var_2)
    let (var_8: uint64) = (var_7 - var_6)
    let (var_9: bool) = (var_3 <= var_8)
    let (var_10: bool) = (var_9 = false)
    if var_10 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_11: (uint64 ref)) = (ref var_6)
    let (var_12: EnvStack0) = EnvStack0((var_11: (uint64 ref)))
    var_4.Push((Env1(var_12, var_3)))
    var_12
and method_8((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: System.Collections.Generic.Stack<Env1>)): EnvStack0 =
    let (var_4: uint64) = (var_0 + var_1)
    let (var_5: uint64) = (var_4 - var_0)
    let (var_6: bool) = (var_2 <= var_5)
    let (var_7: bool) = (var_6 = false)
    if var_7 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_8: (uint64 ref)) = (ref var_0)
    let (var_9: EnvStack0) = EnvStack0((var_8: (uint64 ref)))
    var_3.Push((Env1(var_9, var_2)))
    var_9
and method_14((var_0: int64), (var_1: EnvStack2), (var_2: int64), (var_3: int64)): (int64 []) =
    let (var_4: EnvStack0) = var_1.mem_0
    let (var_5: int64) = (var_0 * var_3)
    let (var_6: (uint64 ref)) = var_4.mem_0
    let (var_7: uint64) = method_1((var_6: (uint64 ref)))
    let (var_8: int64) = (var_2 * 8L)
    let (var_9: uint64) = (uint64 var_8)
    let (var_10: uint64) = (var_7 + var_9)
    let (var_11: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_5))
    let (var_12: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_11,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_13: int64) = var_12.AddrOfPinnedObject().ToInt64()
    let (var_14: uint64) = (uint64 var_13)
    let (var_15: int64) = (var_5 * 8L)
    let (var_16: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_17: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_16)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_10)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_15)
    let (var_21: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_17, var_19, var_20)
    if var_21 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_21)
    var_12.Free()
    var_11
and method_15((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_15((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_16((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64)): int64 =
    let (var_11: bool) = (var_7 < var_8)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_14: bool) = (var_7 >= var_7)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = var_1.[int32 var_2]
            let (var_17: int64) = var_4.[int32 var_5]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: string) = System.String.Format("{0}",var_16)
            let (var_20: string) = String.concat ", " [|var_19; var_18|]
            let (var_21: string) = System.String.Format("[{0}]",var_20)
            let (var_22: System.Text.StringBuilder) = var_0.Append(var_21)
            let (var_23: string) = "; "
            let (var_24: int64) = (var_10 + 1L)
            let (var_25: int64) = (var_7 + 1L)
            method_17((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_23: string), (var_24: int64), (var_25: int64))
        else
            let (var_27: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_19((var_0: int64), (var_1: EnvStack2), (var_2: int64), (var_3: int64), (var_4: int64)): (int64 []) =
    let (var_5: EnvStack0) = var_1.mem_0
    let (var_6: int64) = (var_0 * var_3)
    let (var_7: (uint64 ref)) = var_5.mem_0
    let (var_8: uint64) = method_1((var_7: (uint64 ref)))
    let (var_9: int64) = (var_2 * 8L)
    let (var_10: uint64) = (uint64 var_9)
    let (var_11: uint64) = (var_8 + var_10)
    let (var_12: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_6))
    let (var_13: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_12,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_14: int64) = var_13.AddrOfPinnedObject().ToInt64()
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: int64) = (var_6 * 8L)
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_15)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_11)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_22: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_18, var_20, var_21)
    if var_22 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_22)
    var_13.Free()
    var_12
and method_20((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64)): int64 =
    let (var_15: bool) = (var_10 < var_11)
    if var_15 then
        let (var_16: bool) = (var_14 < 1000L)
        if var_16 then
            let (var_17: bool) = (var_10 >= var_10)
            let (var_18: bool) = (var_17 = false)
            if var_18 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_19: int64) = 0L
            method_21((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_21: int64) = method_16((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_12: int64), (var_13: int64), (var_1: string), (var_14: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_10 + 1L)
            method_22((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_21: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_15((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_14
    else
        var_14
and method_24((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64)): int64 =
    let (var_23: bool) = (var_18 < var_19)
    if var_23 then
        let (var_24: bool) = (var_22 < 1000L)
        if var_24 then
            let (var_25: bool) = (var_18 >= var_18)
            let (var_26: bool) = (var_25 = false)
            if var_26 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_27: int64) = 0L
            method_21((var_0: System.Text.StringBuilder), (var_27: int64))
            let (var_28: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_29: int64) = method_25((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_17: int64), (var_20: int64), (var_21: int64), (var_1: string), (var_22: int64))
            let (var_30: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_31: int64) = (var_18 + 1L)
            method_27((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_29: int64), (var_31: int64))
        else
            let (var_33: int64) = 0L
            method_15((var_0: System.Text.StringBuilder), (var_33: int64))
            let (var_34: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_22
    else
        var_22
and method_17((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_8)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_15: bool) = (var_11 >= var_7)
            let (var_16: bool) = (var_15 = false)
            if var_16 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_17: int64) = (var_11 - var_7)
            let (var_18: int64) = (var_17 * var_3)
            let (var_19: int64) = (var_2 + var_18)
            let (var_20: int64) = (var_17 * var_6)
            let (var_21: int64) = (var_5 + var_20)
            let (var_22: int64) = var_1.[int32 var_19]
            let (var_23: int64) = var_4.[int32 var_21]
            let (var_24: string) = System.String.Format("{0}",var_23)
            let (var_25: string) = System.String.Format("{0}",var_22)
            let (var_26: string) = String.concat ", " [|var_25; var_24|]
            let (var_27: string) = System.String.Format("[{0}]",var_26)
            let (var_28: System.Text.StringBuilder) = var_0.Append(var_27)
            let (var_29: string) = "; "
            let (var_30: int64) = (var_10 + 1L)
            let (var_31: int64) = (var_11 + 1L)
            method_17((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_29: string), (var_30: int64), (var_31: int64))
        else
            let (var_33: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_21((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_21((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_22((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64)): int64 =
    let (var_16: bool) = (var_15 < var_11)
    if var_16 then
        let (var_17: bool) = (var_14 < 1000L)
        if var_17 then
            let (var_18: bool) = (var_15 >= var_10)
            let (var_19: bool) = (var_18 = false)
            if var_19 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_20: int64) = (var_15 - var_10)
            let (var_21: int64) = (var_20 * var_4)
            let (var_22: int64) = (var_3 + var_21)
            let (var_23: int64) = (var_20 * var_8)
            let (var_24: int64) = (var_7 + var_23)
            let (var_25: int64) = 0L
            method_21((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_27: int64) = method_16((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_22: int64), (var_5: int64), (var_6: (int64 [])), (var_24: int64), (var_9: int64), (var_12: int64), (var_13: int64), (var_1: string), (var_14: int64))
            let (var_28: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_29: int64) = (var_15 + 1L)
            method_22((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_27: int64), (var_29: int64))
        else
            let (var_31: int64) = 0L
            method_15((var_0: System.Text.StringBuilder), (var_31: int64))
            let (var_32: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_14
    else
        var_14
and method_25((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: string), (var_16: int64)): int64 =
    let (var_17: bool) = (var_13 < var_14)
    if var_17 then
        let (var_18: bool) = (var_16 < 1000L)
        if var_18 then
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_15)
            let (var_20: bool) = (var_13 >= var_13)
            let (var_21: bool) = (var_20 = false)
            if var_21 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_22: int64) = var_1.[int32 var_2]
            let (var_23: int64) = var_4.[int32 var_5]
            let (var_24: int64) = var_7.[int32 var_8]
            let (var_25: int64) = var_10.[int32 var_11]
            let (var_26: string) = System.String.Format("{0}",var_25)
            let (var_27: string) = System.String.Format("{0}",var_24)
            let (var_28: string) = String.concat ", " [|var_27; var_26|]
            let (var_29: string) = System.String.Format("[{0}]",var_28)
            let (var_30: string) = System.String.Format("{0}",var_23)
            let (var_31: string) = System.String.Format("{0}",var_22)
            let (var_32: string) = String.concat ", " [|var_31; var_30|]
            let (var_33: string) = System.String.Format("[{0}]",var_32)
            let (var_34: string) = String.concat ", " [|var_33; var_29|]
            let (var_35: string) = System.String.Format("[{0}]",var_34)
            let (var_36: System.Text.StringBuilder) = var_0.Append(var_35)
            let (var_37: string) = "; "
            let (var_38: int64) = (var_16 + 1L)
            let (var_39: int64) = (var_13 + 1L)
            method_26((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_37: string), (var_38: int64), (var_39: int64))
        else
            let (var_41: System.Text.StringBuilder) = var_0.Append("...")
            var_16
    else
        var_16
and method_27((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64)): int64 =
    let (var_24: bool) = (var_23 < var_19)
    if var_24 then
        let (var_25: bool) = (var_22 < 1000L)
        if var_25 then
            let (var_26: bool) = (var_23 >= var_18)
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 - var_18)
            let (var_29: int64) = (var_28 * var_4)
            let (var_30: int64) = (var_3 + var_29)
            let (var_31: int64) = (var_28 * var_8)
            let (var_32: int64) = (var_7 + var_31)
            let (var_33: int64) = (var_28 * var_12)
            let (var_34: int64) = (var_11 + var_33)
            let (var_35: int64) = (var_28 * var_16)
            let (var_36: int64) = (var_15 + var_35)
            let (var_37: int64) = 0L
            method_21((var_0: System.Text.StringBuilder), (var_37: int64))
            let (var_38: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_39: int64) = method_25((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_30: int64), (var_5: int64), (var_6: (int64 [])), (var_32: int64), (var_9: int64), (var_10: (int64 [])), (var_34: int64), (var_13: int64), (var_14: (int64 [])), (var_36: int64), (var_17: int64), (var_20: int64), (var_21: int64), (var_1: string), (var_22: int64))
            let (var_40: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_41: int64) = (var_23 + 1L)
            method_27((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_39: int64), (var_41: int64))
        else
            let (var_43: int64) = 0L
            method_15((var_0: System.Text.StringBuilder), (var_43: int64))
            let (var_44: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_22
    else
        var_22
and method_26((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: string), (var_16: int64), (var_17: int64)): int64 =
    let (var_18: bool) = (var_17 < var_14)
    if var_18 then
        let (var_19: bool) = (var_16 < 1000L)
        if var_19 then
            let (var_20: System.Text.StringBuilder) = var_0.Append(var_15)
            let (var_21: bool) = (var_17 >= var_13)
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_17 - var_13)
            let (var_24: int64) = (var_23 * var_3)
            let (var_25: int64) = (var_2 + var_24)
            let (var_26: int64) = (var_23 * var_6)
            let (var_27: int64) = (var_5 + var_26)
            let (var_28: int64) = (var_23 * var_9)
            let (var_29: int64) = (var_8 + var_28)
            let (var_30: int64) = (var_23 * var_12)
            let (var_31: int64) = (var_11 + var_30)
            let (var_32: int64) = var_1.[int32 var_25]
            let (var_33: int64) = var_4.[int32 var_27]
            let (var_34: int64) = var_7.[int32 var_29]
            let (var_35: int64) = var_10.[int32 var_31]
            let (var_36: string) = System.String.Format("{0}",var_35)
            let (var_37: string) = System.String.Format("{0}",var_34)
            let (var_38: string) = String.concat ", " [|var_37; var_36|]
            let (var_39: string) = System.String.Format("[{0}]",var_38)
            let (var_40: string) = System.String.Format("{0}",var_33)
            let (var_41: string) = System.String.Format("{0}",var_32)
            let (var_42: string) = String.concat ", " [|var_41; var_40|]
            let (var_43: string) = System.String.Format("[{0}]",var_42)
            let (var_44: string) = String.concat ", " [|var_43; var_39|]
            let (var_45: string) = System.String.Format("[{0}]",var_44)
            let (var_46: System.Text.StringBuilder) = var_0.Append(var_45)
            let (var_47: string) = "; "
            let (var_48: int64) = (var_16 + 1L)
            let (var_49: int64) = (var_17 + 1L)
            method_26((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_47: string), (var_48: int64), (var_49: int64))
        else
            let (var_51: System.Text.StringBuilder) = var_0.Append("...")
            var_16
    else
        var_16
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.BasicTypes.SizeT) = var_1.GetFreeDeviceMemorySize()
let (var_36: int64) = int64 var_35
let (var_37: float) = float var_36
let (var_38: float) = (0.700000 * var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_39)
let (var_41: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_40)
let (var_42: uint64) = uint64 var_41
let (var_43: (uint64 ref)) = (ref var_42)
let (var_44: EnvStack0) = EnvStack0((var_43: (uint64 ref)))
let (var_45: System.Collections.Generic.Stack<Env1>) = System.Collections.Generic.Stack<Env1>()
let (var_46: (uint64 ref)) = var_44.mem_0
let (var_47: uint64) = method_1((var_46: (uint64 ref)))
let (var_48: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_49: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_50: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_51: int64) = 0L
method_2((var_49: (int64 [])), (var_50: (int64 [])), (var_51: int64))
let (var_52: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_53: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_54: int64) = 0L
method_3((var_52: (int64 [])), (var_53: (int64 [])), (var_54: int64))
let (var_55: int64) = 8L
let (var_56: int64) = 0L
let (var_57: int64) = 1L
let (var_58: EnvStack2) = method_5((var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_55: int64), (var_49: (int64 [])), (var_56: int64), (var_57: int64))
let (var_59: int64) = 0L
let (var_60: int64) = 1L
let (var_61: EnvStack2) = method_5((var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_55: int64), (var_50: (int64 [])), (var_59: int64), (var_60: int64))
let (var_62: int64) = 8L
let (var_63: int64) = 0L
let (var_64: int64) = 8L
let (var_65: int64) = 1L
let (var_66: EnvStack2) = method_9((var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_62: int64), (var_52: (int64 [])), (var_63: int64), (var_64: int64), (var_65: int64))
let (var_67: int64) = 0L
let (var_68: int64) = 8L
let (var_69: int64) = 1L
let (var_70: EnvStack2) = method_9((var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_62: int64), (var_53: (int64 [])), (var_67: int64), (var_68: int64), (var_69: int64))
let (var_75: uint64) = 768UL
let (var_76: EnvStack0) = method_6((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_75: uint64))
let (var_77: EnvStack2) = EnvStack2((var_76: EnvStack0))
let (var_78: uint64) = 768UL
let (var_79: EnvStack0) = method_6((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_78: uint64))
let (var_80: EnvStack2) = EnvStack2((var_79: EnvStack0))
let (var_81: uint64) = 768UL
let (var_82: EnvStack0) = method_6((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_81: uint64))
let (var_83: EnvStack2) = EnvStack2((var_82: EnvStack0))
let (var_84: uint64) = 768UL
let (var_85: EnvStack0) = method_6((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_84: uint64))
let (var_86: EnvStack2) = EnvStack2((var_85: EnvStack0))
let (var_87: EnvStack0) = var_58.mem_0
let (var_88: (uint64 ref)) = var_87.mem_0
let (var_89: uint64) = method_1((var_88: (uint64 ref)))
let (var_90: EnvStack0) = var_61.mem_0
let (var_91: (uint64 ref)) = var_90.mem_0
let (var_92: uint64) = method_1((var_91: (uint64 ref)))
let (var_93: EnvStack0) = var_66.mem_0
let (var_94: (uint64 ref)) = var_93.mem_0
let (var_95: uint64) = method_1((var_94: (uint64 ref)))
let (var_96: EnvStack0) = var_70.mem_0
let (var_97: (uint64 ref)) = var_96.mem_0
let (var_98: uint64) = method_1((var_97: (uint64 ref)))
let (var_99: EnvStack0) = var_77.mem_0
let (var_100: (uint64 ref)) = var_99.mem_0
let (var_101: uint64) = method_1((var_100: (uint64 ref)))
let (var_102: EnvStack0) = var_80.mem_0
let (var_103: (uint64 ref)) = var_102.mem_0
let (var_104: uint64) = method_1((var_103: (uint64 ref)))
let (var_105: EnvStack0) = var_83.mem_0
let (var_106: (uint64 ref)) = var_105.mem_0
let (var_107: uint64) = method_1((var_106: (uint64 ref)))
let (var_108: EnvStack0) = var_86.mem_0
let (var_109: (uint64 ref)) = var_108.mem_0
let (var_110: uint64) = method_1((var_109: (uint64 ref)))
// Cuda join point
// method_10((var_89: uint64), (var_92: uint64), (var_95: uint64), (var_98: uint64), (var_101: uint64), (var_104: uint64), (var_107: uint64), (var_110: uint64))
let (var_111: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_10", var_32, var_1)
let (var_112: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_111.set_GridDimensions(var_112)
let (var_113: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_111.set_BlockDimensions(var_113)
let (var_114: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_116: (System.Object [])) = [|var_89; var_92; var_95; var_98; var_101; var_104; var_107; var_110|]: (System.Object [])
var_111.RunAsync(var_114, var_116)
let (var_117: uint64) = 768UL
let (var_118: EnvStack0) = method_6((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_117: uint64))
let (var_119: EnvStack2) = EnvStack2((var_118: EnvStack0))
let (var_120: uint64) = 768UL
let (var_121: EnvStack0) = method_6((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_120: uint64))
let (var_122: EnvStack2) = EnvStack2((var_121: EnvStack0))
let (var_123: uint64) = method_1((var_88: (uint64 ref)))
let (var_124: uint64) = method_1((var_91: (uint64 ref)))
let (var_125: EnvStack0) = var_119.mem_0
let (var_126: (uint64 ref)) = var_125.mem_0
let (var_127: uint64) = method_1((var_126: (uint64 ref)))
let (var_128: EnvStack0) = var_122.mem_0
let (var_129: (uint64 ref)) = var_128.mem_0
let (var_130: uint64) = method_1((var_129: (uint64 ref)))
// Cuda join point
// method_12((var_123: uint64), (var_124: uint64), (var_127: uint64), (var_130: uint64))
let (var_131: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_12", var_32, var_1)
let (var_132: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_131.set_GridDimensions(var_132)
let (var_133: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_131.set_BlockDimensions(var_133)
let (var_134: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_136: (System.Object [])) = [|var_123; var_124; var_127; var_130|]: (System.Object [])
var_131.RunAsync(var_134, var_136)
let (var_137: int64) = 0L
let (var_138: int64) = 1L
let (var_139: int64) = 0L
let (var_140: int64) = 1L
let (var_141: int64) = 0L
let (var_142: int64) = 8L
method_13((var_1: ManagedCuda.CudaContext), (var_48: ManagedCuda.CudaStream), (var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_58: EnvStack2), (var_137: int64), (var_138: int64), (var_61: EnvStack2), (var_139: int64), (var_140: int64), (var_141: int64), (var_142: int64))
let (var_143: int64) = 0L
let (var_144: int64) = 8L
let (var_145: int64) = 1L
let (var_146: int64) = 0L
let (var_147: int64) = 8L
let (var_148: int64) = 1L
let (var_149: int64) = 0L
let (var_150: int64) = 8L
let (var_151: int64) = 0L
let (var_152: int64) = 8L
method_18((var_1: ManagedCuda.CudaContext), (var_48: ManagedCuda.CudaStream), (var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_66: EnvStack2), (var_143: int64), (var_144: int64), (var_145: int64), (var_70: EnvStack2), (var_146: int64), (var_147: int64), (var_148: int64), (var_149: int64), (var_150: int64), (var_151: int64), (var_152: int64))
let (var_153: int64) = 0L
let (var_154: int64) = 8L
let (var_155: int64) = 1L
let (var_156: int64) = 0L
let (var_157: int64) = 8L
let (var_158: int64) = 1L
let (var_159: int64) = 0L
let (var_160: int64) = 8L
let (var_161: int64) = 1L
let (var_162: int64) = 0L
let (var_163: int64) = 8L
let (var_164: int64) = 1L
let (var_165: int64) = 0L
let (var_166: int64) = 8L
let (var_167: int64) = 0L
let (var_168: int64) = 8L
method_23((var_1: ManagedCuda.CudaContext), (var_48: ManagedCuda.CudaStream), (var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_77: EnvStack2), (var_153: int64), (var_154: int64), (var_155: int64), (var_80: EnvStack2), (var_156: int64), (var_157: int64), (var_158: int64), (var_83: EnvStack2), (var_159: int64), (var_160: int64), (var_161: int64), (var_86: EnvStack2), (var_162: int64), (var_163: int64), (var_164: int64), (var_165: int64), (var_166: int64), (var_167: int64), (var_168: int64))
let (var_169: int64) = 0L
let (var_170: int64) = 8L
let (var_171: int64) = 1L
let (var_172: int64) = 0L
let (var_173: int64) = 8L
let (var_174: int64) = 1L
let (var_175: int64) = 0L
let (var_176: int64) = 8L
let (var_177: int64) = 0L
let (var_178: int64) = 8L
method_18((var_1: ManagedCuda.CudaContext), (var_48: ManagedCuda.CudaStream), (var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_119: EnvStack2), (var_169: int64), (var_170: int64), (var_171: int64), (var_122: EnvStack2), (var_172: int64), (var_173: int64), (var_174: int64), (var_175: int64), (var_176: int64), (var_177: int64), (var_178: int64))
var_126 := 0UL
var_129 := 0UL
var_100 := 0UL
var_103 := 0UL
var_106 := 0UL
var_109 := 0UL
var_94 := 0UL
var_97 := 0UL
var_88 := 0UL
var_91 := 0UL
var_48.Dispose()
let (var_179: uint64) = method_1((var_46: (uint64 ref)))
let (var_180: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_179)
let (var_181: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_180)
var_1.FreeMemory(var_181)
var_46 := 0UL
var_1.Dispose()

