module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_19(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7);
    __global__ void method_22(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3);
    __device__ char method_20(long long int * var_0);
    
    __global__ void method_19(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7) {
        long long int var_8 = threadIdx.x;
        long long int var_9 = blockIdx.x;
        long long int var_10 = (8 * var_9);
        long long int var_11 = (var_8 + var_10);
        long long int var_12[1];
        var_12[0] = var_11;
        while (method_20(var_12)) {
            long long int var_14 = var_12[0];
            char var_15 = (var_14 >= 0);
            char var_17;
            if (var_15) {
                var_17 = (var_14 < 8);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_19 = threadIdx.y;
            long long int var_20 = blockIdx.y;
            long long int var_21 = (8 * var_20);
            long long int var_22 = (var_19 + var_21);
            long long int var_23[1];
            var_23[0] = var_22;
            while (method_20(var_23)) {
                long long int var_25 = var_23[0];
                char var_26 = (var_25 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_25 < 8);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_25 * 8);
                char var_32;
                if (var_15) {
                    var_32 = (var_14 < 8);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_14);
                char var_36;
                if (var_26) {
                    var_36 = (var_25 < 8);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                char var_39;
                if (var_15) {
                    var_39 = (var_14 < 8);
                } else {
                    var_39 = 0;
                }
                char var_40 = (var_39 == 0);
                if (var_40) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_41 = var_0[var_14];
                long long int var_42 = var_1[var_14];
                long long int var_43 = var_2[var_34];
                long long int var_44 = var_3[var_34];
                long long int var_45 = var_4[var_34];
                long long int var_46 = var_5[var_34];
                long long int var_47 = var_6[var_34];
                long long int var_48 = var_7[var_34];
                var_4[var_34] = var_41;
                var_5[var_34] = var_42;
                var_6[var_34] = var_43;
                var_7[var_34] = var_44;
                long long int var_49 = (var_25 + 8);
                var_23[0] = var_49;
            }
            long long int var_50 = var_23[0];
            long long int var_51 = (var_14 + 8);
            var_12[0] = var_51;
        }
        long long int var_52 = var_12[0];
    }
    __global__ void method_22(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (8 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_20(var_8)) {
            long long int var_10 = var_8[0];
            char var_11 = (var_10 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_10 < 8);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (8 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_20(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 8);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                char var_27;
                if (var_11) {
                    var_27 = (var_10 < 8);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                char var_30;
                if (var_22) {
                    var_30 = (var_21 < 8);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_21 * 8);
                char var_34;
                if (var_11) {
                    var_34 = (var_10 < 8);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_36 = (var_32 + var_10);
                long long int var_37 = var_0[var_10];
                long long int var_38 = var_1[var_10];
                long long int var_39 = var_2[var_36];
                long long int var_40 = var_3[var_36];
                var_2[var_36] = var_37;
                var_3[var_36] = var_38;
                long long int var_41 = (var_21 + 8);
                var_19[0] = var_41;
            }
            long long int var_42 = var_19[0];
            long long int var_43 = (var_10 + 8);
            var_8[0] = var_43;
        }
        long long int var_44 = var_8[0];
    }
    __device__ char method_20(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 8);
    }
}
"""

type EnvStack0 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env1 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env2 =
    struct
    val mem_0: EnvStack0
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap3 =
    {
    mem_0: (int64 ref)
    mem_1: EnvStack0
    }
and EnvHeap4 =
    {
    mem_0: (int64 ref)
    mem_1: EnvHeap5
    }
and EnvHeap5 =
    {
    mem_0: (bool ref)
    mem_1: ManagedCuda.CudaStream
    }
and EnvStack6 =
    struct
    val mem_0: EnvHeap3
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap7 =
    {
    mem_0: EnvStack0
    mem_1: uint64
    mem_2: ResizeArray<Env1>
    mem_3: ResizeArray<Env2>
    }
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: ResizeArray<Env1>), (var_1: EnvStack0), (var_2: uint64), (var_3: ResizeArray<Env2>)): unit =
    let (var_5: (Env2 -> bool)) = method_2
    let (var_6: int32) = var_3.RemoveAll <| System.Predicate(var_5)
    let (var_8: (Env2 -> (Env2 -> int32))) = method_3
    let (var_9: System.Comparison<Env2>) = System.Comparison<Env2>(var_8)
    var_3.Sort(var_9)
    var_0.Clear()
    let (var_10: int32) = var_3.get_Count()
    let (var_11: (uint64 ref)) = var_1.mem_0
    let (var_12: uint64) = method_5((var_11: (uint64 ref)))
    let (var_13: int32) = 0
    let (var_14: uint64) = method_6((var_0: ResizeArray<Env1>), (var_3: ResizeArray<Env2>), (var_10: int32), (var_12: uint64), (var_13: int32))
    let (var_15: uint64) = method_5((var_11: (uint64 ref)))
    let (var_16: uint64) = (var_15 + var_2)
    let (var_17: uint64) = (var_16 - var_14)
    let (var_18: uint64) = (var_14 + 256UL)
    let (var_19: uint64) = (var_18 - 1UL)
    let (var_20: uint64) = (var_19 &&& 18446744073709551360UL)
    let (var_21: uint64) = (var_20 - var_14)
    let (var_22: bool) = (var_17 > var_21)
    if var_22 then
        let (var_23: uint64) = (var_17 - var_21)
        var_0.Add((Env1(var_20, var_23)))
    else
        ()
and method_7((var_0: EnvHeap5), (var_1: ManagedCuda.CudaBlas.CudaBlas), (var_2: ManagedCuda.CudaRand.CudaRandDevice), (var_3: EnvStack0), (var_4: uint64), (var_5: ResizeArray<Env1>), (var_6: ResizeArray<Env2>), (var_7: ManagedCuda.CudaContext), (var_8: ResizeArray<EnvHeap3>), (var_9: ResizeArray<EnvHeap4>), (var_10: ManagedCuda.BasicTypes.CUmodule)): EnvHeap4 =
    let (var_11: (int64 ref)) = (ref 0L)
    let (var_12: EnvHeap4) = ({mem_0 = (var_11: (int64 ref)); mem_1 = (var_0: EnvHeap5)} : EnvHeap4)
    method_8((var_12: EnvHeap4), (var_9: ResizeArray<EnvHeap4>))
    var_12
and method_9((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        var_0.[int32 var_2] <- 2L
        var_1.[int32 var_2] <- 2L
        let (var_6: int64) = (var_2 + 1L)
        method_9((var_0: (int64 [])), (var_1: (int64 [])), (var_6: int64))
    else
        ()
and method_10((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 8L)
        let (var_7: int64) = 0L
        method_11((var_2: int64), (var_0: (int64 [])), (var_6: int64), (var_1: (int64 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_10((var_0: (int64 [])), (var_1: (int64 [])), (var_8: int64))
    else
        ()
and method_12((var_0: ManagedCuda.CudaBlas.CudaBlas), (var_1: ManagedCuda.CudaRand.CudaRandDevice), (var_2: EnvStack0), (var_3: uint64), (var_4: ResizeArray<Env1>), (var_5: ResizeArray<Env2>), (var_6: ManagedCuda.CudaContext), (var_7: ResizeArray<EnvHeap3>), (var_8: ResizeArray<EnvHeap4>), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap4), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64)): EnvStack6 =
    let (var_15: int64) = (var_11 * var_14)
    let (var_16: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_12,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_17: int64) = var_16.AddrOfPinnedObject().ToInt64()
    let (var_18: uint64) = (uint64 var_17)
    let (var_19: int64) = (var_13 * 8L)
    let (var_20: uint64) = (uint64 var_19)
    let (var_21: uint64) = (var_20 + var_18)
    let (var_22: int64) = (var_15 * 8L)
    let (var_23: EnvHeap7) = ({mem_0 = (var_2: EnvStack0); mem_1 = (var_3: uint64); mem_2 = (var_4: ResizeArray<Env1>); mem_3 = (var_5: ResizeArray<Env2>)} : EnvHeap7)
    let (var_24: EnvHeap3) = method_13((var_23: EnvHeap7), (var_0: ManagedCuda.CudaBlas.CudaBlas), (var_1: ManagedCuda.CudaRand.CudaRandDevice), (var_2: EnvStack0), (var_3: uint64), (var_4: ResizeArray<Env1>), (var_5: ResizeArray<Env2>), (var_6: ManagedCuda.CudaContext), (var_7: ResizeArray<EnvHeap3>), (var_8: ResizeArray<EnvHeap4>), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap4), (var_22: int64))
    let (var_25: EnvStack6) = EnvStack6((var_24: EnvHeap3))
    let (var_26: EnvHeap3) = var_25.mem_0
    let (var_27: (int64 ref)) = var_26.mem_0
    let (var_28: EnvStack0) = var_26.mem_1
    let (var_29: (uint64 ref)) = var_28.mem_0
    let (var_30: uint64) = method_5((var_29: (uint64 ref)))
    let (var_31: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_30)
    let (var_32: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_31)
    let (var_33: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_34: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_33)
    let (var_35: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_36: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_32, var_34, var_35)
    if var_36 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_36)
    var_16.Free()
    var_25
and method_18((var_0: ManagedCuda.CudaBlas.CudaBlas), (var_1: ManagedCuda.CudaRand.CudaRandDevice), (var_2: EnvStack0), (var_3: uint64), (var_4: ResizeArray<Env1>), (var_5: ResizeArray<Env2>), (var_6: ManagedCuda.CudaContext), (var_7: ResizeArray<EnvHeap3>), (var_8: ResizeArray<EnvHeap4>), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap4), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64)): EnvStack6 =
    let (var_16: int64) = (var_11 * var_14)
    let (var_17: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_12,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_18: int64) = var_17.AddrOfPinnedObject().ToInt64()
    let (var_19: uint64) = (uint64 var_18)
    let (var_20: int64) = (var_13 * 8L)
    let (var_21: uint64) = (uint64 var_20)
    let (var_22: uint64) = (var_21 + var_19)
    let (var_23: int64) = (var_16 * 8L)
    let (var_24: EnvHeap7) = ({mem_0 = (var_2: EnvStack0); mem_1 = (var_3: uint64); mem_2 = (var_4: ResizeArray<Env1>); mem_3 = (var_5: ResizeArray<Env2>)} : EnvHeap7)
    let (var_25: EnvHeap3) = method_13((var_24: EnvHeap7), (var_0: ManagedCuda.CudaBlas.CudaBlas), (var_1: ManagedCuda.CudaRand.CudaRandDevice), (var_2: EnvStack0), (var_3: uint64), (var_4: ResizeArray<Env1>), (var_5: ResizeArray<Env2>), (var_6: ManagedCuda.CudaContext), (var_7: ResizeArray<EnvHeap3>), (var_8: ResizeArray<EnvHeap4>), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap4), (var_23: int64))
    let (var_26: EnvStack6) = EnvStack6((var_25: EnvHeap3))
    let (var_27: EnvHeap3) = var_26.mem_0
    let (var_28: (int64 ref)) = var_27.mem_0
    let (var_29: EnvStack0) = var_27.mem_1
    let (var_30: (uint64 ref)) = var_29.mem_0
    let (var_31: uint64) = method_5((var_30: (uint64 ref)))
    let (var_32: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_31)
    let (var_33: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_32)
    let (var_34: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_35: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_34)
    let (var_36: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_37: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_33, var_35, var_36)
    if var_37 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_37)
    var_17.Free()
    var_26
and method_13((var_0: EnvHeap7), (var_1: ManagedCuda.CudaBlas.CudaBlas), (var_2: ManagedCuda.CudaRand.CudaRandDevice), (var_3: EnvStack0), (var_4: uint64), (var_5: ResizeArray<Env1>), (var_6: ResizeArray<Env2>), (var_7: ManagedCuda.CudaContext), (var_8: ResizeArray<EnvHeap3>), (var_9: ResizeArray<EnvHeap4>), (var_10: ManagedCuda.BasicTypes.CUmodule), (var_11: EnvHeap4), (var_12: int64)): EnvHeap3 =
    let (var_13: EnvStack0) = var_0.mem_0
    let (var_14: uint64) = var_0.mem_1
    let (var_15: ResizeArray<Env1>) = var_0.mem_2
    let (var_16: ResizeArray<Env2>) = var_0.mem_3
    let (var_17: uint64) = (uint64 var_12)
    let (var_18: uint64) = (var_17 + 256UL)
    let (var_19: uint64) = (var_18 - 1UL)
    let (var_20: uint64) = (var_19 &&& 18446744073709551360UL)
    let (var_21: EnvStack0) = method_14((var_15: ResizeArray<Env1>), (var_13: EnvStack0), (var_14: uint64), (var_16: ResizeArray<Env2>), (var_20: uint64))
    let (var_22: (int64 ref)) = (ref 0L)
    let (var_23: EnvHeap3) = ({mem_0 = (var_22: (int64 ref)); mem_1 = (var_21: EnvStack0)} : EnvHeap3)
    method_17((var_23: EnvHeap3), (var_8: ResizeArray<EnvHeap3>))
    var_23
and method_5((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_21((var_0: (bool ref)), (var_1: ManagedCuda.CudaStream)): ManagedCuda.BasicTypes.CUstream =
    let (var_2: bool) = (!var_0)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    var_1.Stream
and method_23((var_0: ManagedCuda.CudaBlas.CudaBlas), (var_1: ManagedCuda.CudaRand.CudaRandDevice), (var_2: EnvStack0), (var_3: uint64), (var_4: ResizeArray<Env1>), (var_5: ResizeArray<Env2>), (var_6: ManagedCuda.CudaContext), (var_7: ResizeArray<EnvHeap3>), (var_8: ResizeArray<EnvHeap4>), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap4), (var_11: EnvStack6), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: EnvStack6), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: EnvStack6), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: EnvStack6), (var_24: int64), (var_25: int64), (var_26: int64), (var_27: int64), (var_28: int64), (var_29: int64), (var_30: int64)): unit =
    let (var_31: int64) = (var_28 - var_27)
    let (var_32: int64) = (var_30 - var_29)
    let (var_33: int64) = (var_31 * var_32)
    let (var_34: bool) = (var_33 > 0L)
    let (var_35: bool) = (var_34 = false)
    if var_35 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_36: int64) = (var_32 * var_14)
    let (var_37: bool) = (var_13 = var_36)
    let (var_38: bool) = (var_37 = false)
    if var_38 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_39: int64) = (var_31 * var_13)
    let (var_40: int64) = (var_32 * var_18)
    let (var_41: bool) = (var_17 = var_40)
    let (var_42: bool) = (var_41 = false)
    if var_42 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_43: int64) = (var_31 * var_17)
    let (var_44: int64) = (var_32 * var_22)
    let (var_45: bool) = (var_21 = var_44)
    let (var_46: bool) = (var_45 = false)
    if var_46 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_47: int64) = (var_31 * var_21)
    let (var_48: int64) = (var_32 * var_26)
    let (var_49: bool) = (var_25 = var_48)
    let (var_50: bool) = (var_49 = false)
    if var_50 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_51: int64) = (var_31 * var_25)
    let (var_52: (int64 [])) = method_24((var_31: int64), (var_11: EnvStack6), (var_12: int64), (var_13: int64), (var_14: int64))
    let (var_53: (int64 [])) = method_24((var_31: int64), (var_15: EnvStack6), (var_16: int64), (var_17: int64), (var_18: int64))
    let (var_54: (int64 [])) = method_24((var_31: int64), (var_19: EnvStack6), (var_20: int64), (var_21: int64), (var_22: int64))
    let (var_55: (int64 [])) = method_24((var_31: int64), (var_23: EnvStack6), (var_24: int64), (var_25: int64), (var_26: int64))
    method_25((var_52: (int64 [])), (var_12: int64), (var_13: int64), (var_14: int64), (var_53: (int64 [])), (var_16: int64), (var_17: int64), (var_18: int64), (var_54: (int64 [])), (var_20: int64), (var_21: int64), (var_22: int64), (var_55: (int64 [])), (var_24: int64), (var_25: int64), (var_26: int64), (var_27: int64), (var_28: int64), (var_29: int64), (var_30: int64))
and method_32((var_0: ManagedCuda.CudaBlas.CudaBlas), (var_1: ManagedCuda.CudaRand.CudaRandDevice), (var_2: EnvStack0), (var_3: uint64), (var_4: ResizeArray<Env1>), (var_5: ResizeArray<Env2>), (var_6: ManagedCuda.CudaContext), (var_7: ResizeArray<EnvHeap3>), (var_8: ResizeArray<EnvHeap4>), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap4), (var_11: EnvStack6), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: EnvStack6), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64)): unit =
    let (var_23: int64) = (var_20 - var_19)
    let (var_24: int64) = (var_22 - var_21)
    let (var_25: int64) = (var_23 * var_24)
    let (var_26: bool) = (var_25 > 0L)
    let (var_27: bool) = (var_26 = false)
    if var_27 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_28: int64) = (var_24 * var_14)
    let (var_29: bool) = (var_13 = var_28)
    let (var_30: bool) = (var_29 = false)
    if var_30 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_31: int64) = (var_23 * var_13)
    let (var_32: int64) = (var_24 * var_18)
    let (var_33: bool) = (var_17 = var_32)
    let (var_34: bool) = (var_33 = false)
    if var_34 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_35: int64) = (var_23 * var_17)
    let (var_36: (int64 [])) = method_24((var_23: int64), (var_11: EnvStack6), (var_12: int64), (var_13: int64), (var_14: int64))
    let (var_37: (int64 [])) = method_24((var_23: int64), (var_15: EnvStack6), (var_16: int64), (var_17: int64), (var_18: int64))
    method_33((var_36: (int64 [])), (var_12: int64), (var_13: int64), (var_14: int64), (var_37: (int64 [])), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64))
and method_38((var_0: ResizeArray<EnvHeap4>)): unit =
    let (var_2: (EnvHeap4 -> unit)) = method_39
    var_0.ForEach <| System.Action<_>(var_2)
    var_0.Clear()
and method_40((var_0: ResizeArray<EnvHeap3>)): unit =
    let (var_2: (EnvHeap3 -> unit)) = method_41
    var_0.ForEach <| System.Action<_>(var_2)
    var_0.Clear()
and method_2 ((var_0: Env2)): bool =
    let (var_1: EnvStack0) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_1.mem_0
    let (var_4: uint64) = (!var_3)
    (var_4 = 0UL)
and method_3 ((var_0: Env2)): (Env2 -> int32) =
    let (var_1: EnvStack0) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_4((var_1: EnvStack0))
and method_6((var_0: ResizeArray<Env1>), (var_1: ResizeArray<Env2>), (var_2: int32), (var_3: uint64), (var_4: int32)): uint64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: Env2) = var_1.[var_4]
        let (var_7: EnvStack0) = var_6.mem_0
        let (var_8: uint64) = var_6.mem_1
        let (var_9: (uint64 ref)) = var_7.mem_0
        let (var_10: uint64) = method_5((var_9: (uint64 ref)))
        let (var_11: bool) = (var_10 >= var_3)
        let (var_12: bool) = (var_11 = false)
        if var_12 then
            (failwith "The next pointer should be higher than the last.")
        else
            ()
        let (var_13: uint64) = method_5((var_9: (uint64 ref)))
        let (var_14: uint64) = (var_13 - var_3)
        let (var_15: uint64) = (var_3 + 256UL)
        let (var_16: uint64) = (var_15 - 1UL)
        let (var_17: uint64) = (var_16 &&& 18446744073709551360UL)
        let (var_18: uint64) = (var_17 - var_3)
        let (var_19: bool) = (var_14 > var_18)
        if var_19 then
            let (var_20: uint64) = (var_14 - var_18)
            var_0.Add((Env1(var_17, var_20)))
        else
            ()
        let (var_21: uint64) = (var_13 + var_8)
        let (var_22: int32) = (var_4 + 1)
        method_6((var_0: ResizeArray<Env1>), (var_1: ResizeArray<Env2>), (var_2: int32), (var_21: uint64), (var_22: int32))
    else
        var_3
and method_8((var_0: EnvHeap4), (var_1: ResizeArray<EnvHeap4>)): unit =
    let (var_2: (int64 ref)) = var_0.mem_0
    let (var_3: EnvHeap5) = var_0.mem_1
    let (var_4: int64) = (!var_2)
    let (var_5: int64) = (var_4 + 1L)
    var_2 := var_5
    var_1.Add(var_0)
and method_11((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 8L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 0L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_2 + var_4)
        var_1.[int32 var_8] <- var_0
        var_3.[int32 var_8] <- var_4
        let (var_9: int64) = (var_4 + 1L)
        method_11((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_9: int64))
    else
        ()
and method_14((var_0: ResizeArray<Env1>), (var_1: EnvStack0), (var_2: uint64), (var_3: ResizeArray<Env2>), (var_4: uint64)): EnvStack0 =
    let (var_5: int32) = var_0.get_Count()
    let (var_6: bool) = (var_5 > 0)
    let (var_7: bool) = (var_6 = false)
    if var_7 then
        (failwith "Out of memory in the designated section.")
    else
        ()
    let (var_8: Env1) = var_0.[0]
    let (var_9: uint64) = var_8.mem_0
    let (var_10: uint64) = var_8.mem_1
    let (var_11: bool) = (var_4 <= var_10)
    let (var_41: Env2) =
        if var_11 then
            let (var_12: uint64) = (var_9 + var_4)
            let (var_13: uint64) = (var_10 - var_4)
            var_0.[0] <- (Env1(var_12, var_13))
            let (var_14: (uint64 ref)) = (ref var_9)
            let (var_15: EnvStack0) = EnvStack0((var_14: (uint64 ref)))
            (Env2(var_15, var_4))
        else
            let (var_17: (Env1 -> (Env1 -> int32))) = method_15
            let (var_18: System.Comparison<Env1>) = System.Comparison<Env1>(var_17)
            var_0.Sort(var_18)
            let (var_19: Env1) = var_0.[0]
            let (var_20: uint64) = var_19.mem_0
            let (var_21: uint64) = var_19.mem_1
            let (var_22: bool) = (var_4 <= var_21)
            if var_22 then
                let (var_23: uint64) = (var_20 + var_4)
                let (var_24: uint64) = (var_21 - var_4)
                var_0.[0] <- (Env1(var_23, var_24))
                let (var_25: (uint64 ref)) = (ref var_20)
                let (var_26: EnvStack0) = EnvStack0((var_25: (uint64 ref)))
                (Env2(var_26, var_4))
            else
                method_1((var_0: ResizeArray<Env1>), (var_1: EnvStack0), (var_2: uint64), (var_3: ResizeArray<Env2>))
                let (var_28: (Env1 -> (Env1 -> int32))) = method_15
                let (var_29: System.Comparison<Env1>) = System.Comparison<Env1>(var_28)
                var_0.Sort(var_29)
                let (var_30: Env1) = var_0.[0]
                let (var_31: uint64) = var_30.mem_0
                let (var_32: uint64) = var_30.mem_1
                let (var_33: bool) = (var_4 <= var_32)
                if var_33 then
                    let (var_34: uint64) = (var_31 + var_4)
                    let (var_35: uint64) = (var_32 - var_4)
                    var_0.[0] <- (Env1(var_34, var_35))
                    let (var_36: (uint64 ref)) = (ref var_31)
                    let (var_37: EnvStack0) = EnvStack0((var_36: (uint64 ref)))
                    (Env2(var_37, var_4))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_42: EnvStack0) = var_41.mem_0
    let (var_43: uint64) = var_41.mem_1
    var_3.Add((Env2(var_42, var_43)))
    var_42
and method_17((var_0: EnvHeap3), (var_1: ResizeArray<EnvHeap3>)): unit =
    let (var_2: (int64 ref)) = var_0.mem_0
    let (var_3: EnvStack0) = var_0.mem_1
    let (var_4: int64) = (!var_2)
    let (var_5: int64) = (var_4 + 1L)
    var_2 := var_5
    var_1.Add(var_0)
and method_24((var_0: int64), (var_1: EnvStack6), (var_2: int64), (var_3: int64), (var_4: int64)): (int64 []) =
    let (var_5: EnvHeap3) = var_1.mem_0
    let (var_6: int64) = (var_0 * var_3)
    let (var_7: (int64 ref)) = var_5.mem_0
    let (var_8: EnvStack0) = var_5.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    let (var_10: uint64) = method_5((var_9: (uint64 ref)))
    let (var_11: int64) = (var_2 * 8L)
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (var_10 + var_12)
    let (var_14: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_6))
    let (var_15: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_14,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_16: int64) = var_15.AddrOfPinnedObject().ToInt64()
    let (var_17: uint64) = (uint64 var_16)
    let (var_18: int64) = (var_6 * 8L)
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_22: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_21)
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_18)
    let (var_24: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_20, var_22, var_23)
    if var_24 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_24)
    var_15.Free()
    var_14
and method_25((var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: (int64 [])), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64)): unit =
    let (var_20: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_21: string) = ""
    let (var_22: int64) = 0L
    let (var_23: int64) = 0L
    method_26((var_20: System.Text.StringBuilder), (var_23: int64))
    let (var_24: System.Text.StringBuilder) = var_20.AppendLine("[|")
    let (var_25: int64) = method_27((var_20: System.Text.StringBuilder), (var_21: string), (var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: (int64 [])), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_22: int64))
    let (var_26: int64) = 0L
    method_26((var_20: System.Text.StringBuilder), (var_26: int64))
    let (var_27: System.Text.StringBuilder) = var_20.AppendLine("|]")
    let (var_28: string) = var_20.ToString()
    let (var_29: string) = System.String.Format("{0}",var_28)
    System.Console.WriteLine(var_29)
and method_33((var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): unit =
    let (var_12: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_13: string) = ""
    let (var_14: int64) = 0L
    let (var_15: int64) = 0L
    method_26((var_12: System.Text.StringBuilder), (var_15: int64))
    let (var_16: System.Text.StringBuilder) = var_12.AppendLine("[|")
    let (var_17: int64) = method_34((var_12: System.Text.StringBuilder), (var_13: string), (var_0: (int64 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_14: int64))
    let (var_18: int64) = 0L
    method_26((var_12: System.Text.StringBuilder), (var_18: int64))
    let (var_19: System.Text.StringBuilder) = var_12.AppendLine("|]")
    let (var_20: string) = var_12.ToString()
    let (var_21: string) = System.String.Format("{0}",var_20)
    System.Console.WriteLine(var_21)
and method_39 ((var_0: EnvHeap4)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: EnvHeap5) = var_0.mem_1
    let (var_3: int64) = (!var_1)
    let (var_4: int64) = (var_3 - 1L)
    var_1 := var_4
    let (var_5: int64) = (!var_1)
    let (var_6: bool) = (var_5 = 0L)
    if var_6 then
        let (var_7: (bool ref)) = var_2.mem_0
        let (var_8: ManagedCuda.CudaStream) = var_2.mem_1
        var_8.Dispose()
        var_7 := false
    else
        ()
and method_41 ((var_0: EnvHeap3)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: EnvStack0) = var_0.mem_1
    let (var_3: int64) = (!var_1)
    let (var_4: int64) = (var_3 - 1L)
    var_1 := var_4
    let (var_5: int64) = (!var_1)
    let (var_6: bool) = (var_5 = 0L)
    if var_6 then
        let (var_7: (uint64 ref)) = var_2.mem_0
        var_7 := 0UL
    else
        ()
and method_4 ((var_1: EnvStack0)) ((var_0: Env2)): int32 =
    let (var_2: EnvStack0) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: (uint64 ref)) = var_1.mem_0
    let (var_5: uint64) = method_5((var_4: (uint64 ref)))
    let (var_6: (uint64 ref)) = var_2.mem_0
    let (var_7: uint64) = method_5((var_6: (uint64 ref)))
    let (var_8: bool) = (var_5 < var_7)
    if var_8 then
        -1
    else
        let (var_9: bool) = (var_5 = var_7)
        if var_9 then
            0
        else
            1
and method_15 ((var_0: Env1)): (Env1 -> int32) =
    let (var_1: uint64) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_16((var_2: uint64))
and method_26((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_26((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_27((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64)): int64 =
    let (var_23: bool) = (var_18 < var_19)
    if var_23 then
        let (var_24: bool) = (var_22 < 1000L)
        if var_24 then
            let (var_25: bool) = (var_18 >= var_18)
            let (var_26: bool) = (var_25 = false)
            if var_26 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_27: int64) = 0L
            method_28((var_0: System.Text.StringBuilder), (var_27: int64))
            let (var_28: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_29: int64) = method_29((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_17: int64), (var_20: int64), (var_21: int64), (var_1: string), (var_22: int64))
            let (var_30: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_31: int64) = (var_18 + 1L)
            method_31((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_29: int64), (var_31: int64))
        else
            let (var_33: int64) = 0L
            method_26((var_0: System.Text.StringBuilder), (var_33: int64))
            let (var_34: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_22
    else
        var_22
and method_34((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64)): int64 =
    let (var_15: bool) = (var_10 < var_11)
    if var_15 then
        let (var_16: bool) = (var_14 < 1000L)
        if var_16 then
            let (var_17: bool) = (var_10 >= var_10)
            let (var_18: bool) = (var_17 = false)
            if var_18 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_19: int64) = 0L
            method_28((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_21: int64) = method_35((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_12: int64), (var_13: int64), (var_1: string), (var_14: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_10 + 1L)
            method_37((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_21: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_26((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_14
    else
        var_14
and method_16 ((var_1: uint64)) ((var_0: Env1)): int32 =
    let (var_2: uint64) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        -1
    else
        let (var_5: bool) = (var_3 = var_1)
        if var_5 then
            0
        else
            1
and method_28((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_28((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_29((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: string), (var_16: int64)): int64 =
    let (var_17: bool) = (var_13 < var_14)
    if var_17 then
        let (var_18: bool) = (var_16 < 1000L)
        if var_18 then
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_15)
            let (var_20: bool) = (var_13 >= var_13)
            let (var_21: bool) = (var_20 = false)
            if var_21 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_22: int64) = var_1.[int32 var_2]
            let (var_23: int64) = var_4.[int32 var_5]
            let (var_24: int64) = var_7.[int32 var_8]
            let (var_25: int64) = var_10.[int32 var_11]
            let (var_26: string) = System.String.Format("{0}",var_25)
            let (var_27: string) = System.String.Format("{0}",var_24)
            let (var_28: string) = String.concat ", " [|var_27; var_26|]
            let (var_29: string) = System.String.Format("[{0}]",var_28)
            let (var_30: string) = System.String.Format("{0}",var_23)
            let (var_31: string) = System.String.Format("{0}",var_22)
            let (var_32: string) = String.concat ", " [|var_31; var_30|]
            let (var_33: string) = System.String.Format("[{0}]",var_32)
            let (var_34: string) = String.concat ", " [|var_33; var_29|]
            let (var_35: string) = System.String.Format("[{0}]",var_34)
            let (var_36: System.Text.StringBuilder) = var_0.Append(var_35)
            let (var_37: string) = "; "
            let (var_38: int64) = (var_16 + 1L)
            let (var_39: int64) = (var_13 + 1L)
            method_30((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_37: string), (var_38: int64), (var_39: int64))
        else
            let (var_41: System.Text.StringBuilder) = var_0.Append("...")
            var_16
    else
        var_16
and method_31((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64)): int64 =
    let (var_24: bool) = (var_23 < var_19)
    if var_24 then
        let (var_25: bool) = (var_22 < 1000L)
        if var_25 then
            let (var_26: bool) = (var_23 >= var_18)
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 - var_18)
            let (var_29: int64) = (var_28 * var_4)
            let (var_30: int64) = (var_3 + var_29)
            let (var_31: int64) = (var_28 * var_8)
            let (var_32: int64) = (var_7 + var_31)
            let (var_33: int64) = (var_28 * var_12)
            let (var_34: int64) = (var_11 + var_33)
            let (var_35: int64) = (var_28 * var_16)
            let (var_36: int64) = (var_15 + var_35)
            let (var_37: int64) = 0L
            method_28((var_0: System.Text.StringBuilder), (var_37: int64))
            let (var_38: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_39: int64) = method_29((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_30: int64), (var_5: int64), (var_6: (int64 [])), (var_32: int64), (var_9: int64), (var_10: (int64 [])), (var_34: int64), (var_13: int64), (var_14: (int64 [])), (var_36: int64), (var_17: int64), (var_20: int64), (var_21: int64), (var_1: string), (var_22: int64))
            let (var_40: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_41: int64) = (var_23 + 1L)
            method_31((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_39: int64), (var_41: int64))
        else
            let (var_43: int64) = 0L
            method_26((var_0: System.Text.StringBuilder), (var_43: int64))
            let (var_44: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_22
    else
        var_22
and method_35((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64)): int64 =
    let (var_11: bool) = (var_7 < var_8)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_14: bool) = (var_7 >= var_7)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = var_1.[int32 var_2]
            let (var_17: int64) = var_4.[int32 var_5]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: string) = System.String.Format("{0}",var_16)
            let (var_20: string) = String.concat ", " [|var_19; var_18|]
            let (var_21: string) = System.String.Format("[{0}]",var_20)
            let (var_22: System.Text.StringBuilder) = var_0.Append(var_21)
            let (var_23: string) = "; "
            let (var_24: int64) = (var_10 + 1L)
            let (var_25: int64) = (var_7 + 1L)
            method_36((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_23: string), (var_24: int64), (var_25: int64))
        else
            let (var_27: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_37((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64)): int64 =
    let (var_16: bool) = (var_15 < var_11)
    if var_16 then
        let (var_17: bool) = (var_14 < 1000L)
        if var_17 then
            let (var_18: bool) = (var_15 >= var_10)
            let (var_19: bool) = (var_18 = false)
            if var_19 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_20: int64) = (var_15 - var_10)
            let (var_21: int64) = (var_20 * var_4)
            let (var_22: int64) = (var_3 + var_21)
            let (var_23: int64) = (var_20 * var_8)
            let (var_24: int64) = (var_7 + var_23)
            let (var_25: int64) = 0L
            method_28((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_27: int64) = method_35((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_22: int64), (var_5: int64), (var_6: (int64 [])), (var_24: int64), (var_9: int64), (var_12: int64), (var_13: int64), (var_1: string), (var_14: int64))
            let (var_28: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_29: int64) = (var_15 + 1L)
            method_37((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_27: int64), (var_29: int64))
        else
            let (var_31: int64) = 0L
            method_26((var_0: System.Text.StringBuilder), (var_31: int64))
            let (var_32: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_14
    else
        var_14
and method_30((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: string), (var_16: int64), (var_17: int64)): int64 =
    let (var_18: bool) = (var_17 < var_14)
    if var_18 then
        let (var_19: bool) = (var_16 < 1000L)
        if var_19 then
            let (var_20: System.Text.StringBuilder) = var_0.Append(var_15)
            let (var_21: bool) = (var_17 >= var_13)
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_17 - var_13)
            let (var_24: int64) = (var_23 * var_3)
            let (var_25: int64) = (var_2 + var_24)
            let (var_26: int64) = (var_23 * var_6)
            let (var_27: int64) = (var_5 + var_26)
            let (var_28: int64) = (var_23 * var_9)
            let (var_29: int64) = (var_8 + var_28)
            let (var_30: int64) = (var_23 * var_12)
            let (var_31: int64) = (var_11 + var_30)
            let (var_32: int64) = var_1.[int32 var_25]
            let (var_33: int64) = var_4.[int32 var_27]
            let (var_34: int64) = var_7.[int32 var_29]
            let (var_35: int64) = var_10.[int32 var_31]
            let (var_36: string) = System.String.Format("{0}",var_35)
            let (var_37: string) = System.String.Format("{0}",var_34)
            let (var_38: string) = String.concat ", " [|var_37; var_36|]
            let (var_39: string) = System.String.Format("[{0}]",var_38)
            let (var_40: string) = System.String.Format("{0}",var_33)
            let (var_41: string) = System.String.Format("{0}",var_32)
            let (var_42: string) = String.concat ", " [|var_41; var_40|]
            let (var_43: string) = System.String.Format("[{0}]",var_42)
            let (var_44: string) = String.concat ", " [|var_43; var_39|]
            let (var_45: string) = System.String.Format("[{0}]",var_44)
            let (var_46: System.Text.StringBuilder) = var_0.Append(var_45)
            let (var_47: string) = "; "
            let (var_48: int64) = (var_16 + 1L)
            let (var_49: int64) = (var_17 + 1L)
            method_30((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_47: string), (var_48: int64), (var_49: int64))
        else
            let (var_51: System.Text.StringBuilder) = var_0.Append("...")
            var_16
    else
        var_16
and method_36((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_8)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_15: bool) = (var_11 >= var_7)
            let (var_16: bool) = (var_15 = false)
            if var_16 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_17: int64) = (var_11 - var_7)
            let (var_18: int64) = (var_17 * var_3)
            let (var_19: int64) = (var_2 + var_18)
            let (var_20: int64) = (var_17 * var_6)
            let (var_21: int64) = (var_5 + var_20)
            let (var_22: int64) = var_1.[int32 var_19]
            let (var_23: int64) = var_4.[int32 var_21]
            let (var_24: string) = System.String.Format("{0}",var_23)
            let (var_25: string) = System.String.Format("{0}",var_22)
            let (var_26: string) = String.concat ", " [|var_25; var_24|]
            let (var_27: string) = System.String.Format("[{0}]",var_26)
            let (var_28: System.Text.StringBuilder) = var_0.Append(var_27)
            let (var_29: string) = "; "
            let (var_30: int64) = (var_10 + 1L)
            let (var_31: int64) = (var_11 + 1L)
            method_36((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_29: string), (var_30: int64), (var_31: int64))
        else
            let (var_33: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: uint64) = 1048576UL
let (var_36: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_37: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_36)
let (var_38: uint64) = uint64 var_37
let (var_39: (uint64 ref)) = (ref var_38)
let (var_40: EnvStack0) = EnvStack0((var_39: (uint64 ref)))
let (var_41: ResizeArray<Env1>) = ResizeArray<Env1>()
let (var_42: ResizeArray<Env2>) = ResizeArray<Env2>()
method_1((var_41: ResizeArray<Env1>), (var_40: EnvStack0), (var_35: uint64), (var_42: ResizeArray<Env2>))
let (var_43: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_44: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_43)
let (var_45: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_46: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_47: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_45, var_46)
let (var_56: ResizeArray<EnvHeap3>) = ResizeArray<EnvHeap3>()
let (var_68: ResizeArray<EnvHeap4>) = ResizeArray<EnvHeap4>()
let (var_69: (bool ref)) = (ref true)
let (var_70: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_71: EnvHeap5) = ({mem_0 = (var_69: (bool ref)); mem_1 = (var_70: ManagedCuda.CudaStream)} : EnvHeap5)
let (var_72: EnvHeap4) = method_7((var_71: EnvHeap5), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_73: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_74: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_75: int64) = 0L
method_9((var_73: (int64 [])), (var_74: (int64 [])), (var_75: int64))
let (var_76: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_77: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_78: int64) = 0L
method_10((var_76: (int64 [])), (var_77: (int64 [])), (var_78: int64))
let (var_79: int64) = 8L
let (var_80: int64) = 0L
let (var_81: int64) = 1L
let (var_82: EnvStack6) = method_12((var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_79: int64), (var_73: (int64 [])), (var_80: int64), (var_81: int64))
let (var_83: int64) = 0L
let (var_84: int64) = 1L
let (var_85: EnvStack6) = method_12((var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_79: int64), (var_74: (int64 [])), (var_83: int64), (var_84: int64))
let (var_86: int64) = 8L
let (var_87: int64) = 0L
let (var_88: int64) = 8L
let (var_89: int64) = 1L
let (var_90: EnvStack6) = method_18((var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_86: int64), (var_76: (int64 [])), (var_87: int64), (var_88: int64), (var_89: int64))
let (var_91: int64) = 0L
let (var_92: int64) = 8L
let (var_93: int64) = 1L
let (var_94: EnvStack6) = method_18((var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_86: int64), (var_77: (int64 [])), (var_91: int64), (var_92: int64), (var_93: int64))
let (var_99: int64) = 512L
let (var_100: EnvHeap7) = ({mem_0 = (var_40: EnvStack0); mem_1 = (var_35: uint64); mem_2 = (var_41: ResizeArray<Env1>); mem_3 = (var_42: ResizeArray<Env2>)} : EnvHeap7)
let (var_101: EnvHeap3) = method_13((var_100: EnvHeap7), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_99: int64))
let (var_102: EnvStack6) = EnvStack6((var_101: EnvHeap3))
let (var_103: int64) = 512L
let (var_104: EnvHeap3) = method_13((var_100: EnvHeap7), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_103: int64))
let (var_105: EnvStack6) = EnvStack6((var_104: EnvHeap3))
let (var_106: int64) = 512L
let (var_107: EnvHeap3) = method_13((var_100: EnvHeap7), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_106: int64))
let (var_108: EnvStack6) = EnvStack6((var_107: EnvHeap3))
let (var_109: int64) = 512L
let (var_110: EnvHeap3) = method_13((var_100: EnvHeap7), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_109: int64))
let (var_111: EnvStack6) = EnvStack6((var_110: EnvHeap3))
let (var_112: EnvHeap3) = var_82.mem_0
let (var_113: (int64 ref)) = var_112.mem_0
let (var_114: EnvStack0) = var_112.mem_1
let (var_115: (uint64 ref)) = var_114.mem_0
let (var_116: uint64) = method_5((var_115: (uint64 ref)))
let (var_117: EnvHeap3) = var_85.mem_0
let (var_118: (int64 ref)) = var_117.mem_0
let (var_119: EnvStack0) = var_117.mem_1
let (var_120: (uint64 ref)) = var_119.mem_0
let (var_121: uint64) = method_5((var_120: (uint64 ref)))
let (var_122: EnvHeap3) = var_90.mem_0
let (var_123: (int64 ref)) = var_122.mem_0
let (var_124: EnvStack0) = var_122.mem_1
let (var_125: (uint64 ref)) = var_124.mem_0
let (var_126: uint64) = method_5((var_125: (uint64 ref)))
let (var_127: EnvHeap3) = var_94.mem_0
let (var_128: (int64 ref)) = var_127.mem_0
let (var_129: EnvStack0) = var_127.mem_1
let (var_130: (uint64 ref)) = var_129.mem_0
let (var_131: uint64) = method_5((var_130: (uint64 ref)))
let (var_132: EnvHeap3) = var_102.mem_0
let (var_133: (int64 ref)) = var_132.mem_0
let (var_134: EnvStack0) = var_132.mem_1
let (var_135: (uint64 ref)) = var_134.mem_0
let (var_136: uint64) = method_5((var_135: (uint64 ref)))
let (var_137: EnvHeap3) = var_105.mem_0
let (var_138: (int64 ref)) = var_137.mem_0
let (var_139: EnvStack0) = var_137.mem_1
let (var_140: (uint64 ref)) = var_139.mem_0
let (var_141: uint64) = method_5((var_140: (uint64 ref)))
let (var_142: EnvHeap3) = var_108.mem_0
let (var_143: (int64 ref)) = var_142.mem_0
let (var_144: EnvStack0) = var_142.mem_1
let (var_145: (uint64 ref)) = var_144.mem_0
let (var_146: uint64) = method_5((var_145: (uint64 ref)))
let (var_147: EnvHeap3) = var_111.mem_0
let (var_148: (int64 ref)) = var_147.mem_0
let (var_149: EnvStack0) = var_147.mem_1
let (var_150: (uint64 ref)) = var_149.mem_0
let (var_151: uint64) = method_5((var_150: (uint64 ref)))
// Cuda join point
// method_19((var_116: uint64), (var_121: uint64), (var_126: uint64), (var_131: uint64), (var_136: uint64), (var_141: uint64), (var_146: uint64), (var_151: uint64))
let (var_152: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_19", var_32, var_1)
let (var_153: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_152.set_GridDimensions(var_153)
let (var_154: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_152.set_BlockDimensions(var_154)
let (var_155: (int64 ref)) = var_72.mem_0
let (var_156: EnvHeap5) = var_72.mem_1
let (var_157: (bool ref)) = var_156.mem_0
let (var_158: ManagedCuda.CudaStream) = var_156.mem_1
let (var_159: ManagedCuda.BasicTypes.CUstream) = method_21((var_157: (bool ref)), (var_158: ManagedCuda.CudaStream))
let (var_161: (System.Object [])) = [|var_116; var_121; var_126; var_131; var_136; var_141; var_146; var_151|]: (System.Object [])
var_152.RunAsync(var_159, var_161)
let (var_162: int64) = 512L
let (var_163: EnvHeap3) = method_13((var_100: EnvHeap7), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_162: int64))
let (var_164: EnvStack6) = EnvStack6((var_163: EnvHeap3))
let (var_165: int64) = 512L
let (var_166: EnvHeap3) = method_13((var_100: EnvHeap7), (var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_165: int64))
let (var_167: EnvStack6) = EnvStack6((var_166: EnvHeap3))
let (var_168: uint64) = method_5((var_115: (uint64 ref)))
let (var_169: uint64) = method_5((var_120: (uint64 ref)))
let (var_170: EnvHeap3) = var_164.mem_0
let (var_171: (int64 ref)) = var_170.mem_0
let (var_172: EnvStack0) = var_170.mem_1
let (var_173: (uint64 ref)) = var_172.mem_0
let (var_174: uint64) = method_5((var_173: (uint64 ref)))
let (var_175: EnvHeap3) = var_167.mem_0
let (var_176: (int64 ref)) = var_175.mem_0
let (var_177: EnvStack0) = var_175.mem_1
let (var_178: (uint64 ref)) = var_177.mem_0
let (var_179: uint64) = method_5((var_178: (uint64 ref)))
// Cuda join point
// method_22((var_168: uint64), (var_169: uint64), (var_174: uint64), (var_179: uint64))
let (var_180: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_22", var_32, var_1)
let (var_181: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_180.set_GridDimensions(var_181)
let (var_182: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_180.set_BlockDimensions(var_182)
let (var_183: ManagedCuda.BasicTypes.CUstream) = method_21((var_157: (bool ref)), (var_158: ManagedCuda.CudaStream))
let (var_185: (System.Object [])) = [|var_168; var_169; var_174; var_179|]: (System.Object [])
var_180.RunAsync(var_183, var_185)
let (var_186: int64) = 0L
let (var_187: int64) = 8L
let (var_188: int64) = 1L
let (var_189: int64) = 0L
let (var_190: int64) = 8L
let (var_191: int64) = 1L
let (var_192: int64) = 0L
let (var_193: int64) = 8L
let (var_194: int64) = 1L
let (var_195: int64) = 0L
let (var_196: int64) = 8L
let (var_197: int64) = 1L
let (var_198: int64) = 0L
let (var_199: int64) = 8L
let (var_200: int64) = 0L
let (var_201: int64) = 8L
method_23((var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_102: EnvStack6), (var_186: int64), (var_187: int64), (var_188: int64), (var_105: EnvStack6), (var_189: int64), (var_190: int64), (var_191: int64), (var_108: EnvStack6), (var_192: int64), (var_193: int64), (var_194: int64), (var_111: EnvStack6), (var_195: int64), (var_196: int64), (var_197: int64), (var_198: int64), (var_199: int64), (var_200: int64), (var_201: int64))
let (var_202: int64) = 0L
let (var_203: int64) = 8L
let (var_204: int64) = 1L
let (var_205: int64) = 0L
let (var_206: int64) = 8L
let (var_207: int64) = 1L
let (var_208: int64) = 0L
let (var_209: int64) = 8L
let (var_210: int64) = 0L
let (var_211: int64) = 8L
method_32((var_47: ManagedCuda.CudaBlas.CudaBlas), (var_44: ManagedCuda.CudaRand.CudaRandDevice), (var_40: EnvStack0), (var_35: uint64), (var_41: ResizeArray<Env1>), (var_42: ResizeArray<Env2>), (var_1: ManagedCuda.CudaContext), (var_56: ResizeArray<EnvHeap3>), (var_68: ResizeArray<EnvHeap4>), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_72: EnvHeap4), (var_164: EnvStack6), (var_202: int64), (var_203: int64), (var_204: int64), (var_167: EnvStack6), (var_205: int64), (var_206: int64), (var_207: int64), (var_208: int64), (var_209: int64), (var_210: int64), (var_211: int64))
method_38((var_68: ResizeArray<EnvHeap4>))
method_40((var_56: ResizeArray<EnvHeap3>))
var_47.Dispose()
var_44.Dispose()
let (var_212: (uint64 ref)) = var_40.mem_0
let (var_213: uint64) = method_5((var_212: (uint64 ref)))
let (var_214: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_213)
let (var_215: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_214)
var_1.FreeMemory(var_215)
var_212 := 0UL
var_1.Dispose()

