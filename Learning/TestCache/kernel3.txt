module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_8(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7);
    __global__ void method_10(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3);
    __device__ char method_9(long long int * var_0);
    
    __global__ void method_8(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7) {
        long long int var_8 = threadIdx.x;
        long long int var_9 = blockIdx.x;
        long long int var_10 = (8 * var_9);
        long long int var_11 = (var_8 + var_10);
        long long int var_12[1];
        var_12[0] = var_11;
        while (method_9(var_12)) {
            long long int var_14 = var_12[0];
            char var_15 = (var_14 >= 0);
            char var_17;
            if (var_15) {
                var_17 = (var_14 < 8);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_19 = threadIdx.y;
            long long int var_20 = blockIdx.y;
            long long int var_21 = (8 * var_20);
            long long int var_22 = (var_19 + var_21);
            long long int var_23[1];
            var_23[0] = var_22;
            while (method_9(var_23)) {
                long long int var_25 = var_23[0];
                char var_26 = (var_25 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_25 < 8);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_25 * 8);
                char var_32;
                if (var_15) {
                    var_32 = (var_14 < 8);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_14);
                char var_36;
                if (var_26) {
                    var_36 = (var_25 < 8);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                char var_39;
                if (var_15) {
                    var_39 = (var_14 < 8);
                } else {
                    var_39 = 0;
                }
                char var_40 = (var_39 == 0);
                if (var_40) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_41 = var_0[var_14];
                long long int var_42 = var_1[var_14];
                long long int var_43 = var_2[var_34];
                long long int var_44 = var_3[var_34];
                long long int var_45 = var_4[var_34];
                long long int var_46 = var_5[var_34];
                long long int var_47 = var_6[var_34];
                long long int var_48 = var_7[var_34];
                var_4[var_34] = var_41;
                var_5[var_34] = var_42;
                var_6[var_34] = var_43;
                var_7[var_34] = var_44;
                long long int var_49 = (var_25 + 8);
                var_23[0] = var_49;
            }
            long long int var_50 = var_23[0];
            long long int var_51 = (var_14 + 8);
            var_12[0] = var_51;
        }
        long long int var_52 = var_12[0];
    }
    __global__ void method_10(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (8 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_9(var_8)) {
            long long int var_10 = var_8[0];
            char var_11 = (var_10 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_10 < 8);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (8 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_9(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 8);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                char var_27;
                if (var_11) {
                    var_27 = (var_10 < 8);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                char var_30;
                if (var_22) {
                    var_30 = (var_21 < 8);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_21 * 8);
                char var_34;
                if (var_11) {
                    var_34 = (var_10 < 8);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_36 = (var_32 + var_10);
                long long int var_37 = var_0[var_10];
                long long int var_38 = var_1[var_10];
                long long int var_39 = var_2[var_36];
                long long int var_40 = var_3[var_36];
                var_2[var_36] = var_37;
                var_3[var_36] = var_38;
                long long int var_41 = (var_21 + 8);
                var_19[0] = var_41;
            }
            long long int var_42 = var_19[0];
            long long int var_43 = (var_10 + 8);
            var_8[0] = var_43;
        }
        long long int var_44 = var_8[0];
    }
    __device__ char method_9(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 8);
    }
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: ManagedCuda.BasicTypes.CUdeviceptr
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: (Union0 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: EnvStack2
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (Union0 ref))): ManagedCuda.BasicTypes.CUdeviceptr =
    let (var_1: Union0) = (!var_0)
    match var_1 with
    | Union0Case0(var_2) ->
        var_2.mem_0
    | Union0Case1 ->
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        var_0.[int32 var_2] <- 2L
        var_1.[int32 var_2] <- 2L
        let (var_6: int64) = (var_2 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_6: int64))
    else
        ()
and method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 8L)
        let (var_7: int64) = 0L
        method_4((var_2: int64), (var_0: (int64 [])), (var_6: int64), (var_1: (int64 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_8: int64))
    else
        ()
and method_5((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64)): EnvStack2 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env3) = var_1.Peek()
        let (var_7: EnvStack2) = var_6.mem_0
        let (var_8: int64) = var_6.mem_1
        let (var_9: (Union0 ref)) = var_7.mem_0
        let (var_10: Union0) = (!var_9)
        match var_10 with
        | Union0Case0(var_11) ->
            let (var_12: ManagedCuda.BasicTypes.CUdeviceptr) = var_11.mem_0
            method_6((var_12: ManagedCuda.BasicTypes.CUdeviceptr), (var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>), (var_7: EnvStack2), (var_8: int64))
        | Union0Case1 ->
            let (var_14: Env3) = var_1.Pop()
            let (var_15: EnvStack2) = var_14.mem_0
            let (var_16: int64) = var_14.mem_1
            method_5((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64))
    else
        method_7((var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>))
and method_11((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: EnvStack2), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64)): unit =
    let (var_13: int64) = (var_12 - var_11)
    let (var_14: bool) = (var_13 > 0L)
    let (var_15: bool) = (var_14 = false)
    if var_15 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_16: bool) = (var_6 = 0L)
    let (var_17: bool) = (var_16 = false)
    if var_17 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_18: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_13))
    let (var_19: (Union0 ref)) = var_5.mem_0
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_19: (Union0 ref)))
    var_0.CopyToHost(var_18, var_20)
    let (var_21: bool) = (var_9 = 0L)
    let (var_22: bool) = (var_21 = false)
    if var_22 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_23: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_13))
    let (var_24: (Union0 ref)) = var_8.mem_0
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_24: (Union0 ref)))
    var_0.CopyToHost(var_23, var_25)
    let (var_26: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_27: string) = ""
    let (var_28: int64) = 0L
    let (var_29: int64) = 0L
    method_12((var_26: System.Text.StringBuilder), (var_29: int64))
    let (var_30: System.Text.StringBuilder) = var_26.Append("[|")
    let (var_31: int64) = method_13((var_26: System.Text.StringBuilder), (var_18: (int64 [])), (var_6: int64), (var_7: int64), (var_23: (int64 [])), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_27: string), (var_28: int64))
    let (var_32: System.Text.StringBuilder) = var_26.AppendLine("|]")
    let (var_33: string) = var_26.ToString()
    let (var_34: string) = System.String.Format("{0}",var_33)
    System.Console.WriteLine(var_34)
and method_15((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: EnvStack2), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64)): unit =
    let (var_17: int64) = (var_14 - var_13)
    let (var_18: int64) = (var_16 - var_15)
    let (var_19: int64) = (var_17 * var_18)
    let (var_20: bool) = (var_19 > 0L)
    let (var_21: bool) = (var_20 = false)
    if var_21 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_22: int64) = (var_18 * var_8)
    let (var_23: bool) = (var_7 = var_22)
    let (var_24: bool) = (var_23 = false)
    if var_24 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_25: int64) = (var_17 * var_7)
    let (var_26: int64) = (var_18 * var_12)
    let (var_27: bool) = (var_11 = var_26)
    let (var_28: bool) = (var_27 = false)
    if var_28 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_29: int64) = (var_17 * var_11)
    let (var_30: bool) = (var_6 = 0L)
    let (var_31: bool) = (var_30 = false)
    if var_31 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_32: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_19))
    let (var_33: (Union0 ref)) = var_5.mem_0
    let (var_34: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_33: (Union0 ref)))
    var_0.CopyToHost(var_32, var_34)
    let (var_35: bool) = (var_10 = 0L)
    let (var_36: bool) = (var_35 = false)
    if var_36 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_37: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_19))
    let (var_38: (Union0 ref)) = var_9.mem_0
    let (var_39: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_38: (Union0 ref)))
    var_0.CopyToHost(var_37, var_39)
    let (var_40: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_41: string) = ""
    let (var_42: int64) = 0L
    let (var_43: int64) = 0L
    method_12((var_40: System.Text.StringBuilder), (var_43: int64))
    let (var_44: System.Text.StringBuilder) = var_40.AppendLine("[|")
    let (var_45: int64) = method_16((var_40: System.Text.StringBuilder), (var_41: string), (var_32: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_37: (int64 [])), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_42: int64))
    let (var_46: int64) = 0L
    method_12((var_40: System.Text.StringBuilder), (var_46: int64))
    let (var_47: System.Text.StringBuilder) = var_40.AppendLine("|]")
    let (var_48: string) = var_40.ToString()
    let (var_49: string) = System.String.Format("{0}",var_48)
    System.Console.WriteLine(var_49)
and method_19((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: EnvStack2), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: EnvStack2), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: EnvStack2), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64)): unit =
    let (var_25: int64) = (var_22 - var_21)
    let (var_26: int64) = (var_24 - var_23)
    let (var_27: int64) = (var_25 * var_26)
    let (var_28: bool) = (var_27 > 0L)
    let (var_29: bool) = (var_28 = false)
    if var_29 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_30: int64) = (var_26 * var_8)
    let (var_31: bool) = (var_7 = var_30)
    let (var_32: bool) = (var_31 = false)
    if var_32 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_33: int64) = (var_25 * var_7)
    let (var_34: int64) = (var_26 * var_12)
    let (var_35: bool) = (var_11 = var_34)
    let (var_36: bool) = (var_35 = false)
    if var_36 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_37: int64) = (var_25 * var_11)
    let (var_38: int64) = (var_26 * var_16)
    let (var_39: bool) = (var_15 = var_38)
    let (var_40: bool) = (var_39 = false)
    if var_40 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_41: int64) = (var_25 * var_15)
    let (var_42: int64) = (var_26 * var_20)
    let (var_43: bool) = (var_19 = var_42)
    let (var_44: bool) = (var_43 = false)
    if var_44 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_45: int64) = (var_25 * var_19)
    let (var_46: bool) = (var_6 = 0L)
    let (var_47: bool) = (var_46 = false)
    if var_47 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_48: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_49: (Union0 ref)) = var_5.mem_0
    let (var_50: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_49: (Union0 ref)))
    var_0.CopyToHost(var_48, var_50)
    let (var_51: bool) = (var_10 = 0L)
    let (var_52: bool) = (var_51 = false)
    if var_52 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_53: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_54: (Union0 ref)) = var_9.mem_0
    let (var_55: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_54: (Union0 ref)))
    var_0.CopyToHost(var_53, var_55)
    let (var_56: bool) = (var_14 = 0L)
    let (var_57: bool) = (var_56 = false)
    if var_57 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_58: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_59: (Union0 ref)) = var_13.mem_0
    let (var_60: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_59: (Union0 ref)))
    var_0.CopyToHost(var_58, var_60)
    let (var_61: bool) = (var_18 = 0L)
    let (var_62: bool) = (var_61 = false)
    if var_62 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_63: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_64: (Union0 ref)) = var_17.mem_0
    let (var_65: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_64: (Union0 ref)))
    var_0.CopyToHost(var_63, var_65)
    let (var_66: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_67: string) = ""
    let (var_68: int64) = 0L
    let (var_69: int64) = 0L
    method_12((var_66: System.Text.StringBuilder), (var_69: int64))
    let (var_70: System.Text.StringBuilder) = var_66.AppendLine("[|")
    let (var_71: int64) = method_20((var_66: System.Text.StringBuilder), (var_67: string), (var_48: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_53: (int64 [])), (var_10: int64), (var_11: int64), (var_12: int64), (var_58: (int64 [])), (var_14: int64), (var_15: int64), (var_16: int64), (var_63: (int64 [])), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64), (var_68: int64))
    let (var_72: int64) = 0L
    method_12((var_66: System.Text.StringBuilder), (var_72: int64))
    let (var_73: System.Text.StringBuilder) = var_66.AppendLine("|]")
    let (var_74: string) = var_66.ToString()
    let (var_75: string) = System.String.Format("{0}",var_74)
    System.Console.WriteLine(var_75)
and method_4((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 8L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 0L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_2 + var_4)
        var_1.[int32 var_8] <- var_0
        var_3.[int32 var_8] <- var_4
        let (var_9: int64) = (var_4 + 1L)
        method_4((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_9: int64))
    else
        ()
and method_6((var_0: ManagedCuda.BasicTypes.CUdeviceptr), (var_1: uint64), (var_2: uint64), (var_3: int64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64)): EnvStack2 =
    let (var_7: ManagedCuda.BasicTypes.SizeT) = var_0.Pointer
    let (var_8: uint64) = uint64 var_7
    let (var_9: uint64) = uint64 var_6
    let (var_10: int64) = (var_3 % 256L)
    let (var_11: int64) = (var_3 - var_10)
    let (var_12: int64) = (var_11 + 256L)
    let (var_13: uint64) = (var_8 + var_9)
    let (var_14: uint64) = (var_1 + var_2)
    let (var_15: uint64) = uint64 var_12
    let (var_16: uint64) = (var_14 - var_13)
    let (var_17: bool) = (var_15 <= var_16)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_20))))
    let (var_22: EnvStack2) = EnvStack2((var_21: (Union0 ref)))
    var_4.Push((Env3(var_22, var_12)))
    var_22
and method_7((var_0: uint64), (var_1: uint64), (var_2: int64), (var_3: System.Collections.Generic.Stack<Env3>)): EnvStack2 =
    let (var_4: int64) = (var_2 % 256L)
    let (var_5: int64) = (var_2 - var_4)
    let (var_6: int64) = (var_5 + 256L)
    let (var_7: uint64) = (var_0 + var_1)
    let (var_8: uint64) = uint64 var_6
    let (var_9: uint64) = (var_7 - var_0)
    let (var_10: bool) = (var_8 <= var_9)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_12: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_0)
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_12)
    let (var_14: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_13))))
    let (var_15: EnvStack2) = EnvStack2((var_14: (Union0 ref)))
    var_3.Push((Env3(var_15, var_6)))
    var_15
and method_12((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_12((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_13((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64)): int64 =
    let (var_11: bool) = (var_7 < var_8)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_14: bool) = (var_7 >= var_7)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = var_1.[int32 var_2]
            let (var_17: int64) = var_4.[int32 var_5]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: string) = System.String.Format("{0}",var_16)
            let (var_20: string) = String.concat ", " [|var_19; var_18|]
            let (var_21: string) = System.String.Format("[{0}]",var_20)
            let (var_22: System.Text.StringBuilder) = var_0.Append(var_21)
            let (var_23: string) = "; "
            let (var_24: int64) = (var_10 + 1L)
            let (var_25: int64) = (var_7 + 1L)
            method_14((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_23: string), (var_24: int64), (var_25: int64))
        else
            let (var_27: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_16((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64)): int64 =
    let (var_15: bool) = (var_10 < var_11)
    if var_15 then
        let (var_16: bool) = (var_14 < 1000L)
        if var_16 then
            let (var_17: bool) = (var_10 >= var_10)
            let (var_18: bool) = (var_17 = false)
            if var_18 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_19: int64) = 0L
            method_17((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_21: int64) = method_13((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_12: int64), (var_13: int64), (var_1: string), (var_14: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_10 + 1L)
            method_18((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_21: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_12((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_14
    else
        var_14
and method_20((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64)): int64 =
    let (var_23: bool) = (var_18 < var_19)
    if var_23 then
        let (var_24: bool) = (var_22 < 1000L)
        if var_24 then
            let (var_25: bool) = (var_18 >= var_18)
            let (var_26: bool) = (var_25 = false)
            if var_26 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_27: int64) = 0L
            method_17((var_0: System.Text.StringBuilder), (var_27: int64))
            let (var_28: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_29: int64) = method_21((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_3: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_17: int64), (var_20: int64), (var_21: int64), (var_1: string), (var_22: int64))
            let (var_30: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_31: int64) = (var_18 + 1L)
            method_23((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_29: int64), (var_31: int64))
        else
            let (var_33: int64) = 0L
            method_12((var_0: System.Text.StringBuilder), (var_33: int64))
            let (var_34: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_22
    else
        var_22
and method_14((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_8)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_15: bool) = (var_11 >= var_7)
            let (var_16: bool) = (var_15 = false)
            if var_16 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_17: int64) = (var_11 - var_7)
            let (var_18: int64) = (var_17 * var_3)
            let (var_19: int64) = (var_2 + var_18)
            let (var_20: int64) = (var_17 * var_6)
            let (var_21: int64) = (var_5 + var_20)
            let (var_22: int64) = var_1.[int32 var_19]
            let (var_23: int64) = var_4.[int32 var_21]
            let (var_24: string) = System.String.Format("{0}",var_23)
            let (var_25: string) = System.String.Format("{0}",var_22)
            let (var_26: string) = String.concat ", " [|var_25; var_24|]
            let (var_27: string) = System.String.Format("[{0}]",var_26)
            let (var_28: System.Text.StringBuilder) = var_0.Append(var_27)
            let (var_29: string) = "; "
            let (var_30: int64) = (var_10 + 1L)
            let (var_31: int64) = (var_11 + 1L)
            method_14((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_29: string), (var_30: int64), (var_31: int64))
        else
            let (var_33: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_17((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_17((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_18((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64)): int64 =
    let (var_16: bool) = (var_15 < var_11)
    if var_16 then
        let (var_17: bool) = (var_14 < 1000L)
        if var_17 then
            let (var_18: bool) = (var_15 >= var_10)
            let (var_19: bool) = (var_18 = false)
            if var_19 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_20: int64) = (var_15 - var_10)
            let (var_21: int64) = (var_20 * var_4)
            let (var_22: int64) = (var_3 + var_21)
            let (var_23: int64) = (var_20 * var_8)
            let (var_24: int64) = (var_7 + var_23)
            let (var_25: int64) = 0L
            method_17((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_27: int64) = method_13((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_22: int64), (var_5: int64), (var_6: (int64 [])), (var_24: int64), (var_9: int64), (var_12: int64), (var_13: int64), (var_1: string), (var_14: int64))
            let (var_28: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_29: int64) = (var_15 + 1L)
            method_18((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_27: int64), (var_29: int64))
        else
            let (var_31: int64) = 0L
            method_12((var_0: System.Text.StringBuilder), (var_31: int64))
            let (var_32: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_14
    else
        var_14
and method_21((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: string), (var_16: int64)): int64 =
    let (var_17: bool) = (var_13 < var_14)
    if var_17 then
        let (var_18: bool) = (var_16 < 1000L)
        if var_18 then
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_15)
            let (var_20: bool) = (var_13 >= var_13)
            let (var_21: bool) = (var_20 = false)
            if var_21 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_22: int64) = var_1.[int32 var_2]
            let (var_23: int64) = var_4.[int32 var_5]
            let (var_24: int64) = var_7.[int32 var_8]
            let (var_25: int64) = var_10.[int32 var_11]
            let (var_26: string) = System.String.Format("{0}",var_25)
            let (var_27: string) = System.String.Format("{0}",var_24)
            let (var_28: string) = String.concat ", " [|var_27; var_26|]
            let (var_29: string) = System.String.Format("[{0}]",var_28)
            let (var_30: string) = System.String.Format("{0}",var_23)
            let (var_31: string) = System.String.Format("{0}",var_22)
            let (var_32: string) = String.concat ", " [|var_31; var_30|]
            let (var_33: string) = System.String.Format("[{0}]",var_32)
            let (var_34: string) = String.concat ", " [|var_33; var_29|]
            let (var_35: string) = System.String.Format("[{0}]",var_34)
            let (var_36: System.Text.StringBuilder) = var_0.Append(var_35)
            let (var_37: string) = "; "
            let (var_38: int64) = (var_16 + 1L)
            let (var_39: int64) = (var_13 + 1L)
            method_22((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_37: string), (var_38: int64), (var_39: int64))
        else
            let (var_41: System.Text.StringBuilder) = var_0.Append("...")
            var_16
    else
        var_16
and method_23((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64)): int64 =
    let (var_24: bool) = (var_23 < var_19)
    if var_24 then
        let (var_25: bool) = (var_22 < 1000L)
        if var_25 then
            let (var_26: bool) = (var_23 >= var_18)
            let (var_27: bool) = (var_26 = false)
            if var_27 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_28: int64) = (var_23 - var_18)
            let (var_29: int64) = (var_28 * var_4)
            let (var_30: int64) = (var_3 + var_29)
            let (var_31: int64) = (var_28 * var_8)
            let (var_32: int64) = (var_7 + var_31)
            let (var_33: int64) = (var_28 * var_12)
            let (var_34: int64) = (var_11 + var_33)
            let (var_35: int64) = (var_28 * var_16)
            let (var_36: int64) = (var_15 + var_35)
            let (var_37: int64) = 0L
            method_17((var_0: System.Text.StringBuilder), (var_37: int64))
            let (var_38: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_39: int64) = method_21((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_30: int64), (var_5: int64), (var_6: (int64 [])), (var_32: int64), (var_9: int64), (var_10: (int64 [])), (var_34: int64), (var_13: int64), (var_14: (int64 [])), (var_36: int64), (var_17: int64), (var_20: int64), (var_21: int64), (var_1: string), (var_22: int64))
            let (var_40: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_41: int64) = (var_23 + 1L)
            method_23((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: (int64 [])), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: (int64 [])), (var_15: int64), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_39: int64), (var_41: int64))
        else
            let (var_43: int64) = 0L
            method_12((var_0: System.Text.StringBuilder), (var_43: int64))
            let (var_44: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_22
    else
        var_22
and method_22((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: string), (var_16: int64), (var_17: int64)): int64 =
    let (var_18: bool) = (var_17 < var_14)
    if var_18 then
        let (var_19: bool) = (var_16 < 1000L)
        if var_19 then
            let (var_20: System.Text.StringBuilder) = var_0.Append(var_15)
            let (var_21: bool) = (var_17 >= var_13)
            let (var_22: bool) = (var_21 = false)
            if var_22 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_23: int64) = (var_17 - var_13)
            let (var_24: int64) = (var_23 * var_3)
            let (var_25: int64) = (var_2 + var_24)
            let (var_26: int64) = (var_23 * var_6)
            let (var_27: int64) = (var_5 + var_26)
            let (var_28: int64) = (var_23 * var_9)
            let (var_29: int64) = (var_8 + var_28)
            let (var_30: int64) = (var_23 * var_12)
            let (var_31: int64) = (var_11 + var_30)
            let (var_32: int64) = var_1.[int32 var_25]
            let (var_33: int64) = var_4.[int32 var_27]
            let (var_34: int64) = var_7.[int32 var_29]
            let (var_35: int64) = var_10.[int32 var_31]
            let (var_36: string) = System.String.Format("{0}",var_35)
            let (var_37: string) = System.String.Format("{0}",var_34)
            let (var_38: string) = String.concat ", " [|var_37; var_36|]
            let (var_39: string) = System.String.Format("[{0}]",var_38)
            let (var_40: string) = System.String.Format("{0}",var_33)
            let (var_41: string) = System.String.Format("{0}",var_32)
            let (var_42: string) = String.concat ", " [|var_41; var_40|]
            let (var_43: string) = System.String.Format("[{0}]",var_42)
            let (var_44: string) = String.concat ", " [|var_43; var_39|]
            let (var_45: string) = System.String.Format("[{0}]",var_44)
            let (var_46: System.Text.StringBuilder) = var_0.Append(var_45)
            let (var_47: string) = "; "
            let (var_48: int64) = (var_16 + 1L)
            let (var_49: int64) = (var_17 + 1L)
            method_22((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_47: string), (var_48: int64), (var_49: int64))
        else
            let (var_51: System.Text.StringBuilder) = var_0.Append("...")
            var_16
    else
        var_16
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.CudaDeviceProperties) = var_1.GetDeviceInfo()
let (var_36: ManagedCuda.BasicTypes.SizeT) = var_35.get_TotalGlobalMemory()
let (var_37: int64) = int64 var_36
let (var_38: float) = float var_37
let (var_39: float) = (0.700000 * var_38)
let (var_40: int64) = int64 var_39
let (var_41: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_40)
let (var_42: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_41)
let (var_43: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_42))))
let (var_44: EnvStack2) = EnvStack2((var_43: (Union0 ref)))
let (var_45: System.Collections.Generic.Stack<Env3>) = System.Collections.Generic.Stack<Env3>()
let (var_46: (Union0 ref)) = var_44.mem_0
let (var_47: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
let (var_48: ManagedCuda.BasicTypes.SizeT) = var_47.Pointer
let (var_49: uint64) = uint64 var_48
let (var_50: uint64) = uint64 var_40
let (var_51: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_52: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_53: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_54: int64) = 0L
method_2((var_52: (int64 [])), (var_53: (int64 [])), (var_54: int64))
let (var_55: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_56: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_57: int64) = 0L
method_3((var_55: (int64 [])), (var_56: (int64 [])), (var_57: int64))
let (var_58: int64) = var_52.LongLength
let (var_59: int64) = (var_58 * 8L)
let (var_60: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_59: int64))
let (var_61: (Union0 ref)) = var_60.mem_0
let (var_62: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_61: (Union0 ref)))
var_1.CopyToDevice(var_62, var_52)
let (var_63: int64) = var_53.LongLength
let (var_64: int64) = (var_63 * 8L)
let (var_65: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_64: int64))
let (var_66: (Union0 ref)) = var_65.mem_0
let (var_67: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
var_1.CopyToDevice(var_67, var_53)
let (var_68: int64) = var_55.LongLength
let (var_69: int64) = (var_68 * 8L)
let (var_70: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_69: int64))
let (var_71: (Union0 ref)) = var_70.mem_0
let (var_72: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_71: (Union0 ref)))
var_1.CopyToDevice(var_72, var_55)
let (var_73: int64) = var_56.LongLength
let (var_74: int64) = (var_73 * 8L)
let (var_75: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_74: int64))
let (var_76: (Union0 ref)) = var_75.mem_0
let (var_77: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_76: (Union0 ref)))
var_1.CopyToDevice(var_77, var_56)
let (var_78: int64) = 512L
let (var_79: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_78: int64))
let (var_80: int64) = 512L
let (var_81: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_80: int64))
let (var_82: int64) = 512L
let (var_83: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_82: int64))
let (var_84: int64) = 512L
let (var_85: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_84: int64))
let (var_86: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_61: (Union0 ref)))
let (var_87: ManagedCuda.BasicTypes.SizeT) = var_86.Pointer
let (var_88: uint64) = uint64 var_87
let (var_89: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_88)
let (var_90: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_89)
let (var_91: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
let (var_92: ManagedCuda.BasicTypes.SizeT) = var_91.Pointer
let (var_93: uint64) = uint64 var_92
let (var_94: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_93)
let (var_95: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_94)
let (var_96: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_71: (Union0 ref)))
let (var_97: ManagedCuda.BasicTypes.SizeT) = var_96.Pointer
let (var_98: uint64) = uint64 var_97
let (var_99: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_98)
let (var_100: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_99)
let (var_101: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_76: (Union0 ref)))
let (var_102: ManagedCuda.BasicTypes.SizeT) = var_101.Pointer
let (var_103: uint64) = uint64 var_102
let (var_104: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_103)
let (var_105: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_104)
let (var_106: (Union0 ref)) = var_79.mem_0
let (var_107: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_106: (Union0 ref)))
let (var_108: ManagedCuda.BasicTypes.SizeT) = var_107.Pointer
let (var_109: uint64) = uint64 var_108
let (var_110: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_109)
let (var_111: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_110)
let (var_112: (Union0 ref)) = var_81.mem_0
let (var_113: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_112: (Union0 ref)))
let (var_114: ManagedCuda.BasicTypes.SizeT) = var_113.Pointer
let (var_115: uint64) = uint64 var_114
let (var_116: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_115)
let (var_117: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_116)
let (var_118: (Union0 ref)) = var_83.mem_0
let (var_119: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_118: (Union0 ref)))
let (var_120: ManagedCuda.BasicTypes.SizeT) = var_119.Pointer
let (var_121: uint64) = uint64 var_120
let (var_122: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_121)
let (var_123: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_122)
let (var_124: (Union0 ref)) = var_85.mem_0
let (var_125: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_124: (Union0 ref)))
let (var_126: ManagedCuda.BasicTypes.SizeT) = var_125.Pointer
let (var_127: uint64) = uint64 var_126
let (var_128: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_127)
let (var_129: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_128)
// Cuda join point
// method_8((var_90: ManagedCuda.BasicTypes.CUdeviceptr), (var_95: ManagedCuda.BasicTypes.CUdeviceptr), (var_100: ManagedCuda.BasicTypes.CUdeviceptr), (var_105: ManagedCuda.BasicTypes.CUdeviceptr), (var_111: ManagedCuda.BasicTypes.CUdeviceptr), (var_117: ManagedCuda.BasicTypes.CUdeviceptr), (var_123: ManagedCuda.BasicTypes.CUdeviceptr), (var_129: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_130: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_8", var_32, var_1)
let (var_131: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_130.set_GridDimensions(var_131)
let (var_132: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_130.set_BlockDimensions(var_132)
let (var_133: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_135: (System.Object [])) = [|var_90; var_95; var_100; var_105; var_111; var_117; var_123; var_129|]: (System.Object [])
var_130.RunAsync(var_133, var_135)
let (var_136: int64) = 512L
let (var_137: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_136: int64))
let (var_138: int64) = 512L
let (var_139: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_138: int64))
let (var_140: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_61: (Union0 ref)))
let (var_141: ManagedCuda.BasicTypes.SizeT) = var_140.Pointer
let (var_142: uint64) = uint64 var_141
let (var_143: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_142)
let (var_144: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_143)
let (var_145: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
let (var_146: ManagedCuda.BasicTypes.SizeT) = var_145.Pointer
let (var_147: uint64) = uint64 var_146
let (var_148: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_147)
let (var_149: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_148)
let (var_150: (Union0 ref)) = var_137.mem_0
let (var_151: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_150: (Union0 ref)))
let (var_152: ManagedCuda.BasicTypes.SizeT) = var_151.Pointer
let (var_153: uint64) = uint64 var_152
let (var_154: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_153)
let (var_155: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_154)
let (var_156: (Union0 ref)) = var_139.mem_0
let (var_157: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_156: (Union0 ref)))
let (var_158: ManagedCuda.BasicTypes.SizeT) = var_157.Pointer
let (var_159: uint64) = uint64 var_158
let (var_160: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_159)
let (var_161: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_160)
// Cuda join point
// method_10((var_144: ManagedCuda.BasicTypes.CUdeviceptr), (var_149: ManagedCuda.BasicTypes.CUdeviceptr), (var_155: ManagedCuda.BasicTypes.CUdeviceptr), (var_161: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_162: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_10", var_32, var_1)
let (var_163: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_162.set_GridDimensions(var_163)
let (var_164: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_162.set_BlockDimensions(var_164)
let (var_165: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_167: (System.Object [])) = [|var_144; var_149; var_155; var_161|]: (System.Object [])
var_162.RunAsync(var_165, var_167)
let (var_168: int64) = 0L
let (var_169: int64) = 1L
let (var_170: int64) = 0L
let (var_171: int64) = 1L
let (var_172: int64) = 0L
let (var_173: int64) = 8L
method_11((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_60: EnvStack2), (var_168: int64), (var_169: int64), (var_65: EnvStack2), (var_170: int64), (var_171: int64), (var_172: int64), (var_173: int64))
let (var_174: int64) = 0L
let (var_175: int64) = 8L
let (var_176: int64) = 1L
let (var_177: int64) = 0L
let (var_178: int64) = 8L
let (var_179: int64) = 1L
let (var_180: int64) = 0L
let (var_181: int64) = 8L
let (var_182: int64) = 0L
let (var_183: int64) = 8L
method_15((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_70: EnvStack2), (var_174: int64), (var_175: int64), (var_176: int64), (var_75: EnvStack2), (var_177: int64), (var_178: int64), (var_179: int64), (var_180: int64), (var_181: int64), (var_182: int64), (var_183: int64))
let (var_184: int64) = 0L
let (var_185: int64) = 8L
let (var_186: int64) = 1L
let (var_187: int64) = 0L
let (var_188: int64) = 8L
let (var_189: int64) = 1L
let (var_190: int64) = 0L
let (var_191: int64) = 8L
let (var_192: int64) = 1L
let (var_193: int64) = 0L
let (var_194: int64) = 8L
let (var_195: int64) = 1L
let (var_196: int64) = 0L
let (var_197: int64) = 8L
let (var_198: int64) = 0L
let (var_199: int64) = 8L
method_19((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_79: EnvStack2), (var_184: int64), (var_185: int64), (var_186: int64), (var_81: EnvStack2), (var_187: int64), (var_188: int64), (var_189: int64), (var_83: EnvStack2), (var_190: int64), (var_191: int64), (var_192: int64), (var_85: EnvStack2), (var_193: int64), (var_194: int64), (var_195: int64), (var_196: int64), (var_197: int64), (var_198: int64), (var_199: int64))
let (var_200: int64) = 0L
let (var_201: int64) = 8L
let (var_202: int64) = 1L
let (var_203: int64) = 0L
let (var_204: int64) = 8L
let (var_205: int64) = 1L
let (var_206: int64) = 0L
let (var_207: int64) = 8L
let (var_208: int64) = 0L
let (var_209: int64) = 8L
method_15((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_137: EnvStack2), (var_200: int64), (var_201: int64), (var_202: int64), (var_139: EnvStack2), (var_203: int64), (var_204: int64), (var_205: int64), (var_206: int64), (var_207: int64), (var_208: int64), (var_209: int64))
var_150 := Union0Case1
var_156 := Union0Case1
var_106 := Union0Case1
var_112 := Union0Case1
var_118 := Union0Case1
var_124 := Union0Case1
var_71 := Union0Case1
var_76 := Union0Case1
var_61 := Union0Case1
var_66 := Union0Case1
var_51.Dispose()
let (var_210: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
var_1.FreeMemory(var_210)
var_46 := Union0Case1
var_1.Dispose()

