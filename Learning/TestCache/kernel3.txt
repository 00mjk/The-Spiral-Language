module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_8(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7);
    __global__ void method_10(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3);
    __device__ char method_9(long long int * var_0);
    
    __global__ void method_8(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3, long long int * var_4, long long int * var_5, long long int * var_6, long long int * var_7) {
        long long int var_8 = threadIdx.x;
        long long int var_9 = blockIdx.x;
        long long int var_10 = (8 * var_9);
        long long int var_11 = (var_8 + var_10);
        long long int var_12[1];
        var_12[0] = var_11;
        while (method_9(var_12)) {
            long long int var_14 = var_12[0];
            long long int var_15 = (var_14 + 8);
            char var_16 = (var_14 >= 0);
            char var_18;
            if (var_16) {
                var_18 = (var_14 < 8);
            } else {
                var_18 = 0;
            }
            char var_19 = (var_18 == 0);
            if (var_19) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_20 = threadIdx.y;
            long long int var_21 = blockIdx.y;
            long long int var_22 = (8 * var_21);
            long long int var_23 = (var_20 + var_22);
            long long int var_24[1];
            var_24[0] = var_23;
            while (method_9(var_24)) {
                long long int var_26 = var_24[0];
                long long int var_27 = (var_26 + 8);
                char var_28 = (var_26 >= 0);
                char var_30;
                if (var_28) {
                    var_30 = (var_26 < 8);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_26 * 8);
                char var_34;
                if (var_16) {
                    var_34 = (var_14 < 8);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_36 = (var_32 + var_14);
                char var_38;
                if (var_28) {
                    var_38 = (var_26 < 8);
                } else {
                    var_38 = 0;
                }
                char var_39 = (var_38 == 0);
                if (var_39) {
                    // "Argument out of bounds."
                } else {
                }
                char var_41;
                if (var_16) {
                    var_41 = (var_14 < 8);
                } else {
                    var_41 = 0;
                }
                char var_42 = (var_41 == 0);
                if (var_42) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_43 = var_0[var_14];
                long long int var_44 = var_1[var_14];
                long long int var_45 = var_2[var_36];
                long long int var_46 = var_3[var_36];
                long long int var_47 = var_4[var_36];
                long long int var_48 = var_5[var_36];
                long long int var_49 = var_6[var_36];
                long long int var_50 = var_7[var_36];
                var_4[var_36] = var_43;
                var_5[var_36] = var_44;
                var_6[var_36] = var_45;
                var_7[var_36] = var_46;
                var_24[0] = var_27;
            }
            long long int var_51 = var_24[0];
            var_12[0] = var_15;
        }
        long long int var_52 = var_12[0];
    }
    __global__ void method_10(long long int * var_0, long long int * var_1, long long int * var_2, long long int * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (8 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_9(var_8)) {
            long long int var_10 = var_8[0];
            long long int var_11 = (var_10 + 8);
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 8);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (8 * var_17);
            long long int var_19 = (var_16 + var_18);
            long long int var_20[1];
            var_20[0] = var_19;
            while (method_9(var_20)) {
                long long int var_22 = var_20[0];
                long long int var_23 = (var_22 + 8);
                char var_24 = (var_22 >= 0);
                char var_26;
                if (var_24) {
                    var_26 = (var_22 < 8);
                } else {
                    var_26 = 0;
                }
                char var_27 = (var_26 == 0);
                if (var_27) {
                    // "Argument out of bounds."
                } else {
                }
                char var_29;
                if (var_12) {
                    var_29 = (var_10 < 8);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                char var_32;
                if (var_24) {
                    var_32 = (var_22 < 8);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_22 * 8);
                char var_36;
                if (var_12) {
                    var_36 = (var_10 < 8);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_38 = (var_34 + var_10);
                long long int var_39 = var_0[var_10];
                long long int var_40 = var_1[var_10];
                long long int var_41 = var_2[var_38];
                long long int var_42 = var_3[var_38];
                var_2[var_38] = var_39;
                var_3[var_38] = var_40;
                var_20[0] = var_23;
            }
            long long int var_43 = var_20[0];
            var_8[0] = var_11;
        }
        long long int var_44 = var_8[0];
    }
    __device__ char method_9(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 8);
    }
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: ManagedCuda.BasicTypes.CUdeviceptr
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: (Union0 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: EnvStack2
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (Union0 ref))): ManagedCuda.BasicTypes.CUdeviceptr =
    let (var_1: Union0) = (!var_0)
    match var_1 with
    | Union0Case0(var_2) ->
        var_2.mem_0
    | Union0Case1 ->
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
and method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        var_0.[int32 var_2] <- 2L
        var_1.[int32 var_2] <- 2L
        let (var_6: int64) = (var_2 + 1L)
        method_2((var_0: (int64 [])), (var_1: (int64 [])), (var_6: int64))
    else
        ()
and method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 8L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 8L)
        let (var_7: int64) = 0L
        method_4((var_2: int64), (var_0: (int64 [])), (var_6: int64), (var_1: (int64 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_3((var_0: (int64 [])), (var_1: (int64 [])), (var_8: int64))
    else
        ()
and method_5((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64)): EnvStack2 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env3) = var_1.Peek()
        let (var_7: EnvStack2) = var_6.mem_0
        let (var_8: int64) = var_6.mem_1
        let (var_9: (Union0 ref)) = var_7.mem_0
        let (var_10: Union0) = (!var_9)
        match var_10 with
        | Union0Case0(var_11) ->
            let (var_12: ManagedCuda.BasicTypes.CUdeviceptr) = var_11.mem_0
            method_6((var_12: ManagedCuda.BasicTypes.CUdeviceptr), (var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>), (var_7: EnvStack2), (var_8: int64))
        | Union0Case1 ->
            let (var_14: Env3) = var_1.Pop()
            let (var_15: EnvStack2) = var_14.mem_0
            let (var_16: int64) = var_14.mem_1
            method_5((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64))
    else
        method_7((var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>))
and method_11((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: EnvStack2), (var_9: int64), (var_10: int64), (var_11: int64)): unit =
    let (var_12: int64) = (var_11 * var_7)
    let (var_13: int64) = (var_11 * var_10)
    let (var_14: bool) = (var_6 = 0L)
    let (var_15: bool) = (var_14 = false)
    if var_15 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_16: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_11))
    let (var_17: (Union0 ref)) = var_5.mem_0
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_17: (Union0 ref)))
    var_0.CopyToHost(var_16, var_18)
    let (var_19: bool) = (var_9 = 0L)
    let (var_20: bool) = (var_19 = false)
    if var_20 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_21: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_11))
    let (var_22: (Union0 ref)) = var_8.mem_0
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_22: (Union0 ref)))
    var_0.CopyToHost(var_21, var_23)
    let (var_24: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_25: string) = ""
    let (var_26: int64) = 0L
    method_12((var_24: System.Text.StringBuilder), (var_26: int64))
    let (var_27: System.Text.StringBuilder) = var_24.Append("[|")
    let (var_28: int64) = 0L
    let (var_29: string) = method_13((var_24: System.Text.StringBuilder), (var_16: (int64 [])), (var_6: int64), (var_7: int64), (var_21: (int64 [])), (var_9: int64), (var_10: int64), (var_11: int64), (var_25: string), (var_28: int64))
    let (var_30: System.Text.StringBuilder) = var_24.AppendLine("|]")
    let (var_31: string) = var_24.ToString()
    let (var_32: string) = System.String.Format("{0}",var_31)
    System.Console.WriteLine(var_32)
and method_14((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: EnvStack2), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64)): unit =
    let (var_17: int64) = (var_15 * var_16)
    let (var_18: bool) = (0L = var_7)
    let (var_19: bool) = (var_18 = false)
    if var_19 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_20: int64) = (var_16 * var_9)
    let (var_21: int64) = (var_15 * var_20)
    let (var_22: bool) = (0L = var_12)
    let (var_23: bool) = (var_22 = false)
    if var_23 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_24: int64) = (var_16 * var_14)
    let (var_25: int64) = (var_15 * var_24)
    let (var_26: bool) = (var_6 = 0L)
    let (var_27: bool) = (var_26 = false)
    if var_27 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_28: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_17))
    let (var_29: (Union0 ref)) = var_5.mem_0
    let (var_30: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_29: (Union0 ref)))
    var_0.CopyToHost(var_28, var_30)
    let (var_31: bool) = (var_11 = 0L)
    let (var_32: bool) = (var_31 = false)
    if var_32 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_33: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_17))
    let (var_34: (Union0 ref)) = var_10.mem_0
    let (var_35: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_34: (Union0 ref)))
    var_0.CopyToHost(var_33, var_35)
    let (var_36: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_37: string) = ""
    let (var_38: int64) = 0L
    method_12((var_36: System.Text.StringBuilder), (var_38: int64))
    let (var_39: System.Text.StringBuilder) = var_36.AppendLine("[|")
    let (var_40: int64) = 0L
    method_15((var_36: System.Text.StringBuilder), (var_37: string), (var_28: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_33: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_40: int64))
    let (var_41: int64) = 0L
    method_12((var_36: System.Text.StringBuilder), (var_41: int64))
    let (var_42: System.Text.StringBuilder) = var_36.AppendLine("|]")
    let (var_43: string) = var_36.ToString()
    let (var_44: string) = System.String.Format("{0}",var_43)
    System.Console.WriteLine(var_44)
and method_17((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: EnvStack2), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_15: EnvStack2), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_20: EnvStack2), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64), (var_25: int64), (var_26: int64)): unit =
    let (var_27: int64) = (var_25 * var_26)
    let (var_28: bool) = (0L = var_7)
    let (var_29: bool) = (var_28 = false)
    if var_29 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_30: int64) = (var_26 * var_9)
    let (var_31: int64) = (var_25 * var_30)
    let (var_32: bool) = (0L = var_12)
    let (var_33: bool) = (var_32 = false)
    if var_33 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_34: int64) = (var_26 * var_14)
    let (var_35: int64) = (var_25 * var_34)
    let (var_36: bool) = (0L = var_17)
    let (var_37: bool) = (var_36 = false)
    if var_37 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_38: int64) = (var_26 * var_19)
    let (var_39: int64) = (var_25 * var_38)
    let (var_40: bool) = (0L = var_22)
    let (var_41: bool) = (var_40 = false)
    if var_41 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_42: int64) = (var_26 * var_24)
    let (var_43: int64) = (var_25 * var_42)
    let (var_44: bool) = (var_6 = 0L)
    let (var_45: bool) = (var_44 = false)
    if var_45 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_46: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_47: (Union0 ref)) = var_5.mem_0
    let (var_48: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_47: (Union0 ref)))
    var_0.CopyToHost(var_46, var_48)
    let (var_49: bool) = (var_11 = 0L)
    let (var_50: bool) = (var_49 = false)
    if var_50 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_51: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_52: (Union0 ref)) = var_10.mem_0
    let (var_53: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_52: (Union0 ref)))
    var_0.CopyToHost(var_51, var_53)
    let (var_54: bool) = (var_16 = 0L)
    let (var_55: bool) = (var_54 = false)
    if var_55 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_56: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_57: (Union0 ref)) = var_15.mem_0
    let (var_58: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_57: (Union0 ref)))
    var_0.CopyToHost(var_56, var_58)
    let (var_59: bool) = (var_21 = 0L)
    let (var_60: bool) = (var_59 = false)
    if var_60 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_61: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_27))
    let (var_62: (Union0 ref)) = var_20.mem_0
    let (var_63: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_62: (Union0 ref)))
    var_0.CopyToHost(var_61, var_63)
    let (var_64: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_65: string) = ""
    let (var_66: int64) = 0L
    method_12((var_64: System.Text.StringBuilder), (var_66: int64))
    let (var_67: System.Text.StringBuilder) = var_64.AppendLine("[|")
    let (var_68: int64) = 0L
    method_18((var_64: System.Text.StringBuilder), (var_65: string), (var_46: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_51: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64), (var_56: (int64 [])), (var_16: int64), (var_17: int64), (var_18: int64), (var_19: int64), (var_61: (int64 [])), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64), (var_25: int64), (var_26: int64), (var_68: int64))
    let (var_69: int64) = 0L
    method_12((var_64: System.Text.StringBuilder), (var_69: int64))
    let (var_70: System.Text.StringBuilder) = var_64.AppendLine("|]")
    let (var_71: string) = var_64.ToString()
    let (var_72: string) = System.String.Format("{0}",var_71)
    System.Console.WriteLine(var_72)
and method_4((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_4: int64)): unit =
    let (var_5: bool) = (var_4 < 8L)
    if var_5 then
        let (var_6: bool) = (var_4 >= 0L)
        let (var_7: bool) = (var_6 = false)
        if var_7 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: int64) = (var_2 + var_4)
        var_1.[int32 var_8] <- var_0
        var_3.[int32 var_8] <- var_4
        let (var_9: int64) = (var_4 + 1L)
        method_4((var_0: int64), (var_1: (int64 [])), (var_2: int64), (var_3: (int64 [])), (var_9: int64))
    else
        ()
and method_6((var_0: ManagedCuda.BasicTypes.CUdeviceptr), (var_1: uint64), (var_2: uint64), (var_3: int64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64)): EnvStack2 =
    let (var_7: ManagedCuda.BasicTypes.SizeT) = var_0.Pointer
    let (var_8: uint64) = uint64 var_7
    let (var_9: uint64) = uint64 var_6
    let (var_10: int64) = (var_3 % 256L)
    let (var_11: int64) = (var_3 - var_10)
    let (var_12: int64) = (var_11 + 256L)
    let (var_13: uint64) = (var_8 + var_9)
    let (var_14: uint64) = (var_1 + var_2)
    let (var_15: uint64) = uint64 var_12
    let (var_16: uint64) = (var_14 - var_13)
    let (var_17: bool) = (var_15 <= var_16)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_20))))
    let (var_22: EnvStack2) = EnvStack2((var_21: (Union0 ref)))
    var_4.Push((Env3(var_22, var_12)))
    var_22
and method_7((var_0: uint64), (var_1: uint64), (var_2: int64), (var_3: System.Collections.Generic.Stack<Env3>)): EnvStack2 =
    let (var_4: int64) = (var_2 % 256L)
    let (var_5: int64) = (var_2 - var_4)
    let (var_6: int64) = (var_5 + 256L)
    let (var_7: uint64) = (var_0 + var_1)
    let (var_8: uint64) = uint64 var_6
    let (var_9: uint64) = (var_7 - var_0)
    let (var_10: bool) = (var_8 <= var_9)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_12: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_0)
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_12)
    let (var_14: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_13))))
    let (var_15: EnvStack2) = EnvStack2((var_14: (Union0 ref)))
    var_3.Push((Env3(var_15, var_6)))
    var_15
and method_12((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_12((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_13((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: string), (var_9: int64)): string =
    let (var_10: bool) = (var_9 < var_7)
    if var_10 then
        let (var_11: System.Text.StringBuilder) = var_0.Append(var_8)
        let (var_12: bool) = (var_9 >= 0L)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_14: int64) = (var_9 * var_3)
        let (var_15: int64) = (var_2 + var_14)
        let (var_16: int64) = (var_9 * var_6)
        let (var_17: int64) = (var_5 + var_16)
        let (var_18: int64) = var_1.[int32 var_15]
        let (var_19: int64) = var_4.[int32 var_17]
        let (var_20: string) = System.String.Format("{0}",var_19)
        let (var_21: string) = System.String.Format("{0}",var_18)
        let (var_22: string) = String.concat ", " [|var_21; var_20|]
        let (var_23: string) = System.String.Format("[{0}]",var_22)
        let (var_24: System.Text.StringBuilder) = var_0.Append(var_23)
        let (var_25: string) = "; "
        let (var_26: int64) = (var_9 + 1L)
        method_13((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_25: string), (var_26: int64))
    else
        var_8
and method_15((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64)): unit =
    let (var_15: bool) = (var_14 < var_12)
    if var_15 then
        let (var_16: bool) = (var_14 >= 0L)
        let (var_17: bool) = (var_16 = false)
        if var_17 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_18: int64) = (var_14 * var_5)
        let (var_19: int64) = (var_3 + var_18)
        let (var_20: int64) = (var_19 + var_4)
        let (var_21: int64) = (var_14 * var_10)
        let (var_22: int64) = (var_8 + var_21)
        let (var_23: int64) = (var_22 + var_9)
        let (var_24: int64) = 0L
        method_16((var_0: System.Text.StringBuilder), (var_24: int64))
        let (var_25: System.Text.StringBuilder) = var_0.Append("[|")
        let (var_26: int64) = 0L
        let (var_27: string) = method_13((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_20: int64), (var_6: int64), (var_7: (int64 [])), (var_23: int64), (var_11: int64), (var_13: int64), (var_1: string), (var_26: int64))
        let (var_28: System.Text.StringBuilder) = var_0.AppendLine("|]")
        let (var_29: int64) = (var_14 + 1L)
        method_15((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_29: int64))
    else
        ()
and method_18((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: (int64 [])), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_24: int64)): unit =
    let (var_25: bool) = (var_24 < var_22)
    if var_25 then
        let (var_26: bool) = (var_24 >= 0L)
        let (var_27: bool) = (var_26 = false)
        if var_27 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_28: int64) = (var_24 * var_5)
        let (var_29: int64) = (var_3 + var_28)
        let (var_30: int64) = (var_29 + var_4)
        let (var_31: int64) = (var_24 * var_10)
        let (var_32: int64) = (var_8 + var_31)
        let (var_33: int64) = (var_32 + var_9)
        let (var_34: int64) = (var_24 * var_15)
        let (var_35: int64) = (var_13 + var_34)
        let (var_36: int64) = (var_35 + var_14)
        let (var_37: int64) = (var_24 * var_20)
        let (var_38: int64) = (var_18 + var_37)
        let (var_39: int64) = (var_38 + var_19)
        let (var_40: int64) = 0L
        method_16((var_0: System.Text.StringBuilder), (var_40: int64))
        let (var_41: System.Text.StringBuilder) = var_0.Append("[|")
        let (var_42: int64) = 0L
        let (var_43: string) = method_19((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_30: int64), (var_6: int64), (var_7: (int64 [])), (var_33: int64), (var_11: int64), (var_12: (int64 [])), (var_36: int64), (var_16: int64), (var_17: (int64 [])), (var_39: int64), (var_21: int64), (var_23: int64), (var_1: string), (var_42: int64))
        let (var_44: System.Text.StringBuilder) = var_0.AppendLine("|]")
        let (var_45: int64) = (var_24 + 1L)
        method_18((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: (int64 [])), (var_13: int64), (var_14: int64), (var_15: int64), (var_16: int64), (var_17: (int64 [])), (var_18: int64), (var_19: int64), (var_20: int64), (var_21: int64), (var_22: int64), (var_23: int64), (var_45: int64))
    else
        ()
and method_16((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_16((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_19((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: string), (var_15: int64)): string =
    let (var_16: bool) = (var_15 < var_13)
    if var_16 then
        let (var_17: System.Text.StringBuilder) = var_0.Append(var_14)
        let (var_18: bool) = (var_15 >= 0L)
        let (var_19: bool) = (var_18 = false)
        if var_19 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_20: int64) = (var_15 * var_3)
        let (var_21: int64) = (var_2 + var_20)
        let (var_22: int64) = (var_15 * var_6)
        let (var_23: int64) = (var_5 + var_22)
        let (var_24: int64) = (var_15 * var_9)
        let (var_25: int64) = (var_8 + var_24)
        let (var_26: int64) = (var_15 * var_12)
        let (var_27: int64) = (var_11 + var_26)
        let (var_28: int64) = var_1.[int32 var_21]
        let (var_29: int64) = var_4.[int32 var_23]
        let (var_30: int64) = var_7.[int32 var_25]
        let (var_31: int64) = var_10.[int32 var_27]
        let (var_32: string) = System.String.Format("{0}",var_31)
        let (var_33: string) = System.String.Format("{0}",var_30)
        let (var_34: string) = String.concat ", " [|var_33; var_32|]
        let (var_35: string) = System.String.Format("[{0}]",var_34)
        let (var_36: string) = System.String.Format("{0}",var_29)
        let (var_37: string) = System.String.Format("{0}",var_28)
        let (var_38: string) = String.concat ", " [|var_37; var_36|]
        let (var_39: string) = System.String.Format("[{0}]",var_38)
        let (var_40: string) = String.concat ", " [|var_39; var_35|]
        let (var_41: string) = System.String.Format("[{0}]",var_40)
        let (var_42: System.Text.StringBuilder) = var_0.Append(var_41)
        let (var_43: string) = "; "
        let (var_44: int64) = (var_15 + 1L)
        method_19((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: (int64 [])), (var_8: int64), (var_9: int64), (var_10: (int64 [])), (var_11: int64), (var_12: int64), (var_13: int64), (var_43: string), (var_44: int64))
    else
        var_14
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.CudaDeviceProperties) = var_1.GetDeviceInfo()
let (var_36: ManagedCuda.BasicTypes.SizeT) = var_35.get_TotalGlobalMemory()
let (var_37: int64) = int64 var_36
let (var_38: float) = float var_37
let (var_39: float) = (0.700000 * var_38)
let (var_40: int64) = int64 var_39
let (var_41: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_40)
let (var_42: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_41)
let (var_43: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_42))))
let (var_44: EnvStack2) = EnvStack2((var_43: (Union0 ref)))
let (var_45: System.Collections.Generic.Stack<Env3>) = System.Collections.Generic.Stack<Env3>()
let (var_46: (Union0 ref)) = var_44.mem_0
let (var_47: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
let (var_48: ManagedCuda.BasicTypes.SizeT) = var_47.Pointer
let (var_49: uint64) = uint64 var_48
let (var_50: uint64) = uint64 var_40
let (var_51: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_52: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_53: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(8L))
let (var_54: int64) = 0L
method_2((var_52: (int64 [])), (var_53: (int64 [])), (var_54: int64))
let (var_55: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_56: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(64L))
let (var_57: int64) = 0L
method_3((var_55: (int64 [])), (var_56: (int64 [])), (var_57: int64))
let (var_58: int64) = var_52.LongLength
let (var_59: int64) = (var_58 * 8L)
let (var_60: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_59: int64))
let (var_61: (Union0 ref)) = var_60.mem_0
let (var_62: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_61: (Union0 ref)))
var_1.CopyToDevice(var_62, var_52)
let (var_63: int64) = var_53.LongLength
let (var_64: int64) = (var_63 * 8L)
let (var_65: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_64: int64))
let (var_66: (Union0 ref)) = var_65.mem_0
let (var_67: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
var_1.CopyToDevice(var_67, var_53)
let (var_68: int64) = var_55.LongLength
let (var_69: int64) = (var_68 * 8L)
let (var_70: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_69: int64))
let (var_71: (Union0 ref)) = var_70.mem_0
let (var_72: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_71: (Union0 ref)))
var_1.CopyToDevice(var_72, var_55)
let (var_73: int64) = var_56.LongLength
let (var_74: int64) = (var_73 * 8L)
let (var_75: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_74: int64))
let (var_76: (Union0 ref)) = var_75.mem_0
let (var_77: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_76: (Union0 ref)))
var_1.CopyToDevice(var_77, var_56)
let (var_78: int64) = 512L
let (var_79: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_78: int64))
let (var_80: int64) = 512L
let (var_81: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_80: int64))
let (var_82: int64) = 512L
let (var_83: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_82: int64))
let (var_84: int64) = 512L
let (var_85: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_84: int64))
let (var_86: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_61: (Union0 ref)))
let (var_87: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
let (var_88: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_71: (Union0 ref)))
let (var_89: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_76: (Union0 ref)))
let (var_90: (Union0 ref)) = var_79.mem_0
let (var_91: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_90: (Union0 ref)))
let (var_92: (Union0 ref)) = var_81.mem_0
let (var_93: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_92: (Union0 ref)))
let (var_94: (Union0 ref)) = var_83.mem_0
let (var_95: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_94: (Union0 ref)))
let (var_96: (Union0 ref)) = var_85.mem_0
let (var_97: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_96: (Union0 ref)))
// Cuda join point
// method_8((var_86: ManagedCuda.BasicTypes.CUdeviceptr), (var_87: ManagedCuda.BasicTypes.CUdeviceptr), (var_88: ManagedCuda.BasicTypes.CUdeviceptr), (var_89: ManagedCuda.BasicTypes.CUdeviceptr), (var_91: ManagedCuda.BasicTypes.CUdeviceptr), (var_93: ManagedCuda.BasicTypes.CUdeviceptr), (var_95: ManagedCuda.BasicTypes.CUdeviceptr), (var_97: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_98: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_8", var_32, var_1)
let (var_99: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_98.set_GridDimensions(var_99)
let (var_100: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_98.set_BlockDimensions(var_100)
let (var_101: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_103: (System.Object [])) = [|var_86; var_87; var_88; var_89; var_91; var_93; var_95; var_97|]: (System.Object [])
var_98.RunAsync(var_101, var_103)
let (var_104: int64) = 512L
let (var_105: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_104: int64))
let (var_106: int64) = 512L
let (var_107: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_106: int64))
let (var_108: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_61: (Union0 ref)))
let (var_109: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
let (var_110: (Union0 ref)) = var_105.mem_0
let (var_111: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_110: (Union0 ref)))
let (var_112: (Union0 ref)) = var_107.mem_0
let (var_113: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_112: (Union0 ref)))
// Cuda join point
// method_10((var_108: ManagedCuda.BasicTypes.CUdeviceptr), (var_109: ManagedCuda.BasicTypes.CUdeviceptr), (var_111: ManagedCuda.BasicTypes.CUdeviceptr), (var_113: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_114: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_10", var_32, var_1)
let (var_115: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_114.set_GridDimensions(var_115)
let (var_116: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 8u, 1u)
var_114.set_BlockDimensions(var_116)
let (var_117: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_119: (System.Object [])) = [|var_108; var_109; var_111; var_113|]: (System.Object [])
var_114.RunAsync(var_117, var_119)
let (var_120: int64) = 0L
let (var_121: int64) = 1L
let (var_122: int64) = 0L
let (var_123: int64) = 1L
let (var_124: int64) = 8L
method_11((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_60: EnvStack2), (var_120: int64), (var_121: int64), (var_65: EnvStack2), (var_122: int64), (var_123: int64), (var_124: int64))
let (var_125: int64) = 0L
let (var_126: int64) = 0L
let (var_127: int64) = 8L
let (var_128: int64) = 1L
let (var_129: int64) = 0L
let (var_130: int64) = 0L
let (var_131: int64) = 8L
let (var_132: int64) = 1L
let (var_133: int64) = 8L
let (var_134: int64) = 8L
method_14((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_70: EnvStack2), (var_125: int64), (var_126: int64), (var_127: int64), (var_128: int64), (var_75: EnvStack2), (var_129: int64), (var_130: int64), (var_131: int64), (var_132: int64), (var_133: int64), (var_134: int64))
let (var_135: int64) = 0L
let (var_136: int64) = 0L
let (var_137: int64) = 8L
let (var_138: int64) = 1L
let (var_139: int64) = 0L
let (var_140: int64) = 0L
let (var_141: int64) = 8L
let (var_142: int64) = 1L
let (var_143: int64) = 0L
let (var_144: int64) = 0L
let (var_145: int64) = 8L
let (var_146: int64) = 1L
let (var_147: int64) = 0L
let (var_148: int64) = 0L
let (var_149: int64) = 8L
let (var_150: int64) = 1L
let (var_151: int64) = 8L
let (var_152: int64) = 8L
method_17((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_79: EnvStack2), (var_135: int64), (var_136: int64), (var_137: int64), (var_138: int64), (var_81: EnvStack2), (var_139: int64), (var_140: int64), (var_141: int64), (var_142: int64), (var_83: EnvStack2), (var_143: int64), (var_144: int64), (var_145: int64), (var_146: int64), (var_85: EnvStack2), (var_147: int64), (var_148: int64), (var_149: int64), (var_150: int64), (var_151: int64), (var_152: int64))
let (var_153: int64) = 0L
let (var_154: int64) = 0L
let (var_155: int64) = 8L
let (var_156: int64) = 1L
let (var_157: int64) = 0L
let (var_158: int64) = 0L
let (var_159: int64) = 8L
let (var_160: int64) = 1L
let (var_161: int64) = 8L
let (var_162: int64) = 8L
method_14((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_105: EnvStack2), (var_153: int64), (var_154: int64), (var_155: int64), (var_156: int64), (var_107: EnvStack2), (var_157: int64), (var_158: int64), (var_159: int64), (var_160: int64), (var_161: int64), (var_162: int64))
var_110 := Union0Case1
var_112 := Union0Case1
var_90 := Union0Case1
var_92 := Union0Case1
var_94 := Union0Case1
var_96 := Union0Case1
var_71 := Union0Case1
var_76 := Union0Case1
var_61 := Union0Case1
var_66 := Union0Case1
var_51.Dispose()
let (var_163: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
var_1.FreeMemory(var_163)
var_46 := Union0Case1
var_1.Dispose()

