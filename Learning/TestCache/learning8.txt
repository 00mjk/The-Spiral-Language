module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_6(float * var_0, float * var_1, float * var_2);
    __global__ void method_9(float * var_0, float * var_1);
    __global__ void method_11(float * var_0, float * var_1, float * var_2);
    __global__ void method_14(float var_0, float var_1, float * var_2, float * var_3, float * var_4);
    __global__ void method_15(float * var_0, float * var_1, float * var_2, float * var_3);
    __global__ void method_16(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4);
    __global__ void method_20(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4);
    __device__ char method_7(long long int * var_0);
    __device__ char method_8(long long int * var_0);
    __device__ char method_10(long long int * var_0);
    __device__ char method_12(long long int * var_0, float * var_1);
    __device__ char method_17(long long int * var_0, float * var_1);
    __device__ char method_18(long long int * var_0, float * var_1);
    __device__ char method_19(long long int var_0, long long int * var_1, float * var_2);
    
    __global__ void method_6(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (16 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_7(var_7)) {
            long long int var_9 = var_7[0];
            long long int var_10 = (var_9 + 16);
            char var_11 = (var_9 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_9 < 16);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_8(var_19)) {
                long long int var_21 = var_19[0];
                long long int var_22 = (var_21 + 32);
                char var_23 = (var_21 >= 0);
                char var_25;
                if (var_23) {
                    var_25 = (var_21 < 32);
                } else {
                    var_25 = 0;
                }
                char var_26 = (var_25 == 0);
                if (var_26) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_27 = (var_21 * 16);
                char var_29;
                if (var_11) {
                    var_29 = (var_9 < 16);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_27 + var_9);
                char var_33;
                if (var_23) {
                    var_33 = (var_21 < 32);
                } else {
                    var_33 = 0;
                }
                char var_34 = (var_33 == 0);
                if (var_34) {
                    // "Argument out of bounds."
                } else {
                }
                char var_36;
                if (var_11) {
                    var_36 = (var_9 < 16);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                float var_38 = var_0[var_9];
                float var_39 = var_1[var_31];
                float var_40 = var_2[var_31];
                float var_41 = (var_38 + var_39);
                var_2[var_31] = var_41;
                var_19[0] = var_22;
            }
            long long int var_42 = var_19[0];
            var_7[0] = var_10;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_9(float * var_0, float * var_1) {
        long long int var_2 = blockIdx.x;
        long long int var_3 = (var_2 * 128);
        long long int var_4 = threadIdx.x;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_10(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 + 512);
            char var_10 = (var_8 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_8 < 512);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            char var_15;
            if (var_10) {
                var_15 = (var_8 < 512);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_0[var_8];
            float var_18 = var_1[var_8];
            float var_19 = (-var_17);
            float var_20 = exp(var_19);
            float var_21 = (1 + var_20);
            float var_22 = (1 / var_21);
            var_1[var_8] = var_22;
            var_6[0] = var_9;
        }
        long long int var_23 = var_6[0];
    }
    __global__ void method_11(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = blockIdx.x;
        long long int var_4 = (var_3 * 128);
        long long int var_5 = threadIdx.x;
        long long int var_6 = (var_4 + var_5);
        float var_7 = 0;
        long long int var_8[1];
        float var_9[1];
        var_8[0] = var_6;
        var_9[0] = var_7;
        while (method_12(var_8, var_9)) {
            long long int var_11 = var_8[0];
            float var_12 = var_9[0];
            long long int var_13 = (var_11 + 512);
            char var_14 = (var_11 >= 0);
            char var_16;
            if (var_14) {
                var_16 = (var_11 < 512);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            float var_18 = var_0[var_11];
            float var_19 = var_1[var_11];
            float var_20 = (var_19 - var_18);
            float var_21 = (var_20 * var_20);
            float var_22 = (var_12 + var_21);
            var_8[0] = var_13;
            var_9[0] = var_22;
        }
        long long int var_23 = var_8[0];
        float var_24 = var_9[0];
        float var_25 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_24);
        long long int var_26 = threadIdx.x;
        char var_27 = (var_26 == 0);
        if (var_27) {
            long long int var_28 = blockIdx.x;
            char var_29 = (var_28 >= 0);
            char var_31;
            if (var_29) {
                var_31 = (var_28 < 4);
            } else {
                var_31 = 0;
            }
            char var_32 = (var_31 == 0);
            if (var_32) {
                // "Argument out of bounds."
            } else {
            }
            var_2[var_28] = var_25;
        } else {
        }
    }
    __global__ void method_14(float var_0, float var_1, float * var_2, float * var_3, float * var_4) {
        long long int var_5 = blockIdx.x;
        long long int var_6 = (var_5 * 128);
        long long int var_7 = threadIdx.x;
        long long int var_8 = (var_6 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_10(var_9)) {
            long long int var_11 = var_9[0];
            long long int var_12 = (var_11 + 512);
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 512);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            char var_18;
            if (var_13) {
                var_18 = (var_11 < 512);
            } else {
                var_18 = 0;
            }
            char var_19 = (var_18 == 0);
            if (var_19) {
                // "Argument out of bounds."
            } else {
            }
            float var_20 = var_2[var_11];
            float var_21 = var_3[var_11];
            float var_22 = var_4[var_11];
            float var_23 = (var_20 - var_21);
            float var_24 = (2 * var_23);
            float var_25 = (var_0 * var_24);
            float var_26 = (var_22 + var_25);
            var_4[var_11] = var_26;
            var_9[0] = var_12;
        }
        long long int var_27 = var_9[0];
    }
    __global__ void method_15(float * var_0, float * var_1, float * var_2, float * var_3) {
        long long int var_4 = blockIdx.x;
        long long int var_5 = (var_4 * 128);
        long long int var_6 = threadIdx.x;
        long long int var_7 = (var_5 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_10(var_8)) {
            long long int var_10 = var_8[0];
            long long int var_11 = (var_10 + 512);
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 512);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            char var_17;
            if (var_12) {
                var_17 = (var_10 < 512);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            float var_19 = var_0[var_10];
            float var_20 = var_1[var_10];
            float var_21 = var_2[var_10];
            float var_22 = var_3[var_10];
            float var_23 = (1 - var_21);
            float var_24 = (var_21 * var_23);
            float var_25 = (var_20 * var_24);
            float var_26 = (var_22 + var_25);
            var_3[var_10] = var_26;
            var_8[0] = var_11;
        }
        long long int var_27 = var_8[0];
    }
    __global__ void method_16(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4) {
        long long int var_5 = threadIdx.x;
        long long int var_6 = blockIdx.x;
        long long int var_7 = (16 * var_6);
        long long int var_8 = (var_5 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_7(var_9)) {
            long long int var_11 = var_9[0];
            long long int var_12 = (var_11 + 16);
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 16);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            char var_18;
            if (var_13) {
                var_18 = (var_11 < 16);
            } else {
                var_18 = 0;
            }
            char var_19 = (var_18 == 0);
            if (var_19) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_20 = threadIdx.y;
            long long int var_21 = blockIdx.y;
            long long int var_22 = (32 * var_21);
            long long int var_23 = (var_20 + var_22);
            float var_24 = 0;
            long long int var_25[1];
            float var_26[1];
            var_25[0] = var_23;
            var_26[0] = var_24;
            while (method_17(var_25, var_26)) {
                long long int var_28 = var_25[0];
                float var_29 = var_26[0];
                long long int var_30 = (var_28 + 32);
                char var_31 = (var_28 >= 0);
                char var_33;
                if (var_31) {
                    var_33 = (var_28 < 32);
                } else {
                    var_33 = 0;
                }
                char var_34 = (var_33 == 0);
                if (var_34) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_35 = (var_28 * 16);
                char var_37;
                if (var_13) {
                    var_37 = (var_11 < 16);
                } else {
                    var_37 = 0;
                }
                char var_38 = (var_37 == 0);
                if (var_38) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_39 = (var_35 + var_11);
                float var_40 = var_0[var_39];
                float var_41 = var_1[var_39];
                float var_42 = var_2[var_39];
                float var_43 = var_3[var_11];
                float var_44 = (var_29 + var_41);
                var_25[0] = var_30;
                var_26[0] = var_44;
            }
            long long int var_45 = var_25[0];
            float var_46 = var_26[0];
            __shared__ float var_47[1023];
            long long int var_48[1];
            float var_49[1];
            var_48[0] = 32;
            var_49[0] = var_46;
            while (method_18(var_48, var_49)) {
                long long int var_51 = var_48[0];
                float var_52 = var_49[0];
                long long int var_53 = (var_51 / 2);
                long long int var_54 = threadIdx.y;
                char var_55 = (var_54 < var_51);
                char var_58;
                if (var_55) {
                    long long int var_56 = threadIdx.y;
                    var_58 = (var_56 >= var_53);
                } else {
                    var_58 = 0;
                }
                if (var_58) {
                    long long int var_59 = threadIdx.y;
                    char var_60 = (var_59 >= 1);
                    char var_62;
                    if (var_60) {
                        var_62 = (var_59 < 32);
                    } else {
                        var_62 = 0;
                    }
                    char var_63 = (var_62 == 0);
                    if (var_63) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_64 = (var_59 - 1);
                    long long int var_65 = (var_64 * 33);
                    long long int var_66 = threadIdx.x;
                    char var_67 = (var_66 >= 0);
                    char var_69;
                    if (var_67) {
                        var_69 = (var_66 < 33);
                    } else {
                        var_69 = 0;
                    }
                    char var_70 = (var_69 == 0);
                    if (var_70) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_71 = (var_65 + var_66);
                    var_47[var_71] = var_52;
                } else {
                }
                __syncthreads();
                long long int var_72 = threadIdx.y;
                char var_73 = (var_72 < var_53);
                float var_98;
                if (var_73) {
                    long long int var_74 = threadIdx.y;
                    long long int var_75 = (var_74 + var_53);
                    long long int var_76[1];
                    float var_77[1];
                    var_76[0] = var_75;
                    var_77[0] = var_52;
                    while (method_19(var_51, var_76, var_77)) {
                        long long int var_79 = var_76[0];
                        float var_80 = var_77[0];
                        long long int var_81 = (var_79 + var_53);
                        char var_82 = (var_79 >= 1);
                        char var_84;
                        if (var_82) {
                            var_84 = (var_79 < 32);
                        } else {
                            var_84 = 0;
                        }
                        char var_85 = (var_84 == 0);
                        if (var_85) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_86 = (var_79 - 1);
                        long long int var_87 = (var_86 * 33);
                        long long int var_88 = threadIdx.x;
                        char var_89 = (var_88 >= 0);
                        char var_91;
                        if (var_89) {
                            var_91 = (var_88 < 33);
                        } else {
                            var_91 = 0;
                        }
                        char var_92 = (var_91 == 0);
                        if (var_92) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_93 = (var_87 + var_88);
                        float var_94 = var_47[var_93];
                        float var_95 = (var_80 + var_94);
                        var_76[0] = var_81;
                        var_77[0] = var_95;
                    }
                    long long int var_96 = var_76[0];
                    var_98 = var_77[0];
                } else {
                    var_98 = var_52;
                }
                var_48[0] = var_53;
                var_49[0] = var_98;
            }
            long long int var_99 = var_48[0];
            float var_100 = var_49[0];
            long long int var_101 = threadIdx.y;
            char var_102 = (var_101 == 0);
            if (var_102) {
                float var_103 = var_4[var_11];
                float var_104 = (var_100 + var_103);
                var_4[var_11] = var_104;
            } else {
            }
            var_9[0] = var_12;
        }
        long long int var_105 = var_9[0];
    }
    __global__ void method_20(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4) {
        long long int var_5 = threadIdx.x;
        long long int var_6 = blockIdx.x;
        long long int var_7 = (16 * var_6);
        long long int var_8 = (var_5 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_7(var_9)) {
            long long int var_11 = var_9[0];
            long long int var_12 = (var_11 + 16);
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 16);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.y;
            long long int var_18 = blockIdx.y;
            long long int var_19 = (32 * var_18);
            long long int var_20 = (var_17 + var_19);
            long long int var_21[1];
            var_21[0] = var_20;
            while (method_8(var_21)) {
                long long int var_23 = var_21[0];
                long long int var_24 = (var_23 + 32);
                char var_25 = (var_23 >= 0);
                char var_27;
                if (var_25) {
                    var_27 = (var_23 < 32);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_29 = (var_23 * 16);
                char var_31;
                if (var_13) {
                    var_31 = (var_11 < 16);
                } else {
                    var_31 = 0;
                }
                char var_32 = (var_31 == 0);
                if (var_32) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_33 = (var_29 + var_11);
                char var_35;
                if (var_25) {
                    var_35 = (var_23 < 32);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                char var_38;
                if (var_13) {
                    var_38 = (var_11 < 16);
                } else {
                    var_38 = 0;
                }
                char var_39 = (var_38 == 0);
                if (var_39) {
                    // "Argument out of bounds."
                } else {
                }
                float var_40 = var_0[var_11];
                float var_41 = var_1[var_33];
                float var_42 = var_2[var_33];
                float var_43 = var_3[var_33];
                float var_44 = var_4[var_33];
                float var_45 = (var_42 + var_44);
                var_4[var_33] = var_45;
                var_21[0] = var_24;
            }
            long long int var_46 = var_21[0];
            var_9[0] = var_12;
        }
        long long int var_47 = var_9[0];
    }
    __device__ char method_7(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 16);
    }
    __device__ char method_8(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 32);
    }
    __device__ char method_10(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 512);
    }
    __device__ char method_12(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 512);
    }
    __device__ char method_17(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 32);
    }
    __device__ char method_18(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_19(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: ManagedCuda.BasicTypes.CUdeviceptr
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: (Union0 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: EnvStack2
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (Union0 ref))): ManagedCuda.BasicTypes.CUdeviceptr =
    let (var_1: Union0) = (!var_0)
    match var_1 with
    | Union0Case0(var_2) ->
        var_2.mem_0
    | Union0Case1 ->
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
and method_2((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64)): EnvStack2 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env3) = var_1.Peek()
        let (var_7: EnvStack2) = var_6.mem_0
        let (var_8: int64) = var_6.mem_1
        let (var_9: (Union0 ref)) = var_7.mem_0
        let (var_10: Union0) = (!var_9)
        match var_10 with
        | Union0Case0(var_11) ->
            let (var_12: ManagedCuda.BasicTypes.CUdeviceptr) = var_11.mem_0
            method_3((var_12: ManagedCuda.BasicTypes.CUdeviceptr), (var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>), (var_7: EnvStack2), (var_8: int64))
        | Union0Case1 ->
            let (var_14: Env3) = var_1.Pop()
            let (var_15: EnvStack2) = var_14.mem_0
            let (var_16: int64) = var_14.mem_1
            method_2((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64))
    else
        method_4((var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>))
and method_5((var_0: ManagedCuda.CudaBlas.CudaBlasHandle), (var_1: EnvStack2), (var_2: EnvStack2), (var_3: EnvStack2)): unit =
    let (var_4: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_5: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_6: (float32 ref)) = (ref 1.000000f)
    let (var_7: (Union0 ref)) = var_1.mem_0
    let (var_8: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_7: (Union0 ref)))
    let (var_9: (Union0 ref)) = var_2.mem_0
    let (var_10: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_9: (Union0 ref)))
    let (var_11: (float32 ref)) = (ref 0.000000f)
    let (var_12: (Union0 ref)) = var_3.mem_0
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_12: (Union0 ref)))
    let (var_14: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_0, var_4, var_5, 16, 32, 6, var_6, var_8, 16, var_10, 6, var_11, var_13, 16)
    if var_14 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_14)
and method_13((var_0: (float32 [])), (var_1: float32), (var_2: int64)): float32 =
    let (var_3: bool) = (var_2 < 4L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: float32) = var_0.[int32 var_2]
        let (var_7: float32) = (var_1 + var_6)
        let (var_8: int64) = (var_2 + 1L)
        method_13((var_0: (float32 [])), (var_7: float32), (var_8: int64))
    else
        var_1
and method_21((var_0: ManagedCuda.CudaBlas.CudaBlasHandle), (var_1: EnvStack2), (var_2: EnvStack2), (var_3: EnvStack2)): unit =
    let (var_4: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_5: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_6: (float32 ref)) = (ref 1.000000f)
    let (var_7: (Union0 ref)) = var_1.mem_0
    let (var_8: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_7: (Union0 ref)))
    let (var_9: (Union0 ref)) = var_2.mem_0
    let (var_10: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_9: (Union0 ref)))
    let (var_11: (float32 ref)) = (ref 1.000000f)
    let (var_12: (Union0 ref)) = var_3.mem_0
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_12: (Union0 ref)))
    let (var_14: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_0, var_4, var_5, 16, 6, 32, var_6, var_8, 16, var_10, 6, var_11, var_13, 16)
    if var_14 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_14)
and method_22((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64)): unit =
    let (var_10: int64) = (var_9 - var_8)
    let (var_11: bool) = (var_10 > 0L)
    let (var_12: bool) = (var_11 = false)
    if var_12 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_13: int64) = (var_10 * var_7)
    let (var_14: bool) = (var_6 = 0L)
    let (var_15: bool) = (var_14 = false)
    if var_15 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_16: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_10))
    let (var_17: (Union0 ref)) = var_5.mem_0
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_17: (Union0 ref)))
    var_0.CopyToHost(var_16, var_18)
    let (var_19: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_20: string) = ""
    let (var_21: int64) = 0L
    let (var_22: int64) = 0L
    method_23((var_19: System.Text.StringBuilder), (var_22: int64))
    let (var_23: System.Text.StringBuilder) = var_19.Append("[|")
    let (var_24: int64) = method_24((var_19: System.Text.StringBuilder), (var_16: (float32 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_20: string), (var_21: int64))
    let (var_25: System.Text.StringBuilder) = var_19.AppendLine("|]")
    let (var_26: string) = var_19.ToString()
    let (var_27: string) = System.String.Format("{0}",var_26)
    System.Console.WriteLine(var_27)
and method_26((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64)): unit =
    let (var_14: int64) = (var_11 - var_10)
    let (var_15: int64) = (var_13 - var_12)
    let (var_16: int64) = (var_14 * var_15)
    let (var_17: bool) = (var_14 > 0L)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_19: bool) = (var_15 > 0L)
    let (var_20: bool) = (var_19 = false)
    if var_20 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_21: bool) = (0L = var_7)
    let (var_22: bool) = (var_21 = false)
    if var_22 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_23: int64) = (var_15 * var_9)
    let (var_24: int64) = (var_14 * var_23)
    let (var_25: bool) = (var_6 = 0L)
    let (var_26: bool) = (var_25 = false)
    if var_26 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_27: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_16))
    let (var_28: (Union0 ref)) = var_5.mem_0
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_28: (Union0 ref)))
    var_0.CopyToHost(var_27, var_29)
    let (var_30: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_31: string) = ""
    let (var_32: int64) = 0L
    let (var_33: int64) = 0L
    method_23((var_30: System.Text.StringBuilder), (var_33: int64))
    let (var_34: System.Text.StringBuilder) = var_30.AppendLine("[|")
    let (var_35: int64) = method_27((var_30: System.Text.StringBuilder), (var_31: string), (var_27: (float32 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_32: int64))
    let (var_36: int64) = 0L
    method_23((var_30: System.Text.StringBuilder), (var_36: int64))
    let (var_37: System.Text.StringBuilder) = var_30.AppendLine("|]")
    let (var_38: string) = var_30.ToString()
    let (var_39: string) = System.String.Format("{0}",var_38)
    System.Console.WriteLine(var_39)
and method_3((var_0: ManagedCuda.BasicTypes.CUdeviceptr), (var_1: uint64), (var_2: uint64), (var_3: int64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64)): EnvStack2 =
    let (var_7: ManagedCuda.BasicTypes.SizeT) = var_0.Pointer
    let (var_8: uint64) = uint64 var_7
    let (var_9: uint64) = uint64 var_6
    let (var_10: int64) = (var_3 % 256L)
    let (var_11: int64) = (var_3 - var_10)
    let (var_12: int64) = (var_11 + 256L)
    let (var_13: uint64) = (var_8 + var_9)
    let (var_14: uint64) = (var_1 + var_2)
    let (var_15: uint64) = uint64 var_12
    let (var_16: uint64) = (var_14 - var_13)
    let (var_17: bool) = (var_15 <= var_16)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_20))))
    let (var_22: EnvStack2) = EnvStack2((var_21: (Union0 ref)))
    var_4.Push((Env3(var_22, var_12)))
    var_22
and method_4((var_0: uint64), (var_1: uint64), (var_2: int64), (var_3: System.Collections.Generic.Stack<Env3>)): EnvStack2 =
    let (var_4: int64) = (var_2 % 256L)
    let (var_5: int64) = (var_2 - var_4)
    let (var_6: int64) = (var_5 + 256L)
    let (var_7: uint64) = (var_0 + var_1)
    let (var_8: uint64) = uint64 var_6
    let (var_9: uint64) = (var_7 - var_0)
    let (var_10: bool) = (var_8 <= var_9)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_12: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_0)
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_12)
    let (var_14: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_13))))
    let (var_15: EnvStack2) = EnvStack2((var_14: (Union0 ref)))
    var_3.Push((Env3(var_15, var_6)))
    var_15
and method_23((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_23((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_24((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64)): int64 =
    let (var_8: bool) = (var_4 < var_5)
    if var_8 then
        let (var_9: bool) = (var_7 < 1000L)
        if var_9 then
            let (var_10: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_11: bool) = (var_4 >= var_4)
            let (var_12: bool) = (var_11 = false)
            if var_12 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_13: float32) = var_1.[int32 var_2]
            let (var_14: string) = System.String.Format("{0}",var_13)
            let (var_15: System.Text.StringBuilder) = var_0.Append(var_14)
            let (var_16: string) = "; "
            let (var_17: int64) = (var_7 + 1L)
            let (var_18: int64) = (var_4 + 1L)
            method_25((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_16: string), (var_17: int64), (var_18: int64))
        else
            let (var_20: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
and method_27((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_7 < var_8)
    if var_12 then
        let (var_13: bool) = (var_11 < 1000L)
        if var_13 then
            let (var_14: bool) = (var_7 >= var_7)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = (var_3 + var_4)
            let (var_17: int64) = 0L
            method_28((var_0: System.Text.StringBuilder), (var_17: int64))
            let (var_18: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_19: int64) = method_24((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_16: int64), (var_6: int64), (var_9: int64), (var_10: int64), (var_1: string), (var_11: int64))
            let (var_20: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_21: int64) = (var_7 + 1L)
            method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_19: int64), (var_21: int64))
        else
            let (var_23: int64) = 0L
            method_23((var_0: System.Text.StringBuilder), (var_23: int64))
            let (var_24: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_11
    else
        var_11
and method_25((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): int64 =
    let (var_9: bool) = (var_8 < var_5)
    if var_9 then
        let (var_10: bool) = (var_7 < 1000L)
        if var_10 then
            let (var_11: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_12: bool) = (var_8 >= var_4)
            let (var_13: bool) = (var_12 = false)
            if var_13 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_14: int64) = (var_8 - var_4)
            let (var_15: int64) = (var_14 * var_3)
            let (var_16: int64) = (var_2 + var_15)
            let (var_17: float32) = var_1.[int32 var_16]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_18)
            let (var_20: string) = "; "
            let (var_21: int64) = (var_7 + 1L)
            let (var_22: int64) = (var_8 + 1L)
            method_25((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_20: string), (var_21: int64), (var_22: int64))
        else
            let (var_24: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
and method_28((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_28((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64)): int64 =
    let (var_13: bool) = (var_12 < var_8)
    if var_13 then
        let (var_14: bool) = (var_11 < 1000L)
        if var_14 then
            let (var_15: bool) = (var_12 >= var_7)
            let (var_16: bool) = (var_15 = false)
            if var_16 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_17: int64) = (var_12 - var_7)
            let (var_18: int64) = (var_17 * var_5)
            let (var_19: int64) = (var_3 + var_18)
            let (var_20: int64) = (var_19 + var_4)
            let (var_21: int64) = 0L
            method_28((var_0: System.Text.StringBuilder), (var_21: int64))
            let (var_22: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_23: int64) = method_24((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_20: int64), (var_6: int64), (var_9: int64), (var_10: int64), (var_1: string), (var_11: int64))
            let (var_24: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_25: int64) = (var_12 + 1L)
            method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_23: int64), (var_25: int64))
        else
            let (var_27: int64) = 0L
            method_23((var_0: System.Text.StringBuilder), (var_27: int64))
            let (var_28: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_11
    else
        var_11
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.CudaDeviceProperties) = var_1.GetDeviceInfo()
let (var_36: ManagedCuda.BasicTypes.SizeT) = var_35.get_TotalGlobalMemory()
let (var_37: int64) = int64 var_36
let (var_38: float) = float var_37
let (var_39: float) = (0.700000 * var_38)
let (var_40: int64) = int64 var_39
let (var_41: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_40)
let (var_42: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_41)
let (var_43: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_42))))
let (var_44: EnvStack2) = EnvStack2((var_43: (Union0 ref)))
let (var_45: System.Collections.Generic.Stack<Env3>) = System.Collections.Generic.Stack<Env3>()
let (var_46: (Union0 ref)) = var_44.mem_0
let (var_47: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
let (var_48: ManagedCuda.BasicTypes.SizeT) = var_47.Pointer
let (var_49: uint64) = uint64 var_48
let (var_50: uint64) = uint64 var_40
let (var_51: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_52: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_53: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_52)
let (var_54: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
var_53.SetStream(var_54)
let (var_55: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_56: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_57: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_55, var_56)
let (var_58: ManagedCuda.CudaBlas.CudaBlasHandle) = var_57.get_CublasHandle()
let (var_59: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
var_57.set_Stream(var_59)
let (var_60: int64) = 768L
let (var_61: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_60: int64))
let (var_62: (Union0 ref)) = var_61.mem_0
let (var_63: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_62: (Union0 ref)))
let (var_64: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(192L)
var_53.GenerateNormal32(var_63, var_64, 0.000000f, 1.000000f)
let (var_65: int64) = 384L
let (var_66: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_65: int64))
let (var_67: (Union0 ref)) = var_66.mem_0
let (var_68: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_67: (Union0 ref)))
let (var_69: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(96L)
var_53.GenerateNormal32(var_68, var_69, 0.000000f, 1.000000f)
let (var_70: int64) = 384L
let (var_71: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_70: int64))
let (var_72: (Union0 ref)) = var_71.mem_0
let (var_73: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_72: (Union0 ref)))
let (var_74: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_75: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(384L)
var_1.ClearMemoryAsync(var_73, 0uy, var_75, var_74)
let (var_76: int64) = 64L
let (var_77: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_76: int64))
let (var_78: (Union0 ref)) = var_77.mem_0
let (var_79: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_78: (Union0 ref)))
let (var_80: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_81: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(64L)
var_1.ClearMemoryAsync(var_79, 0uy, var_81, var_80)
let (var_82: int64) = 64L
let (var_83: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_82: int64))
let (var_84: (Union0 ref)) = var_83.mem_0
let (var_85: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_84: (Union0 ref)))
let (var_86: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_87: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(64L)
var_1.ClearMemoryAsync(var_85, 0uy, var_87, var_86)
let (var_88: int64) = 2048L
let (var_89: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_88: int64))
let (var_90: (Union0 ref)) = var_89.mem_0
let (var_91: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_90: (Union0 ref)))
let (var_92: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_93: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_91, 0uy, var_93, var_92)
let (var_94: int64) = 2048L
let (var_95: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_94: int64))
method_5((var_58: ManagedCuda.CudaBlas.CudaBlasHandle), (var_66: EnvStack2), (var_61: EnvStack2), (var_95: EnvStack2))
let (var_96: int64) = 2048L
let (var_97: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_96: int64))
let (var_98: (Union0 ref)) = var_97.mem_0
let (var_99: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_98: (Union0 ref)))
let (var_100: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_101: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_99, 0uy, var_101, var_100)
let (var_103: int64) = 2048L
let (var_104: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_103: int64))
let (var_105: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_78: (Union0 ref)))
let (var_106: (Union0 ref)) = var_95.mem_0
let (var_107: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_106: (Union0 ref)))
let (var_108: (Union0 ref)) = var_104.mem_0
let (var_109: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_108: (Union0 ref)))
// Cuda join point
// method_6((var_105: ManagedCuda.BasicTypes.CUdeviceptr), (var_107: ManagedCuda.BasicTypes.CUdeviceptr), (var_109: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_110: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_6", var_32, var_1)
let (var_111: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_110.set_GridDimensions(var_111)
let (var_112: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(16u, 32u, 1u)
var_110.set_BlockDimensions(var_112)
let (var_113: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_115: (System.Object [])) = [|var_105; var_107; var_109|]: (System.Object [])
var_110.RunAsync(var_113, var_115)
let (var_116: int64) = 2048L
let (var_117: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_116: int64))
let (var_118: (Union0 ref)) = var_117.mem_0
let (var_119: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_118: (Union0 ref)))
let (var_120: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_121: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_119, 0uy, var_121, var_120)
let (var_126: int64) = 2048L
let (var_127: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_126: int64))
let (var_128: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_108: (Union0 ref)))
let (var_129: (Union0 ref)) = var_127.mem_0
let (var_130: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_129: (Union0 ref)))
// Cuda join point
// method_9((var_128: ManagedCuda.BasicTypes.CUdeviceptr), (var_130: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_131: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_9", var_32, var_1)
let (var_132: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_131.set_GridDimensions(var_132)
let (var_133: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_131.set_BlockDimensions(var_133)
let (var_134: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_136: (System.Object [])) = [|var_128; var_130|]: (System.Object [])
var_131.RunAsync(var_134, var_136)
let (var_137: int64) = 2048L
let (var_138: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_137: int64))
let (var_139: (Union0 ref)) = var_138.mem_0
let (var_140: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_139: (Union0 ref)))
let (var_141: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_142: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_140, 0uy, var_142, var_141)
let (var_143: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_129: (Union0 ref)))
let (var_144: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_90: (Union0 ref)))
let (var_147: int64) = 16L
let (var_148: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_147: int64))
let (var_149: (Union0 ref)) = var_148.mem_0
let (var_150: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_149: (Union0 ref)))
// Cuda join point
// method_11((var_143: ManagedCuda.BasicTypes.CUdeviceptr), (var_144: ManagedCuda.BasicTypes.CUdeviceptr), (var_150: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_151: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_11", var_32, var_1)
let (var_152: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_151.set_GridDimensions(var_152)
let (var_153: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_151.set_BlockDimensions(var_153)
let (var_154: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_156: (System.Object [])) = [|var_143; var_144; var_150|]: (System.Object [])
var_151.RunAsync(var_154, var_156)
let (var_157: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(4L))
let (var_158: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_149: (Union0 ref)))
var_1.CopyToHost(var_157, var_158)
let (var_159: float32) = 0.000000f
let (var_160: int64) = 0L
let (var_161: float32) = method_13((var_157: (float32 [])), (var_159: float32), (var_160: int64))
var_149 := Union0Case1
let (var_162: (float32 ref)) = (ref 0.000000f)
let (var_163: float32) = (var_161 / 32.000000f)
let (var_164: (float32 ref)) = (ref 0.000000f)
let (var_165: string) = System.String.Format("{0}",var_163)
let (var_166: string) = String.concat ", " [|"Cost is:"; var_165|]
let (var_167: string) = System.String.Format("[{0}]",var_166)
System.Console.WriteLine(var_167)
var_164 := 1.000000f
let (var_168: float32) = (!var_164)
let (var_169: float32) = (var_168 / 32.000000f)
let (var_170: float32) = (!var_162)
let (var_171: float32) = (var_170 + var_169)
var_162 := var_171
let (var_172: float32) = (!var_162)
let (var_173: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_129: (Union0 ref)))
let (var_174: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_90: (Union0 ref)))
let (var_175: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_139: (Union0 ref)))
// Cuda join point
// method_14((var_172: float32), (var_161: float32), (var_173: ManagedCuda.BasicTypes.CUdeviceptr), (var_174: ManagedCuda.BasicTypes.CUdeviceptr), (var_175: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_176: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_14", var_32, var_1)
let (var_177: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_176.set_GridDimensions(var_177)
let (var_178: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_176.set_BlockDimensions(var_178)
let (var_179: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_181: (System.Object [])) = [|var_172; var_161; var_173; var_174; var_175|]: (System.Object [])
var_176.RunAsync(var_179, var_181)
let (var_182: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_108: (Union0 ref)))
let (var_183: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_139: (Union0 ref)))
let (var_184: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_129: (Union0 ref)))
let (var_185: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_118: (Union0 ref)))
// Cuda join point
// method_15((var_182: ManagedCuda.BasicTypes.CUdeviceptr), (var_183: ManagedCuda.BasicTypes.CUdeviceptr), (var_184: ManagedCuda.BasicTypes.CUdeviceptr), (var_185: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_186: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_15", var_32, var_1)
let (var_187: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_186.set_GridDimensions(var_187)
let (var_188: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_186.set_BlockDimensions(var_188)
let (var_189: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_191: (System.Object [])) = [|var_182; var_183; var_184; var_185|]: (System.Object [])
var_186.RunAsync(var_189, var_191)
let (var_192: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_106: (Union0 ref)))
let (var_193: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_118: (Union0 ref)))
let (var_194: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_108: (Union0 ref)))
let (var_195: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_78: (Union0 ref)))
let (var_196: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_84: (Union0 ref)))
// Cuda join point
// method_16((var_192: ManagedCuda.BasicTypes.CUdeviceptr), (var_193: ManagedCuda.BasicTypes.CUdeviceptr), (var_194: ManagedCuda.BasicTypes.CUdeviceptr), (var_195: ManagedCuda.BasicTypes.CUdeviceptr), (var_196: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_197: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_16", var_32, var_1)
let (var_198: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_197.set_GridDimensions(var_198)
let (var_199: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(16u, 32u, 1u)
var_197.set_BlockDimensions(var_199)
let (var_200: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_202: (System.Object [])) = [|var_192; var_193; var_194; var_195; var_196|]: (System.Object [])
var_197.RunAsync(var_200, var_202)
let (var_203: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_78: (Union0 ref)))
let (var_204: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_106: (Union0 ref)))
let (var_205: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_118: (Union0 ref)))
let (var_206: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_108: (Union0 ref)))
let (var_207: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_98: (Union0 ref)))
// Cuda join point
// method_20((var_203: ManagedCuda.BasicTypes.CUdeviceptr), (var_204: ManagedCuda.BasicTypes.CUdeviceptr), (var_205: ManagedCuda.BasicTypes.CUdeviceptr), (var_206: ManagedCuda.BasicTypes.CUdeviceptr), (var_207: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_208: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_20", var_32, var_1)
let (var_209: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_208.set_GridDimensions(var_209)
let (var_210: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(16u, 32u, 1u)
var_208.set_BlockDimensions(var_210)
let (var_211: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_213: (System.Object [])) = [|var_203; var_204; var_205; var_206; var_207|]: (System.Object [])
var_208.RunAsync(var_211, var_213)
method_21((var_58: ManagedCuda.CudaBlas.CudaBlasHandle), (var_97: EnvStack2), (var_61: EnvStack2), (var_71: EnvStack2))
let (var_214: int64) = 0L
let (var_215: int64) = 1L
let (var_216: int64) = 0L
let (var_217: int64) = 16L
method_22((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_83: EnvStack2), (var_214: int64), (var_215: int64), (var_216: int64), (var_217: int64))
let (var_218: int64) = 0L
let (var_219: int64) = 0L
let (var_220: int64) = 16L
let (var_221: int64) = 1L
let (var_222: int64) = 0L
let (var_223: int64) = 6L
let (var_224: int64) = 0L
let (var_225: int64) = 16L
method_26((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_71: EnvStack2), (var_218: int64), (var_219: int64), (var_220: int64), (var_221: int64), (var_222: int64), (var_223: int64), (var_224: int64), (var_225: int64))
var_139 := Union0Case1
var_129 := Union0Case1
var_118 := Union0Case1
var_108 := Union0Case1
var_98 := Union0Case1
var_106 := Union0Case1
var_90 := Union0Case1
var_84 := Union0Case1
var_78 := Union0Case1
var_72 := Union0Case1
var_67 := Union0Case1
var_62 := Union0Case1
var_57.Dispose()
var_53.Dispose()
var_51.Dispose()
let (var_226: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
var_1.FreeMemory(var_226)
var_46 := Union0Case1
var_1.Dispose()

