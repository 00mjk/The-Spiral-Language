module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_6(float * var_0, float * var_1, float * var_2);
    __global__ void method_9(float * var_0, float * var_1);
    __global__ void method_11(float * var_0, float * var_1, float * var_2);
    __global__ void method_15(float var_0, float var_1, float * var_2, float * var_3, float * var_4);
    __global__ void method_16(float * var_0, float * var_1, float * var_2, float * var_3);
    __global__ void method_17(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4);
    __global__ void method_21(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4);
    __device__ char method_7(long long int * var_0);
    __device__ char method_8(long long int * var_0);
    __device__ char method_10(long long int * var_0);
    __device__ char method_12(long long int * var_0, float * var_1);
    __device__ char method_18(long long int * var_0, float * var_1);
    __device__ char method_19(long long int * var_0, float * var_1);
    __device__ char method_20(long long int var_0, long long int * var_1, float * var_2);
    
    __global__ void method_6(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (16 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_7(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 16);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_14 = threadIdx.y;
            long long int var_15 = blockIdx.y;
            long long int var_16 = (32 * var_15);
            long long int var_17 = (var_14 + var_16);
            long long int var_18[1];
            var_18[0] = var_17;
            while (method_8(var_18)) {
                long long int var_20 = var_18[0];
                char var_21 = (var_20 >= 0);
                char var_23;
                if (var_21) {
                    var_23 = (var_20 < 32);
                } else {
                    var_23 = 0;
                }
                char var_24 = (var_23 == 0);
                if (var_24) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_25 = (var_20 * 16);
                char var_27;
                if (var_10) {
                    var_27 = (var_9 < 16);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_29 = (var_25 + var_9);
                char var_31;
                if (var_21) {
                    var_31 = (var_20 < 32);
                } else {
                    var_31 = 0;
                }
                char var_32 = (var_31 == 0);
                if (var_32) {
                    // "Argument out of bounds."
                } else {
                }
                char var_34;
                if (var_10) {
                    var_34 = (var_9 < 16);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                float var_36 = var_0[var_9];
                float var_37 = var_1[var_29];
                float var_38 = var_2[var_29];
                float var_39 = (var_36 + var_37);
                var_2[var_29] = var_39;
                long long int var_40 = (var_20 + 32);
                var_18[0] = var_40;
            }
            long long int var_41 = var_18[0];
            long long int var_42 = (var_9 + 16);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_9(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_10(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 512);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 512);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (-var_16);
            float var_19 = exp(var_18);
            float var_20 = (1 + var_19);
            float var_21 = (1 / var_20);
            var_1[var_8] = var_21;
            long long int var_22 = (var_8 + 512);
            var_6[0] = var_22;
        }
        long long int var_23 = var_6[0];
    }
    __global__ void method_11(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (256 * var_4);
        long long int var_6 = (var_3 + var_5);
        float var_7 = 0;
        long long int var_8[1];
        float var_9[1];
        var_8[0] = var_6;
        var_9[0] = var_7;
        while (method_12(var_8, var_9)) {
            long long int var_11 = var_8[0];
            float var_12 = var_9[0];
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 512);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_0[var_11];
            float var_18 = var_1[var_11];
            float var_19 = (var_18 - var_17);
            float var_20 = (var_19 * var_19);
            float var_21 = (var_12 + var_20);
            long long int var_22 = (var_11 + 512);
            var_8[0] = var_22;
            var_9[0] = var_21;
        }
        long long int var_23 = var_8[0];
        float var_24 = var_9[0];
        float var_25 = cub::BlockReduce<float,256,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_24);
        long long int var_26 = threadIdx.x;
        char var_27 = (var_26 == 0);
        if (var_27) {
            long long int var_28 = blockIdx.x;
            char var_29 = (var_28 >= 0);
            char var_31;
            if (var_29) {
                var_31 = (var_28 < 2);
            } else {
                var_31 = 0;
            }
            char var_32 = (var_31 == 0);
            if (var_32) {
                // "Argument out of bounds."
            } else {
            }
            var_2[var_28] = var_25;
        } else {
        }
    }
    __global__ void method_15(float var_0, float var_1, float * var_2, float * var_3, float * var_4) {
        long long int var_5 = threadIdx.x;
        long long int var_6 = blockIdx.x;
        long long int var_7 = (128 * var_6);
        long long int var_8 = (var_5 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_10(var_9)) {
            long long int var_11 = var_9[0];
            char var_12 = (var_11 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_11 < 512);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            char var_17;
            if (var_12) {
                var_17 = (var_11 < 512);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            float var_19 = var_2[var_11];
            float var_20 = var_3[var_11];
            float var_21 = var_4[var_11];
            float var_22 = (var_19 - var_20);
            float var_23 = (2 * var_22);
            float var_24 = (var_0 * var_23);
            float var_25 = (var_21 + var_24);
            var_4[var_11] = var_25;
            long long int var_26 = (var_11 + 512);
            var_9[0] = var_26;
        }
        long long int var_27 = var_9[0];
    }
    __global__ void method_16(float * var_0, float * var_1, float * var_2, float * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (128 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_10(var_8)) {
            long long int var_10 = var_8[0];
            char var_11 = (var_10 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_10 < 512);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            char var_16;
            if (var_11) {
                var_16 = (var_10 < 512);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            float var_18 = var_0[var_10];
            float var_19 = var_1[var_10];
            float var_20 = var_2[var_10];
            float var_21 = var_3[var_10];
            float var_22 = (1 - var_20);
            float var_23 = (var_20 * var_22);
            float var_24 = (var_19 * var_23);
            float var_25 = (var_21 + var_24);
            var_3[var_10] = var_25;
            long long int var_26 = (var_10 + 512);
            var_8[0] = var_26;
        }
        long long int var_27 = var_8[0];
    }
    __global__ void method_17(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4) {
        long long int var_5 = threadIdx.x;
        long long int var_6 = blockIdx.x;
        long long int var_7 = (16 * var_6);
        long long int var_8 = (var_5 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_7(var_9)) {
            long long int var_11 = var_9[0];
            char var_12 = (var_11 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_11 < 16);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            char var_17;
            if (var_12) {
                var_17 = (var_11 < 16);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_19 = threadIdx.y;
            long long int var_20 = blockIdx.y;
            long long int var_21 = (32 * var_20);
            long long int var_22 = (var_19 + var_21);
            float var_23 = 0;
            long long int var_24[1];
            float var_25[1];
            var_24[0] = var_22;
            var_25[0] = var_23;
            while (method_18(var_24, var_25)) {
                long long int var_27 = var_24[0];
                float var_28 = var_25[0];
                char var_29 = (var_27 >= 0);
                char var_31;
                if (var_29) {
                    var_31 = (var_27 < 32);
                } else {
                    var_31 = 0;
                }
                char var_32 = (var_31 == 0);
                if (var_32) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_33 = (var_27 * 16);
                char var_35;
                if (var_12) {
                    var_35 = (var_11 < 16);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_37 = (var_33 + var_11);
                float var_38 = var_0[var_37];
                float var_39 = var_1[var_37];
                float var_40 = var_2[var_37];
                float var_41 = var_3[var_11];
                float var_42 = (var_28 + var_39);
                long long int var_43 = (var_27 + 32);
                var_24[0] = var_43;
                var_25[0] = var_42;
            }
            long long int var_44 = var_24[0];
            float var_45 = var_25[0];
            __shared__ float var_46[496];
            long long int var_47[1];
            float var_48[1];
            var_47[0] = 32;
            var_48[0] = var_45;
            while (method_19(var_47, var_48)) {
                long long int var_50 = var_47[0];
                float var_51 = var_48[0];
                long long int var_52 = (var_50 / 2);
                long long int var_53 = threadIdx.y;
                char var_54 = (var_53 < var_50);
                char var_57;
                if (var_54) {
                    long long int var_55 = threadIdx.y;
                    var_57 = (var_55 >= var_52);
                } else {
                    var_57 = 0;
                }
                if (var_57) {
                    long long int var_58 = threadIdx.y;
                    char var_59 = (var_58 >= 1);
                    char var_61;
                    if (var_59) {
                        var_61 = (var_58 < 32);
                    } else {
                        var_61 = 0;
                    }
                    char var_62 = (var_61 == 0);
                    if (var_62) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_63 = (var_58 - 1);
                    long long int var_64 = (var_63 * 16);
                    long long int var_65 = threadIdx.x;
                    char var_66 = (var_65 >= 0);
                    char var_68;
                    if (var_66) {
                        var_68 = (var_65 < 16);
                    } else {
                        var_68 = 0;
                    }
                    char var_69 = (var_68 == 0);
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_70 = (var_64 + var_65);
                    var_46[var_70] = var_51;
                } else {
                }
                __syncthreads();
                long long int var_71 = threadIdx.y;
                char var_72 = (var_71 < var_52);
                float var_97;
                if (var_72) {
                    long long int var_73 = threadIdx.y;
                    long long int var_74 = (var_73 + var_52);
                    long long int var_75[1];
                    float var_76[1];
                    var_75[0] = var_74;
                    var_76[0] = var_51;
                    while (method_20(var_50, var_75, var_76)) {
                        long long int var_78 = var_75[0];
                        float var_79 = var_76[0];
                        char var_80 = (var_78 >= 1);
                        char var_82;
                        if (var_80) {
                            var_82 = (var_78 < 32);
                        } else {
                            var_82 = 0;
                        }
                        char var_83 = (var_82 == 0);
                        if (var_83) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_84 = (var_78 - 1);
                        long long int var_85 = (var_84 * 16);
                        long long int var_86 = threadIdx.x;
                        char var_87 = (var_86 >= 0);
                        char var_89;
                        if (var_87) {
                            var_89 = (var_86 < 16);
                        } else {
                            var_89 = 0;
                        }
                        char var_90 = (var_89 == 0);
                        if (var_90) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_91 = (var_85 + var_86);
                        float var_92 = var_46[var_91];
                        float var_93 = (var_79 + var_92);
                        long long int var_94 = (var_78 + var_52);
                        var_75[0] = var_94;
                        var_76[0] = var_93;
                    }
                    long long int var_95 = var_75[0];
                    var_97 = var_76[0];
                } else {
                    var_97 = var_51;
                }
                var_47[0] = var_52;
                var_48[0] = var_97;
            }
            long long int var_98 = var_47[0];
            float var_99 = var_48[0];
            long long int var_100 = threadIdx.y;
            char var_101 = (var_100 == 0);
            if (var_101) {
                float var_102 = var_4[var_11];
                float var_103 = (var_99 + var_102);
                var_4[var_11] = var_103;
            } else {
            }
            long long int var_104 = (var_11 + 16);
            var_9[0] = var_104;
        }
        long long int var_105 = var_9[0];
    }
    __global__ void method_21(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4) {
        long long int var_5 = threadIdx.x;
        long long int var_6 = blockIdx.x;
        long long int var_7 = (16 * var_6);
        long long int var_8 = (var_5 + var_7);
        long long int var_9[1];
        var_9[0] = var_8;
        while (method_7(var_9)) {
            long long int var_11 = var_9[0];
            char var_12 = (var_11 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_11 < 16);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            long long int var_20[1];
            var_20[0] = var_19;
            while (method_8(var_20)) {
                long long int var_22 = var_20[0];
                char var_23 = (var_22 >= 0);
                char var_25;
                if (var_23) {
                    var_25 = (var_22 < 32);
                } else {
                    var_25 = 0;
                }
                char var_26 = (var_25 == 0);
                if (var_26) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_27 = (var_22 * 16);
                char var_29;
                if (var_12) {
                    var_29 = (var_11 < 16);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_27 + var_11);
                char var_33;
                if (var_23) {
                    var_33 = (var_22 < 32);
                } else {
                    var_33 = 0;
                }
                char var_34 = (var_33 == 0);
                if (var_34) {
                    // "Argument out of bounds."
                } else {
                }
                char var_36;
                if (var_12) {
                    var_36 = (var_11 < 16);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                float var_38 = var_0[var_11];
                float var_39 = var_1[var_31];
                float var_40 = var_2[var_31];
                float var_41 = var_3[var_31];
                float var_42 = var_4[var_31];
                float var_43 = (var_40 + var_42);
                var_4[var_31] = var_43;
                long long int var_44 = (var_22 + 32);
                var_20[0] = var_44;
            }
            long long int var_45 = var_20[0];
            long long int var_46 = (var_11 + 16);
            var_9[0] = var_46;
        }
        long long int var_47 = var_9[0];
    }
    __device__ char method_7(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 16);
    }
    __device__ char method_8(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 32);
    }
    __device__ char method_10(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 512);
    }
    __device__ char method_12(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 512);
    }
    __device__ char method_18(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 32);
    }
    __device__ char method_19(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_20(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
}
"""

type EnvStack0 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env1 =
    struct
    val mem_0: EnvStack0
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: EnvStack0
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_2((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env1>), (var_2: uint64), (var_3: uint64)): EnvStack0 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env1) = var_1.Peek()
        let (var_7: EnvStack0) = var_6.mem_0
        let (var_8: uint64) = var_6.mem_1
        let (var_9: (uint64 ref)) = var_7.mem_0
        let (var_10: uint64) = (!var_9)
        let (var_11: bool) = (var_10 = 0UL)
        if var_11 then
            let (var_12: Env1) = var_1.Pop()
            let (var_13: EnvStack0) = var_12.mem_0
            let (var_14: uint64) = var_12.mem_1
            method_2((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env1>), (var_2: uint64), (var_3: uint64))
        else
            method_3((var_10: uint64), (var_0: uint64), (var_2: uint64), (var_3: uint64), (var_1: System.Collections.Generic.Stack<Env1>), (var_8: uint64))
    else
        method_4((var_0: uint64), (var_2: uint64), (var_3: uint64), (var_1: System.Collections.Generic.Stack<Env1>))
and method_5((var_0: ManagedCuda.CudaBlas.CudaBlasHandle), (var_1: EnvStack2), (var_2: EnvStack2), (var_3: EnvStack2)): unit =
    let (var_4: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_5: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_6: (float32 ref)) = (ref 1.000000f)
    let (var_7: EnvStack0) = var_1.mem_0
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_1((var_8: (uint64 ref)))
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_9)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    let (var_12: EnvStack0) = var_2.mem_0
    let (var_13: (uint64 ref)) = var_12.mem_0
    let (var_14: uint64) = method_1((var_13: (uint64 ref)))
    let (var_15: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_16: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_15)
    let (var_17: (float32 ref)) = (ref 0.000000f)
    let (var_18: EnvStack0) = var_3.mem_0
    let (var_19: (uint64 ref)) = var_18.mem_0
    let (var_20: uint64) = method_1((var_19: (uint64 ref)))
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_20)
    let (var_22: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_21)
    let (var_23: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_0, var_4, var_5, 16, 32, 6, var_6, var_11, 16, var_16, 6, var_17, var_22, 16)
    if var_23 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_23)
and method_13((var_0: int64), (var_1: EnvStack2), (var_2: int64), (var_3: int64)): (float32 []) =
    let (var_4: EnvStack0) = var_1.mem_0
    let (var_5: int64) = (var_0 * var_3)
    let (var_6: (uint64 ref)) = var_4.mem_0
    let (var_7: uint64) = method_1((var_6: (uint64 ref)))
    let (var_8: int64) = (var_2 * 4L)
    let (var_9: uint64) = (uint64 var_8)
    let (var_10: uint64) = (var_7 + var_9)
    let (var_11: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_5))
    let (var_12: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_11,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_13: int64) = var_12.AddrOfPinnedObject().ToInt64()
    let (var_14: uint64) = (uint64 var_13)
    let (var_15: int64) = (var_5 * 4L)
    let (var_16: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_17: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_16)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_10)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_15)
    let (var_21: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_17, var_19, var_20)
    if var_21 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_21)
    var_12.Free()
    var_11
and method_14((var_0: (float32 [])), (var_1: float32), (var_2: int64)): float32 =
    let (var_3: bool) = (var_2 < 2L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: float32) = var_0.[int32 var_2]
        let (var_7: float32) = (var_1 + var_6)
        let (var_8: int64) = (var_2 + 1L)
        method_14((var_0: (float32 [])), (var_7: float32), (var_8: int64))
    else
        var_1
and method_22((var_0: ManagedCuda.CudaBlas.CudaBlasHandle), (var_1: EnvStack2), (var_2: EnvStack2), (var_3: EnvStack2)): unit =
    let (var_4: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_5: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_6: (float32 ref)) = (ref 1.000000f)
    let (var_7: EnvStack0) = var_1.mem_0
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_1((var_8: (uint64 ref)))
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_9)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    let (var_12: EnvStack0) = var_2.mem_0
    let (var_13: (uint64 ref)) = var_12.mem_0
    let (var_14: uint64) = method_1((var_13: (uint64 ref)))
    let (var_15: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_16: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_15)
    let (var_17: (float32 ref)) = (ref 1.000000f)
    let (var_18: EnvStack0) = var_3.mem_0
    let (var_19: (uint64 ref)) = var_18.mem_0
    let (var_20: uint64) = method_1((var_19: (uint64 ref)))
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_20)
    let (var_22: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_21)
    let (var_23: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_0, var_4, var_5, 16, 6, 32, var_6, var_11, 16, var_16, 6, var_17, var_22, 16)
    if var_23 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_23)
and method_23((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64)): unit =
    let (var_10: int64) = (var_9 - var_8)
    let (var_11: bool) = (var_10 > 0L)
    let (var_12: bool) = (var_11 = false)
    if var_12 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_13: (float32 [])) = method_13((var_10: int64), (var_5: EnvStack2), (var_6: int64), (var_7: int64))
    let (var_14: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_15: string) = ""
    let (var_16: int64) = 0L
    let (var_17: int64) = 0L
    method_24((var_14: System.Text.StringBuilder), (var_17: int64))
    let (var_18: System.Text.StringBuilder) = var_14.Append("[|")
    let (var_19: int64) = method_25((var_14: System.Text.StringBuilder), (var_13: (float32 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_15: string), (var_16: int64))
    let (var_20: System.Text.StringBuilder) = var_14.AppendLine("|]")
    let (var_21: string) = var_14.ToString()
    let (var_22: string) = System.String.Format("{0}",var_21)
    System.Console.WriteLine(var_22)
and method_27((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64)): unit =
    let (var_13: int64) = (var_10 - var_9)
    let (var_14: int64) = (var_12 - var_11)
    let (var_15: int64) = (var_13 * var_14)
    let (var_16: bool) = (var_15 > 0L)
    let (var_17: bool) = (var_16 = false)
    if var_17 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_18: int64) = (var_14 * var_8)
    let (var_19: bool) = (var_7 = var_18)
    let (var_20: bool) = (var_19 = false)
    if var_20 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_21: int64) = (var_13 * var_7)
    let (var_22: (float32 [])) = method_28((var_13: int64), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64))
    let (var_23: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_24: string) = ""
    let (var_25: int64) = 0L
    let (var_26: int64) = 0L
    method_24((var_23: System.Text.StringBuilder), (var_26: int64))
    let (var_27: System.Text.StringBuilder) = var_23.AppendLine("[|")
    let (var_28: int64) = method_29((var_23: System.Text.StringBuilder), (var_24: string), (var_22: (float32 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_25: int64))
    let (var_29: int64) = 0L
    method_24((var_23: System.Text.StringBuilder), (var_29: int64))
    let (var_30: System.Text.StringBuilder) = var_23.AppendLine("|]")
    let (var_31: string) = var_23.ToString()
    let (var_32: string) = System.String.Format("{0}",var_31)
    System.Console.WriteLine(var_32)
and method_3((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env1>), (var_5: uint64)): EnvStack0 =
    let (var_6: uint64) = (var_0 + var_5)
    let (var_7: uint64) = (var_1 + var_2)
    let (var_8: uint64) = (var_7 - var_6)
    let (var_9: bool) = (var_3 <= var_8)
    let (var_10: bool) = (var_9 = false)
    if var_10 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_11: (uint64 ref)) = (ref var_6)
    let (var_12: EnvStack0) = EnvStack0((var_11: (uint64 ref)))
    var_4.Push((Env1(var_12, var_3)))
    var_12
and method_4((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: System.Collections.Generic.Stack<Env1>)): EnvStack0 =
    let (var_4: uint64) = (var_0 + var_1)
    let (var_5: uint64) = (var_4 - var_0)
    let (var_6: bool) = (var_2 <= var_5)
    let (var_7: bool) = (var_6 = false)
    if var_7 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_8: (uint64 ref)) = (ref var_0)
    let (var_9: EnvStack0) = EnvStack0((var_8: (uint64 ref)))
    var_3.Push((Env1(var_9, var_2)))
    var_9
and method_24((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_24((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_25((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64)): int64 =
    let (var_8: bool) = (var_4 < var_5)
    if var_8 then
        let (var_9: bool) = (var_7 < 1000L)
        if var_9 then
            let (var_10: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_11: bool) = (var_4 >= var_4)
            let (var_12: bool) = (var_11 = false)
            if var_12 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_13: float32) = var_1.[int32 var_2]
            let (var_14: string) = System.String.Format("{0}",var_13)
            let (var_15: System.Text.StringBuilder) = var_0.Append(var_14)
            let (var_16: string) = "; "
            let (var_17: int64) = (var_7 + 1L)
            let (var_18: int64) = (var_4 + 1L)
            method_26((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_16: string), (var_17: int64), (var_18: int64))
        else
            let (var_20: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
and method_28((var_0: int64), (var_1: EnvStack2), (var_2: int64), (var_3: int64), (var_4: int64)): (float32 []) =
    let (var_5: EnvStack0) = var_1.mem_0
    let (var_6: int64) = (var_0 * var_3)
    let (var_7: (uint64 ref)) = var_5.mem_0
    let (var_8: uint64) = method_1((var_7: (uint64 ref)))
    let (var_9: int64) = (var_2 * 4L)
    let (var_10: uint64) = (uint64 var_9)
    let (var_11: uint64) = (var_8 + var_10)
    let (var_12: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_6))
    let (var_13: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_12,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_14: int64) = var_13.AddrOfPinnedObject().ToInt64()
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: int64) = (var_6 * 4L)
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_15)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_11)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_22: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.SynchronousMemcpy_v2.cuMemcpy(var_18, var_20, var_21)
    if var_22 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_22)
    var_13.Free()
    var_12
and method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64)): int64 =
    let (var_11: bool) = (var_6 < var_7)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: bool) = (var_6 >= var_6)
            let (var_14: bool) = (var_13 = false)
            if var_14 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_15: int64) = 0L
            method_30((var_0: System.Text.StringBuilder), (var_15: int64))
            let (var_16: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_17: int64) = method_25((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_3: int64), (var_5: int64), (var_8: int64), (var_9: int64), (var_1: string), (var_10: int64))
            let (var_18: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_19: int64) = (var_6 + 1L)
            method_31((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_17: int64), (var_19: int64))
        else
            let (var_21: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_21: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
and method_26((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): int64 =
    let (var_9: bool) = (var_8 < var_5)
    if var_9 then
        let (var_10: bool) = (var_7 < 1000L)
        if var_10 then
            let (var_11: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_12: bool) = (var_8 >= var_4)
            let (var_13: bool) = (var_12 = false)
            if var_13 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_14: int64) = (var_8 - var_4)
            let (var_15: int64) = (var_14 * var_3)
            let (var_16: int64) = (var_2 + var_15)
            let (var_17: float32) = var_1.[int32 var_16]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_18)
            let (var_20: string) = "; "
            let (var_21: int64) = (var_7 + 1L)
            let (var_22: int64) = (var_8 + 1L)
            method_26((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_20: string), (var_21: int64), (var_22: int64))
        else
            let (var_24: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
and method_30((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_30((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_31((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_7)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: bool) = (var_11 >= var_6)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = (var_11 - var_6)
            let (var_17: int64) = (var_16 * var_4)
            let (var_18: int64) = (var_3 + var_17)
            let (var_19: int64) = 0L
            method_30((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_21: int64) = method_25((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_18: int64), (var_5: int64), (var_8: int64), (var_9: int64), (var_1: string), (var_10: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_11 + 1L)
            method_31((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_21: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.BasicTypes.SizeT) = var_1.GetFreeDeviceMemorySize()
let (var_36: int64) = int64 var_35
let (var_37: float) = float var_36
let (var_38: float) = (0.700000 * var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_39)
let (var_41: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_40)
let (var_42: uint64) = uint64 var_41
let (var_43: (uint64 ref)) = (ref var_42)
let (var_44: EnvStack0) = EnvStack0((var_43: (uint64 ref)))
let (var_45: System.Collections.Generic.Stack<Env1>) = System.Collections.Generic.Stack<Env1>()
let (var_46: (uint64 ref)) = var_44.mem_0
let (var_47: uint64) = method_1((var_46: (uint64 ref)))
let (var_48: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_49: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_50: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_49)
let (var_51: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
var_50.SetStream(var_51)
let (var_52: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_53: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_54: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_52, var_53)
let (var_55: ManagedCuda.CudaBlas.CudaBlasHandle) = var_54.get_CublasHandle()
let (var_56: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
var_54.set_Stream(var_56)
let (var_57: uint64) = 1024UL
let (var_58: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_57: uint64))
let (var_59: EnvStack2) = EnvStack2((var_58: EnvStack0))
let (var_60: EnvStack0) = var_59.mem_0
let (var_61: (uint64 ref)) = var_60.mem_0
let (var_62: uint64) = method_1((var_61: (uint64 ref)))
let (var_63: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(192L)
let (var_64: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_62)
let (var_65: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_64)
var_50.GenerateNormal32(var_65, var_63, 0.000000f, 1.000000f)
let (var_66: uint64) = 512UL
let (var_67: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_66: uint64))
let (var_68: EnvStack2) = EnvStack2((var_67: EnvStack0))
let (var_69: EnvStack0) = var_68.mem_0
let (var_70: (uint64 ref)) = var_69.mem_0
let (var_71: uint64) = method_1((var_70: (uint64 ref)))
let (var_72: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(96L)
let (var_73: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_71)
let (var_74: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_73)
var_50.GenerateNormal32(var_74, var_72, 0.000000f, 1.000000f)
let (var_75: uint64) = 512UL
let (var_76: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_75: uint64))
let (var_77: EnvStack2) = EnvStack2((var_76: EnvStack0))
let (var_78: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_79: EnvStack0) = var_77.mem_0
let (var_80: (uint64 ref)) = var_79.mem_0
let (var_81: uint64) = method_1((var_80: (uint64 ref)))
let (var_82: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_81)
let (var_83: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_82)
let (var_84: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(384L)
var_1.ClearMemoryAsync(var_83, 0uy, var_84, var_78)
let (var_85: uint64) = 256UL
let (var_86: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_85: uint64))
let (var_87: EnvStack2) = EnvStack2((var_86: EnvStack0))
let (var_88: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_89: EnvStack0) = var_87.mem_0
let (var_90: (uint64 ref)) = var_89.mem_0
let (var_91: uint64) = method_1((var_90: (uint64 ref)))
let (var_92: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_91)
let (var_93: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_92)
let (var_94: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(64L)
var_1.ClearMemoryAsync(var_93, 0uy, var_94, var_88)
let (var_95: uint64) = 256UL
let (var_96: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_95: uint64))
let (var_97: EnvStack2) = EnvStack2((var_96: EnvStack0))
let (var_98: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_99: EnvStack0) = var_97.mem_0
let (var_100: (uint64 ref)) = var_99.mem_0
let (var_101: uint64) = method_1((var_100: (uint64 ref)))
let (var_102: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_101)
let (var_103: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_102)
let (var_104: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(64L)
var_1.ClearMemoryAsync(var_103, 0uy, var_104, var_98)
let (var_105: uint64) = 2304UL
let (var_106: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_105: uint64))
let (var_107: EnvStack2) = EnvStack2((var_106: EnvStack0))
let (var_108: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_109: EnvStack0) = var_107.mem_0
let (var_110: (uint64 ref)) = var_109.mem_0
let (var_111: uint64) = method_1((var_110: (uint64 ref)))
let (var_112: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_111)
let (var_113: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_112)
let (var_114: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_113, 0uy, var_114, var_108)
let (var_115: uint64) = 2304UL
let (var_116: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_115: uint64))
let (var_117: EnvStack2) = EnvStack2((var_116: EnvStack0))
method_5((var_55: ManagedCuda.CudaBlas.CudaBlasHandle), (var_68: EnvStack2), (var_59: EnvStack2), (var_117: EnvStack2))
let (var_118: EnvStack0) = var_117.mem_0
let (var_119: uint64) = 2304UL
let (var_120: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_119: uint64))
let (var_121: EnvStack2) = EnvStack2((var_120: EnvStack0))
let (var_122: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_123: EnvStack0) = var_121.mem_0
let (var_124: (uint64 ref)) = var_123.mem_0
let (var_125: uint64) = method_1((var_124: (uint64 ref)))
let (var_126: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_125)
let (var_127: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_126)
let (var_128: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_127, 0uy, var_128, var_122)
let (var_130: uint64) = 2304UL
let (var_131: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_130: uint64))
let (var_132: EnvStack2) = EnvStack2((var_131: EnvStack0))
let (var_133: uint64) = method_1((var_90: (uint64 ref)))
let (var_134: (uint64 ref)) = var_118.mem_0
let (var_135: uint64) = method_1((var_134: (uint64 ref)))
let (var_136: EnvStack0) = var_132.mem_0
let (var_137: (uint64 ref)) = var_136.mem_0
let (var_138: uint64) = method_1((var_137: (uint64 ref)))
// Cuda join point
// method_6((var_133: uint64), (var_135: uint64), (var_138: uint64))
let (var_139: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_6", var_32, var_1)
let (var_140: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_139.set_GridDimensions(var_140)
let (var_141: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(16u, 32u, 1u)
var_139.set_BlockDimensions(var_141)
let (var_142: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_144: (System.Object [])) = [|var_133; var_135; var_138|]: (System.Object [])
var_139.RunAsync(var_142, var_144)
let (var_145: uint64) = 2304UL
let (var_146: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_145: uint64))
let (var_147: EnvStack2) = EnvStack2((var_146: EnvStack0))
let (var_148: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_149: EnvStack0) = var_147.mem_0
let (var_150: (uint64 ref)) = var_149.mem_0
let (var_151: uint64) = method_1((var_150: (uint64 ref)))
let (var_152: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_151)
let (var_153: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_152)
let (var_154: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_153, 0uy, var_154, var_148)
let (var_159: uint64) = 2304UL
let (var_160: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_159: uint64))
let (var_161: EnvStack2) = EnvStack2((var_160: EnvStack0))
let (var_162: uint64) = method_1((var_137: (uint64 ref)))
let (var_163: EnvStack0) = var_161.mem_0
let (var_164: (uint64 ref)) = var_163.mem_0
let (var_165: uint64) = method_1((var_164: (uint64 ref)))
// Cuda join point
// method_9((var_162: uint64), (var_165: uint64))
let (var_166: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_9", var_32, var_1)
let (var_167: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_166.set_GridDimensions(var_167)
let (var_168: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_166.set_BlockDimensions(var_168)
let (var_169: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_171: (System.Object [])) = [|var_162; var_165|]: (System.Object [])
var_166.RunAsync(var_169, var_171)
let (var_172: uint64) = 2304UL
let (var_173: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_172: uint64))
let (var_174: EnvStack2) = EnvStack2((var_173: EnvStack0))
let (var_175: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_176: EnvStack0) = var_174.mem_0
let (var_177: (uint64 ref)) = var_176.mem_0
let (var_178: uint64) = method_1((var_177: (uint64 ref)))
let (var_179: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_178)
let (var_180: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_179)
let (var_181: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2048L)
var_1.ClearMemoryAsync(var_180, 0uy, var_181, var_175)
let (var_182: uint64) = method_1((var_164: (uint64 ref)))
let (var_183: uint64) = method_1((var_110: (uint64 ref)))
let (var_186: uint64) = 256UL
let (var_187: EnvStack0) = method_2((var_47: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_39: uint64), (var_186: uint64))
let (var_188: EnvStack2) = EnvStack2((var_187: EnvStack0))
let (var_189: EnvStack0) = var_188.mem_0
let (var_190: (uint64 ref)) = var_189.mem_0
let (var_191: uint64) = method_1((var_190: (uint64 ref)))
// Cuda join point
// method_11((var_182: uint64), (var_183: uint64), (var_191: uint64))
let (var_192: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_11", var_32, var_1)
let (var_193: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(2u, 1u, 1u)
var_192.set_GridDimensions(var_193)
let (var_194: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
var_192.set_BlockDimensions(var_194)
let (var_195: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_197: (System.Object [])) = [|var_182; var_183; var_191|]: (System.Object [])
var_192.RunAsync(var_195, var_197)
let (var_198: int64) = 2L
let (var_199: int64) = 0L
let (var_200: int64) = 1L
let (var_201: (float32 [])) = method_13((var_198: int64), (var_188: EnvStack2), (var_199: int64), (var_200: int64))
let (var_202: float32) = var_201.[int32 0L]
let (var_203: int64) = 1L
let (var_204: float32) = method_14((var_201: (float32 [])), (var_202: float32), (var_203: int64))
var_190 := 0UL
let (var_205: (float32 ref)) = (ref 0.000000f)
let (var_206: float32) = (var_204 / 32.000000f)
let (var_207: (float32 ref)) = (ref 0.000000f)
let (var_208: string) = System.String.Format("{0}",var_206)
let (var_209: string) = String.concat ", " [|"Cost is:"; var_208|]
let (var_210: string) = System.String.Format("[{0}]",var_209)
System.Console.WriteLine(var_210)
var_207 := 1.000000f
let (var_211: float32) = (!var_207)
let (var_212: float32) = (var_211 / 32.000000f)
let (var_213: float32) = (!var_205)
let (var_214: float32) = (var_213 + var_212)
var_205 := var_214
let (var_215: float32) = (!var_205)
let (var_216: uint64) = method_1((var_164: (uint64 ref)))
let (var_217: uint64) = method_1((var_110: (uint64 ref)))
let (var_218: uint64) = method_1((var_177: (uint64 ref)))
// Cuda join point
// method_15((var_215: float32), (var_204: float32), (var_216: uint64), (var_217: uint64), (var_218: uint64))
let (var_219: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_15", var_32, var_1)
let (var_220: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_219.set_GridDimensions(var_220)
let (var_221: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_219.set_BlockDimensions(var_221)
let (var_222: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_224: (System.Object [])) = [|var_215; var_204; var_216; var_217; var_218|]: (System.Object [])
var_219.RunAsync(var_222, var_224)
let (var_225: uint64) = method_1((var_137: (uint64 ref)))
let (var_226: uint64) = method_1((var_177: (uint64 ref)))
let (var_227: uint64) = method_1((var_164: (uint64 ref)))
let (var_228: uint64) = method_1((var_150: (uint64 ref)))
// Cuda join point
// method_16((var_225: uint64), (var_226: uint64), (var_227: uint64), (var_228: uint64))
let (var_229: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_16", var_32, var_1)
let (var_230: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_229.set_GridDimensions(var_230)
let (var_231: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
var_229.set_BlockDimensions(var_231)
let (var_232: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_234: (System.Object [])) = [|var_225; var_226; var_227; var_228|]: (System.Object [])
var_229.RunAsync(var_232, var_234)
let (var_235: uint64) = method_1((var_134: (uint64 ref)))
let (var_236: uint64) = method_1((var_150: (uint64 ref)))
let (var_237: uint64) = method_1((var_137: (uint64 ref)))
let (var_238: uint64) = method_1((var_90: (uint64 ref)))
let (var_239: uint64) = method_1((var_100: (uint64 ref)))
// Cuda join point
// method_17((var_235: uint64), (var_236: uint64), (var_237: uint64), (var_238: uint64), (var_239: uint64))
let (var_240: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_17", var_32, var_1)
let (var_241: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_240.set_GridDimensions(var_241)
let (var_242: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(16u, 32u, 1u)
var_240.set_BlockDimensions(var_242)
let (var_243: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_245: (System.Object [])) = [|var_235; var_236; var_237; var_238; var_239|]: (System.Object [])
var_240.RunAsync(var_243, var_245)
let (var_246: uint64) = method_1((var_90: (uint64 ref)))
let (var_247: uint64) = method_1((var_134: (uint64 ref)))
let (var_248: uint64) = method_1((var_150: (uint64 ref)))
let (var_249: uint64) = method_1((var_137: (uint64 ref)))
let (var_250: uint64) = method_1((var_124: (uint64 ref)))
// Cuda join point
// method_21((var_246: uint64), (var_247: uint64), (var_248: uint64), (var_249: uint64), (var_250: uint64))
let (var_251: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_21", var_32, var_1)
let (var_252: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_251.set_GridDimensions(var_252)
let (var_253: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(16u, 32u, 1u)
var_251.set_BlockDimensions(var_253)
let (var_254: ManagedCuda.BasicTypes.CUstream) = var_48.get_Stream()
let (var_256: (System.Object [])) = [|var_246; var_247; var_248; var_249; var_250|]: (System.Object [])
var_251.RunAsync(var_254, var_256)
method_22((var_55: ManagedCuda.CudaBlas.CudaBlasHandle), (var_121: EnvStack2), (var_59: EnvStack2), (var_77: EnvStack2))
let (var_257: int64) = 0L
let (var_258: int64) = 1L
let (var_259: int64) = 0L
let (var_260: int64) = 16L
method_23((var_1: ManagedCuda.CudaContext), (var_48: ManagedCuda.CudaStream), (var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_97: EnvStack2), (var_257: int64), (var_258: int64), (var_259: int64), (var_260: int64))
let (var_261: int64) = 0L
let (var_262: int64) = 16L
let (var_263: int64) = 1L
let (var_264: int64) = 0L
let (var_265: int64) = 6L
let (var_266: int64) = 0L
let (var_267: int64) = 16L
method_27((var_1: ManagedCuda.CudaContext), (var_48: ManagedCuda.CudaStream), (var_47: uint64), (var_39: uint64), (var_45: System.Collections.Generic.Stack<Env1>), (var_77: EnvStack2), (var_261: int64), (var_262: int64), (var_263: int64), (var_264: int64), (var_265: int64), (var_266: int64), (var_267: int64))
var_177 := 0UL
var_164 := 0UL
var_150 := 0UL
var_137 := 0UL
var_124 := 0UL
var_134 := 0UL
var_110 := 0UL
var_100 := 0UL
var_90 := 0UL
var_80 := 0UL
var_70 := 0UL
var_61 := 0UL
var_54.Dispose()
var_50.Dispose()
var_48.Dispose()
let (var_268: uint64) = method_1((var_46: (uint64 ref)))
let (var_269: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_268)
let (var_270: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_269)
var_1.FreeMemory(var_270)
var_46 := 0UL
var_1.Dispose()

