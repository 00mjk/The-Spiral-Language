module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    struct Tuple0 {
        float mem_0;
        long long int mem_1;
    };
    __device__ __forceinline__ Tuple0 make_Tuple0(float mem_0, long long int mem_1){
        Tuple0 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    __global__ void method_36(float * var_0, float * var_1, long long int * var_2);
    __device__ char method_37(long long int * var_0);
    __device__ char method_38(long long int * var_0, float * var_1, long long int * var_2);
    __device__ char method_39(long long int * var_0, float * var_1);
    __device__ char method_40(long long int * var_0, float * var_1);
    __device__ char method_41(long long int var_0, long long int * var_1, float * var_2);
    __device__ char method_42(long long int * var_0, float * var_1, long long int * var_2);
    __device__ char method_43(long long int var_0, long long int * var_1, float * var_2, long long int * var_3);
    
    __global__ void method_36(float * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.z;
        long long int var_4 = blockIdx.z;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_37(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 6);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_8 * 3072);
            long long int var_14 = threadIdx.y;
            long long int var_15 = blockIdx.y;
            long long int var_16 = (4 * var_15);
            long long int var_17 = (var_14 + var_16);
            float var_18 = __int_as_float(0xff800000);
            long long int var_19 = -1;
            long long int var_20[1];
            float var_21[1];
            long long int var_22[1];
            var_20[0] = var_17;
            var_21[0] = var_18;
            var_22[0] = var_19;
            while (method_38(var_20, var_21, var_22)) {
                long long int var_24 = var_20[0];
                float var_25 = var_21[0];
                long long int var_26 = var_22[0];
                char var_27 = (var_24 >= 0);
                char var_29;
                if (var_27) {
                    var_29 = (var_24 < 12);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_24 * 256);
                long long int var_32 = (var_13 + var_31);
                long long int var_33 = threadIdx.x;
                long long int var_34 = blockIdx.x;
                long long int var_35 = (256 * var_34);
                long long int var_36 = (var_33 + var_35);
                float var_37 = 0;
                long long int var_38[1];
                float var_39[1];
                var_38[0] = var_36;
                var_39[0] = var_37;
                while (method_39(var_38, var_39)) {
                    long long int var_41 = var_38[0];
                    float var_42 = var_39[0];
                    char var_43 = (var_41 >= 0);
                    char var_45;
                    if (var_43) {
                        var_45 = (var_41 < 256);
                    } else {
                        var_45 = 0;
                    }
                    char var_46 = (var_45 == 0);
                    if (var_46) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_47 = (var_32 + var_41);
                    float var_48 = var_0[var_47];
                    float var_49 = (var_42 + var_48);
                    long long int var_50 = (var_41 + 256);
                    var_38[0] = var_50;
                    var_39[0] = var_49;
                }
                long long int var_51 = var_38[0];
                float var_52 = var_39[0];
                long long int var_53 = threadIdx.y;
                long long int var_54 = threadIdx.x;
                __shared__ float var_55[1020];
                long long int var_56[1];
                float var_57[1];
                var_56[0] = 256;
                var_57[0] = var_52;
                while (method_40(var_56, var_57)) {
                    long long int var_59 = var_56[0];
                    float var_60 = var_57[0];
                    long long int var_61 = (var_59 / 2);
                    char var_62 = (var_54 < var_59);
                    char var_64;
                    if (var_62) {
                        var_64 = (var_54 >= var_61);
                    } else {
                        var_64 = 0;
                    }
                    if (var_64) {
                        char var_65 = (var_54 >= 1);
                        char var_67;
                        if (var_65) {
                            var_67 = (var_54 < 256);
                        } else {
                            var_67 = 0;
                        }
                        char var_68 = (var_67 == 0);
                        if (var_68) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_69 = (var_54 - 1);
                        long long int var_70 = (var_69 * 4);
                        char var_71 = (var_53 >= 0);
                        char var_73;
                        if (var_71) {
                            var_73 = (var_53 < 4);
                        } else {
                            var_73 = 0;
                        }
                        char var_74 = (var_73 == 0);
                        if (var_74) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_75 = (var_70 + var_53);
                        var_55[var_75] = var_60;
                    } else {
                    }
                    __syncthreads();
                    char var_76 = (var_54 < var_61);
                    float var_99;
                    if (var_76) {
                        long long int var_77 = (var_54 + var_61);
                        long long int var_78[1];
                        float var_79[1];
                        var_78[0] = var_77;
                        var_79[0] = var_60;
                        while (method_41(var_59, var_78, var_79)) {
                            long long int var_81 = var_78[0];
                            float var_82 = var_79[0];
                            char var_83 = (var_81 >= 1);
                            char var_85;
                            if (var_83) {
                                var_85 = (var_81 < 256);
                            } else {
                                var_85 = 0;
                            }
                            char var_86 = (var_85 == 0);
                            if (var_86) {
                                // "Argument out of bounds."
                            } else {
                            }
                            long long int var_87 = (var_81 - 1);
                            long long int var_88 = (var_87 * 4);
                            char var_89 = (var_53 >= 0);
                            char var_91;
                            if (var_89) {
                                var_91 = (var_53 < 4);
                            } else {
                                var_91 = 0;
                            }
                            char var_92 = (var_91 == 0);
                            if (var_92) {
                                // "Argument out of bounds."
                            } else {
                            }
                            long long int var_93 = (var_88 + var_53);
                            float var_94 = var_55[var_93];
                            float var_95 = (var_82 + var_94);
                            long long int var_96 = (var_81 + var_61);
                            var_78[0] = var_96;
                            var_79[0] = var_95;
                        }
                        long long int var_97 = var_78[0];
                        var_99 = var_79[0];
                    } else {
                        var_99 = var_60;
                    }
                    var_56[0] = var_61;
                    var_57[0] = var_99;
                }
                long long int var_100 = var_56[0];
                float var_101 = var_57[0];
                char var_102 = (var_25 > var_101);
                Tuple0 var_103;
                if (var_102) {
                    var_103 = make_Tuple0(var_25, var_26);
                } else {
                    var_103 = make_Tuple0(var_101, var_24);
                }
                float var_104 = var_103.mem_0;
                long long int var_105 = var_103.mem_1;
                long long int var_106 = (var_24 + 4);
                var_20[0] = var_106;
                var_21[0] = var_104;
                var_22[0] = var_105;
            }
            long long int var_107 = var_20[0];
            float var_108 = var_21[0];
            long long int var_109 = var_22[0];
            long long int var_110 = threadIdx.x;
            char var_111 = (var_110 == 0);
            if (var_111) {
                long long int var_112 = threadIdx.y;
                __shared__ float var_113[3];
                __shared__ long long int var_114[3];
                long long int var_115[1];
                float var_116[1];
                long long int var_117[1];
                var_115[0] = 4;
                var_116[0] = var_108;
                var_117[0] = var_109;
                while (method_42(var_115, var_116, var_117)) {
                    long long int var_119 = var_115[0];
                    float var_120 = var_116[0];
                    long long int var_121 = var_117[0];
                    long long int var_122 = (var_119 / 2);
                    char var_123 = (var_112 < var_119);
                    char var_125;
                    if (var_123) {
                        var_125 = (var_112 >= var_122);
                    } else {
                        var_125 = 0;
                    }
                    if (var_125) {
                        char var_126 = (var_112 >= 1);
                        char var_128;
                        if (var_126) {
                            var_128 = (var_112 < 4);
                        } else {
                            var_128 = 0;
                        }
                        char var_129 = (var_128 == 0);
                        if (var_129) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_130 = (var_112 - 1);
                        var_113[var_130] = var_120;
                        var_114[var_130] = var_121;
                    } else {
                    }
                    __syncthreads();
                    char var_131 = (var_112 < var_122);
                    Tuple0 var_155;
                    if (var_131) {
                        long long int var_132 = (var_112 + var_122);
                        long long int var_133[1];
                        float var_134[1];
                        long long int var_135[1];
                        var_133[0] = var_132;
                        var_134[0] = var_120;
                        var_135[0] = var_121;
                        while (method_43(var_119, var_133, var_134, var_135)) {
                            long long int var_137 = var_133[0];
                            float var_138 = var_134[0];
                            long long int var_139 = var_135[0];
                            char var_140 = (var_137 >= 1);
                            char var_142;
                            if (var_140) {
                                var_142 = (var_137 < 4);
                            } else {
                                var_142 = 0;
                            }
                            char var_143 = (var_142 == 0);
                            if (var_143) {
                                // "Argument out of bounds."
                            } else {
                            }
                            long long int var_144 = (var_137 - 1);
                            float var_145 = var_113[var_144];
                            long long int var_146 = var_114[var_144];
                            char var_147 = (var_138 > var_145);
                            Tuple0 var_148;
                            if (var_147) {
                                var_148 = make_Tuple0(var_138, var_139);
                            } else {
                                var_148 = make_Tuple0(var_145, var_146);
                            }
                            float var_149 = var_148.mem_0;
                            long long int var_150 = var_148.mem_1;
                            long long int var_151 = (var_137 + var_122);
                            var_133[0] = var_151;
                            var_134[0] = var_149;
                            var_135[0] = var_150;
                        }
                        long long int var_152 = var_133[0];
                        float var_153 = var_134[0];
                        long long int var_154 = var_135[0];
                        var_155 = make_Tuple0(var_153, var_154);
                    } else {
                        var_155 = make_Tuple0(var_120, var_121);
                    }
                    float var_156 = var_155.mem_0;
                    long long int var_157 = var_155.mem_1;
                    var_115[0] = var_122;
                    var_116[0] = var_156;
                    var_117[0] = var_157;
                }
                long long int var_158 = var_115[0];
                float var_159 = var_116[0];
                long long int var_160 = var_117[0];
                long long int var_161 = threadIdx.y;
                char var_162 = (var_161 == 0);
                if (var_162) {
                    char var_164;
                    if (var_9) {
                        var_164 = (var_8 < 6);
                    } else {
                        var_164 = 0;
                    }
                    char var_165 = (var_164 == 0);
                    if (var_165) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_166 = var_1[var_8];
                    long long int var_167 = var_2[var_8];
                    float var_168 = (var_159 / 256);
                    var_1[var_8] = var_168;
                    var_2[var_8] = var_160;
                } else {
                }
            } else {
            }
            long long int var_169 = (var_8 + 6);
            var_6[0] = var_169;
        }
        long long int var_170 = var_6[0];
    }
    __device__ char method_37(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 6);
    }
    __device__ char method_38(long long int * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = var_0[0];
        float var_4 = var_1[0];
        long long int var_5 = var_2[0];
        return (var_3 < 12);
    }
    __device__ char method_39(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 256);
    }
    __device__ char method_40(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_41(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
    __device__ char method_42(long long int * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = var_0[0];
        float var_4 = var_1[0];
        long long int var_5 = var_2[0];
        return (var_3 >= 2);
    }
    __device__ char method_43(long long int var_0, long long int * var_1, float * var_2, long long int * var_3) {
        long long int var_4 = var_1[0];
        float var_5 = var_2[0];
        long long int var_6 = var_3[0];
        return (var_4 < var_0);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and Env1 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<Env1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: Env20
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack4 =
    struct
    val mem_0: ResizeArray<Env3>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap5 =
    {
    mem_0: EnvStack2
    mem_1: (uint64 ref)
    mem_2: uint64
    mem_3: EnvStack4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap5
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap5
    }
and EnvHeap8 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap5
    }
and Env9 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env20
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack10 =
    struct
    val mem_0: ResizeArray<Env9>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap11 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvHeap5
    }
and Env12 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env16
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack13 =
    struct
    val mem_0: ResizeArray<Env12>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    }
and EnvHeap15 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env16 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    mem_6: (int64 ref)
    mem_7: EnvHeap15
    }
and EnvStack18 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack19 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3}
    end
and Env20 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap6), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_7((var_0: EnvHeap15), (var_1: EnvHeap14), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_9((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack18 =
    let (var_2: Env9) = method_10((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env20) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_17((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack18((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64)): unit =
    let (var_14: int64) = (var_9 - var_8)
    let (var_15: int64) = (var_11 - var_10)
    let (var_16: int64) = (var_13 - var_12)
    let (var_17: int64) = (var_14 * var_15)
    let (var_18: int64) = (var_17 * var_16)
    let (var_19: bool) = (var_18 > 0L)
    let (var_20: bool) = (var_19 = false)
    if var_20 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_21: int64) = (var_15 * var_6)
    let (var_22: bool) = (var_5 = var_21)
    let (var_23: bool) = (var_22 = false)
    if var_23 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_24: int64) = (var_14 * var_5)
    let (var_25: int64) = (var_16 * var_7)
    let (var_26: bool) = (var_6 = var_25)
    let (var_27: bool) = (var_26 = false)
    if var_27 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_28: int64) = (var_24 * var_6)
    let (var_29: (float32 [])) = method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_14: int64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64))
    let (var_30: int64) = 0L
    method_21((var_29: (float32 [])), (var_30: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64))
and method_31((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack19 =
    let (var_10: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_11: (int64 ref)) = var_10.mem_0
    let (var_12: Env20) = var_10.mem_1
    let (var_13: (uint64 ref)) = var_12.mem_0
    let (var_14: Env9) = method_33((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_15: (int64 ref)) = var_14.mem_0
    let (var_16: Env20) = var_14.mem_1
    let (var_17: (uint64 ref)) = var_16.mem_0
    method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_11: (int64 ref)), (var_13: (uint64 ref)), (var_15: (int64 ref)), (var_17: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack19((var_11: (int64 ref)), (var_13: (uint64 ref)), (var_15: (int64 ref)), (var_17: (uint64 ref)))
and method_44((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): unit =
    let (var_12: int64) = (var_11 - var_10)
    let (var_13: bool) = (var_12 > 0L)
    let (var_14: bool) = (var_13 = false)
    if var_14 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_15: (float32 [])) = method_45((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_12: int64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: int64))
    let (var_16: (int64 [])) = method_46((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_12: int64), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_9: int64))
    let (var_17: int64) = 0L
    let (var_18: int64) = 0L
    method_47((var_15: (float32 [])), (var_17: int64), (var_5: int64), (var_16: (int64 [])), (var_18: int64), (var_9: int64), (var_10: int64), (var_11: int64))
and method_50((var_0: EnvStack13)): unit =
    let (var_1: ResizeArray<Env12>) = var_0.mem_0
    let (var_3: (Env12 -> unit)) = method_51
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_52((var_0: EnvStack10)): unit =
    let (var_1: ResizeArray<Env9>) = var_0.mem_0
    let (var_3: (Env9 -> unit)) = method_53
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_5((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_2 ((var_0: Env3)): bool =
    let (var_1: Env20) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: uint64) = (!var_2)
    (var_4 = 0UL)
and method_3 ((var_0: Env3)): (Env3 -> int32) =
    let (var_1: Env20) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    method_4((var_2: (uint64 ref)))
and method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_3: uint64), (var_4: int32)): uint64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: ResizeArray<Env3>) = var_1.mem_0
        let (var_7: Env3) = var_6.[var_4]
        let (var_8: Env20) = var_7.mem_0
        let (var_9: (uint64 ref)) = var_8.mem_0
        let (var_10: uint64) = var_7.mem_1
        let (var_11: uint64) = method_5((var_9: (uint64 ref)))
        let (var_12: bool) = (var_11 >= var_3)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "The next pointer should be higher than the last.")
        else
            ()
        let (var_14: uint64) = method_5((var_9: (uint64 ref)))
        let (var_15: uint64) = (var_14 - var_3)
        let (var_16: uint64) = (var_3 + 256UL)
        let (var_17: uint64) = (var_16 - 1UL)
        let (var_18: uint64) = (var_17 &&& 18446744073709551360UL)
        let (var_19: uint64) = (var_18 - var_3)
        let (var_20: bool) = (var_15 > var_19)
        if var_20 then
            let (var_21: ResizeArray<Env1>) = var_0.mem_0
            let (var_22: uint64) = (var_15 - var_19)
            var_21.Add((Env1(var_18, var_22)))
        else
            ()
        let (var_23: uint64) = (var_14 + var_10)
        let (var_24: int32) = (var_4 + 1)
        method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_23: uint64), (var_24: int32))
    else
        var_3
and method_8((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: EnvStack13)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env12>) = var_2.mem_0
    var_5.Add((Env12(var_0, (Env16(var_1)))))
and method_10((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 73728L
    method_11((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_17((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(18432L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 1.000000f)
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64)): (float32 []) =
    let (var_9: (int64 ref)) = var_0.mem_6
    let (var_10: EnvHeap15) = var_0.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_12: int64) = (var_2 * var_6)
    let (var_13: uint64) = method_5((var_4: (uint64 ref)))
    let (var_14: int64) = (var_5 * 4L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_13 + var_15)
    let (var_17: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_12))
    let (var_18: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_17,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_19: int64) = var_18.AddrOfPinnedObject().ToInt64()
    let (var_20: uint64) = (uint64 var_19)
    let (var_21: int64) = (var_12 * 4L)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_20)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_27: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_23, var_25, var_26, var_11)
    if var_27 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_27)
    var_18.Free()
    var_17
and method_21((var_0: (float32 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64)): unit =
    let (var_11: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_12: string) = ""
    let (var_13: int64) = 0L
    let (var_14: int64) = 0L
    method_22((var_11: System.Text.StringBuilder), (var_14: int64))
    let (var_15: System.Text.StringBuilder) = var_11.AppendLine("[|")
    let (var_16: int64) = method_23((var_11: System.Text.StringBuilder), (var_12: string), (var_0: (float32 [])), (var_1: int64), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_13: int64))
    let (var_17: int64) = 0L
    method_22((var_11: System.Text.StringBuilder), (var_17: int64))
    let (var_18: System.Text.StringBuilder) = var_11.AppendLine("|]")
    let (var_19: string) = var_11.ToString()
    System.Console.WriteLine(var_19)
and method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 24L
    method_11((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_33((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 48L
    method_11((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_1: (uint64 ref)))
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = method_5((var_5: (uint64 ref)))
    method_35((var_8: uint64), (var_9: uint64), (var_10: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap17))
and method_45((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64), (var_6: int64)): (float32 []) =
    let (var_7: (int64 ref)) = var_0.mem_6
    let (var_8: EnvHeap15) = var_0.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    let (var_10: int64) = (var_2 * var_6)
    let (var_11: uint64) = method_5((var_4: (uint64 ref)))
    let (var_12: int64) = (var_5 * 4L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_11 + var_13)
    let (var_15: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_10))
    let (var_16: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_15,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_17: int64) = var_16.AddrOfPinnedObject().ToInt64()
    let (var_18: uint64) = (uint64 var_17)
    let (var_19: int64) = (var_10 * 4L)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_18)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_25: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_21, var_23, var_24, var_9)
    if var_25 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_25)
    var_16.Free()
    var_15
and method_46((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64), (var_6: int64)): (int64 []) =
    let (var_7: (int64 ref)) = var_0.mem_6
    let (var_8: EnvHeap15) = var_0.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_18((var_8: EnvHeap15))
    let (var_10: int64) = (var_2 * var_6)
    let (var_11: uint64) = method_5((var_4: (uint64 ref)))
    let (var_12: int64) = (var_5 * 8L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_11 + var_13)
    let (var_15: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_10))
    let (var_16: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_15,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_17: int64) = var_16.AddrOfPinnedObject().ToInt64()
    let (var_18: uint64) = (uint64 var_17)
    let (var_19: int64) = (var_10 * 8L)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_18)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_25: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_21, var_23, var_24, var_9)
    if var_25 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_25)
    var_16.Free()
    var_15
and method_47((var_0: (float32 [])), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64)): unit =
    let (var_8: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_9: string) = ""
    let (var_10: int64) = 0L
    let (var_11: int64) = 0L
    method_22((var_8: System.Text.StringBuilder), (var_11: int64))
    let (var_12: System.Text.StringBuilder) = var_8.Append("[|")
    let (var_13: int64) = method_48((var_8: System.Text.StringBuilder), (var_0: (float32 [])), (var_1: int64), (var_2: int64), (var_3: (int64 [])), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_9: string), (var_10: int64))
    let (var_14: System.Text.StringBuilder) = var_8.AppendLine("|]")
    let (var_15: string) = var_8.ToString()
    System.Console.WriteLine(var_15)
and method_51 ((var_0: Env12)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env16) = var_0.mem_1
    let (var_3: EnvHeap15) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        let (var_8: ManagedCuda.CudaStream) = var_3.mem_2
        var_8.Dispose()
        let (var_9: ManagedCuda.CudaEvent) = var_3.mem_0
        var_9.Dispose()
        let (var_10: (bool ref)) = var_3.mem_1
        var_10 := false
    else
        ()
and method_53 ((var_0: Env9)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env20) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        var_3 := 0UL
    else
        ()
and method_4 ((var_1: (uint64 ref))) ((var_0: Env3)): int32 =
    let (var_2: Env20) = var_0.mem_0
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: uint64) = var_0.mem_1
    let (var_5: uint64) = method_5((var_1: (uint64 ref)))
    let (var_6: uint64) = method_5((var_3: (uint64 ref)))
    let (var_7: bool) = (var_5 < var_6)
    if var_7 then
        -1
    else
        let (var_8: bool) = (var_5 = var_6)
        if var_8 then
            0
        else
            1
and method_11((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env9 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env20) = method_12((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack10) = var_0.mem_3
    method_16((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack10))
    (Env9(var_9, (Env20(var_8))))
and method_18((var_0: EnvHeap15)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_22((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_22((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_23((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64)): int64 =
    let (var_14: bool) = (var_7 < var_8)
    if var_14 then
        let (var_15: bool) = (var_13 < 1000L)
        if var_15 then
            let (var_16: bool) = (var_7 >= var_7)
            let (var_17: bool) = (var_16 = false)
            if var_17 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_18: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_18: int64))
            let (var_19: System.Text.StringBuilder) = var_0.AppendLine("[|")
            let (var_20: int64) = method_25((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_5: int64), (var_6: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64))
            let (var_21: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_21: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_7 + 1L)
            method_30((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_20: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_22((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_13
    else
        var_13
and method_35((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_36((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_36", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 6u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 4u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_18((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_48((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64)): int64 =
    let (var_11: bool) = (var_7 < var_8)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_14: bool) = (var_7 >= var_7)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: float32) = var_1.[int32 var_2]
            let (var_17: int64) = var_4.[int32 var_5]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: string) = System.String.Format("{0}",var_16)
            let (var_20: string) = String.concat ", " [|var_19; var_18|]
            let (var_21: string) = System.String.Format("[{0}]",var_20)
            let (var_22: System.Text.StringBuilder) = var_0.Append(var_21)
            let (var_23: string) = "; "
            let (var_24: int64) = (var_10 + 1L)
            let (var_25: int64) = (var_7 + 1L)
            method_49((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_23: string), (var_24: int64), (var_25: int64))
        else
            let (var_27: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_12((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env20 =
    let (var_3: EnvHeap5) = var_0.mem_5
    let (var_4: (uint64 ref)) = var_3.mem_1
    let (var_5: uint64) = var_3.mem_2
    let (var_6: EnvStack4) = var_3.mem_3
    let (var_7: EnvStack2) = var_3.mem_0
    let (var_8: ResizeArray<Env1>) = var_7.mem_0
    let (var_9: int32) = var_8.get_Count()
    let (var_10: bool) = (var_9 > 0)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Out of memory in the designated section.")
    else
        ()
    let (var_12: Env1) = var_8.[0]
    let (var_13: uint64) = var_12.mem_0
    let (var_14: uint64) = var_12.mem_1
    let (var_15: bool) = (var_2 <= var_14)
    let (var_42: Env3) =
        if var_15 then
            let (var_16: uint64) = (var_13 + var_2)
            let (var_17: uint64) = (var_14 - var_2)
            var_8.[0] <- (Env1(var_16, var_17))
            let (var_18: (uint64 ref)) = (ref var_13)
            (Env3((Env20(var_18)), var_2))
        else
            let (var_20: (Env1 -> (Env1 -> int32))) = method_13
            let (var_21: System.Comparison<Env1>) = System.Comparison<Env1>(var_20)
            var_8.Sort(var_21)
            let (var_22: Env1) = var_8.[0]
            let (var_23: uint64) = var_22.mem_0
            let (var_24: uint64) = var_22.mem_1
            let (var_25: bool) = (var_2 <= var_24)
            if var_25 then
                let (var_26: uint64) = (var_23 + var_2)
                let (var_27: uint64) = (var_24 - var_2)
                var_8.[0] <- (Env1(var_26, var_27))
                let (var_28: (uint64 ref)) = (ref var_23)
                (Env3((Env20(var_28)), var_2))
            else
                method_15((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                let (var_30: (Env1 -> (Env1 -> int32))) = method_13
                let (var_31: System.Comparison<Env1>) = System.Comparison<Env1>(var_30)
                var_8.Sort(var_31)
                let (var_32: Env1) = var_8.[0]
                let (var_33: uint64) = var_32.mem_0
                let (var_34: uint64) = var_32.mem_1
                let (var_35: bool) = (var_2 <= var_34)
                if var_35 then
                    let (var_36: uint64) = (var_33 + var_2)
                    let (var_37: uint64) = (var_34 - var_2)
                    var_8.[0] <- (Env1(var_36, var_37))
                    let (var_38: (uint64 ref)) = (ref var_33)
                    (Env3((Env20(var_38)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_43: Env20) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_43.mem_0
    let (var_45: uint64) = var_42.mem_1
    let (var_46: ResizeArray<Env3>) = var_6.mem_0
    var_46.Add((Env3((Env20(var_44)), var_45)))
    (Env20(var_44))
and method_16((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack10)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env9>) = var_2.mem_0
    var_5.Add((Env9(var_0, (Env20(var_1)))))
and method_24((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_24((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_25((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64)): int64 =
    let (var_11: bool) = (var_6 < var_7)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: bool) = (var_6 >= var_6)
            let (var_14: bool) = (var_13 = false)
            if var_14 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_15: int64) = 0L
            method_26((var_0: System.Text.StringBuilder), (var_15: int64))
            let (var_16: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_17: int64) = method_27((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_3: int64), (var_5: int64), (var_8: int64), (var_9: int64), (var_1: string), (var_10: int64))
            let (var_18: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_19: int64) = (var_6 + 1L)
            method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_17: int64), (var_19: int64))
        else
            let (var_21: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_21: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
and method_30((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64), (var_14: int64)): int64 =
    let (var_15: bool) = (var_14 < var_8)
    if var_15 then
        let (var_16: bool) = (var_13 < 1000L)
        if var_16 then
            let (var_17: bool) = (var_14 >= var_7)
            let (var_18: bool) = (var_17 = false)
            if var_18 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_19: int64) = (var_14 - var_7)
            let (var_20: int64) = (var_19 * var_4)
            let (var_21: int64) = (var_3 + var_20)
            let (var_22: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_22: int64))
            let (var_23: System.Text.StringBuilder) = var_0.AppendLine("[|")
            let (var_24: int64) = method_25((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_21: int64), (var_5: int64), (var_6: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_13: int64))
            let (var_25: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_27: int64) = (var_14 + 1L)
            method_30((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_24: int64), (var_27: int64))
        else
            let (var_29: int64) = 0L
            method_22((var_0: System.Text.StringBuilder), (var_29: int64))
            let (var_30: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_13
    else
        var_13
and method_49((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: string), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_8)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: System.Text.StringBuilder) = var_0.Append(var_9)
            let (var_15: bool) = (var_11 >= var_7)
            let (var_16: bool) = (var_15 = false)
            if var_16 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_17: int64) = (var_11 - var_7)
            let (var_18: int64) = (var_17 * var_3)
            let (var_19: int64) = (var_2 + var_18)
            let (var_20: int64) = (var_17 * var_6)
            let (var_21: int64) = (var_5 + var_20)
            let (var_22: float32) = var_1.[int32 var_19]
            let (var_23: int64) = var_4.[int32 var_21]
            let (var_24: string) = System.String.Format("{0}",var_23)
            let (var_25: string) = System.String.Format("{0}",var_22)
            let (var_26: string) = String.concat ", " [|var_25; var_24|]
            let (var_27: string) = System.String.Format("[{0}]",var_26)
            let (var_28: System.Text.StringBuilder) = var_0.Append(var_27)
            let (var_29: string) = "; "
            let (var_30: int64) = (var_10 + 1L)
            let (var_31: int64) = (var_11 + 1L)
            method_49((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: (int64 [])), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_29: string), (var_30: int64), (var_31: int64))
        else
            let (var_33: System.Text.StringBuilder) = var_0.Append("...")
            var_10
    else
        var_10
and method_13 ((var_0: Env1)): (Env1 -> int32) =
    let (var_1: uint64) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_14((var_2: uint64))
and method_15((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_5
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_26((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 8L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_26((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_27((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64)): int64 =
    let (var_8: bool) = (var_4 < var_5)
    if var_8 then
        let (var_9: bool) = (var_7 < 1000L)
        if var_9 then
            let (var_10: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_11: bool) = (var_4 >= var_4)
            let (var_12: bool) = (var_11 = false)
            if var_12 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_13: float32) = var_1.[int32 var_2]
            let (var_14: string) = System.String.Format("{0}",var_13)
            let (var_15: System.Text.StringBuilder) = var_0.Append(var_14)
            let (var_16: string) = "; "
            let (var_17: int64) = (var_7 + 1L)
            let (var_18: int64) = (var_4 + 1L)
            method_28((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_16: string), (var_17: int64), (var_18: int64))
        else
            let (var_20: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
and method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_7)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: bool) = (var_11 >= var_6)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = (var_11 - var_6)
            let (var_17: int64) = (var_16 * var_4)
            let (var_18: int64) = (var_3 + var_17)
            let (var_19: int64) = 0L
            method_26((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_21: int64) = method_27((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_18: int64), (var_5: int64), (var_8: int64), (var_9: int64), (var_1: string), (var_10: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_11 + 1L)
            method_29((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_21: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_24((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
and method_14 ((var_1: uint64)) ((var_0: Env1)): int32 =
    let (var_2: uint64) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        -1
    else
        let (var_5: bool) = (var_3 = var_1)
        if var_5 then
            0
        else
            1
and method_28((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): int64 =
    let (var_9: bool) = (var_8 < var_5)
    if var_9 then
        let (var_10: bool) = (var_7 < 1000L)
        if var_10 then
            let (var_11: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_12: bool) = (var_8 >= var_4)
            let (var_13: bool) = (var_12 = false)
            if var_13 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_14: int64) = (var_8 - var_4)
            let (var_15: int64) = (var_14 * var_3)
            let (var_16: int64) = (var_2 + var_15)
            let (var_17: float32) = var_1.[int32 var_16]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_18)
            let (var_20: string) = "; "
            let (var_21: int64) = (var_7 + 1L)
            let (var_22: int64) = (var_8 + 1L)
            method_28((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_20: string), (var_21: int64), (var_22: int64))
        else
            let (var_24: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1048576UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_41: ResizeArray<Env1>) = ResizeArray<Env1>()
let (var_42: EnvStack2) = EnvStack2((var_41: ResizeArray<Env1>))
let (var_43: ResizeArray<Env3>) = ResizeArray<Env3>()
let (var_44: EnvStack4) = EnvStack4((var_43: ResizeArray<Env3>))
let (var_45: EnvHeap5) = ({mem_0 = (var_42: EnvStack2); mem_1 = (var_40: (uint64 ref)); mem_2 = (var_35: uint64); mem_3 = (var_44: EnvStack4)} : EnvHeap5)
let (var_46: EnvHeap6) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_45: EnvHeap5)} : EnvHeap6)
method_1((var_46: EnvHeap6), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_47: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_48: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_47)
let (var_49: ManagedCuda.CudaContext) = var_46.mem_0
let (var_50: EnvHeap5) = var_46.mem_1
let (var_51: EnvHeap7) = ({mem_0 = (var_49: ManagedCuda.CudaContext); mem_1 = (var_48: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_50: EnvHeap5)} : EnvHeap7)
let (var_52: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_53: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_54: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_52, var_53)
let (var_55: ManagedCuda.CudaContext) = var_51.mem_0
let (var_56: ManagedCuda.CudaRand.CudaRandDevice) = var_51.mem_1
let (var_57: EnvHeap5) = var_51.mem_2
let (var_58: EnvHeap8) = ({mem_0 = (var_55: ManagedCuda.CudaContext); mem_1 = (var_54: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_56: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_57: EnvHeap5)} : EnvHeap8)
let (var_65: ResizeArray<Env9>) = ResizeArray<Env9>()
let (var_66: EnvStack10) = EnvStack10((var_65: ResizeArray<Env9>))
let (var_67: ManagedCuda.CudaContext) = var_58.mem_0
let (var_68: ManagedCuda.CudaBlas.CudaBlas) = var_58.mem_1
let (var_69: ManagedCuda.CudaRand.CudaRandDevice) = var_58.mem_2
let (var_70: EnvHeap5) = var_58.mem_3
let (var_71: EnvHeap11) = ({mem_0 = (var_67: ManagedCuda.CudaContext); mem_1 = (var_68: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_69: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_66: EnvStack10); mem_4 = (var_70: EnvHeap5)} : EnvHeap11)
let (var_83: ResizeArray<Env12>) = ResizeArray<Env12>()
let (var_84: EnvStack13) = EnvStack13((var_83: ResizeArray<Env12>))
let (var_85: ManagedCuda.CudaContext) = var_71.mem_0
let (var_86: ManagedCuda.CudaBlas.CudaBlas) = var_71.mem_1
let (var_87: ManagedCuda.CudaRand.CudaRandDevice) = var_71.mem_2
let (var_88: EnvStack10) = var_71.mem_3
let (var_89: EnvHeap5) = var_71.mem_4
let (var_90: EnvHeap14) = ({mem_0 = (var_85: ManagedCuda.CudaContext); mem_1 = (var_86: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_87: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_88: EnvStack10); mem_4 = (var_84: EnvStack13); mem_5 = (var_89: EnvHeap5)} : EnvHeap14)
let (var_91: (bool ref)) = (ref true)
let (var_92: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_93: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_94: EnvHeap15) = ({mem_0 = (var_93: ManagedCuda.CudaEvent); mem_1 = (var_91: (bool ref)); mem_2 = (var_92: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_95: Env12) = method_7((var_94: EnvHeap15), (var_90: EnvHeap14), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_96: (int64 ref)) = var_95.mem_0
let (var_97: Env16) = var_95.mem_1
let (var_98: EnvHeap15) = var_97.mem_0
let (var_99: ManagedCuda.CudaContext) = var_90.mem_0
let (var_100: ManagedCuda.CudaBlas.CudaBlas) = var_90.mem_1
let (var_101: ManagedCuda.CudaRand.CudaRandDevice) = var_90.mem_2
let (var_102: EnvStack10) = var_90.mem_3
let (var_103: EnvStack13) = var_90.mem_4
let (var_104: EnvHeap5) = var_90.mem_5
let (var_105: EnvHeap17) = ({mem_0 = (var_99: ManagedCuda.CudaContext); mem_1 = (var_100: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_101: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_102: EnvStack10); mem_4 = (var_103: EnvStack13); mem_5 = (var_104: EnvHeap5); mem_6 = (var_96: (int64 ref)); mem_7 = (var_98: EnvHeap15)} : EnvHeap17)
let (var_106: EnvStack18) = method_9((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_107: (int64 ref)) = var_106.mem_0
let (var_108: (uint64 ref)) = var_106.mem_1
let (var_109: int64) = 0L
let (var_110: int64) = 3072L
let (var_111: int64) = 256L
let (var_112: int64) = 1L
let (var_113: int64) = 0L
let (var_114: int64) = 6L
let (var_115: int64) = 0L
let (var_116: int64) = 12L
let (var_117: int64) = 0L
let (var_118: int64) = 256L
method_19((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_107: (int64 ref)), (var_108: (uint64 ref)), (var_109: int64), (var_110: int64), (var_111: int64), (var_112: int64), (var_113: int64), (var_114: int64), (var_115: int64), (var_116: int64), (var_117: int64), (var_118: int64))
let (var_119: EnvStack19) = method_31((var_107: (int64 ref)), (var_108: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_120: (int64 ref)) = var_119.mem_0
let (var_121: (uint64 ref)) = var_119.mem_1
let (var_122: (int64 ref)) = var_119.mem_2
let (var_123: (uint64 ref)) = var_119.mem_3
let (var_124: int64) = 0L
let (var_125: int64) = 1L
let (var_126: int64) = 0L
let (var_127: int64) = 1L
let (var_128: int64) = 0L
let (var_129: int64) = 6L
method_44((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_120: (int64 ref)), (var_121: (uint64 ref)), (var_124: int64), (var_125: int64), (var_122: (int64 ref)), (var_123: (uint64 ref)), (var_126: int64), (var_127: int64), (var_128: int64), (var_129: int64))
method_50((var_103: EnvStack13))
method_52((var_88: EnvStack10))
var_54.Dispose()
var_48.Dispose()
let (var_130: uint64) = method_5((var_40: (uint64 ref)))
let (var_131: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_130)
let (var_132: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_131)
var_49.FreeMemory(var_132)
var_40 := 0UL
var_1.Dispose()

