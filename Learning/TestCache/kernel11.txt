module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    struct Tuple1 {
        float mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple1 make_Tuple1(float mem_0, float mem_1){
        Tuple1 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef float(*FunPointer0)(float, float);
    __global__ void method_5(float * var_0, float * var_1);
    __global__ void method_8(float * var_0, float * var_1);
    __global__ void method_10(float * var_0, float * var_1, float * var_2);
    __device__ char method_6(long long int * var_0);
    __device__ float method_7(float var_0, float var_1);
    __device__ char method_9(long long int * var_0, float * var_1);
    
    __global__ void method_5(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.y;
        long long int var_3 = blockIdx.y;
        long long int var_4 = (var_2 + var_3);
        long long int var_5[1];
        var_5[0] = var_4;
        while (method_6(var_5)) {
            long long int var_7 = var_5[0];
            long long int var_8 = (var_7 + 1);
            char var_9 = (var_7 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_7 < 1);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_7 * 4);
            char var_15;
            if (var_9) {
                var_15 = (var_7 < 1);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17[1];
            long long int var_18 = threadIdx.x;
            long long int var_19 = blockIdx.x;
            long long int var_20 = (4 * var_19);
            long long int var_21 = (var_18 + var_20);
            long long int var_22[1];
            var_22[0] = 0;
            while (method_6(var_22)) {
                long long int var_24 = var_22[0];
                long long int var_25 = (var_24 + 1);
                long long int var_26 = (4 * var_24);
                long long int var_27 = (var_21 + var_26);
                long long int var_28 = (4 - var_26);
                char var_29 = (var_27 < 4);
                if (var_29) {
                    char var_30 = (var_24 >= 0);
                    char var_32;
                    if (var_30) {
                        var_32 = (var_24 < 1);
                    } else {
                        var_32 = 0;
                    }
                    char var_33 = (var_32 == 0);
                    if (var_33) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_34 = (var_27 >= 0);
                    char var_35 = (var_34 == 0);
                    if (var_35) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_36 = (var_13 + var_27);
                    float var_37 = var_0[var_36];
                    var_17[var_24] = var_37;
                } else {
                }
                var_22[0] = var_25;
            }
            long long int var_38 = var_22[0];
            FunPointer0 var_41 = method_7;
            float var_42 = cub::BlockReduce<float,4,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_17, var_41);
            __shared__ float var_43[1];
            long long int var_44 = threadIdx.x;
            char var_45 = (var_44 == 0);
            if (var_45) {
                var_43[0] = var_42;
            } else {
            }
            __syncthreads();
            float var_46 = var_43[0];
            float var_49[1];
            long long int var_50[1];
            var_50[0] = 0;
            while (method_6(var_50)) {
                long long int var_52 = var_50[0];
                long long int var_53 = (var_52 + 1);
                long long int var_54 = (4 * var_52);
                long long int var_55 = (var_21 + var_54);
                long long int var_56 = (4 - var_54);
                char var_57 = (var_55 < 4);
                if (var_57) {
                    char var_58 = (var_55 >= 0);
                    char var_59 = (var_58 == 0);
                    if (var_59) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_60 = (var_13 + var_55);
                    char var_61 = (var_52 >= 0);
                    char var_63;
                    if (var_61) {
                        var_63 = (var_52 < 1);
                    } else {
                        var_63 = 0;
                    }
                    char var_64 = (var_63 == 0);
                    if (var_64) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_65 = var_17[var_52];
                    float var_66 = (var_65 - var_46);
                    float var_67 = exp(var_66);
                    char var_69;
                    if (var_61) {
                        var_69 = (var_52 < 1);
                    } else {
                        var_69 = 0;
                    }
                    char var_70 = (var_69 == 0);
                    if (var_70) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_49[var_52] = var_67;
                } else {
                }
                var_50[0] = var_53;
            }
            long long int var_71 = var_50[0];
            float var_72 = cub::BlockReduce<float,4,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_49);
            __shared__ float var_73[1];
            long long int var_74 = threadIdx.x;
            char var_75 = (var_74 == 0);
            if (var_75) {
                var_73[0] = var_72;
            } else {
            }
            __syncthreads();
            float var_76 = var_73[0];
            long long int var_77[1];
            var_77[0] = 0;
            while (method_6(var_77)) {
                long long int var_79 = var_77[0];
                long long int var_80 = (var_79 + 1);
                long long int var_81 = (4 * var_79);
                long long int var_82 = (var_21 + var_81);
                long long int var_83 = (4 - var_81);
                char var_84 = (var_82 < 4);
                if (var_84) {
                    char var_85 = (var_82 >= 0);
                    char var_86 = (var_85 == 0);
                    if (var_86) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_87 = (var_13 + var_82);
                    char var_88 = (var_79 >= 0);
                    char var_90;
                    if (var_88) {
                        var_90 = (var_79 < 1);
                    } else {
                        var_90 = 0;
                    }
                    char var_91 = (var_90 == 0);
                    if (var_91) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_92 = var_49[var_79];
                    float var_93 = var_1[var_87];
                    float var_94 = (var_92 / var_76);
                    var_1[var_87] = var_94;
                } else {
                }
                var_77[0] = var_80;
            }
            long long int var_95 = var_77[0];
            var_5[0] = var_8;
        }
        long long int var_96 = var_5[0];
    }
    __global__ void method_8(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.y;
        long long int var_3 = blockIdx.y;
        long long int var_4 = (var_2 + var_3);
        long long int var_5[1];
        var_5[0] = var_4;
        while (method_6(var_5)) {
            long long int var_7 = var_5[0];
            long long int var_8 = (var_7 + 1);
            char var_9 = (var_7 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_7 < 1);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_7 * 4);
            char var_15;
            if (var_9) {
                var_15 = (var_7 < 1);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.x;
            long long int var_18 = blockIdx.x;
            long long int var_19 = (4 * var_18);
            long long int var_20 = (var_17 + var_19);
            float var_21 = 0;
            long long int var_22[1];
            float var_23[1];
            var_22[0] = var_20;
            var_23[0] = var_21;
            while (method_9(var_22, var_23)) {
                long long int var_25 = var_22[0];
                float var_26 = var_23[0];
                long long int var_27 = (var_25 + 4);
                char var_28 = (var_25 >= 0);
                char var_30;
                if (var_28) {
                    var_30 = (var_25 < 4);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_13 + var_25);
                char var_34;
                if (var_28) {
                    var_34 = (var_25 < 4);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                float var_36 = var_0[var_32];
                float var_37[1];
                float var_38 = var_37[0];
                float var_39[1];
                float var_40 = var_39[0];
                cub::BlockScan<float,4,cub::BLOCK_SCAN_RAKING_MEMOIZE,1,1>().InclusiveSum(var_36, var_38, var_40);
                float var_41 = (var_26 + var_38);
                float var_42 = var_1[var_32];
                var_1[var_32] = var_41;
                float var_43 = (var_26 + var_40);
                var_22[0] = var_27;
                var_23[0] = var_43;
            }
            long long int var_44 = var_22[0];
            float var_45 = var_23[0];
            var_5[0] = var_8;
        }
        long long int var_46 = var_5[0];
    }
    __global__ void method_10(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.y;
        long long int var_4 = blockIdx.y;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_6(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 + 1);
            char var_10 = (var_8 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_8 < 1);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_14 = (var_8 * 4);
            char var_16;
            if (var_10) {
                var_16 = (var_8 < 1);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            Tuple1 var_18[1];
            long long int var_19 = threadIdx.x;
            long long int var_20 = blockIdx.x;
            long long int var_21 = (4 * var_20);
            long long int var_22 = (var_19 + var_21);
            long long int var_23[1];
            var_23[0] = 0;
            while (method_6(var_23)) {
                long long int var_25 = var_23[0];
                long long int var_26 = (var_25 + 1);
                long long int var_27 = (4 * var_25);
                long long int var_28 = (var_22 + var_27);
                long long int var_29 = (4 - var_27);
                char var_30 = (var_28 < 4);
                if (var_30) {
                    char var_31 = (var_25 >= 0);
                    char var_33;
                    if (var_31) {
                        var_33 = (var_25 < 1);
                    } else {
                        var_33 = 0;
                    }
                    char var_34 = (var_33 == 0);
                    if (var_34) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_35 = (var_28 >= 0);
                    char var_36 = (var_35 == 0);
                    if (var_36) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_37 = (var_14 + var_28);
                    float var_38 = var_0[var_37];
                    float var_39 = var_1[var_37];
                    var_18[var_25] = make_Tuple1(var_38, var_39);
                } else {
                }
                var_23[0] = var_26;
            }
            long long int var_40 = var_23[0];
            float var_42[1];
            long long int var_43[1];
            var_43[0] = 0;
            while (method_6(var_43)) {
                long long int var_45 = var_43[0];
                long long int var_46 = (var_45 + 1);
                long long int var_47 = (4 * var_45);
                long long int var_48 = (var_22 + var_47);
                long long int var_49 = (4 - var_47);
                char var_50 = (var_48 < 4);
                if (var_50) {
                    char var_51 = (var_45 >= 0);
                    char var_53;
                    if (var_51) {
                        var_53 = (var_45 < 1);
                    } else {
                        var_53 = 0;
                    }
                    char var_54 = (var_53 == 0);
                    if (var_54) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_55 = var_18[var_45];
                    float var_56 = var_55.mem_0;
                    float var_57 = var_55.mem_1;
                    float var_58 = (var_56 * var_57);
                    char var_60;
                    if (var_51) {
                        var_60 = (var_45 < 1);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_42[var_45] = var_58;
                } else {
                }
                var_43[0] = var_46;
            }
            long long int var_62 = var_43[0];
            float var_63 = cub::BlockReduce<float,4,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_42);
            __shared__ float var_64[1];
            long long int var_65 = threadIdx.x;
            char var_66 = (var_65 == 0);
            if (var_66) {
                var_64[0] = var_63;
            } else {
            }
            __syncthreads();
            float var_67 = var_64[0];
            long long int var_68[1];
            var_68[0] = 0;
            while (method_6(var_68)) {
                long long int var_70 = var_68[0];
                long long int var_71 = (var_70 + 1);
                long long int var_72 = (4 * var_70);
                long long int var_73 = (var_22 + var_72);
                long long int var_74 = (4 - var_72);
                char var_75 = (var_73 < 4);
                if (var_75) {
                    char var_76 = (var_73 >= 0);
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_78 = (var_14 + var_73);
                    char var_79 = (var_70 >= 0);
                    char var_81;
                    if (var_79) {
                        var_81 = (var_70 < 1);
                    } else {
                        var_81 = 0;
                    }
                    char var_82 = (var_81 == 0);
                    if (var_82) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_83 = var_18[var_70];
                    float var_84 = var_83.mem_0;
                    float var_85 = var_83.mem_1;
                    float var_86 = var_2[var_78];
                    float var_87 = (var_85 * var_84);
                    float var_88 = (1 - var_84);
                    float var_89 = (var_87 * var_88);
                    float var_90 = (var_67 - var_87);
                    float var_91 = (var_84 * var_90);
                    float var_92 = (var_89 - var_91);
                    var_2[var_78] = var_92;
                } else {
                }
                var_68[0] = var_71;
            }
            long long int var_93 = var_68[0];
            var_6[0] = var_9;
        }
        long long int var_94 = var_6[0];
    }
    __device__ char method_6(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1);
    }
    __device__ float method_7(float var_0, float var_1) {
        char var_2 = (var_0 > var_1);
        if (var_2) {
            return var_0;
        } else {
            return var_1;
        }
    }
    __device__ char method_9(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 4);
    }
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: ManagedCuda.BasicTypes.CUdeviceptr
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: (Union0 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: EnvStack2
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (Union0 ref))): ManagedCuda.BasicTypes.CUdeviceptr =
    let (var_1: Union0) = (!var_0)
    match var_1 with
    | Union0Case0(var_2) ->
        var_2.mem_0
    | Union0Case1 ->
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
and method_2((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64)): EnvStack2 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env3) = var_1.Peek()
        let (var_7: EnvStack2) = var_6.mem_0
        let (var_8: int64) = var_6.mem_1
        let (var_9: (Union0 ref)) = var_7.mem_0
        let (var_10: Union0) = (!var_9)
        match var_10 with
        | Union0Case0(var_11) ->
            let (var_12: ManagedCuda.BasicTypes.CUdeviceptr) = var_11.mem_0
            method_3((var_12: ManagedCuda.BasicTypes.CUdeviceptr), (var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>), (var_7: EnvStack2), (var_8: int64))
        | Union0Case1 ->
            let (var_14: Env3) = var_1.Pop()
            let (var_15: EnvStack2) = var_14.mem_0
            let (var_16: int64) = var_14.mem_1
            method_2((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64))
    else
        method_4((var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>))
and method_11((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64)): unit =
    let (var_13: int64) = (var_10 - var_9)
    let (var_14: int64) = (var_12 - var_11)
    let (var_15: int64) = (var_13 * var_14)
    let (var_16: bool) = (var_15 > 0L)
    let (var_17: bool) = (var_16 = false)
    if var_17 then
        (failwith "Tensor needs to be at least size 1.")
    else
        ()
    let (var_18: int64) = (var_14 * var_8)
    let (var_19: bool) = (var_7 = var_18)
    let (var_20: bool) = (var_19 = false)
    if var_20 then
        (failwith "The tensor must be contiguous in order to be flattened.")
    else
        ()
    let (var_21: int64) = (var_13 * var_7)
    let (var_22: bool) = (var_6 = 0L)
    let (var_23: bool) = (var_22 = false)
    if var_23 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_24: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_15))
    let (var_25: (Union0 ref)) = var_5.mem_0
    let (var_26: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_25: (Union0 ref)))
    var_0.CopyToHost(var_24, var_26)
    let (var_27: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_28: string) = ""
    let (var_29: int64) = 0L
    let (var_30: int64) = 0L
    method_12((var_27: System.Text.StringBuilder), (var_30: int64))
    let (var_31: System.Text.StringBuilder) = var_27.AppendLine("[|")
    let (var_32: int64) = method_13((var_27: System.Text.StringBuilder), (var_28: string), (var_24: (float32 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_12: int64), (var_29: int64))
    let (var_33: int64) = 0L
    method_12((var_27: System.Text.StringBuilder), (var_33: int64))
    let (var_34: System.Text.StringBuilder) = var_27.AppendLine("|]")
    let (var_35: string) = var_27.ToString()
    let (var_36: string) = System.String.Format("{0}",var_35)
    System.Console.WriteLine(var_36)
and method_3((var_0: ManagedCuda.BasicTypes.CUdeviceptr), (var_1: uint64), (var_2: uint64), (var_3: int64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64)): EnvStack2 =
    let (var_7: ManagedCuda.BasicTypes.SizeT) = var_0.Pointer
    let (var_8: uint64) = uint64 var_7
    let (var_9: uint64) = uint64 var_6
    let (var_10: int64) = (var_3 % 256L)
    let (var_11: int64) = (var_3 - var_10)
    let (var_12: int64) = (var_11 + 256L)
    let (var_13: uint64) = (var_8 + var_9)
    let (var_14: uint64) = (var_1 + var_2)
    let (var_15: uint64) = uint64 var_12
    let (var_16: uint64) = (var_14 - var_13)
    let (var_17: bool) = (var_15 <= var_16)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_20))))
    let (var_22: EnvStack2) = EnvStack2((var_21: (Union0 ref)))
    var_4.Push((Env3(var_22, var_12)))
    var_22
and method_4((var_0: uint64), (var_1: uint64), (var_2: int64), (var_3: System.Collections.Generic.Stack<Env3>)): EnvStack2 =
    let (var_4: int64) = (var_2 % 256L)
    let (var_5: int64) = (var_2 - var_4)
    let (var_6: int64) = (var_5 + 256L)
    let (var_7: uint64) = (var_0 + var_1)
    let (var_8: uint64) = uint64 var_6
    let (var_9: uint64) = (var_7 - var_0)
    let (var_10: bool) = (var_8 <= var_9)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_12: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_0)
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_12)
    let (var_14: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_13))))
    let (var_15: EnvStack2) = EnvStack2((var_14: (Union0 ref)))
    var_3.Push((Env3(var_15, var_6)))
    var_15
and method_12((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_12((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_13((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64)): int64 =
    let (var_11: bool) = (var_6 < var_7)
    if var_11 then
        let (var_12: bool) = (var_10 < 1000L)
        if var_12 then
            let (var_13: bool) = (var_6 >= var_6)
            let (var_14: bool) = (var_13 = false)
            if var_14 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_15: int64) = 0L
            method_14((var_0: System.Text.StringBuilder), (var_15: int64))
            let (var_16: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_17: int64) = method_15((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_3: int64), (var_5: int64), (var_8: int64), (var_9: int64), (var_1: string), (var_10: int64))
            let (var_18: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_19: int64) = (var_6 + 1L)
            method_17((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_17: int64), (var_19: int64))
        else
            let (var_21: int64) = 0L
            method_12((var_0: System.Text.StringBuilder), (var_21: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
and method_14((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_14((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_15((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64)): int64 =
    let (var_8: bool) = (var_4 < var_5)
    if var_8 then
        let (var_9: bool) = (var_7 < 1000L)
        if var_9 then
            let (var_10: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_11: bool) = (var_4 >= var_4)
            let (var_12: bool) = (var_11 = false)
            if var_12 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_13: float32) = var_1.[int32 var_2]
            let (var_14: string) = System.String.Format("{0}",var_13)
            let (var_15: System.Text.StringBuilder) = var_0.Append(var_14)
            let (var_16: string) = "; "
            let (var_17: int64) = (var_7 + 1L)
            let (var_18: int64) = (var_4 + 1L)
            method_16((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_16: string), (var_17: int64), (var_18: int64))
        else
            let (var_20: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
and method_17((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): int64 =
    let (var_12: bool) = (var_11 < var_7)
    if var_12 then
        let (var_13: bool) = (var_10 < 1000L)
        if var_13 then
            let (var_14: bool) = (var_11 >= var_6)
            let (var_15: bool) = (var_14 = false)
            if var_15 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_16: int64) = (var_11 - var_6)
            let (var_17: int64) = (var_16 * var_4)
            let (var_18: int64) = (var_3 + var_17)
            let (var_19: int64) = 0L
            method_14((var_0: System.Text.StringBuilder), (var_19: int64))
            let (var_20: System.Text.StringBuilder) = var_0.Append("[|")
            let (var_21: int64) = method_15((var_0: System.Text.StringBuilder), (var_2: (float32 [])), (var_18: int64), (var_5: int64), (var_8: int64), (var_9: int64), (var_1: string), (var_10: int64))
            let (var_22: System.Text.StringBuilder) = var_0.AppendLine("|]")
            let (var_23: int64) = (var_11 + 1L)
            method_17((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (float32 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_21: int64), (var_23: int64))
        else
            let (var_25: int64) = 0L
            method_12((var_0: System.Text.StringBuilder), (var_25: int64))
            let (var_26: System.Text.StringBuilder) = var_0.AppendLine("...")
            var_10
    else
        var_10
and method_16((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: string), (var_7: int64), (var_8: int64)): int64 =
    let (var_9: bool) = (var_8 < var_5)
    if var_9 then
        let (var_10: bool) = (var_7 < 1000L)
        if var_10 then
            let (var_11: System.Text.StringBuilder) = var_0.Append(var_6)
            let (var_12: bool) = (var_8 >= var_4)
            let (var_13: bool) = (var_12 = false)
            if var_13 then
                (failwith "Argument out of bounds.")
            else
                ()
            let (var_14: int64) = (var_8 - var_4)
            let (var_15: int64) = (var_14 * var_3)
            let (var_16: int64) = (var_2 + var_15)
            let (var_17: float32) = var_1.[int32 var_16]
            let (var_18: string) = System.String.Format("{0}",var_17)
            let (var_19: System.Text.StringBuilder) = var_0.Append(var_18)
            let (var_20: string) = "; "
            let (var_21: int64) = (var_7 + 1L)
            let (var_22: int64) = (var_8 + 1L)
            method_16((var_0: System.Text.StringBuilder), (var_1: (float32 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: int64), (var_20: string), (var_21: int64), (var_22: int64))
        else
            let (var_24: System.Text.StringBuilder) = var_0.Append("...")
            var_7
    else
        var_7
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.CudaDeviceProperties) = var_1.GetDeviceInfo()
let (var_36: ManagedCuda.BasicTypes.SizeT) = var_35.get_TotalGlobalMemory()
let (var_37: int64) = int64 var_36
let (var_38: float) = float var_37
let (var_39: float) = (0.100000 * var_38)
let (var_40: int64) = int64 var_39
let (var_41: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_40)
let (var_42: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_41)
let (var_43: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_42))))
let (var_44: EnvStack2) = EnvStack2((var_43: (Union0 ref)))
let (var_45: System.Collections.Generic.Stack<Env3>) = System.Collections.Generic.Stack<Env3>()
let (var_46: (Union0 ref)) = var_44.mem_0
let (var_47: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
let (var_48: ManagedCuda.BasicTypes.SizeT) = var_47.Pointer
let (var_49: uint64) = uint64 var_48
let (var_50: uint64) = uint64 var_40
let (var_51: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_52: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_53: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_52)
let (var_54: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
var_53.SetStream(var_54)
let (var_55: int64) = 16L
let (var_56: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_55: int64))
let (var_57: (Union0 ref)) = var_56.mem_0
let (var_58: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_57: (Union0 ref)))
let (var_59: ManagedCuda.BasicTypes.SizeT) = var_58.Pointer
let (var_60: uint64) = uint64 var_59
let (var_61: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_60)
let (var_62: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_61)
let (var_63: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(4L)
var_53.GenerateNormal32(var_62, var_63, 0.000000f, 1.000000f)
let (var_64: int64) = 16L
let (var_65: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_64: int64))
let (var_66: (Union0 ref)) = var_65.mem_0
let (var_67: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
let (var_68: ManagedCuda.BasicTypes.SizeT) = var_67.Pointer
let (var_69: uint64) = uint64 var_68
let (var_70: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_69)
let (var_71: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_70)
let (var_72: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(4L)
var_53.GenerateNormal32(var_71, var_72, 1.000000f, 0.000000f)
let (var_76: int64) = 16L
let (var_77: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_76: int64))
let (var_78: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_57: (Union0 ref)))
let (var_79: ManagedCuda.BasicTypes.SizeT) = var_78.Pointer
let (var_80: uint64) = uint64 var_79
let (var_81: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_80)
let (var_82: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_81)
let (var_83: (Union0 ref)) = var_77.mem_0
let (var_84: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_83: (Union0 ref)))
let (var_85: ManagedCuda.BasicTypes.SizeT) = var_84.Pointer
let (var_86: uint64) = uint64 var_85
let (var_87: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_86)
let (var_88: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_87)
// Cuda join point
// method_5((var_82: ManagedCuda.BasicTypes.CUdeviceptr), (var_88: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_89: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_5", var_32, var_1)
let (var_90: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_89.set_GridDimensions(var_90)
let (var_91: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_89.set_BlockDimensions(var_91)
let (var_92: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_94: (System.Object [])) = [|var_82; var_88|]: (System.Object [])
var_89.RunAsync(var_92, var_94)
let (var_95: int64) = 16L
let (var_96: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_95: int64))
let (var_97: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_83: (Union0 ref)))
let (var_98: ManagedCuda.BasicTypes.SizeT) = var_97.Pointer
let (var_99: uint64) = uint64 var_98
let (var_100: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_99)
let (var_101: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_100)
let (var_102: (Union0 ref)) = var_96.mem_0
let (var_103: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_102: (Union0 ref)))
let (var_104: ManagedCuda.BasicTypes.SizeT) = var_103.Pointer
let (var_105: uint64) = uint64 var_104
let (var_106: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_105)
let (var_107: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_106)
// Cuda join point
// method_8((var_101: ManagedCuda.BasicTypes.CUdeviceptr), (var_107: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_108: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_8", var_32, var_1)
let (var_109: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_108.set_GridDimensions(var_109)
let (var_110: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_108.set_BlockDimensions(var_110)
let (var_111: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_113: (System.Object [])) = [|var_101; var_107|]: (System.Object [])
var_108.RunAsync(var_111, var_113)
let (var_117: int64) = 16L
let (var_118: EnvStack2) = method_2((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_117: int64))
let (var_119: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_57: (Union0 ref)))
let (var_120: ManagedCuda.BasicTypes.SizeT) = var_119.Pointer
let (var_121: uint64) = uint64 var_120
let (var_122: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_121)
let (var_123: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_122)
let (var_124: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_66: (Union0 ref)))
let (var_125: ManagedCuda.BasicTypes.SizeT) = var_124.Pointer
let (var_126: uint64) = uint64 var_125
let (var_127: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_126)
let (var_128: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_127)
let (var_129: (Union0 ref)) = var_118.mem_0
let (var_130: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_129: (Union0 ref)))
let (var_131: ManagedCuda.BasicTypes.SizeT) = var_130.Pointer
let (var_132: uint64) = uint64 var_131
let (var_133: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_132)
let (var_134: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_133)
// Cuda join point
// method_10((var_123: ManagedCuda.BasicTypes.CUdeviceptr), (var_128: ManagedCuda.BasicTypes.CUdeviceptr), (var_134: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_135: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_10", var_32, var_1)
let (var_136: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_135.set_GridDimensions(var_136)
let (var_137: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
var_135.set_BlockDimensions(var_137)
let (var_138: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_140: (System.Object [])) = [|var_123; var_128; var_134|]: (System.Object [])
var_135.RunAsync(var_138, var_140)
let (var_141: int64) = 0L
let (var_142: int64) = 4L
let (var_143: int64) = 1L
let (var_144: int64) = 0L
let (var_145: int64) = 1L
let (var_146: int64) = 0L
let (var_147: int64) = 4L
method_11((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_56: EnvStack2), (var_141: int64), (var_142: int64), (var_143: int64), (var_144: int64), (var_145: int64), (var_146: int64), (var_147: int64))
let (var_148: int64) = 0L
let (var_149: int64) = 4L
let (var_150: int64) = 1L
let (var_151: int64) = 0L
let (var_152: int64) = 1L
let (var_153: int64) = 0L
let (var_154: int64) = 4L
method_11((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_118: EnvStack2), (var_148: int64), (var_149: int64), (var_150: int64), (var_151: int64), (var_152: int64), (var_153: int64), (var_154: int64))
var_129 := Union0Case1
var_102 := Union0Case1
var_83 := Union0Case1
var_66 := Union0Case1
var_57 := Union0Case1
var_53.Dispose()
var_51.Dispose()
let (var_155: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
var_1.FreeMemory(var_155)
var_46 := Union0Case1
var_1.Dispose()

