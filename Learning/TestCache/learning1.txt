module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"
#include <assert.h>

extern "C" {
    struct Tuple1 {
        float mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple1 make_Tuple1(float mem_0, float mem_1){
        Tuple1 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef float(*FunPointer0)(float, float);
    struct Tuple3 {
        Tuple1 mem_0;
        Tuple1 mem_1;
    };
    __device__ __forceinline__ Tuple3 make_Tuple3(Tuple1 mem_0, Tuple1 mem_1){
        Tuple3 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef Tuple1(*FunPointer2)(Tuple1, Tuple1);
    __global__ void method_117(float * var_0, float * var_1, float * var_2);
    __global__ void method_123(float * var_0, float * var_1);
    __global__ void method_130(float * var_0, float * var_1);
    __global__ void method_133(float * var_0, float * var_1);
    __global__ void method_137(float * var_0, float * var_1);
    __global__ void method_141(float * var_0, float * var_1);
    __global__ void method_144(float * var_0, float * var_1);
    __global__ void method_161(long long int * var_0, long long int * var_1);
    __global__ void method_66(float * var_0, float * var_1);
    __global__ void method_104(float * var_0, float * var_1);
    __global__ void method_127(float * var_0, float * var_1, float * var_2);
    __global__ void method_72(float * var_0, float * var_1);
    __global__ void method_155(float * var_0, float * var_1, long long int * var_2);
    __global__ void method_78(float * var_0, float * var_1, float * var_2, float * var_3);
    __global__ void method_84(float * var_0, float * var_1);
    __global__ void method_113(float * var_0, float * var_1);
    __device__ char method_68(long long int * var_0);
    __device__ char method_118(long long int * var_0);
    __device__ float method_119(float var_0, float var_1);
    __device__ char method_85(long long int * var_0, float * var_1);
    __device__ char method_67(long long int * var_0);
    __device__ char method_134(long long int * var_0);
    __device__ char method_138(long long int * var_0);
    __device__ char method_105(long long int * var_0);
    __device__ char method_145(long long int * var_0);
    __device__ char method_162(long long int * var_0, long long int * var_1);
    __device__ char method_73(long long int * var_0);
    __device__ char method_156(long long int * var_0, float * var_1, float * var_2);
    __device__ Tuple1 method_157(Tuple1 var_0, Tuple1 var_1);
    __device__ char method_86(long long int * var_0, float * var_1);
    __device__ char method_87(long long int var_0, long long int * var_1, float * var_2);
    
    __global__ void method_117(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_68(var_10)) {
            long long int var_12 = var_10[0];
            float var_26[1];
            long long int var_27[1];
            var_27[0] = 0;
            while (method_118(var_27)) {
                long long int var_29 = var_27[0];
                long long int var_30 = (10 * var_29);
                long long int var_31 = (var_6 + var_30);
                long long int var_32 = (10 - var_30);
                char var_33 = (var_31 < 10);
                if (var_33) {
                    char var_34 = (var_29 >= 0);
                    char var_36;
                    if (var_34) {
                        var_36 = (var_29 < 1);
                    } else {
                        var_36 = 0;
                    }
                    char var_37 = (var_36 == 0);
                    if (var_37) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_38 = (var_12 >= 0);
                    char var_40;
                    if (var_38) {
                        var_40 = (var_12 < 128);
                    } else {
                        var_40 = 0;
                    }
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 * 10);
                    char var_43 = (var_31 >= 0);
                    char var_44 = (var_43 == 0);
                    if (var_44) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_45 = (var_42 + var_31);
                    float var_46 = var_0[var_45];
                    var_26[var_29] = var_46;
                } else {
                }
                long long int var_47 = (var_29 + 1);
                var_27[0] = var_47;
            }
            long long int var_48 = var_27[0];
            FunPointer0 var_51 = method_119;
            float var_52 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_26, var_51);
            __shared__ float var_53[1];
            long long int var_54 = threadIdx.x;
            char var_55 = (var_54 == 0);
            if (var_55) {
                var_53[0] = var_52;
            } else {
            }
            __syncthreads();
            float var_56 = var_53[0];
            float var_66[1];
            long long int var_67[1];
            var_67[0] = 0;
            while (method_118(var_67)) {
                long long int var_69 = var_67[0];
                long long int var_70 = (10 * var_69);
                long long int var_71 = (var_6 + var_70);
                long long int var_72 = (10 - var_70);
                char var_73 = (var_71 < 10);
                if (var_73) {
                    char var_74 = (var_69 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_69 < 1);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_79;
                    if (var_74) {
                        var_79 = (var_69 < 1);
                    } else {
                        var_79 = 0;
                    }
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_81 = var_26[var_69];
                    float var_82 = (var_81 - var_56);
                    float var_83 = exp(var_82);
                    var_66[var_69] = var_83;
                } else {
                }
                long long int var_84 = (var_69 + 1);
                var_67[0] = var_84;
            }
            long long int var_85 = var_67[0];
            float var_86 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_66);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            float var_113[1];
            long long int var_114[1];
            var_114[0] = 0;
            while (method_118(var_114)) {
                long long int var_116 = var_114[0];
                long long int var_117 = (10 * var_116);
                long long int var_118 = (var_6 + var_117);
                long long int var_119 = (10 - var_117);
                char var_120 = (var_118 < 10);
                if (var_120) {
                    char var_121 = (var_116 >= 0);
                    char var_123;
                    if (var_121) {
                        var_123 = (var_116 < 1);
                    } else {
                        var_123 = 0;
                    }
                    char var_124 = (var_123 == 0);
                    if (var_124) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_126;
                    if (var_121) {
                        var_126 = (var_116 < 1);
                    } else {
                        var_126 = 0;
                    }
                    char var_127 = (var_126 == 0);
                    if (var_127) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_128 = var_66[var_116];
                    float var_129 = (var_128 / var_90);
                    char var_130 = (var_12 >= 0);
                    char var_132;
                    if (var_130) {
                        var_132 = (var_12 < 128);
                    } else {
                        var_132 = 0;
                    }
                    char var_133 = (var_132 == 0);
                    if (var_133) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_134 = (var_12 * 10);
                    char var_135 = (var_118 >= 0);
                    char var_136 = (var_135 == 0);
                    if (var_136) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_137 = (var_134 + var_118);
                    float var_138 = var_1[var_137];
                    float var_139 = (-var_138);
                    float var_140 = log(var_129);
                    float var_141 = (var_139 * var_140);
                    var_113[var_116] = var_141;
                } else {
                }
                long long int var_142 = (var_116 + 1);
                var_114[0] = var_142;
            }
            long long int var_143 = var_114[0];
            float var_144 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_113);
            long long int var_158[1];
            var_158[0] = 0;
            while (method_118(var_158)) {
                long long int var_160 = var_158[0];
                long long int var_161 = (10 * var_160);
                long long int var_162 = (var_6 + var_161);
                long long int var_163 = (10 - var_161);
                char var_164 = (var_162 < 10);
                if (var_164) {
                    char var_165 = (var_160 >= 0);
                    char var_167;
                    if (var_165) {
                        var_167 = (var_160 < 1);
                    } else {
                        var_167 = 0;
                    }
                    char var_168 = (var_167 == 0);
                    if (var_168) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_170;
                    if (var_165) {
                        var_170 = (var_160 < 1);
                    } else {
                        var_170 = 0;
                    }
                    char var_171 = (var_170 == 0);
                    if (var_171) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_172 = var_113[var_160];
                    long long int var_173 = threadIdx.x;
                    char var_174 = (var_173 == 0);
                    if (var_174) {
                        char var_175 = (var_12 >= 0);
                        char var_177;
                        if (var_175) {
                            var_177 = (var_12 < 128);
                        } else {
                            var_177 = 0;
                        }
                        char var_178 = (var_177 == 0);
                        if (var_178) {
                            // "Argument out of bounds."
                        } else {
                        }
                        var_2[var_12] = var_144;
                    } else {
                    }
                } else {
                }
                long long int var_179 = (var_160 + 1);
                var_158[0] = var_179;
            }
            long long int var_180 = var_158[0];
            long long int var_181 = (var_12 + 64);
            var_10[0] = var_181;
        }
        long long int var_182 = var_10[0];
    }
    __global__ void method_123(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        float var_6 = 0;
        long long int var_7[1];
        float var_8[1];
        var_7[0] = var_5;
        var_8[0] = var_6;
        while (method_85(var_7, var_8)) {
            long long int var_10 = var_7[0];
            float var_11 = var_8[0];
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_10];
            float var_17 = (var_11 + var_16);
            long long int var_18 = (var_10 + 128);
            var_7[0] = var_18;
            var_8[0] = var_17;
        }
        long long int var_19 = var_7[0];
        float var_20 = var_8[0];
        float var_21 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_20);
        long long int var_22 = threadIdx.x;
        char var_23 = (var_22 == 0);
        if (var_23) {
            long long int var_24 = blockIdx.x;
            char var_25 = (var_24 >= 0);
            char var_27;
            if (var_25) {
                var_27 = (var_24 < 1);
            } else {
                var_27 = 0;
            }
            char var_28 = (var_27 == 0);
            if (var_28) {
                // "Argument out of bounds."
            } else {
            }
            var_1[var_24] = var_21;
        } else {
        }
    }
    __global__ void method_130(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_67(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 256);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.00234375 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 256);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_133(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_134(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 200704);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 200704);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.00234375 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_137(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_138(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 65536);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 65536);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.00234375 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_141(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_105(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 10);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.00234375 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 128);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_144(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_145(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 2560);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 2560);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.00234375 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 2560);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_161(long long int * var_0, long long int * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6 = 0;
        long long int var_7[1];
        long long int var_8[1];
        var_7[0] = var_5;
        var_8[0] = var_6;
        while (method_162(var_7, var_8)) {
            long long int var_10 = var_7[0];
            long long int var_11 = var_8[0];
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = var_0[var_10];
            long long int var_17 = (var_11 + var_16);
            long long int var_18 = (var_10 + 128);
            var_7[0] = var_18;
            var_8[0] = var_17;
        }
        long long int var_19 = var_7[0];
        long long int var_20 = var_8[0];
        long long int var_21 = cub::BlockReduce<long long int,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_20);
        long long int var_22 = threadIdx.x;
        char var_23 = (var_22 == 0);
        if (var_23) {
            long long int var_24 = blockIdx.x;
            char var_25 = (var_24 >= 0);
            char var_27;
            if (var_25) {
                var_27 = (var_24 < 1);
            } else {
                var_27 = 0;
            }
            char var_28 = (var_27 == 0);
            if (var_28) {
                // "Argument out of bounds."
            } else {
            }
            var_1[var_24] = var_21;
        } else {
        }
    }
    __global__ void method_66(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_67(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            float var_13 = var_0[var_8];
            long long int var_14 = threadIdx.y;
            long long int var_15 = blockIdx.y;
            long long int var_16 = (32 * var_15);
            long long int var_17 = (var_14 + var_16);
            long long int var_18[1];
            var_18[0] = var_17;
            while (method_68(var_18)) {
                long long int var_20 = var_18[0];
                char var_21 = (var_20 >= 0);
                char var_23;
                if (var_21) {
                    var_23 = (var_20 < 128);
                } else {
                    var_23 = 0;
                }
                char var_24 = (var_23 == 0);
                if (var_24) {
                    // "Argument out of bounds."
                } else {
                }
                char var_26;
                if (var_9) {
                    var_26 = (var_8 < 256);
                } else {
                    var_26 = 0;
                }
                char var_27 = (var_26 == 0);
                if (var_27) {
                    // "Argument out of bounds."
                } else {
                }
                char var_29;
                if (var_21) {
                    var_29 = (var_20 < 128);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_20 * 256);
                char var_33;
                if (var_9) {
                    var_33 = (var_8 < 256);
                } else {
                    var_33 = 0;
                }
                char var_34 = (var_33 == 0);
                if (var_34) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_35 = (var_31 + var_8);
                float var_36 = var_1[var_35];
                float var_37 = (var_13 + var_36);
                var_1[var_35] = var_37;
                long long int var_38 = (var_20 + 32);
                var_18[0] = var_38;
            }
            long long int var_39 = var_18[0];
            long long int var_40 = (var_8 + 256);
            var_6[0] = var_40;
        }
        long long int var_41 = var_6[0];
    }
    __global__ void method_104(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (10 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_105(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            float var_13 = var_0[var_8];
            long long int var_14 = threadIdx.y;
            long long int var_15 = blockIdx.y;
            long long int var_16 = (32 * var_15);
            long long int var_17 = (var_14 + var_16);
            long long int var_18[1];
            var_18[0] = var_17;
            while (method_68(var_18)) {
                long long int var_20 = var_18[0];
                char var_21 = (var_20 >= 0);
                char var_23;
                if (var_21) {
                    var_23 = (var_20 < 128);
                } else {
                    var_23 = 0;
                }
                char var_24 = (var_23 == 0);
                if (var_24) {
                    // "Argument out of bounds."
                } else {
                }
                char var_26;
                if (var_9) {
                    var_26 = (var_8 < 10);
                } else {
                    var_26 = 0;
                }
                char var_27 = (var_26 == 0);
                if (var_27) {
                    // "Argument out of bounds."
                } else {
                }
                char var_29;
                if (var_21) {
                    var_29 = (var_20 < 128);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_20 * 10);
                char var_33;
                if (var_9) {
                    var_33 = (var_8 < 10);
                } else {
                    var_33 = 0;
                }
                char var_34 = (var_33 == 0);
                if (var_34) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_35 = (var_31 + var_8);
                float var_36 = var_1[var_35];
                float var_37 = (var_13 + var_36);
                var_1[var_35] = var_37;
                long long int var_38 = (var_20 + 32);
                var_18[0] = var_38;
            }
            long long int var_39 = var_18[0];
            long long int var_40 = (var_8 + 10);
            var_6[0] = var_40;
        }
        long long int var_41 = var_6[0];
    }
    __global__ void method_127(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_68(var_10)) {
            long long int var_12 = var_10[0];
            float var_26[1];
            long long int var_27[1];
            var_27[0] = 0;
            while (method_118(var_27)) {
                long long int var_29 = var_27[0];
                long long int var_30 = (10 * var_29);
                long long int var_31 = (var_6 + var_30);
                long long int var_32 = (10 - var_30);
                char var_33 = (var_31 < 10);
                if (var_33) {
                    char var_34 = (var_29 >= 0);
                    char var_36;
                    if (var_34) {
                        var_36 = (var_29 < 1);
                    } else {
                        var_36 = 0;
                    }
                    char var_37 = (var_36 == 0);
                    if (var_37) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_38 = (var_12 >= 0);
                    char var_40;
                    if (var_38) {
                        var_40 = (var_12 < 128);
                    } else {
                        var_40 = 0;
                    }
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 * 10);
                    char var_43 = (var_31 >= 0);
                    char var_44 = (var_43 == 0);
                    if (var_44) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_45 = (var_42 + var_31);
                    float var_46 = var_0[var_45];
                    var_26[var_29] = var_46;
                } else {
                }
                long long int var_47 = (var_29 + 1);
                var_27[0] = var_47;
            }
            long long int var_48 = var_27[0];
            FunPointer0 var_51 = method_119;
            float var_52 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_26, var_51);
            __shared__ float var_53[1];
            long long int var_54 = threadIdx.x;
            char var_55 = (var_54 == 0);
            if (var_55) {
                var_53[0] = var_52;
            } else {
            }
            __syncthreads();
            float var_56 = var_53[0];
            float var_66[1];
            long long int var_67[1];
            var_67[0] = 0;
            while (method_118(var_67)) {
                long long int var_69 = var_67[0];
                long long int var_70 = (10 * var_69);
                long long int var_71 = (var_6 + var_70);
                long long int var_72 = (10 - var_70);
                char var_73 = (var_71 < 10);
                if (var_73) {
                    char var_74 = (var_69 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_69 < 1);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_79;
                    if (var_74) {
                        var_79 = (var_69 < 1);
                    } else {
                        var_79 = 0;
                    }
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_81 = var_26[var_69];
                    float var_82 = (var_81 - var_56);
                    float var_83 = exp(var_82);
                    var_66[var_69] = var_83;
                } else {
                }
                long long int var_84 = (var_69 + 1);
                var_67[0] = var_84;
            }
            long long int var_85 = var_67[0];
            float var_86 = cub::BlockReduce<float,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_66);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            long long int var_125[1];
            var_125[0] = 0;
            while (method_118(var_125)) {
                long long int var_127 = var_125[0];
                long long int var_128 = (10 * var_127);
                long long int var_129 = (var_6 + var_128);
                long long int var_130 = (10 - var_128);
                char var_131 = (var_129 < 10);
                if (var_131) {
                    char var_132 = (var_127 >= 0);
                    char var_134;
                    if (var_132) {
                        var_134 = (var_127 < 1);
                    } else {
                        var_134 = 0;
                    }
                    char var_135 = (var_134 == 0);
                    if (var_135) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_137;
                    if (var_132) {
                        var_137 = (var_127 < 1);
                    } else {
                        var_137 = 0;
                    }
                    char var_138 = (var_137 == 0);
                    if (var_138) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_139 = var_66[var_127];
                    float var_140 = (var_139 / var_90);
                    char var_141 = (var_12 >= 0);
                    char var_143;
                    if (var_141) {
                        var_143 = (var_12 < 128);
                    } else {
                        var_143 = 0;
                    }
                    char var_144 = (var_143 == 0);
                    if (var_144) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_145 = (var_12 * 10);
                    char var_146 = (var_129 >= 0);
                    char var_147 = (var_146 == 0);
                    if (var_147) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_148 = (var_145 + var_129);
                    float var_149 = var_2[var_148];
                    char var_151;
                    if (var_141) {
                        var_151 = (var_12 < 128);
                    } else {
                        var_151 = 0;
                    }
                    char var_152 = (var_151 == 0);
                    if (var_152) {
                        // "Argument out of bounds."
                    } else {
                    }
                    if (var_147) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_154;
                    if (var_141) {
                        var_154 = (var_12 < 128);
                    } else {
                        var_154 = 0;
                    }
                    char var_155 = (var_154 == 0);
                    if (var_155) {
                        // "Argument out of bounds."
                    } else {
                    }
                    if (var_147) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_156 = var_1[var_148];
                    float var_157 = (var_140 - var_149);
                    float var_158 = (var_156 + var_157);
                    var_1[var_148] = var_158;
                } else {
                }
                long long int var_159 = (var_127 + 1);
                var_125[0] = var_159;
            }
            long long int var_160 = var_125[0];
            long long int var_161 = (var_12 + 64);
            var_10[0] = var_161;
        }
        long long int var_162 = var_10[0];
    }
    __global__ void method_72(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_73(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 32768);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 32768);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            char var_18 = (var_16 > 0);
            float var_19;
            if (var_18) {
                var_19 = var_16;
            } else {
                var_19 = 0;
            }
            var_1[var_8] = var_19;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_155(float * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.y;
        long long int var_4 = blockIdx.y;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_68(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_8 * 10);
            char var_15;
            if (var_9) {
                var_15 = (var_8 < 128);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.x;
            long long int var_18 = blockIdx.x;
            long long int var_19 = (10 * var_18);
            long long int var_20 = (var_17 + var_19);
            float var_21 = __int_as_float(0xff800000);
            float var_22 = 0;
            long long int var_23[1];
            float var_24[1];
            float var_25[1];
            var_23[0] = var_20;
            var_24[0] = var_21;
            var_25[0] = var_22;
            while (method_156(var_23, var_24, var_25)) {
                long long int var_27 = var_23[0];
                float var_28 = var_24[0];
                float var_29 = var_25[0];
                char var_30 = (var_27 >= 0);
                char var_32;
                if (var_30) {
                    var_32 = (var_27 < 10);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_13 + var_27);
                float var_35 = var_0[var_34];
                float var_36 = var_1[var_34];
                char var_37 = (var_28 > var_35);
                Tuple1 var_38;
                if (var_37) {
                    var_38 = make_Tuple1(var_28, var_29);
                } else {
                    var_38 = make_Tuple1(var_35, var_36);
                }
                float var_39 = var_38.mem_0;
                float var_40 = var_38.mem_1;
                long long int var_41 = (var_27 + 10);
                var_23[0] = var_41;
                var_24[0] = var_39;
                var_25[0] = var_40;
            }
            long long int var_42 = var_23[0];
            float var_43 = var_24[0];
            float var_44 = var_25[0];
            FunPointer2 var_47 = method_157;
            Tuple1 var_48 = cub::BlockReduce<Tuple1,10,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(make_Tuple1(var_43, var_44), var_47);
            float var_49 = var_48.mem_0;
            float var_50 = var_48.mem_1;
            long long int var_51 = threadIdx.x;
            char var_52 = (var_51 == 0);
            if (var_52) {
                char var_54;
                if (var_9) {
                    var_54 = (var_8 < 128);
                } else {
                    var_54 = 0;
                }
                char var_55 = (var_54 == 0);
                if (var_55) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_56 = var_2[var_8];
                long long int var_57 = ((long long int) (var_50));
                var_2[var_8] = var_57;
            } else {
            }
            long long int var_58 = (var_8 + 64);
            var_6[0] = var_58;
        }
        long long int var_59 = var_6[0];
    }
    __global__ void method_78(float * var_0, float * var_1, float * var_2, float * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (128 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8[1];
        var_8[0] = var_7;
        while (method_73(var_8)) {
            long long int var_10 = var_8[0];
            char var_11 = (var_10 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_10 < 32768);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            char var_16;
            if (var_11) {
                var_16 = (var_10 < 32768);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            float var_18 = var_0[var_10];
            float var_19 = var_1[var_10];
            float var_20 = var_2[var_10];
            float var_21 = var_3[var_10];
            char var_22 = (var_20 > 0);
            float var_23;
            if (var_22) {
                var_23 = 1;
            } else {
                var_23 = 0;
            }
            float var_24 = (var_19 * var_23);
            float var_25 = (var_21 + var_24);
            var_3[var_10] = var_25;
            long long int var_26 = (var_10 + 8192);
            var_8[0] = var_26;
        }
        long long int var_27 = var_8[0];
    }
    __global__ void method_84(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_67(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 256);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = threadIdx.y;
            long long int var_14 = blockIdx.y;
            long long int var_15 = (32 * var_14);
            long long int var_16 = (var_13 + var_15);
            float var_17 = 0;
            long long int var_18[1];
            float var_19[1];
            var_18[0] = var_16;
            var_19[0] = var_17;
            while (method_85(var_18, var_19)) {
                long long int var_21 = var_18[0];
                float var_22 = var_19[0];
                char var_23 = (var_21 >= 0);
                char var_25;
                if (var_23) {
                    var_25 = (var_21 < 128);
                } else {
                    var_25 = 0;
                }
                char var_26 = (var_25 == 0);
                if (var_26) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_27 = (var_21 * 256);
                char var_29;
                if (var_9) {
                    var_29 = (var_8 < 256);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_27 + var_8);
                float var_32 = var_0[var_31];
                float var_33 = (var_22 + var_32);
                long long int var_34 = (var_21 + 32);
                var_18[0] = var_34;
                var_19[0] = var_33;
            }
            long long int var_35 = var_18[0];
            float var_36 = var_19[0];
            long long int var_37 = threadIdx.x;
            long long int var_38 = threadIdx.y;
            __shared__ float var_39[992];
            long long int var_40[1];
            float var_41[1];
            var_40[0] = 32;
            var_41[0] = var_36;
            while (method_86(var_40, var_41)) {
                long long int var_43 = var_40[0];
                float var_44 = var_41[0];
                long long int var_45 = (var_43 / 2);
                char var_46 = (var_38 < var_43);
                char var_48;
                if (var_46) {
                    var_48 = (var_38 >= var_45);
                } else {
                    var_48 = 0;
                }
                if (var_48) {
                    char var_49 = (var_38 >= 1);
                    char var_51;
                    if (var_49) {
                        var_51 = (var_38 < 32);
                    } else {
                        var_51 = 0;
                    }
                    char var_52 = (var_51 == 0);
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_53 = (var_38 - 1);
                    long long int var_54 = (var_53 * 32);
                    char var_55 = (var_37 >= 0);
                    char var_57;
                    if (var_55) {
                        var_57 = (var_37 < 32);
                    } else {
                        var_57 = 0;
                    }
                    char var_58 = (var_57 == 0);
                    if (var_58) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_59 = (var_54 + var_37);
                    var_39[var_59] = var_44;
                } else {
                }
                __syncthreads();
                char var_60 = (var_38 < var_45);
                float var_83;
                if (var_60) {
                    long long int var_61 = (var_38 + var_45);
                    long long int var_62[1];
                    float var_63[1];
                    var_62[0] = var_61;
                    var_63[0] = var_44;
                    while (method_87(var_43, var_62, var_63)) {
                        long long int var_65 = var_62[0];
                        float var_66 = var_63[0];
                        char var_67 = (var_65 >= 1);
                        char var_69;
                        if (var_67) {
                            var_69 = (var_65 < 32);
                        } else {
                            var_69 = 0;
                        }
                        char var_70 = (var_69 == 0);
                        if (var_70) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_71 = (var_65 - 1);
                        long long int var_72 = (var_71 * 32);
                        char var_73 = (var_37 >= 0);
                        char var_75;
                        if (var_73) {
                            var_75 = (var_37 < 32);
                        } else {
                            var_75 = 0;
                        }
                        char var_76 = (var_75 == 0);
                        if (var_76) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_77 = (var_72 + var_37);
                        float var_78 = var_39[var_77];
                        float var_79 = (var_66 + var_78);
                        long long int var_80 = (var_65 + var_45);
                        var_62[0] = var_80;
                        var_63[0] = var_79;
                    }
                    long long int var_81 = var_62[0];
                    var_83 = var_63[0];
                } else {
                    var_83 = var_44;
                }
                var_40[0] = var_45;
                var_41[0] = var_83;
            }
            long long int var_84 = var_40[0];
            float var_85 = var_41[0];
            long long int var_86 = threadIdx.y;
            char var_87 = (var_86 == 0);
            if (var_87) {
                char var_89;
                if (var_9) {
                    var_89 = (var_8 < 256);
                } else {
                    var_89 = 0;
                }
                char var_90 = (var_89 == 0);
                if (var_90) {
                    // "Argument out of bounds."
                } else {
                }
                float var_91 = var_1[var_8];
                float var_92 = (var_85 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 256);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_113(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (10 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_105(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 10);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = threadIdx.y;
            long long int var_14 = blockIdx.y;
            long long int var_15 = (32 * var_14);
            long long int var_16 = (var_13 + var_15);
            float var_17 = 0;
            long long int var_18[1];
            float var_19[1];
            var_18[0] = var_16;
            var_19[0] = var_17;
            while (method_85(var_18, var_19)) {
                long long int var_21 = var_18[0];
                float var_22 = var_19[0];
                char var_23 = (var_21 >= 0);
                char var_25;
                if (var_23) {
                    var_25 = (var_21 < 128);
                } else {
                    var_25 = 0;
                }
                char var_26 = (var_25 == 0);
                if (var_26) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_27 = (var_21 * 10);
                char var_29;
                if (var_9) {
                    var_29 = (var_8 < 10);
                } else {
                    var_29 = 0;
                }
                char var_30 = (var_29 == 0);
                if (var_30) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_31 = (var_27 + var_8);
                float var_32 = var_0[var_31];
                float var_33 = (var_22 + var_32);
                long long int var_34 = (var_21 + 32);
                var_18[0] = var_34;
                var_19[0] = var_33;
            }
            long long int var_35 = var_18[0];
            float var_36 = var_19[0];
            long long int var_37 = threadIdx.x;
            long long int var_38 = threadIdx.y;
            __shared__ float var_39[310];
            long long int var_40[1];
            float var_41[1];
            var_40[0] = 32;
            var_41[0] = var_36;
            while (method_86(var_40, var_41)) {
                long long int var_43 = var_40[0];
                float var_44 = var_41[0];
                long long int var_45 = (var_43 / 2);
                char var_46 = (var_38 < var_43);
                char var_48;
                if (var_46) {
                    var_48 = (var_38 >= var_45);
                } else {
                    var_48 = 0;
                }
                if (var_48) {
                    char var_49 = (var_38 >= 1);
                    char var_51;
                    if (var_49) {
                        var_51 = (var_38 < 32);
                    } else {
                        var_51 = 0;
                    }
                    char var_52 = (var_51 == 0);
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_53 = (var_38 - 1);
                    long long int var_54 = (var_53 * 10);
                    char var_55 = (var_37 >= 0);
                    char var_57;
                    if (var_55) {
                        var_57 = (var_37 < 10);
                    } else {
                        var_57 = 0;
                    }
                    char var_58 = (var_57 == 0);
                    if (var_58) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_59 = (var_54 + var_37);
                    var_39[var_59] = var_44;
                } else {
                }
                __syncthreads();
                char var_60 = (var_38 < var_45);
                float var_83;
                if (var_60) {
                    long long int var_61 = (var_38 + var_45);
                    long long int var_62[1];
                    float var_63[1];
                    var_62[0] = var_61;
                    var_63[0] = var_44;
                    while (method_87(var_43, var_62, var_63)) {
                        long long int var_65 = var_62[0];
                        float var_66 = var_63[0];
                        char var_67 = (var_65 >= 1);
                        char var_69;
                        if (var_67) {
                            var_69 = (var_65 < 32);
                        } else {
                            var_69 = 0;
                        }
                        char var_70 = (var_69 == 0);
                        if (var_70) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_71 = (var_65 - 1);
                        long long int var_72 = (var_71 * 10);
                        char var_73 = (var_37 >= 0);
                        char var_75;
                        if (var_73) {
                            var_75 = (var_37 < 10);
                        } else {
                            var_75 = 0;
                        }
                        char var_76 = (var_75 == 0);
                        if (var_76) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_77 = (var_72 + var_37);
                        float var_78 = var_39[var_77];
                        float var_79 = (var_66 + var_78);
                        long long int var_80 = (var_65 + var_45);
                        var_62[0] = var_80;
                        var_63[0] = var_79;
                    }
                    long long int var_81 = var_62[0];
                    var_83 = var_63[0];
                } else {
                    var_83 = var_44;
                }
                var_40[0] = var_45;
                var_41[0] = var_83;
            }
            long long int var_84 = var_40[0];
            float var_85 = var_41[0];
            long long int var_86 = threadIdx.y;
            char var_87 = (var_86 == 0);
            if (var_87) {
                char var_89;
                if (var_9) {
                    var_89 = (var_8 < 10);
                } else {
                    var_89 = 0;
                }
                char var_90 = (var_89 == 0);
                if (var_90) {
                    // "Argument out of bounds."
                } else {
                }
                float var_91 = var_1[var_8];
                float var_92 = (var_85 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 10);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __device__ char method_68(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 128);
    }
    __device__ char method_118(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1);
    }
    __device__ float method_119(float var_0, float var_1) {
        char var_2 = (var_0 > var_1);
        if (var_2) {
            return var_0;
        } else {
            return var_1;
        }
    }
    __device__ char method_85(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_67(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 256);
    }
    __device__ char method_134(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 200704);
    }
    __device__ char method_138(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 65536);
    }
    __device__ char method_105(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 10);
    }
    __device__ char method_145(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 2560);
    }
    __device__ char method_162(long long int * var_0, long long int * var_1) {
        long long int var_2 = var_0[0];
        long long int var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_73(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 32768);
    }
    __device__ char method_156(long long int * var_0, float * var_1, float * var_2) {
        long long int var_3 = var_0[0];
        float var_4 = var_1[0];
        float var_5 = var_2[0];
        return (var_3 < 10);
    }
    __device__ Tuple1 method_157(Tuple1 var_0, Tuple1 var_1) {
        float var_2 = var_0.mem_0;
        float var_3 = var_0.mem_1;
        float var_4 = var_1.mem_0;
        float var_5 = var_1.mem_1;
        char var_6 = (var_2 > var_4);
        Tuple1 var_7;
        if (var_6) {
            var_7 = make_Tuple1(var_2, var_3);
        } else {
            var_7 = make_Tuple1(var_4, var_5);
        }
        float var_8 = var_7.mem_0;
        float var_9 = var_7.mem_1;
        return make_Tuple1(var_8, var_9);
    }
    __device__ char method_86(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_87(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and EnvStack1 =
    struct
    val mem_0: ResizeArray<Env31>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<EnvStack1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack3 =
    struct
    val mem_0: ResizeArray<uint64>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap4 =
    {
    mem_0: (int32 ref)
    mem_1: EnvStack3
    mem_2: EnvStack3
    mem_3: EnvStack2
    mem_4: (uint64 ref)
    mem_5: uint64
    }
and EnvHeap5 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap4
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap4
    }
and Env8 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env22
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack9 =
    struct
    val mem_0: ResizeArray<Env8>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap10 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvHeap4
    }
and Env11 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env15
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack12 =
    struct
    val mem_0: ResizeArray<Env11>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap13 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvStack12
    mem_5: EnvHeap4
    }
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env15 =
    struct
    val mem_0: EnvHeap14
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap16 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack9
    mem_4: EnvStack12
    mem_5: EnvHeap4
    mem_6: (int64 ref)
    mem_7: EnvHeap14
    }
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: (ManagedCuda.CudaSolve.cusolverDnHandle ref)
    mem_3: ManagedCuda.CudaRand.CudaRandDevice
    mem_4: EnvStack9
    mem_5: EnvStack12
    mem_6: EnvHeap4
    mem_7: (int64 ref)
    mem_8: EnvHeap14
    }
and Tuple18 =
    struct
    val mem_0: Tuple19
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple19 =
    struct
    val mem_0: int64
    val mem_1: int64
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and Tuple20 =
    struct
    val mem_0: int64
    val mem_1: (uint8 [])
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env21 =
    struct
    val mem_0: Env8
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env22 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack23 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack24 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap25 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    }
and EnvStack26 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap27 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    }
and EnvStack28 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack29 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap30 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    }
and Env31 =
    struct
    val mem_0: Env22
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env32 =
    struct
    val mem_0: int64
    val mem_1: float
    val mem_2: int64
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack33 =
    struct
    val mem_0: (unit -> unit)
    val mem_1: (int64 ref)
    val mem_2: (uint64 ref)
    val mem_3: (int64 ref)
    val mem_4: (uint64 ref)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack34 =
    struct
    val mem_0: (unit -> unit)
    val mem_1: (int64 ref)
    val mem_2: (uint64 ref)
    val mem_3: (int64 ref)
    val mem_4: (uint64 ref)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack35 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack36 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack37 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack38 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack39 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Tuple40 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env41 =
    struct
    val mem_0: int32
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap5), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env31>) = ResizeArray<Env31>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env31>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env31>) = ResizeArray<Env31>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env31>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env31>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env31>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_6((var_0: EnvHeap14), (var_1: EnvHeap13), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env11 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack12) = var_1.mem_4
    method_7((var_3: (int64 ref)), (var_0: EnvHeap14), (var_4: EnvStack12))
    (Env11(var_3, (Env15(var_0))))
and method_8((var_0: string)): Tuple18 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2051)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2051i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int32) = var_5.ReadInt32()
    let (var_13: int32) = System.Net.IPAddress.NetworkToHostOrder(var_12)
    let (var_14: int32) = var_5.ReadInt32()
    let (var_15: int32) = System.Net.IPAddress.NetworkToHostOrder(var_14)
    let (var_16: int64) = (int64 var_11)
    let (var_17: int64) = (int64 var_13)
    let (var_18: int64) = (int64 var_15)
    let (var_19: int32) = (var_11 * var_13)
    let (var_20: int32) = (var_19 * var_15)
    let (var_22: (uint8 [])) = var_5.ReadBytes(var_20)
    var_5.Dispose()
    var_4.Dispose()
    Tuple18(Tuple19(var_16, var_17, var_18), var_22)
and method_9((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_10((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_9((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_11((var_0: string)): Tuple20 =
    let (var_1: System.IO.FileMode) = System.IO.FileMode.Open
    let (var_2: System.IO.FileAccess) = System.IO.FileAccess.Read
    let (var_3: System.IO.FileShare) = System.IO.FileShare.Read
    let (var_4: System.IO.FileStream) = System.IO.File.Open(var_0, var_1, var_2, var_3)
    let (var_5: System.IO.BinaryReader) = System.IO.BinaryReader(var_4)
    let (var_6: int32) = var_5.ReadInt32()
    let (var_7: int32) = System.Net.IPAddress.NetworkToHostOrder(var_6)
    let (var_8: bool) = (var_7 = 2049)
    let (var_9: bool) = (var_8 = false)
    if var_9 then
        (failwith "Expected a 2049i32 magic number.")
    else
        ()
    let (var_10: int32) = var_5.ReadInt32()
    let (var_11: int32) = System.Net.IPAddress.NetworkToHostOrder(var_10)
    let (var_12: int64) = (int64 var_11)
    let (var_14: (uint8 [])) = var_5.ReadBytes(var_11)
    var_5.Dispose()
    var_4.Dispose()
    Tuple20(var_12, var_14)
and method_12((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_13((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_12((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_14((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 784L)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = 0L
        method_10((var_0: (uint8 [])), (var_6: int64), (var_1: (float32 [])), (var_7: int64))
        let (var_8: int64) = (var_2 + 1L)
        method_14((var_0: (uint8 [])), (var_1: (float32 [])), (var_8: int64))
    else
        ()
and method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 60000L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_2 * 10L)
        let (var_7: uint8) = var_0.[int32 var_2]
        let (var_8: int64) = 0L
        method_13((var_7: uint8), (var_1: (float32 [])), (var_6: int64), (var_8: int64))
        let (var_9: int64) = (var_2 + 1L)
        method_15((var_0: (uint8 [])), (var_1: (float32 [])), (var_9: int64))
    else
        ()
and method_16((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (float32 [])), (var_4: int64), (var_5: int64), (var_6: int64)): Env21 =
    let (var_7: (int64 ref)) = var_0.mem_7
    let (var_8: EnvHeap14) = var_0.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    let (var_10: int64) = (var_2 * var_5)
    let (var_11: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_3,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_12: int64) = var_11.AddrOfPinnedObject().ToInt64()
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: int64) = (var_4 * 4L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_15 + var_13)
    let (var_17: Env8) = method_18((var_10: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: Env22) = var_17.mem_1
    let (var_20: (uint64 ref)) = var_19.mem_0
    let (var_21: uint64) = method_4((var_20: (uint64 ref)))
    let (var_22: int64) = (var_10 * 4L)
    let (var_23: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_21)
    let (var_24: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_23)
    let (var_25: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_26: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_25)
    let (var_27: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_22)
    let (var_28: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_24, var_26, var_27, var_9)
    if var_28 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_28)
    var_11.Free()
    (Env21((Env8(var_18, (Env22(var_20))))))
and method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_2: Env8) = method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_29((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_3: (int64 ref)), (var_5: (uint64 ref)))
    EnvStack23((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_31((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack23 =
    let (var_4: Env8) = method_28((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_29((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack23((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_2: Env8) = method_33((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_34((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_35((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: Env8) = method_33((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_36((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack24((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_38((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_2: Env8) = method_39((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_40((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack26((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_41((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack26 =
    let (var_4: Env8) = method_39((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_42((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack26((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_44((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack28 =
    let (var_2: Env8) = method_45((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_46((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_3: (int64 ref)), (var_5: (uint64 ref)))
    EnvStack28((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_48((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack28 =
    let (var_4: Env8) = method_45((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_46((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack28((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_49((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_2: Env8) = method_50((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env22) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_51((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack29((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_52((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_4: Env8) = method_50((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_53((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack29((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_55((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap25), (var_3: EnvHeap27), (var_4: EnvHeap30), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: int64)): unit =
    let (var_14: bool) = (var_13 < 5L)
    if var_14 then
        let (var_15: float) = 0.000000
        let (var_16: int64) = 0L
        let (var_17: float) = method_56((var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap25), (var_3: EnvHeap27), (var_4: EnvHeap30), (var_15: float), (var_16: int64))
        let (var_18: float) = (var_17 / 468.000000)
        let (var_19: float) = (var_18 / 128.000000)
        let (var_20: string) = System.String.Format("Training: {0}",var_19)
        System.Console.WriteLine(var_20)
        if (System.Double.IsNaN var_18) then
            System.Console.WriteLine("Training diverged. Aborting...")
        else
            let (var_21: int64) = 0L
            let (var_22: float) = 0.000000
            let (var_23: int64) = 0L
            let (var_24: int64) = 0L
            let (var_25: Env32) = method_149((var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap25), (var_3: EnvHeap27), (var_4: EnvHeap30), (var_21: int64), (var_22: float), (var_23: int64), (var_24: int64))
            let (var_26: int64) = var_25.mem_0
            let (var_27: float) = var_25.mem_1
            let (var_28: int64) = var_25.mem_2
            let (var_29: float) = (var_27 / 78.000000)
            let (var_30: float) = (var_29 / 128.000000)
            let (var_31: string) = System.String.Format("Testing: {0}({1}/{2})",var_30,var_26,var_28)
            System.Console.WriteLine(var_31)
            let (var_32: int64) = (var_13 + 1L)
            method_55((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap25), (var_3: EnvHeap27), (var_4: EnvHeap30), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_32: int64))
    else
        ()
and method_17((var_0: EnvHeap14)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_164((var_0: EnvStack12)): unit =
    let (var_1: ResizeArray<Env11>) = var_0.mem_0
    let (var_2: int32) = var_1.get_Count()
    let (var_3: int32) = 0
    method_165((var_1: ResizeArray<Env11>), (var_2: int32), (var_3: int32))
    var_1.Clear()
and method_147((var_0: EnvStack9)): unit =
    let (var_1: ResizeArray<Env8>) = var_0.mem_0
    let (var_2: int32) = var_1.get_Count()
    let (var_3: int32) = 0
    method_148((var_1: ResizeArray<Env8>), (var_2: int32), (var_3: int32))
    var_1.Clear()
and method_4((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A disposed Cuda memory cell has been tried to be accessed.")
    else
        ()
    var_1
and method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: EnvStack1) = var_1.[var_3]
        let (var_6: ResizeArray<Env31>) = var_5.mem_0
        let (var_7: int32) = var_6.get_Count()
        let (var_8: int32) = 0
        method_3((var_0: EnvStack1), (var_6: ResizeArray<Env31>), (var_7: int32), (var_8: int32))
        let (var_9: int32) = (var_3 + 1)
        method_2((var_0: EnvStack1), (var_1: ResizeArray<EnvStack1>), (var_2: int32), (var_9: int32))
    else
        ()
and method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env31>), (var_5: int32), (var_6: int32)): unit =
    let (var_7: bool) = (var_6 < var_5)
    if var_7 then
        let (var_8: Env31) = var_4.[var_6]
        let (var_9: Env22) = var_8.mem_0
        let (var_10: (uint64 ref)) = var_9.mem_0
        let (var_11: uint64) = var_8.mem_1
        let (var_12: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_13: int32) = var_12.get_Count()
        let (var_14: int32) = (var_13 - 1)
        let (var_15: ResizeArray<uint64>) = var_1.mem_0
        let (var_16: uint64) = var_15.[var_14]
        let (var_17: ResizeArray<uint64>) = var_2.mem_0
        let (var_18: uint64) = var_17.[var_14]
        let (var_19: uint64) = (!var_10)
        let (var_20: uint64) = (var_16 + var_18)
        let (var_21: bool) = (var_20 < var_19)
        if var_21 then
            let (var_22: uint64) = (var_19 - var_16)
            var_17.[var_14] <- var_22
            let (var_23: ResizeArray<Env31>) = ResizeArray<Env31>()
            let (var_24: EnvStack1) = EnvStack1((var_23: ResizeArray<Env31>))
            let (var_25: ResizeArray<Env31>) = var_24.mem_0
            var_25.Add((Env31((Env22(var_10)), var_11)))
            var_15.Add(var_19)
            var_17.Add(var_11)
            var_12.Add(var_24)
        else
            let (var_26: bool) = (var_20 = var_19)
            if var_26 then
                let (var_27: uint64) = (var_18 + var_11)
                var_17.[var_14] <- var_27
                let (var_28: EnvStack1) = var_12.[var_14]
                let (var_29: ResizeArray<Env31>) = var_28.mem_0
                var_29.Add((Env31((Env22(var_10)), var_11)))
            else
                (failwith "The elements should always be ordered.")
        let (var_30: int32) = (var_6 + 1)
        method_5((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: ResizeArray<Env31>), (var_5: int32), (var_30: int32))
    else
        ()
and method_7((var_0: (int64 ref)), (var_1: EnvHeap14), (var_2: EnvStack12)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env11>) = var_2.mem_0
    var_5.Add((Env11(var_0, (Env15(var_1)))))
and method_10((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 784L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_1 + var_3)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_8: uint8) = var_0.[int32 var_7]
        let (var_9: float32) = (float32 var_8)
        let (var_10: float32) = (var_9 / 255.000000f)
        var_2.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_10((var_0: (uint8 [])), (var_1: int64), (var_2: (float32 [])), (var_11: int64))
    else
        ()
and method_13((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < 10L)
    if var_4 then
        let (var_5: bool) = (var_3 >= 0L)
        let (var_6: bool) = (var_5 = false)
        if var_6 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_7: int64) = (var_2 + var_3)
        let (var_8: uint8) = (uint8 var_3)
        let (var_9: bool) = (var_8 = var_0)
        let (var_10: float32) =
            if var_9 then
                1.000000f
            else
                0.000000f
        var_1.[int32 var_7] <- var_10
        let (var_11: int64) = (var_3 + 1L)
        method_13((var_0: uint8), (var_1: (float32 [])), (var_2: int64), (var_11: int64))
    else
        ()
and method_18((var_0: int64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_3: int64) = (var_0 * 4L)
    method_19((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: int64))
and method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 1024L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_29((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_30((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_33((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 802816L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_34((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(200704L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_3
    let (var_7: (int64 ref)) = var_2.mem_7
    let (var_8: EnvHeap14) = var_2.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.031009f)
and method_36((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_37((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_39((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 262144L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_40((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(65536L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_3
    let (var_7: (int64 ref)) = var_2.mem_7
    let (var_8: EnvHeap14) = var_2.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.044194f)
and method_42((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_43((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_45((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 40L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_46((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_47((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_50((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 10240L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_51((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(2560L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_3
    let (var_7: (int64 ref)) = var_2.mem_7
    let (var_8: EnvHeap14) = var_2.mem_8
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_17((var_8: EnvHeap14))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.086711f)
and method_53((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_54((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_56((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap25), (var_7: EnvHeap27), (var_8: EnvHeap30), (var_9: float), (var_10: int64)): float =
    let (var_11: bool) = (var_10 < 468L)
    if var_11 then
        let (var_12: bool) = (var_10 >= 0L)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_14: int64) = (var_10 * 100352L)
        if var_13 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_15: int64) = (var_10 * 1280L)
        let (var_22: ResizeArray<Env8>) = ResizeArray<Env8>()
        let (var_23: EnvStack9) = EnvStack9((var_22: ResizeArray<Env8>))
        let (var_24: ManagedCuda.CudaContext) = var_4.mem_0
        let (var_25: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
        let (var_26: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = var_4.mem_2
        let (var_27: ManagedCuda.CudaRand.CudaRandDevice) = var_4.mem_3
        let (var_28: EnvStack9) = var_4.mem_4
        let (var_29: EnvStack12) = var_4.mem_5
        let (var_30: EnvHeap4) = var_4.mem_6
        let (var_31: (int64 ref)) = var_4.mem_7
        let (var_32: EnvHeap14) = var_4.mem_8
        let (var_33: EnvHeap17) = ({mem_0 = (var_24: ManagedCuda.CudaContext); mem_1 = (var_25: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_26: (ManagedCuda.CudaSolve.cusolverDnHandle ref)); mem_3 = (var_27: ManagedCuda.CudaRand.CudaRandDevice); mem_4 = (var_23: EnvStack9); mem_5 = (var_29: EnvStack12); mem_6 = (var_30: EnvHeap4); mem_7 = (var_31: (int64 ref)); mem_8 = (var_32: EnvHeap14)} : EnvHeap17)
        let (var_34: EnvStack33) = method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: int64), (var_6: EnvHeap25), (var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_35: (unit -> unit)) = var_34.mem_0
        let (var_36: (int64 ref)) = var_34.mem_1
        let (var_37: (uint64 ref)) = var_34.mem_2
        let (var_38: (int64 ref)) = var_34.mem_3
        let (var_39: (uint64 ref)) = var_34.mem_4
        let (var_40: EnvStack33) = method_88((var_36: (int64 ref)), (var_37: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_7: EnvHeap27), (var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_41: (unit -> unit)) = var_40.mem_0
        let (var_42: (int64 ref)) = var_40.mem_1
        let (var_43: (uint64 ref)) = var_40.mem_2
        let (var_44: (int64 ref)) = var_40.mem_3
        let (var_45: (uint64 ref)) = var_40.mem_4
        let (var_46: EnvStack34) = method_95((var_42: (int64 ref)), (var_43: (uint64 ref)), (var_44: (int64 ref)), (var_45: (uint64 ref)), (var_8: EnvHeap30), (var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_47: (unit -> unit)) = var_46.mem_0
        let (var_48: (int64 ref)) = var_46.mem_1
        let (var_49: (uint64 ref)) = var_46.mem_2
        let (var_50: (int64 ref)) = var_46.mem_3
        let (var_51: (uint64 ref)) = var_46.mem_4
        let (var_52: Env8) = method_114((var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_53: (int64 ref)) = var_52.mem_0
        let (var_54: Env22) = var_52.mem_1
        let (var_55: (uint64 ref)) = var_54.mem_0
        let (var_56: uint64) = method_4((var_51: (uint64 ref)))
        let (var_57: uint64) = method_4((var_3: (uint64 ref)))
        let (var_58: int64) = (var_15 * 4L)
        let (var_59: uint64) = (uint64 var_58)
        let (var_60: uint64) = (var_57 + var_59)
        let (var_61: uint64) = method_4((var_55: (uint64 ref)))
        method_115((var_56: uint64), (var_60: uint64), (var_61: uint64), (var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_62: EnvStack35) = method_120((var_53: (int64 ref)), (var_55: (uint64 ref)), (var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_63: (int64 ref)) = var_62.mem_0
        let (var_64: (uint64 ref)) = var_62.mem_1
        method_124((var_48: (int64 ref)), (var_49: (uint64 ref)), (var_50: (int64 ref)), (var_51: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_15: int64), (var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        var_47()
        var_41()
        var_35()
        let (var_65: (int64 ref)) = var_6.mem_0
        let (var_66: (uint64 ref)) = var_6.mem_1
        let (var_67: (int64 ref)) = var_6.mem_2
        let (var_68: (uint64 ref)) = var_6.mem_3
        let (var_69: (int64 ref)) = var_6.mem_4
        let (var_70: (uint64 ref)) = var_6.mem_5
        let (var_71: (int64 ref)) = var_6.mem_6
        let (var_72: (uint64 ref)) = var_6.mem_7
        method_128((var_67: (int64 ref)), (var_68: (uint64 ref)), (var_65: (int64 ref)), (var_66: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        method_131((var_71: (int64 ref)), (var_72: (uint64 ref)), (var_69: (int64 ref)), (var_70: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_73: (int64 ref)) = var_7.mem_0
        let (var_74: (uint64 ref)) = var_7.mem_1
        let (var_75: (int64 ref)) = var_7.mem_2
        let (var_76: (uint64 ref)) = var_7.mem_3
        let (var_77: (int64 ref)) = var_7.mem_4
        let (var_78: (uint64 ref)) = var_7.mem_5
        let (var_79: (int64 ref)) = var_7.mem_6
        let (var_80: (uint64 ref)) = var_7.mem_7
        method_128((var_75: (int64 ref)), (var_76: (uint64 ref)), (var_73: (int64 ref)), (var_74: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        method_135((var_79: (int64 ref)), (var_80: (uint64 ref)), (var_77: (int64 ref)), (var_78: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_81: (int64 ref)) = var_8.mem_0
        let (var_82: (uint64 ref)) = var_8.mem_1
        let (var_83: (int64 ref)) = var_8.mem_2
        let (var_84: (uint64 ref)) = var_8.mem_3
        let (var_85: (int64 ref)) = var_8.mem_4
        let (var_86: (uint64 ref)) = var_8.mem_5
        let (var_87: (int64 ref)) = var_8.mem_6
        let (var_88: (uint64 ref)) = var_8.mem_7
        method_139((var_83: (int64 ref)), (var_84: (uint64 ref)), (var_81: (int64 ref)), (var_82: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        method_142((var_87: (int64 ref)), (var_88: (uint64 ref)), (var_85: (int64 ref)), (var_86: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_89: int64) = 1L
        let (var_90: int64) = 0L
        let (var_91: (float32 [])) = method_146((var_33: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_89: int64), (var_63: (int64 ref)), (var_64: (uint64 ref)), (var_90: int64))
        let (var_92: float32) = var_91.[int32 0L]
        let (var_93: float) = (float var_92)
        let (var_94: float) = (var_9 + var_93)
        let (var_97: float) =
            if (System.Double.IsNaN var_93) then
                var_94
            else
                let (var_95: int64) = (var_10 + 1L)
                method_56((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap25), (var_7: EnvHeap27), (var_8: EnvHeap30), (var_94: float), (var_95: int64))
        let (var_98: EnvStack9) = var_33.mem_4
        method_147((var_98: EnvStack9))
        var_97
    else
        var_9
and method_149((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap25), (var_7: EnvHeap27), (var_8: EnvHeap30), (var_9: int64), (var_10: float), (var_11: int64), (var_12: int64)): Env32 =
    let (var_13: bool) = (var_12 < 78L)
    if var_13 then
        let (var_14: bool) = (var_12 >= 0L)
        let (var_15: bool) = (var_14 = false)
        if var_15 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_16: int64) = (var_12 * 100352L)
        if var_15 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_17: int64) = (var_12 * 1280L)
        let (var_24: ResizeArray<Env8>) = ResizeArray<Env8>()
        let (var_25: EnvStack9) = EnvStack9((var_24: ResizeArray<Env8>))
        let (var_26: ManagedCuda.CudaContext) = var_4.mem_0
        let (var_27: ManagedCuda.CudaBlas.CudaBlas) = var_4.mem_1
        let (var_28: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = var_4.mem_2
        let (var_29: ManagedCuda.CudaRand.CudaRandDevice) = var_4.mem_3
        let (var_30: EnvStack9) = var_4.mem_4
        let (var_31: EnvStack12) = var_4.mem_5
        let (var_32: EnvHeap4) = var_4.mem_6
        let (var_33: (int64 ref)) = var_4.mem_7
        let (var_34: EnvHeap14) = var_4.mem_8
        let (var_35: EnvHeap17) = ({mem_0 = (var_26: ManagedCuda.CudaContext); mem_1 = (var_27: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_28: (ManagedCuda.CudaSolve.cusolverDnHandle ref)); mem_3 = (var_29: ManagedCuda.CudaRand.CudaRandDevice); mem_4 = (var_25: EnvStack9); mem_5 = (var_31: EnvStack12); mem_6 = (var_32: EnvHeap4); mem_7 = (var_33: (int64 ref)); mem_8 = (var_34: EnvHeap14)} : EnvHeap17)
        let (var_36: EnvStack33) = method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_16: int64), (var_6: EnvHeap25), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_37: (unit -> unit)) = var_36.mem_0
        let (var_38: (int64 ref)) = var_36.mem_1
        let (var_39: (uint64 ref)) = var_36.mem_2
        let (var_40: (int64 ref)) = var_36.mem_3
        let (var_41: (uint64 ref)) = var_36.mem_4
        let (var_42: EnvStack33) = method_88((var_38: (int64 ref)), (var_39: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_7: EnvHeap27), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_43: (unit -> unit)) = var_42.mem_0
        let (var_44: (int64 ref)) = var_42.mem_1
        let (var_45: (uint64 ref)) = var_42.mem_2
        let (var_46: (int64 ref)) = var_42.mem_3
        let (var_47: (uint64 ref)) = var_42.mem_4
        let (var_48: EnvStack34) = method_95((var_44: (int64 ref)), (var_45: (uint64 ref)), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_8: EnvHeap30), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_49: (unit -> unit)) = var_48.mem_0
        let (var_50: (int64 ref)) = var_48.mem_1
        let (var_51: (uint64 ref)) = var_48.mem_2
        let (var_52: (int64 ref)) = var_48.mem_3
        let (var_53: (uint64 ref)) = var_48.mem_4
        let (var_54: Env8) = method_114((var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_55: (int64 ref)) = var_54.mem_0
        let (var_56: Env22) = var_54.mem_1
        let (var_57: (uint64 ref)) = var_56.mem_0
        let (var_58: uint64) = method_4((var_53: (uint64 ref)))
        let (var_59: uint64) = method_4((var_3: (uint64 ref)))
        let (var_60: int64) = (var_17 * 4L)
        let (var_61: uint64) = (uint64 var_60)
        let (var_62: uint64) = (var_59 + var_61)
        let (var_63: uint64) = method_4((var_57: (uint64 ref)))
        method_115((var_58: uint64), (var_62: uint64), (var_63: uint64), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_64: EnvStack35) = method_120((var_55: (int64 ref)), (var_57: (uint64 ref)), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_65: (int64 ref)) = var_64.mem_0
        let (var_66: (uint64 ref)) = var_64.mem_1
        let (var_67: int64) = 1L
        let (var_68: int64) = 0L
        let (var_69: (float32 [])) = method_146((var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_67: int64), (var_65: (int64 ref)), (var_66: (uint64 ref)), (var_68: int64))
        let (var_70: float32) = var_69.[int32 0L]
        let (var_71: float) = (float var_70)
        let (var_72: EnvStack36) = method_150((var_52: (int64 ref)), (var_53: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_17: int64), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_73: (int64 ref)) = var_72.mem_0
        let (var_74: (uint64 ref)) = var_72.mem_1
        let (var_75: EnvStack37) = method_158((var_73: (int64 ref)), (var_74: (uint64 ref)), (var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
        let (var_76: (int64 ref)) = var_75.mem_0
        let (var_77: (uint64 ref)) = var_75.mem_1
        let (var_78: int64) = 1L
        let (var_79: int64) = 0L
        let (var_80: (int64 [])) = method_163((var_35: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_78: int64), (var_76: (int64 ref)), (var_77: (uint64 ref)), (var_79: int64))
        let (var_81: int64) = var_80.[int32 0L]
        let (var_82: float) = (var_10 + var_71)
        let (var_83: int64) = (var_9 + var_81)
        let (var_84: int64) = (var_11 + 128L)
        let (var_87: Env32) =
            if (System.Double.IsNaN var_71) then
                (Env32(var_83, var_82, var_84))
            else
                let (var_85: int64) = (var_12 + 1L)
                method_149((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap25), (var_7: EnvHeap27), (var_8: EnvHeap30), (var_83: int64), (var_82: float), (var_84: int64), (var_85: int64))
        let (var_88: int64) = var_87.mem_0
        let (var_89: float) = var_87.mem_1
        let (var_90: int64) = var_87.mem_2
        let (var_91: EnvStack9) = var_35.mem_4
        method_147((var_91: EnvStack9))
        (Env32(var_88, var_89, var_90))
    else
        (Env32(var_9, var_10, var_11))
and method_165((var_0: ResizeArray<Env11>), (var_1: int32), (var_2: int32)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: Env11) = var_0.[var_2]
        let (var_5: (int64 ref)) = var_4.mem_0
        let (var_6: Env15) = var_4.mem_1
        let (var_7: EnvHeap14) = var_6.mem_0
        let (var_8: int64) = (!var_5)
        let (var_9: int64) = (var_8 - 1L)
        var_5 := var_9
        let (var_10: int64) = (!var_5)
        let (var_11: bool) = (var_10 = 0L)
        if var_11 then
            let (var_12: ManagedCuda.CudaStream) = var_7.mem_2
            var_12.Dispose()
            let (var_13: ManagedCuda.CudaEvent) = var_7.mem_0
            var_13.Dispose()
            let (var_14: (bool ref)) = var_7.mem_1
            var_14 := false
        else
            ()
        let (var_15: int32) = (var_2 + 1)
        method_165((var_0: ResizeArray<Env11>), (var_1: int32), (var_15: int32))
    else
        ()
and method_148((var_0: ResizeArray<Env8>), (var_1: int32), (var_2: int32)): unit =
    let (var_3: bool) = (var_2 < var_1)
    if var_3 then
        let (var_4: Env8) = var_0.[var_2]
        let (var_5: (int64 ref)) = var_4.mem_0
        let (var_6: Env22) = var_4.mem_1
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: int64) = (!var_5)
        let (var_9: int64) = (var_8 - 1L)
        var_5 := var_9
        let (var_10: int64) = (!var_5)
        let (var_11: bool) = (var_10 = 0L)
        if var_11 then
            var_7 := 0UL
        else
            ()
        let (var_12: int32) = (var_2 + 1)
        method_148((var_0: ResizeArray<Env8>), (var_1: int32), (var_12: int32))
    else
        ()
and method_3((var_0: EnvStack1), (var_1: ResizeArray<Env31>), (var_2: int32), (var_3: int32)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: Env31) = var_1.[var_3]
        let (var_6: Env22) = var_5.mem_0
        let (var_7: (uint64 ref)) = var_6.mem_0
        let (var_8: uint64) = var_5.mem_1
        let (var_9: uint64) = (!var_7)
        let (var_10: bool) = (var_9 <> 0UL)
        if var_10 then
            let (var_11: ResizeArray<Env31>) = var_0.mem_0
            var_11.Add((Env31((Env22(var_7)), var_8)))
        else
            ()
        let (var_12: int32) = (var_3 + 1)
        method_3((var_0: EnvStack1), (var_1: ResizeArray<Env31>), (var_2: int32), (var_12: int32))
    else
        ()
and method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env8 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env22) = method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack9) = var_0.mem_4
    method_26((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack9))
    (Env8(var_9, (Env22(var_8))))
and method_30((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(1024L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_37((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(802816L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_43((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(262144L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_47((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(40L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_54((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(10240L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: EnvHeap25), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack33 =
    let (var_6: (int64 ref)) = var_3.mem_4
    let (var_7: (uint64 ref)) = var_3.mem_5
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: (uint64 ref)) = var_3.mem_7
    let (var_10: (int64 ref)) = var_3.mem_0
    let (var_11: (uint64 ref)) = var_3.mem_1
    let (var_12: (int64 ref)) = var_3.mem_2
    let (var_13: (uint64 ref)) = var_3.mem_3
    let (var_14: EnvStack38) = method_58((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_15: (int64 ref)) = var_14.mem_0
    let (var_16: (uint64 ref)) = var_14.mem_1
    let (var_17: EnvStack38) = method_61((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: (uint64 ref)) = var_17.mem_1
    method_64((var_12: (int64 ref)), (var_13: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: EnvStack38) = method_69((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: (int64 ref)) = var_20.mem_0
    let (var_22: (uint64 ref)) = var_20.mem_1
    let (var_23: EnvStack38) = method_61((var_21: (int64 ref)), (var_22: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_24: (int64 ref)) = var_23.mem_0
    let (var_25: (uint64 ref)) = var_23.mem_1
    let (var_26: (unit -> unit)) = method_74((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)))
    EnvStack33((var_26: (unit -> unit)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)))
and method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap27), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack33 =
    let (var_7: (int64 ref)) = var_4.mem_4
    let (var_8: (uint64 ref)) = var_4.mem_5
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: (uint64 ref)) = var_4.mem_7
    let (var_11: (int64 ref)) = var_4.mem_0
    let (var_12: (uint64 ref)) = var_4.mem_1
    let (var_13: (int64 ref)) = var_4.mem_2
    let (var_14: (uint64 ref)) = var_4.mem_3
    let (var_15: EnvStack38) = method_89((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_16: (int64 ref)) = var_15.mem_0
    let (var_17: (uint64 ref)) = var_15.mem_1
    let (var_18: EnvStack38) = method_61((var_16: (int64 ref)), (var_17: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_19: (int64 ref)) = var_18.mem_0
    let (var_20: (uint64 ref)) = var_18.mem_1
    method_64((var_13: (int64 ref)), (var_14: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: EnvStack38) = method_69((var_16: (int64 ref)), (var_17: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_22: (int64 ref)) = var_21.mem_0
    let (var_23: (uint64 ref)) = var_21.mem_1
    let (var_24: EnvStack38) = method_61((var_22: (int64 ref)), (var_23: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_25: (int64 ref)) = var_24.mem_0
    let (var_26: (uint64 ref)) = var_24.mem_1
    let (var_27: (unit -> unit)) = method_91((var_19: (int64 ref)), (var_20: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)))
    EnvStack33((var_27: (unit -> unit)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)))
and method_95((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap30), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack34 =
    let (var_7: (int64 ref)) = var_4.mem_4
    let (var_8: (uint64 ref)) = var_4.mem_5
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: (uint64 ref)) = var_4.mem_7
    let (var_11: (int64 ref)) = var_4.mem_0
    let (var_12: (uint64 ref)) = var_4.mem_1
    let (var_13: (int64 ref)) = var_4.mem_2
    let (var_14: (uint64 ref)) = var_4.mem_3
    let (var_15: EnvStack39) = method_96((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_16: (int64 ref)) = var_15.mem_0
    let (var_17: (uint64 ref)) = var_15.mem_1
    let (var_18: EnvStack39) = method_99((var_16: (int64 ref)), (var_17: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_19: (int64 ref)) = var_18.mem_0
    let (var_20: (uint64 ref)) = var_18.mem_1
    method_102((var_13: (int64 ref)), (var_14: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: (unit -> unit)) = method_106((var_19: (int64 ref)), (var_20: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack34((var_21: (unit -> unit)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)))
and method_114((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 512L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_115((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_116((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_120((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack35 =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: Env8) = method_121((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env22) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_4((var_8: (uint64 ref)))
    method_122((var_4: uint64), (var_9: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
    EnvStack35((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_124((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_4((var_1: (uint64 ref)))
    let (var_10: uint64) = method_4((var_3: (uint64 ref)))
    let (var_11: uint64) = method_4((var_5: (uint64 ref)))
    let (var_12: int64) = (var_6 * 4L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_11 + var_13)
    method_125((var_10: uint64), (var_9: uint64), (var_14: uint64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_128((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_129((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_131((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_132((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_135((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_136((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_139((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_140((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_142((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_143((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_146((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (float32 []) =
    let (var_6: (int64 ref)) = var_0.mem_7
    let (var_7: EnvHeap14) = var_0.mem_8
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_17((var_7: EnvHeap14))
    let (var_9: uint64) = method_4((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 4L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 4L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_150((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack36 =
    let (var_7: Env8) = method_151((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_152((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack36((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_158((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack37 =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: Env8) = method_159((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env22) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_4((var_8: (uint64 ref)))
    method_160((var_4: uint64), (var_9: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
    EnvStack37((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_163((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (int64 []) =
    let (var_6: (int64 ref)) = var_0.mem_7
    let (var_7: EnvHeap14) = var_0.mem_8
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_17((var_7: EnvHeap14))
    let (var_9: uint64) = method_4((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 8L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 8L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env22 =
    let (var_3: EnvHeap4) = var_0.mem_6
    let (var_4: (uint64 ref)) = var_3.mem_4
    let (var_5: uint64) = var_3.mem_5
    let (var_6: (int32 ref)) = var_3.mem_0
    let (var_7: EnvStack3) = var_3.mem_1
    let (var_8: EnvStack3) = var_3.mem_2
    let (var_9: EnvStack2) = var_3.mem_3
    method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_10: Tuple40) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
    let (var_11: uint64) = var_10.mem_0
    let (var_12: uint64) = var_10.mem_1
    let (var_13: bool) = (var_11 >= var_2)
    let (var_34: Env31) =
        if var_13 then
            let (var_14: (uint64 ref)) = (ref var_12)
            (Env31((Env22(var_14)), var_2))
        else
            let (var_15: ResizeArray<EnvStack1>) = var_9.mem_0
            let (var_16: int32) = var_15.get_Count()
            let (var_17: int32) = 0
            let (var_18: Env41) = method_23((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2), (var_16: int32), (var_17: int32))
            let (var_19: int32) = var_18.mem_0
            let (var_20: uint64) = var_18.mem_1
            var_6 := var_19
            method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_21: Tuple40) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
            let (var_22: uint64) = var_21.mem_0
            let (var_23: uint64) = var_21.mem_1
            let (var_24: bool) = (var_22 >= var_2)
            if var_24 then
                let (var_25: (uint64 ref)) = (ref var_23)
                (Env31((Env22(var_25)), var_2))
            else
                method_25((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                method_21((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_26: Tuple40) = method_22((var_6: (int32 ref)), (var_7: EnvStack3), (var_8: EnvStack3), (var_9: EnvStack2))
                let (var_27: uint64) = var_26.mem_0
                let (var_28: uint64) = var_26.mem_1
                let (var_29: bool) = (var_27 >= var_2)
                if var_29 then
                    let (var_30: (uint64 ref)) = (ref var_28)
                    (Env31((Env22(var_30)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_35: Env22) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_35.mem_0
    let (var_37: uint64) = var_34.mem_1
    let (var_38: int32) = (!var_6)
    let (var_39: ResizeArray<EnvStack1>) = var_9.mem_0
    let (var_40: EnvStack1) = var_39.[var_38]
    let (var_41: ResizeArray<Env31>) = var_40.mem_0
    var_41.Add((Env31((Env22(var_36)), var_37)))
    (Env22(var_36))
and method_26((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack9)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env8>) = var_2.mem_0
    var_5.Add((Env8(var_0, (Env22(var_1)))))
and method_58((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack38 =
    let (var_7: Env8) = method_59((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env22) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_60((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack38((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_61((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack38 =
    let (var_4: Env8) = method_59((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_62((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack38((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_64((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_65((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_69((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack38 =
    let (var_6: Env8) = method_59((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_70((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack38((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_74 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref))) (): unit =
    method_75((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
    method_79((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
and method_89((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack38 =
    let (var_6: Env8) = method_59((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_90((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack38((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_91 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref))) (): unit =
    method_75((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_92((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_96((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack39 =
    let (var_6: Env8) = method_97((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env22) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_98((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack39((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_99((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack39 =
    let (var_4: Env8) = method_97((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env22) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    method_100((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_5: (int64 ref)), (var_7: (uint64 ref)))
    EnvStack39((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_102((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_103((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_106 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)) (): unit =
    method_107((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_116((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_117((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_117", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_7
    let (var_10: EnvHeap14) = var_4.mem_8
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_121((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 4L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_122((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_123((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_123", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_125((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_126((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_129((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_130((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_130", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(2u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_132((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_133((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_133", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_136((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_137((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_137", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_140((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_141((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_141", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_143((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_144((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_144", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(20u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_151((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 1024L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_152((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_4((var_1: (uint64 ref)))
    let (var_10: uint64) = method_4((var_3: (uint64 ref)))
    let (var_11: int64) = (var_4 * 4L)
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (var_10 + var_12)
    let (var_14: uint64) = method_4((var_6: (uint64 ref)))
    method_153((var_9: uint64), (var_13: uint64), (var_14: uint64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_159((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 8L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_160((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_161((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_161", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_21((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): unit =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<Env31>) = var_6.mem_0
    let (var_8: int32) = var_7.get_Count()
    let (var_9: int32) = (var_8 - 1)
    let (var_10: bool) = (var_9 >= 0)
    if var_10 then
        let (var_11: Env31) = var_7.[var_9]
        let (var_12: Env22) = var_11.mem_0
        let (var_13: (uint64 ref)) = var_12.mem_0
        let (var_14: uint64) = var_11.mem_1
        let (var_15: uint64) = (!var_13)
        let (var_16: bool) = (var_15 = 0UL)
        if var_16 then
            var_7.RemoveAt(var_9)
            method_21((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
    else
        let (var_17: bool) = (var_4 > 0)
        if var_17 then
            let (var_18: ResizeArray<uint64>) = var_2.mem_0
            let (var_19: uint64) = var_18.[var_4]
            let (var_20: int32) = (var_4 - 1)
            let (var_21: uint64) = var_18.[var_20]
            let (var_22: uint64) = (var_21 + var_19)
            var_18.[var_20] <- var_22
            var_18.RemoveAt(var_4)
            var_5.RemoveAt(var_4)
            let (var_23: ResizeArray<uint64>) = var_1.mem_0
            var_23.RemoveAt(var_4)
            var_0 := var_20
            method_21((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2))
        else
            ()
and method_22((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2)): Tuple40 =
    let (var_4: int32) = (!var_0)
    let (var_5: ResizeArray<EnvStack1>) = var_3.mem_0
    let (var_6: EnvStack1) = var_5.[var_4]
    let (var_7: ResizeArray<uint64>) = var_1.mem_0
    let (var_8: uint64) = var_7.[var_4]
    let (var_9: ResizeArray<uint64>) = var_2.mem_0
    let (var_10: uint64) = var_9.[var_4]
    let (var_11: uint64) = (var_8 + var_10)
    let (var_12: ResizeArray<Env31>) = var_6.mem_0
    let (var_13: int32) = var_12.get_Count()
    let (var_14: bool) = (var_13 > 0)
    if var_14 then
        let (var_15: int32) = var_12.get_Count()
        let (var_16: int32) = (var_15 - 1)
        let (var_17: Env31) = var_12.[var_16]
        let (var_18: Env22) = var_17.mem_0
        let (var_19: (uint64 ref)) = var_18.mem_0
        let (var_20: uint64) = var_17.mem_1
        let (var_21: uint64) = (!var_19)
        let (var_22: uint64) = (var_21 + var_20)
        let (var_23: uint64) = (var_11 - var_22)
        Tuple40(var_23, var_22)
    else
        Tuple40(var_11, var_8)
and method_23((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32)): Env41 =
    let (var_6: bool) = (var_5 < var_4)
    if var_6 then
        let (var_7: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_8: EnvStack1) = var_7.[var_5]
        let (var_9: ResizeArray<Env31>) = var_8.mem_0
        let (var_10: int32) = var_9.get_Count()
        let (var_11: bool) = (var_10 > 0)
        let (var_28: uint64) =
            if var_11 then
                let (var_12: int32) = var_9.get_Count()
                let (var_13: int32) = (var_12 - 1)
                let (var_14: Env31) = var_9.[var_13]
                let (var_15: Env22) = var_14.mem_0
                let (var_16: (uint64 ref)) = var_15.mem_0
                let (var_17: uint64) = var_14.mem_1
                let (var_18: uint64) = (!var_16)
                let (var_19: uint64) = (var_18 + var_17)
                let (var_20: ResizeArray<uint64>) = var_1.mem_0
                let (var_21: uint64) = var_20.[var_5]
                let (var_22: ResizeArray<uint64>) = var_2.mem_0
                let (var_23: uint64) = var_22.[var_5]
                let (var_24: uint64) = (var_21 + var_23)
                (var_24 - var_19)
            else
                let (var_26: ResizeArray<uint64>) = var_2.mem_0
                var_26.[var_5]
        let (var_29: bool) = (0UL < var_28)
        let (var_30: Env41) =
            if var_29 then
                (Env41(var_5, var_28))
            else
                (Env41(0, 0UL))
        let (var_31: int32) = var_30.mem_0
        let (var_32: uint64) = var_30.mem_1
        let (var_33: int32) = (var_5 + 1)
        method_24((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_31: int32), (var_32: uint64), (var_33: int32))
    else
        (Env41(0, 0UL))
and method_25((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap4) = var_0.mem_6
    let (var_3: (uint64 ref)) = var_2.mem_4
    let (var_4: uint64) = var_2.mem_5
    let (var_5: (int32 ref)) = var_2.mem_0
    let (var_6: EnvStack3) = var_2.mem_1
    let (var_7: EnvStack3) = var_2.mem_2
    let (var_8: EnvStack2) = var_2.mem_3
    let (var_9: ResizeArray<Env31>) = ResizeArray<Env31>()
    let (var_10: EnvStack1) = EnvStack1((var_9: ResizeArray<Env31>))
    let (var_11: ResizeArray<EnvStack1>) = var_8.mem_0
    let (var_12: int32) = var_11.get_Count()
    let (var_13: int32) = 0
    method_2((var_10: EnvStack1), (var_11: ResizeArray<EnvStack1>), (var_12: int32), (var_13: int32))
    var_11.Clear()
    let (var_14: ResizeArray<uint64>) = var_6.mem_0
    var_14.Clear()
    let (var_15: ResizeArray<uint64>) = var_7.mem_0
    var_15.Clear()
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    var_14.Add(var_16)
    var_15.Add(0UL)
    let (var_17: ResizeArray<Env31>) = ResizeArray<Env31>()
    let (var_18: EnvStack1) = EnvStack1((var_17: ResizeArray<Env31>))
    var_11.Add(var_18)
    var_5 := 0
    let (var_19: ResizeArray<Env31>) = var_10.mem_0
    let (var_20: int32) = var_19.get_Count()
    let (var_21: int32) = 0
    method_5((var_5: (int32 ref)), (var_6: EnvStack3), (var_7: EnvStack3), (var_8: EnvStack2), (var_19: ResizeArray<Env31>), (var_20: int32), (var_21: int32))
    let (var_22: int32) = var_11.get_Count()
    let (var_23: int32) = (var_22 - 1)
    let (var_24: uint64) = var_14.[var_23]
    let (var_25: uint64) = (!var_3)
    let (var_26: uint64) = (var_25 + var_4)
    let (var_27: uint64) = (var_26 - var_24)
    var_15.[var_23] <- var_27
and method_59((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 131072L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_60((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_7
    let (var_11: EnvHeap14) = var_7.mem_8
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_17((var_11: EnvHeap14))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_4((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_4((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 0.000000f)
    let (var_27: uint64) = method_4((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 256, 128, 784, var_16, var_19, 256, var_25, 784, var_26, var_29, 256)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_62((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_63((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_65((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_66((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_66", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_70((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_71((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_75((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_76((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
and method_79((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_80((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
    method_81((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
and method_90((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 256, 128, 256, var_15, var_18, 256, var_21, 256, var_22, var_25, 256)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_92((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_93((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_94((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_81((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_97((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env8 =
    let (var_2: int64) = 5120L
    method_19((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_98((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 10, 128, 256, var_15, var_18, 10, var_21, 256, var_22, var_25, 10)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_100((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: (int64 ref)) = var_0.mem_7
    let (var_5: EnvHeap14) = var_0.mem_8
    let (var_6: ManagedCuda.BasicTypes.CUstream) = method_17((var_5: EnvHeap14))
    let (var_7: ManagedCuda.CudaContext) = var_0.mem_0
    method_101((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: ManagedCuda.CudaContext), (var_6: ManagedCuda.BasicTypes.CUstream))
and method_103((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_104((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_104", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_107((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_108((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_109((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_110((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_126((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_127((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_127", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_7
    let (var_10: EnvHeap14) = var_4.mem_8
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_153((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_154((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_24((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_5: int32), (var_6: uint64), (var_7: int32)): Env41 =
    let (var_8: bool) = (var_7 < var_4)
    if var_8 then
        let (var_9: ResizeArray<EnvStack1>) = var_3.mem_0
        let (var_10: EnvStack1) = var_9.[var_7]
        let (var_11: ResizeArray<Env31>) = var_10.mem_0
        let (var_12: int32) = var_11.get_Count()
        let (var_13: bool) = (var_12 > 0)
        let (var_30: uint64) =
            if var_13 then
                let (var_14: int32) = var_11.get_Count()
                let (var_15: int32) = (var_14 - 1)
                let (var_16: Env31) = var_11.[var_15]
                let (var_17: Env22) = var_16.mem_0
                let (var_18: (uint64 ref)) = var_17.mem_0
                let (var_19: uint64) = var_16.mem_1
                let (var_20: uint64) = (!var_18)
                let (var_21: uint64) = (var_20 + var_19)
                let (var_22: ResizeArray<uint64>) = var_1.mem_0
                let (var_23: uint64) = var_22.[var_7]
                let (var_24: ResizeArray<uint64>) = var_2.mem_0
                let (var_25: uint64) = var_24.[var_7]
                let (var_26: uint64) = (var_23 + var_25)
                (var_26 - var_21)
            else
                let (var_28: ResizeArray<uint64>) = var_2.mem_0
                var_28.[var_7]
        let (var_31: bool) = (var_6 < var_30)
        let (var_32: Env41) =
            if var_31 then
                (Env41(var_7, var_30))
            else
                (Env41(var_5, var_6))
        let (var_33: int32) = var_32.mem_0
        let (var_34: uint64) = var_32.mem_1
        let (var_35: int32) = (var_7 + 1)
        method_24((var_0: (int32 ref)), (var_1: EnvStack3), (var_2: EnvStack3), (var_3: EnvStack2), (var_4: int32), (var_33: int32), (var_34: uint64), (var_35: int32))
    else
        (Env41(var_5, var_6))
and method_63((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(131072L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_71((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_72((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_72", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_76((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_10: uint64) = method_4((var_1: (uint64 ref)))
    let (var_11: uint64) = method_4((var_3: (uint64 ref)))
    let (var_12: uint64) = method_4((var_5: (uint64 ref)))
    let (var_13: uint64) = method_4((var_7: (uint64 ref)))
    method_77((var_10: uint64), (var_11: uint64), (var_12: uint64), (var_13: uint64), (var_9: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17))
and method_80((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_7
    let (var_11: EnvHeap14) = var_7.mem_8
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_17((var_11: EnvHeap14))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_4((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_4((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 1.000000f)
    let (var_27: uint64) = method_4((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 256, 784, 128, var_16, var_19, 256, var_25, 784, var_26, var_29, 256)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_81((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_82((var_6: uint64), (var_7: uint64), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
and method_93((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 256, 128, 256, var_15, var_18, 256, var_21, 256, var_22, var_25, 256)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_94((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 256, 256, 128, var_15, var_18, 256, var_21, 256, var_22, var_25, 256)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_101((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_4((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(5120L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_108((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 256, 128, 10, var_15, var_18, 10, var_21, 10, var_22, var_25, 256)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_109((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_7
    let (var_10: EnvHeap14) = var_6.mem_8
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_4((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_4((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_4((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 10, 256, 128, var_15, var_18, 10, var_21, 256, var_22, var_25, 10)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_110((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_4((var_1: (uint64 ref)))
    let (var_7: uint64) = method_4((var_3: (uint64 ref)))
    method_111((var_6: uint64), (var_7: uint64), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
and method_154((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_155((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_155", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_7
    let (var_10: EnvHeap14) = var_4.mem_8
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_17((var_10: EnvHeap14))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_77((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_5: EnvHeap17)): unit =
    // Cuda join point
    // method_78((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64))
    let (var_6: ManagedCuda.CudaContext) = var_5.mem_0
    let (var_7: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_78", var_4, var_6)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_7.set_GridDimensions(var_8)
    let (var_9: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_7.set_BlockDimensions(var_9)
    let (var_10: (int64 ref)) = var_5.mem_7
    let (var_11: EnvHeap14) = var_5.mem_8
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_17((var_11: EnvHeap14))
    let (var_14: (System.Object [])) = [|var_0; var_1; var_2; var_3|]: (System.Object [])
    var_7.RunAsync(var_12, var_14)
and method_82((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_83((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_111((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_112((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_83((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_84((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_84", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_112((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_113((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_113", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_7
    let (var_9: EnvHeap14) = var_3.mem_8
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_17((var_9: EnvHeap14))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_11; "\" -I\"C:/cub-1.7.4\" -I\""; var_10; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1073741824UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_43: ResizeArray<EnvStack1>) = ResizeArray<EnvStack1>()
let (var_44: EnvStack2) = EnvStack2((var_43: ResizeArray<EnvStack1>))
let (var_45: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_46: EnvStack3) = EnvStack3((var_45: ResizeArray<uint64>))
let (var_47: ResizeArray<uint64>) = ResizeArray<uint64>()
let (var_48: EnvStack3) = EnvStack3((var_47: ResizeArray<uint64>))
let (var_49: (int32 ref)) = (ref 0)
let (var_50: EnvHeap4) = ({mem_0 = (var_49: (int32 ref)); mem_1 = (var_48: EnvStack3); mem_2 = (var_46: EnvStack3); mem_3 = (var_44: EnvStack2); mem_4 = (var_40: (uint64 ref)); mem_5 = (var_35: uint64)} : EnvHeap4)
let (var_51: EnvHeap5) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_50: EnvHeap4)} : EnvHeap5)
method_1((var_51: EnvHeap5), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_52: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_53: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_52)
let (var_54: ManagedCuda.CudaContext) = var_51.mem_0
let (var_55: EnvHeap4) = var_51.mem_1
let (var_56: EnvHeap6) = ({mem_0 = (var_54: ManagedCuda.CudaContext); mem_1 = (var_53: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_55: EnvHeap4)} : EnvHeap6)
let (var_57: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_58: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_59: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_57, var_58)
let (var_60: ManagedCuda.CudaContext) = var_56.mem_0
let (var_61: ManagedCuda.CudaRand.CudaRandDevice) = var_56.mem_1
let (var_62: EnvHeap4) = var_56.mem_2
let (var_63: EnvHeap7) = ({mem_0 = (var_60: ManagedCuda.CudaContext); mem_1 = (var_59: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_61: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_62: EnvHeap4)} : EnvHeap7)
let (var_70: ResizeArray<Env8>) = ResizeArray<Env8>()
let (var_71: EnvStack9) = EnvStack9((var_70: ResizeArray<Env8>))
let (var_72: ManagedCuda.CudaContext) = var_63.mem_0
let (var_73: ManagedCuda.CudaBlas.CudaBlas) = var_63.mem_1
let (var_74: ManagedCuda.CudaRand.CudaRandDevice) = var_63.mem_2
let (var_75: EnvHeap4) = var_63.mem_3
let (var_76: EnvHeap10) = ({mem_0 = (var_72: ManagedCuda.CudaContext); mem_1 = (var_73: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_74: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_71: EnvStack9); mem_4 = (var_75: EnvHeap4)} : EnvHeap10)
let (var_88: ResizeArray<Env11>) = ResizeArray<Env11>()
let (var_89: EnvStack12) = EnvStack12((var_88: ResizeArray<Env11>))
let (var_90: ManagedCuda.CudaContext) = var_76.mem_0
let (var_91: ManagedCuda.CudaBlas.CudaBlas) = var_76.mem_1
let (var_92: ManagedCuda.CudaRand.CudaRandDevice) = var_76.mem_2
let (var_93: EnvStack9) = var_76.mem_3
let (var_94: EnvHeap4) = var_76.mem_4
let (var_95: EnvHeap13) = ({mem_0 = (var_90: ManagedCuda.CudaContext); mem_1 = (var_91: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_92: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_93: EnvStack9); mem_4 = (var_89: EnvStack12); mem_5 = (var_94: EnvHeap4)} : EnvHeap13)
let (var_96: (bool ref)) = (ref true)
let (var_97: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_98: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_99: EnvHeap14) = ({mem_0 = (var_98: ManagedCuda.CudaEvent); mem_1 = (var_96: (bool ref)); mem_2 = (var_97: ManagedCuda.CudaStream)} : EnvHeap14)
let (var_100: Env11) = method_6((var_99: EnvHeap14), (var_95: EnvHeap13), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_101: (int64 ref)) = var_100.mem_0
let (var_102: Env15) = var_100.mem_1
let (var_103: EnvHeap14) = var_102.mem_0
let (var_104: ManagedCuda.CudaContext) = var_95.mem_0
let (var_105: ManagedCuda.CudaBlas.CudaBlas) = var_95.mem_1
let (var_106: ManagedCuda.CudaRand.CudaRandDevice) = var_95.mem_2
let (var_107: EnvStack9) = var_95.mem_3
let (var_108: EnvStack12) = var_95.mem_4
let (var_109: EnvHeap4) = var_95.mem_5
let (var_110: EnvHeap16) = ({mem_0 = (var_104: ManagedCuda.CudaContext); mem_1 = (var_105: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_106: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_107: EnvStack9); mem_4 = (var_108: EnvStack12); mem_5 = (var_109: EnvHeap4); mem_6 = (var_101: (int64 ref)); mem_7 = (var_103: EnvHeap14)} : EnvHeap16)
let (var_111: ManagedCuda.CudaSolve.cusolverDnHandle) = ManagedCuda.CudaSolve.cusolverDnHandle()
let (var_112: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = (ref var_111)
let (var_113: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnCreate(var_112)
if var_113 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_113)
let (var_114: ManagedCuda.CudaContext) = var_110.mem_0
let (var_115: ManagedCuda.CudaBlas.CudaBlas) = var_110.mem_1
let (var_116: ManagedCuda.CudaRand.CudaRandDevice) = var_110.mem_2
let (var_117: EnvStack9) = var_110.mem_3
let (var_118: EnvStack12) = var_110.mem_4
let (var_119: EnvHeap4) = var_110.mem_5
let (var_120: (int64 ref)) = var_110.mem_6
let (var_121: EnvHeap14) = var_110.mem_7
let (var_122: EnvHeap17) = ({mem_0 = (var_114: ManagedCuda.CudaContext); mem_1 = (var_115: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_112: (ManagedCuda.CudaSolve.cusolverDnHandle ref)); mem_3 = (var_116: ManagedCuda.CudaRand.CudaRandDevice); mem_4 = (var_117: EnvStack9); mem_5 = (var_118: EnvStack12); mem_6 = (var_119: EnvHeap4); mem_7 = (var_120: (int64 ref)); mem_8 = (var_121: EnvHeap14)} : EnvHeap17)
let (var_123: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-images.idx3-ubyte")
let (var_124: Tuple18) = method_8((var_123: string))
let (var_125: Tuple19) = var_124.mem_0
let (var_126: int64) = var_125.mem_0
let (var_127: int64) = var_125.mem_1
let (var_128: int64) = var_125.mem_2
let (var_129: (uint8 [])) = var_124.mem_1
let (var_130: bool) = (10000L = var_126)
let (var_134: bool) =
    if var_130 then
        let (var_131: bool) = (28L = var_127)
        if var_131 then
            (28L = var_128)
        else
            false
    else
        false
let (var_135: bool) = (var_134 = false)
if var_135 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_136: int64) = var_129.LongLength
let (var_137: bool) = (var_136 > 0L)
let (var_138: bool) = (var_137 = false)
if var_138 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_139: bool) = (var_136 = 7840000L)
let (var_140: bool) = (var_139 = false)
if var_140 then
    (failwith "The product of the split dimension must equal to that of the previous one.")
else
    ()
let (var_144: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(7840000L))
let (var_145: int64) = 0L
method_9((var_129: (uint8 [])), (var_144: (float32 [])), (var_145: int64))
let (var_146: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "t10k-labels.idx1-ubyte")
let (var_147: Tuple20) = method_11((var_146: string))
let (var_148: int64) = var_147.mem_0
let (var_149: (uint8 [])) = var_147.mem_1
let (var_150: bool) = (10000L = var_148)
let (var_151: bool) = (var_150 = false)
if var_151 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_155: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(100000L))
let (var_156: int64) = 0L
method_12((var_149: (uint8 [])), (var_155: (float32 [])), (var_156: int64))
let (var_157: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-images.idx3-ubyte")
let (var_158: Tuple18) = method_8((var_157: string))
let (var_159: Tuple19) = var_158.mem_0
let (var_160: int64) = var_159.mem_0
let (var_161: int64) = var_159.mem_1
let (var_162: int64) = var_159.mem_2
let (var_163: (uint8 [])) = var_158.mem_1
let (var_164: bool) = (60000L = var_160)
let (var_168: bool) =
    if var_164 then
        let (var_165: bool) = (28L = var_161)
        if var_165 then
            (28L = var_162)
        else
            false
    else
        false
let (var_169: bool) = (var_168 = false)
if var_169 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_170: int64) = var_163.LongLength
let (var_171: bool) = (var_170 > 0L)
let (var_172: bool) = (var_171 = false)
if var_172 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_173: bool) = (var_170 = 47040000L)
let (var_174: bool) = (var_173 = false)
if var_174 then
    (failwith "The product of the split dimension must equal to that of the previous one.")
else
    ()
let (var_178: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(47040000L))
let (var_179: int64) = 0L
method_14((var_163: (uint8 [])), (var_178: (float32 [])), (var_179: int64))
let (var_180: string) = System.IO.Path.Combine("C:\\ML Datasets\\Mnist", "train-labels.idx1-ubyte")
let (var_181: Tuple20) = method_11((var_180: string))
let (var_182: int64) = var_181.mem_0
let (var_183: (uint8 [])) = var_181.mem_1
let (var_184: bool) = (60000L = var_182)
let (var_185: bool) = (var_184 = false)
if var_185 then
    (failwith "Mnist dimensions do not match the expected values.")
else
    ()
let (var_189: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(600000L))
let (var_190: int64) = 0L
method_15((var_183: (uint8 [])), (var_189: (float32 [])), (var_190: int64))
let (var_191: int64) = 10000L
let (var_192: int64) = 0L
let (var_193: int64) = 784L
let (var_194: int64) = 1L
let (var_195: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_191: int64), (var_144: (float32 [])), (var_192: int64), (var_193: int64), (var_194: int64))
let (var_196: Env8) = var_195.mem_0
let (var_197: (int64 ref)) = var_196.mem_0
let (var_198: Env22) = var_196.mem_1
let (var_199: (uint64 ref)) = var_198.mem_0
let (var_200: int64) = 10000L
let (var_201: int64) = 0L
let (var_202: int64) = 10L
let (var_203: int64) = 1L
let (var_204: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_200: int64), (var_155: (float32 [])), (var_201: int64), (var_202: int64), (var_203: int64))
let (var_205: Env8) = var_204.mem_0
let (var_206: (int64 ref)) = var_205.mem_0
let (var_207: Env22) = var_205.mem_1
let (var_208: (uint64 ref)) = var_207.mem_0
let (var_209: int64) = 60000L
let (var_210: int64) = 0L
let (var_211: int64) = 784L
let (var_212: int64) = 1L
let (var_213: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_209: int64), (var_178: (float32 [])), (var_210: int64), (var_211: int64), (var_212: int64))
let (var_214: Env8) = var_213.mem_0
let (var_215: (int64 ref)) = var_214.mem_0
let (var_216: Env22) = var_214.mem_1
let (var_217: (uint64 ref)) = var_216.mem_0
let (var_218: int64) = 60000L
let (var_219: int64) = 0L
let (var_220: int64) = 10L
let (var_221: int64) = 1L
let (var_222: Env21) = method_16((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_218: int64), (var_189: (float32 [])), (var_219: int64), (var_220: int64), (var_221: int64))
let (var_223: Env8) = var_222.mem_0
let (var_224: (int64 ref)) = var_223.mem_0
let (var_225: Env22) = var_223.mem_1
let (var_226: (uint64 ref)) = var_225.mem_0
let (var_227: EnvStack23) = method_27((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_228: (int64 ref)) = var_227.mem_0
let (var_229: (uint64 ref)) = var_227.mem_1
let (var_230: EnvStack23) = method_31((var_228: (int64 ref)), (var_229: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_231: (int64 ref)) = var_230.mem_0
let (var_232: (uint64 ref)) = var_230.mem_1
let (var_233: EnvStack24) = method_32((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_234: (int64 ref)) = var_233.mem_0
let (var_235: (uint64 ref)) = var_233.mem_1
let (var_236: EnvStack24) = method_35((var_234: (int64 ref)), (var_235: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_237: (int64 ref)) = var_236.mem_0
let (var_238: (uint64 ref)) = var_236.mem_1
let (var_239: EnvHeap25) = ({mem_0 = (var_231: (int64 ref)); mem_1 = (var_232: (uint64 ref)); mem_2 = (var_228: (int64 ref)); mem_3 = (var_229: (uint64 ref)); mem_4 = (var_237: (int64 ref)); mem_5 = (var_238: (uint64 ref)); mem_6 = (var_234: (int64 ref)); mem_7 = (var_235: (uint64 ref))} : EnvHeap25)
let (var_240: EnvStack23) = method_27((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_241: (int64 ref)) = var_240.mem_0
let (var_242: (uint64 ref)) = var_240.mem_1
let (var_243: EnvStack23) = method_31((var_241: (int64 ref)), (var_242: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_244: (int64 ref)) = var_243.mem_0
let (var_245: (uint64 ref)) = var_243.mem_1
let (var_246: EnvStack26) = method_38((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_247: (int64 ref)) = var_246.mem_0
let (var_248: (uint64 ref)) = var_246.mem_1
let (var_249: EnvStack26) = method_41((var_247: (int64 ref)), (var_248: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_250: (int64 ref)) = var_249.mem_0
let (var_251: (uint64 ref)) = var_249.mem_1
let (var_252: EnvHeap27) = ({mem_0 = (var_244: (int64 ref)); mem_1 = (var_245: (uint64 ref)); mem_2 = (var_241: (int64 ref)); mem_3 = (var_242: (uint64 ref)); mem_4 = (var_250: (int64 ref)); mem_5 = (var_251: (uint64 ref)); mem_6 = (var_247: (int64 ref)); mem_7 = (var_248: (uint64 ref))} : EnvHeap27)
let (var_253: EnvStack28) = method_44((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_254: (int64 ref)) = var_253.mem_0
let (var_255: (uint64 ref)) = var_253.mem_1
let (var_256: EnvStack28) = method_48((var_254: (int64 ref)), (var_255: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_257: (int64 ref)) = var_256.mem_0
let (var_258: (uint64 ref)) = var_256.mem_1
let (var_259: EnvStack29) = method_49((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_260: (int64 ref)) = var_259.mem_0
let (var_261: (uint64 ref)) = var_259.mem_1
let (var_262: EnvStack29) = method_52((var_260: (int64 ref)), (var_261: (uint64 ref)), (var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_263: (int64 ref)) = var_262.mem_0
let (var_264: (uint64 ref)) = var_262.mem_1
let (var_265: EnvHeap30) = ({mem_0 = (var_257: (int64 ref)); mem_1 = (var_258: (uint64 ref)); mem_2 = (var_254: (int64 ref)); mem_3 = (var_255: (uint64 ref)); mem_4 = (var_263: (int64 ref)); mem_5 = (var_264: (uint64 ref)); mem_6 = (var_260: (int64 ref)); mem_7 = (var_261: (uint64 ref))} : EnvHeap30)
let (var_266: int64) = 0L
method_55((var_122: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_239: EnvHeap25), (var_252: EnvHeap27), (var_265: EnvHeap30), (var_197: (int64 ref)), (var_199: (uint64 ref)), (var_206: (int64 ref)), (var_208: (uint64 ref)), (var_215: (int64 ref)), (var_217: (uint64 ref)), (var_224: (int64 ref)), (var_226: (uint64 ref)), (var_266: int64))
let (var_267: (int64 ref)) = var_122.mem_7
let (var_268: EnvHeap14) = var_122.mem_8
let (var_269: (ManagedCuda.CudaSolve.cusolverDnHandle ref)) = var_122.mem_2
let (var_270: ManagedCuda.CudaSolve.cusolverDnHandle) = (!var_269)
let (var_271: ManagedCuda.BasicTypes.CUstream) = method_17((var_268: EnvHeap14))
let (var_272: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnSetStream(var_270, var_271)
if var_272 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_272)
let (var_273: ManagedCuda.CudaSolve.cusolverStatus) = ManagedCuda.CudaSolve.CudaSolveNativeMethods.Dense.cusolverDnDestroy(var_270)
if var_273 <> ManagedCuda.CudaSolve.cusolverStatus.Success then raise <| new ManagedCuda.CudaSolve.CudaSolveException(var_273)
method_164((var_108: EnvStack12))
method_147((var_93: EnvStack9))
var_59.Dispose()
var_53.Dispose()
let (var_274: uint64) = method_4((var_40: (uint64 ref)))
let (var_275: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_274)
let (var_276: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_275)
var_54.FreeMemory(var_276)
var_40 := 0UL
var_1.Dispose()

