module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    struct EnvStack1 {
        float mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ EnvStack1 make_EnvStack1(float mem_0, float mem_1, float mem_2){
        EnvStack1 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    struct Tuple0 {
        EnvStack1 mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ Tuple0 make_Tuple0(EnvStack1 mem_0, float mem_1, float mem_2){
        Tuple0 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    struct Tuple2 {
        EnvStack1 mem_0;
        float mem_1;
        float mem_2;
        float mem_3;
    };
    __device__ __forceinline__ Tuple2 make_Tuple2(EnvStack1 mem_0, float mem_1, float mem_2, float mem_3){
        Tuple2 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        tmp.mem_3 = mem_3;
        return tmp;
    }
    struct Tuple3 {
        EnvStack1 mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple3 make_Tuple3(EnvStack1 mem_0, float mem_1){
        Tuple3 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    struct Tuple11 {
        float mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple11 make_Tuple11(float mem_0, float mem_1){
        Tuple11 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef float(*FunPointer4)(float, float);
    struct Tuple6 {
        float mem_0;
        long long int mem_1;
    };
    __device__ __forceinline__ Tuple6 make_Tuple6(float mem_0, long long int mem_1){
        Tuple6 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    struct Tuple12 {
        Tuple6 mem_0;
        Tuple6 mem_1;
    };
    __device__ __forceinline__ Tuple12 make_Tuple12(Tuple6 mem_0, Tuple6 mem_1){
        Tuple12 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef Tuple6(*FunPointer5)(Tuple6, Tuple6);
    struct EnvStack8 {
        float mem_0;
        float mem_1;
        float mem_2;
        float mem_3;
        float mem_4;
        float mem_5;
    };
    __device__ __forceinline__ EnvStack8 make_EnvStack8(float mem_0, float mem_1, float mem_2, float mem_3, float mem_4, float mem_5){
        EnvStack8 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        tmp.mem_3 = mem_3;
        tmp.mem_4 = mem_4;
        tmp.mem_5 = mem_5;
        return tmp;
    }
    struct Tuple7 {
        EnvStack8 mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ Tuple7 make_Tuple7(EnvStack8 mem_0, float mem_1, float mem_2){
        Tuple7 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    struct Tuple9 {
        EnvStack8 mem_0;
        float mem_1;
        float mem_2;
        float mem_3;
    };
    __device__ __forceinline__ Tuple9 make_Tuple9(EnvStack8 mem_0, float mem_1, float mem_2, float mem_3){
        Tuple9 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        tmp.mem_3 = mem_3;
        return tmp;
    }
    struct Tuple10 {
        EnvStack8 mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple10 make_Tuple10(EnvStack8 mem_0, float mem_1){
        Tuple10 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    __global__ void method_36(float var_0, float * var_1);
    __global__ void method_24(unsigned char * var_0, unsigned char * var_1);
    __global__ void method_160(float * var_0, float * var_1, float * var_2);
    __global__ void method_75(float * var_0, float * var_1, float * var_2);
    __global__ void method_95(float * var_0, float * var_1, float * var_2);
    __global__ void method_150(float * var_0, float * var_1, float * var_2, float * var_3);
    __global__ void method_154(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6);
    __global__ void method_172(float * var_0, float * var_1);
    __global__ void method_178(float * var_0, float * var_1, long long int * var_2);
    __global__ void method_63(float * var_0, float * var_1, float * var_2, float * var_3);
    __global__ void method_69(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6);
    __global__ void method_90(float * var_0, float * var_1);
    __global__ void method_124(float * var_0, float * var_1);
    __global__ void method_127(float * var_0, float * var_1);
    __global__ void method_140(long long int * var_0, float * var_1);
    __global__ void method_166(float * var_0, float * var_1);
    __global__ void method_187(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6);
    __global__ void method_191(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6, float * var_7, float * var_8, float * var_9, float * var_10, float * var_11, float * var_12);
    __global__ void method_53(unsigned char * var_0, float * var_1);
    __global__ void method_81(float * var_0, float * var_1);
    __global__ void method_101(float * var_0, float * var_1, float * var_2);
    __global__ void method_110(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6);
    __global__ void method_114(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6, float * var_7, float * var_8, float * var_9, float * var_10, float * var_11, float * var_12);
    __device__ char method_37(long long int * var_0);
    __device__ char method_25(long long int * var_0);
    __device__ char method_65(long long int * var_0);
    __device__ char method_64(long long int * var_0);
    __device__ char method_96(long long int * var_0, float * var_1);
    __device__ float method_91(float var_0, float var_1);
    __device__ char method_179(long long int * var_0, float * var_1, float * var_2, long long int * var_3);
    __device__ Tuple6 method_180(Tuple6 var_0, Tuple6 var_1);
    __device__ char method_128(long long int * var_0);
    __device__ char method_141(long long int * var_0);
    __device__ char method_167(long long int * var_0, float * var_1);
    __device__ char method_54(long long int * var_0);
    __device__ char method_82(long long int * var_0, float * var_1);
    __device__ char method_83(long long int * var_0, float * var_1);
    __device__ char method_84(long long int var_0, long long int * var_1, float * var_2);
    __device__ char method_102(long long int * var_0);
    
    __global__ void method_36(float var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_37(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_1[var_8];
            var_1[var_8] = var_0;
            long long int var_17 = (var_8 + 128);
            var_6[0] = var_17;
        }
        long long int var_18 = var_6[0];
    }
    __global__ void method_24(unsigned char * var_0, unsigned char * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (256 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_25(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 % 64);
            long long int var_10 = (var_8 / 64);
            long long int var_11 = (var_10 % 17428);
            long long int var_12 = (var_10 / 17428);
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 17428);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = (var_11 * 64);
            char var_18 = (var_9 >= 0);
            char var_20;
            if (var_18) {
                var_20 = (var_9 < 64);
            } else {
                var_20 = 0;
            }
            char var_21 = (var_20 == 0);
            if (var_21) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_22 = (var_9 * 17428);
            char var_24;
            if (var_13) {
                var_24 = (var_11 < 17428);
            } else {
                var_24 = 0;
            }
            char var_25 = (var_24 == 0);
            if (var_25) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_26 = (var_22 + var_11);
            unsigned char var_27 = var_0[var_26];
            char var_29;
            if (var_18) {
                var_29 = (var_9 < 64);
            } else {
                var_29 = 0;
            }
            char var_30 = (var_29 == 0);
            if (var_30) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_31 = (var_17 + var_9);
            unsigned char var_32 = var_1[var_31];
            var_1[var_31] = var_27;
            long long int var_33 = (var_8 + 1115392);
            var_6[0] = var_33;
        }
        long long int var_34 = var_6[0];
    }
    __global__ void method_160(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (32 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_37(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 128);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (var_15 + var_16);
            long long int var_18[1];
            var_18[0] = var_17;
            while (method_65(var_18)) {
                long long int var_20 = var_18[0];
                char var_21 = (var_20 >= 0);
                char var_23;
                if (var_21) {
                    var_23 = (var_20 < 1);
                } else {
                    var_23 = 0;
                }
                char var_24 = (var_23 == 0);
                if (var_24) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_25 = (var_20 * 128);
                char var_27;
                if (var_10) {
                    var_27 = (var_9 < 128);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_29 = (var_25 + var_9);
                char var_31;
                if (var_21) {
                    var_31 = (var_20 < 1);
                } else {
                    var_31 = 0;
                }
                char var_32 = (var_31 == 0);
                if (var_32) {
                    // "Argument out of bounds."
                } else {
                }
                char var_34;
                if (var_10) {
                    var_34 = (var_9 < 128);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                float var_36 = var_1[var_29];
                float var_37 = var_2[var_29];
                float var_38 = (var_14 + var_36);
                var_2[var_29] = var_38;
                long long int var_39 = (var_20 + 1);
                var_18[0] = var_39;
            }
            long long int var_40 = var_18[0];
            long long int var_41 = (var_9 + 128);
            var_7[0] = var_41;
        }
        long long int var_42 = var_7[0];
    }
    __global__ void method_75(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (32 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_37(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 128);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_64(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 64);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_26 = (var_21 * 128);
                char var_28;
                if (var_10) {
                    var_28 = (var_9 < 128);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_26 + var_9);
                char var_32;
                if (var_22) {
                    var_32 = (var_21 < 64);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                char var_35;
                if (var_10) {
                    var_35 = (var_9 < 128);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                float var_37 = var_1[var_30];
                float var_38 = var_2[var_30];
                float var_39 = (var_14 + var_37);
                var_2[var_30] = var_39;
                long long int var_40 = (var_21 + 32);
                var_19[0] = var_40;
            }
            long long int var_41 = var_19[0];
            long long int var_42 = (var_9 + 128);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_95(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (1024 * var_4);
        long long int var_6 = (var_3 + var_5);
        float var_7 = 0;
        long long int var_8[1];
        float var_9[1];
        var_8[0] = var_6;
        var_9[0] = var_7;
        while (method_96(var_8, var_9)) {
            long long int var_11 = var_8[0];
            float var_12 = var_9[0];
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 8192);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_0[var_11];
            float var_18 = var_1[var_11];
            float var_19 = (-var_18);
            float var_20 = log(var_17);
            float var_21 = (var_19 * var_20);
            float var_22 = (var_12 + var_21);
            long long int var_23 = (var_11 + 1024);
            var_8[0] = var_23;
            var_9[0] = var_22;
        }
        long long int var_24 = var_8[0];
        float var_25 = var_9[0];
        float var_26 = cub::BlockReduce<float,1024,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_25);
        float var_27 = (var_26 / 64);
        long long int var_28 = threadIdx.x;
        char var_29 = (var_28 == 0);
        if (var_29) {
            long long int var_30 = blockIdx.x;
            char var_31 = (var_30 >= 0);
            char var_33;
            if (var_31) {
                var_33 = (var_30 < 1);
            } else {
                var_33 = 0;
            }
            char var_34 = (var_33 == 0);
            if (var_34) {
                // "Argument out of bounds."
            } else {
            }
            var_2[var_30] = var_27;
        } else {
        }
    }
    __global__ void method_150(float * var_0, float * var_1, float * var_2, float * var_3) {
        long long int var_4 = threadIdx.y;
        long long int var_5 = blockIdx.y;
        long long int var_6 = (var_4 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_65(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 1);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_14 = (var_9 * 128);
            char var_16;
            if (var_10) {
                var_16 = (var_9 < 1);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_18 = threadIdx.x;
            long long int var_19 = blockIdx.x;
            long long int var_20 = (128 * var_19);
            long long int var_21 = (var_18 + var_20);
            float var_39[1];
            long long int var_40[1];
            var_40[0] = 0;
            while (method_65(var_40)) {
                long long int var_42 = var_40[0];
                long long int var_43 = (128 * var_42);
                long long int var_44 = (var_21 + var_43);
                long long int var_45 = (128 - var_43);
                char var_46 = (var_44 < 128);
                if (var_46) {
                    char var_47 = (var_42 >= 0);
                    char var_49;
                    if (var_47) {
                        var_49 = (var_42 < 1);
                    } else {
                        var_49 = 0;
                    }
                    char var_50 = (var_49 == 0);
                    if (var_50) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_51 = (var_44 >= 0);
                    char var_52 = (var_51 == 0);
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_53 = (var_14 + var_44);
                    float var_54 = var_2[var_53];
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_55 = var_0[var_44];
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_56 = var_1[var_44];
                    float var_57 = (var_55 * var_54);
                    float var_58 = (var_57 + var_56);
                    var_39[var_42] = var_58;
                } else {
                }
                long long int var_59 = (var_42 + 1);
                var_40[0] = var_59;
            }
            long long int var_60 = var_40[0];
            float var_61 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_39);
            __shared__ float var_62[1];
            long long int var_63 = threadIdx.x;
            char var_64 = (var_63 == 0);
            if (var_64) {
                var_62[0] = var_61;
            } else {
            }
            __syncthreads();
            float var_65 = var_62[0];
            float var_68[1];
            long long int var_69[1];
            var_69[0] = 0;
            while (method_65(var_69)) {
                long long int var_71 = var_69[0];
                long long int var_72 = (128 * var_71);
                long long int var_73 = (var_21 + var_72);
                long long int var_74 = (128 - var_72);
                char var_75 = (var_73 < 128);
                if (var_75) {
                    char var_76 = (var_71 >= 0);
                    char var_78;
                    if (var_76) {
                        var_78 = (var_71 < 1);
                    } else {
                        var_78 = 0;
                    }
                    char var_79 = (var_78 == 0);
                    if (var_79) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_80 = var_39[var_71];
                    float var_81 = (var_65 / 128);
                    float var_82 = (var_80 - var_81);
                    char var_84;
                    if (var_76) {
                        var_84 = (var_71 < 1);
                    } else {
                        var_84 = 0;
                    }
                    char var_85 = (var_84 == 0);
                    if (var_85) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_68[var_71] = var_82;
                } else {
                }
                long long int var_86 = (var_71 + 1);
                var_69[0] = var_86;
            }
            long long int var_87 = var_69[0];
            float var_89[1];
            long long int var_90[1];
            var_90[0] = 0;
            while (method_65(var_90)) {
                long long int var_92 = var_90[0];
                long long int var_93 = (128 * var_92);
                long long int var_94 = (var_21 + var_93);
                long long int var_95 = (128 - var_93);
                char var_96 = (var_94 < 128);
                if (var_96) {
                    char var_97 = (var_92 >= 0);
                    char var_99;
                    if (var_97) {
                        var_99 = (var_92 < 1);
                    } else {
                        var_99 = 0;
                    }
                    char var_100 = (var_99 == 0);
                    if (var_100) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_101 = var_68[var_92];
                    float var_102 = (var_101 * var_101);
                    char var_104;
                    if (var_97) {
                        var_104 = (var_92 < 1);
                    } else {
                        var_104 = 0;
                    }
                    char var_105 = (var_104 == 0);
                    if (var_105) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_89[var_92] = var_102;
                } else {
                }
                long long int var_106 = (var_92 + 1);
                var_90[0] = var_106;
            }
            long long int var_107 = var_90[0];
            float var_108 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_89);
            __shared__ float var_109[1];
            long long int var_110 = threadIdx.x;
            char var_111 = (var_110 == 0);
            if (var_111) {
                var_109[0] = var_108;
            } else {
            }
            __syncthreads();
            float var_112 = var_109[0];
            long long int var_113[1];
            var_113[0] = 0;
            while (method_65(var_113)) {
                long long int var_115 = var_113[0];
                long long int var_116 = (128 * var_115);
                long long int var_117 = (var_21 + var_116);
                long long int var_118 = (128 - var_116);
                char var_119 = (var_117 < 128);
                if (var_119) {
                    char var_120 = (var_117 >= 0);
                    char var_121 = (var_120 == 0);
                    if (var_121) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_122 = (var_14 + var_117);
                    char var_123 = (var_115 >= 0);
                    char var_125;
                    if (var_123) {
                        var_125 = (var_115 < 1);
                    } else {
                        var_125 = 0;
                    }
                    char var_126 = (var_125 == 0);
                    if (var_126) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_127 = var_68[var_115];
                    float var_128 = var_3[var_122];
                    float var_129 = (var_112 / 128);
                    float var_130 = (0.0025 + var_129);
                    float var_131 = sqrt(var_130);
                    float var_132 = (var_127 / var_131);
                    char var_133 = (var_132 > 0);
                    float var_134;
                    if (var_133) {
                        var_134 = var_132;
                    } else {
                        var_134 = 0;
                    }
                    var_3[var_122] = var_134;
                } else {
                }
                long long int var_135 = (var_115 + 1);
                var_113[0] = var_135;
            }
            long long int var_136 = var_113[0];
            long long int var_137 = (var_9 + 1);
            var_7[0] = var_137;
        }
        long long int var_138 = var_7[0];
    }
    __global__ void method_154(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6) {
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_65(var_10)) {
            long long int var_12 = var_10[0];
            char var_13 = (var_12 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_12 < 1);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = (var_12 * 128);
            char var_19;
            if (var_13) {
                var_19 = (var_12 < 1);
            } else {
                var_19 = 0;
            }
            char var_20 = (var_19 == 0);
            if (var_20) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_21 = threadIdx.x;
            long long int var_22 = blockIdx.x;
            long long int var_23 = (128 * var_22);
            long long int var_24 = (var_21 + var_23);
            Tuple0 var_44[1];
            long long int var_45[1];
            var_45[0] = 0;
            while (method_65(var_45)) {
                long long int var_47 = var_45[0];
                long long int var_48 = (128 * var_47);
                long long int var_49 = (var_24 + var_48);
                long long int var_50 = (128 - var_48);
                char var_51 = (var_49 < 128);
                if (var_51) {
                    char var_52 = (var_47 >= 0);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_47 < 1);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_56 = (var_49 >= 0);
                    char var_57 = (var_56 == 0);
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_58 = (var_17 + var_49);
                    float var_59 = var_4[var_58];
                    float var_60 = var_5[var_58];
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_61 = var_0[var_49];
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_62 = var_1[var_49];
                    EnvStack1 var_63 = make_EnvStack1(var_61, var_62, var_60);
                    float var_64 = (var_61 * var_60);
                    float var_65 = (var_64 + var_62);
                    var_44[var_47] = make_Tuple0(var_63, var_59, var_65);
                } else {
                }
                long long int var_66 = (var_47 + 1);
                var_45[0] = var_66;
            }
            long long int var_67 = var_45[0];
            float var_68[1];
            long long int var_69[1];
            var_69[0] = 0;
            while (method_65(var_69)) {
                long long int var_71 = var_69[0];
                long long int var_72 = (128 * var_71);
                long long int var_73 = (var_24 + var_72);
                long long int var_74 = (128 - var_72);
                char var_75 = (var_73 < 128);
                if (var_75) {
                    char var_76 = (var_71 >= 0);
                    char var_78;
                    if (var_76) {
                        var_78 = (var_71 < 1);
                    } else {
                        var_78 = 0;
                    }
                    char var_79 = (var_78 == 0);
                    if (var_79) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_80 = var_44[var_71];
                    EnvStack1 var_81 = var_80.mem_0;
                    float var_82 = var_80.mem_1;
                    float var_83 = var_80.mem_2;
                    char var_85;
                    if (var_76) {
                        var_85 = (var_71 < 1);
                    } else {
                        var_85 = 0;
                    }
                    char var_86 = (var_85 == 0);
                    if (var_86) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_68[var_71] = var_83;
                } else {
                }
                long long int var_87 = (var_71 + 1);
                var_69[0] = var_87;
            }
            long long int var_88 = var_69[0];
            float var_89 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_68);
            __shared__ float var_90[1];
            long long int var_91 = threadIdx.x;
            char var_92 = (var_91 == 0);
            if (var_92) {
                var_90[0] = var_89;
            } else {
            }
            __syncthreads();
            float var_93 = var_90[0];
            Tuple0 var_96[1];
            long long int var_97[1];
            var_97[0] = 0;
            while (method_65(var_97)) {
                long long int var_99 = var_97[0];
                long long int var_100 = (128 * var_99);
                long long int var_101 = (var_24 + var_100);
                long long int var_102 = (128 - var_100);
                char var_103 = (var_101 < 128);
                if (var_103) {
                    char var_104 = (var_99 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_99 < 1);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_108 = var_44[var_99];
                    EnvStack1 var_109 = var_108.mem_0;
                    float var_110 = var_108.mem_1;
                    float var_111 = var_108.mem_2;
                    float var_112 = (var_93 / 128);
                    float var_113 = (var_111 - var_112);
                    char var_115;
                    if (var_104) {
                        var_115 = (var_99 < 1);
                    } else {
                        var_115 = 0;
                    }
                    char var_116 = (var_115 == 0);
                    if (var_116) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_96[var_99] = make_Tuple0(var_109, var_110, var_113);
                } else {
                }
                long long int var_117 = (var_99 + 1);
                var_97[0] = var_117;
            }
            long long int var_118 = var_97[0];
            float var_120[1];
            long long int var_121[1];
            var_121[0] = 0;
            while (method_65(var_121)) {
                long long int var_123 = var_121[0];
                long long int var_124 = (128 * var_123);
                long long int var_125 = (var_24 + var_124);
                long long int var_126 = (128 - var_124);
                char var_127 = (var_125 < 128);
                if (var_127) {
                    char var_128 = (var_123 >= 0);
                    char var_130;
                    if (var_128) {
                        var_130 = (var_123 < 1);
                    } else {
                        var_130 = 0;
                    }
                    char var_131 = (var_130 == 0);
                    if (var_131) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_132 = var_96[var_123];
                    EnvStack1 var_133 = var_132.mem_0;
                    float var_134 = var_132.mem_1;
                    float var_135 = var_132.mem_2;
                    float var_136 = (var_135 * var_135);
                    char var_138;
                    if (var_128) {
                        var_138 = (var_123 < 1);
                    } else {
                        var_138 = 0;
                    }
                    char var_139 = (var_138 == 0);
                    if (var_139) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_120[var_123] = var_136;
                } else {
                }
                long long int var_140 = (var_123 + 1);
                var_121[0] = var_140;
            }
            long long int var_141 = var_121[0];
            float var_142 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_120);
            __shared__ float var_143[1];
            long long int var_144 = threadIdx.x;
            char var_145 = (var_144 == 0);
            if (var_145) {
                var_143[0] = var_142;
            } else {
            }
            __syncthreads();
            float var_146 = var_143[0];
            Tuple2 var_152[1];
            long long int var_153[1];
            var_153[0] = 0;
            while (method_65(var_153)) {
                long long int var_155 = var_153[0];
                long long int var_156 = (128 * var_155);
                long long int var_157 = (var_24 + var_156);
                long long int var_158 = (128 - var_156);
                char var_159 = (var_157 < 128);
                if (var_159) {
                    char var_160 = (var_155 >= 0);
                    char var_162;
                    if (var_160) {
                        var_162 = (var_155 < 1);
                    } else {
                        var_162 = 0;
                    }
                    char var_163 = (var_162 == 0);
                    if (var_163) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_164 = var_96[var_155];
                    EnvStack1 var_165 = var_164.mem_0;
                    float var_166 = var_164.mem_1;
                    float var_167 = var_164.mem_2;
                    char var_168 = (var_167 > 0);
                    float var_169;
                    if (var_168) {
                        var_169 = var_166;
                    } else {
                        var_169 = 0;
                    }
                    float var_170 = (var_146 / 128);
                    float var_171 = (0.0025 + var_170);
                    float var_172 = sqrt(var_171);
                    char var_174;
                    if (var_160) {
                        var_174 = (var_155 < 1);
                    } else {
                        var_174 = 0;
                    }
                    char var_175 = (var_174 == 0);
                    if (var_175) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_152[var_155] = make_Tuple2(var_165, var_169, var_167, var_172);
                } else {
                }
                long long int var_176 = (var_155 + 1);
                var_153[0] = var_176;
            }
            long long int var_177 = var_153[0];
            float var_182[1];
            long long int var_183[1];
            var_183[0] = 0;
            while (method_65(var_183)) {
                long long int var_185 = var_183[0];
                long long int var_186 = (128 * var_185);
                long long int var_187 = (var_24 + var_186);
                long long int var_188 = (128 - var_186);
                char var_189 = (var_187 < 128);
                if (var_189) {
                    char var_190 = (var_185 >= 0);
                    char var_192;
                    if (var_190) {
                        var_192 = (var_185 < 1);
                    } else {
                        var_192 = 0;
                    }
                    char var_193 = (var_192 == 0);
                    if (var_193) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple2 var_194 = var_152[var_185];
                    EnvStack1 var_195 = var_194.mem_0;
                    float var_196 = var_194.mem_1;
                    float var_197 = var_194.mem_2;
                    float var_198 = var_194.mem_3;
                    float var_199 = (-var_196);
                    float var_200 = (var_199 * var_197);
                    float var_201 = (var_198 * var_198);
                    float var_202 = (var_200 / var_201);
                    char var_204;
                    if (var_190) {
                        var_204 = (var_185 < 1);
                    } else {
                        var_204 = 0;
                    }
                    char var_205 = (var_204 == 0);
                    if (var_205) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_182[var_185] = var_202;
                } else {
                }
                long long int var_206 = (var_185 + 1);
                var_183[0] = var_206;
            }
            long long int var_207 = var_183[0];
            float var_208 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_182);
            __shared__ float var_209[1];
            long long int var_210 = threadIdx.x;
            char var_211 = (var_210 == 0);
            if (var_211) {
                var_209[0] = var_208;
            } else {
            }
            __syncthreads();
            float var_212 = var_209[0];
            Tuple3 var_218[1];
            long long int var_219[1];
            var_219[0] = 0;
            while (method_65(var_219)) {
                long long int var_221 = var_219[0];
                long long int var_222 = (128 * var_221);
                long long int var_223 = (var_24 + var_222);
                long long int var_224 = (128 - var_222);
                char var_225 = (var_223 < 128);
                if (var_225) {
                    char var_226 = (var_221 >= 0);
                    char var_228;
                    if (var_226) {
                        var_228 = (var_221 < 1);
                    } else {
                        var_228 = 0;
                    }
                    char var_229 = (var_228 == 0);
                    if (var_229) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple2 var_230 = var_152[var_221];
                    EnvStack1 var_231 = var_230.mem_0;
                    float var_232 = var_230.mem_1;
                    float var_233 = var_230.mem_2;
                    float var_234 = var_230.mem_3;
                    float var_235 = (var_232 / var_234);
                    float var_236 = (var_212 * var_233);
                    float var_237 = (var_234 * 128);
                    float var_238 = (var_236 / var_237);
                    float var_239 = (var_235 + var_238);
                    char var_241;
                    if (var_226) {
                        var_241 = (var_221 < 1);
                    } else {
                        var_241 = 0;
                    }
                    char var_242 = (var_241 == 0);
                    if (var_242) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_218[var_221] = make_Tuple3(var_231, var_239);
                } else {
                }
                long long int var_243 = (var_221 + 1);
                var_219[0] = var_243;
            }
            long long int var_244 = var_219[0];
            float var_245[1];
            long long int var_246[1];
            var_246[0] = 0;
            while (method_65(var_246)) {
                long long int var_248 = var_246[0];
                long long int var_249 = (128 * var_248);
                long long int var_250 = (var_24 + var_249);
                long long int var_251 = (128 - var_249);
                char var_252 = (var_250 < 128);
                if (var_252) {
                    char var_253 = (var_248 >= 0);
                    char var_255;
                    if (var_253) {
                        var_255 = (var_248 < 1);
                    } else {
                        var_255 = 0;
                    }
                    char var_256 = (var_255 == 0);
                    if (var_256) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_257 = var_218[var_248];
                    EnvStack1 var_258 = var_257.mem_0;
                    float var_259 = var_257.mem_1;
                    char var_261;
                    if (var_253) {
                        var_261 = (var_248 < 1);
                    } else {
                        var_261 = 0;
                    }
                    char var_262 = (var_261 == 0);
                    if (var_262) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_245[var_248] = var_259;
                } else {
                }
                long long int var_263 = (var_248 + 1);
                var_246[0] = var_263;
            }
            long long int var_264 = var_246[0];
            float var_265 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_245);
            __shared__ float var_266[1];
            long long int var_267 = threadIdx.x;
            char var_268 = (var_267 == 0);
            if (var_268) {
                var_266[0] = var_265;
            } else {
            }
            __syncthreads();
            float var_269 = var_266[0];
            long long int var_270[1];
            var_270[0] = 0;
            while (method_65(var_270)) {
                long long int var_272 = var_270[0];
                long long int var_273 = (128 * var_272);
                long long int var_274 = (var_24 + var_273);
                long long int var_275 = (128 - var_273);
                char var_276 = (var_274 < 128);
                if (var_276) {
                    char var_277 = (var_274 >= 0);
                    char var_278 = (var_277 == 0);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_279 = (var_17 + var_274);
                    char var_280 = (var_272 >= 0);
                    char var_282;
                    if (var_280) {
                        var_282 = (var_272 < 1);
                    } else {
                        var_282 = 0;
                    }
                    char var_283 = (var_282 == 0);
                    if (var_283) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_284 = var_218[var_272];
                    EnvStack1 var_285 = var_284.mem_0;
                    float var_286 = var_284.mem_1;
                    float var_287 = var_285.mem_0;
                    float var_288 = var_285.mem_1;
                    float var_289 = var_285.mem_2;
                    float var_290 = var_6[var_279];
                    float var_291 = (var_269 / 128);
                    float var_292 = (var_286 - var_291);
                    float var_293 = (var_292 * var_289);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_294 = var_2 + var_274;
                    atomicAdd(var_294, var_293);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_295 = var_3 + var_274;
                    atomicAdd(var_295, var_292);
                    float var_296 = (var_292 * var_287);
                    float var_297 = (var_290 + var_296);
                    var_6[var_279] = var_297;
                } else {
                }
                long long int var_298 = (var_272 + 1);
                var_270[0] = var_298;
            }
            long long int var_299 = var_270[0];
            long long int var_300 = (var_12 + 1);
            var_10[0] = var_300;
        }
        long long int var_301 = var_10[0];
    }
    __global__ void method_172(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.y;
        long long int var_3 = blockIdx.y;
        long long int var_4 = (var_2 + var_3);
        long long int var_5[1];
        var_5[0] = var_4;
        while (method_65(var_5)) {
            long long int var_7 = var_5[0];
            char var_8 = (var_7 >= 0);
            char var_10;
            if (var_8) {
                var_10 = (var_7 < 1);
            } else {
                var_10 = 0;
            }
            char var_11 = (var_10 == 0);
            if (var_11) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_12 = (var_7 * 128);
            char var_14;
            if (var_8) {
                var_14 = (var_7 < 1);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.x;
            long long int var_17 = blockIdx.x;
            long long int var_18 = (128 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_28[1];
            long long int var_29[1];
            var_29[0] = 0;
            while (method_65(var_29)) {
                long long int var_31 = var_29[0];
                long long int var_32 = (128 * var_31);
                long long int var_33 = (var_19 + var_32);
                long long int var_34 = (128 - var_32);
                char var_35 = (var_33 < 128);
                if (var_35) {
                    char var_36 = (var_31 >= 0);
                    char var_38;
                    if (var_36) {
                        var_38 = (var_31 < 1);
                    } else {
                        var_38 = 0;
                    }
                    char var_39 = (var_38 == 0);
                    if (var_39) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_40 = (var_33 >= 0);
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 + var_33);
                    float var_43 = var_0[var_42];
                    float var_44 = (var_43 / 0.6);
                    var_28[var_31] = var_44;
                } else {
                }
                long long int var_45 = (var_31 + 1);
                var_29[0] = var_45;
            }
            long long int var_46 = var_29[0];
            FunPointer4 var_49 = method_91;
            float var_50 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_28, var_49);
            __shared__ float var_51[1];
            long long int var_52 = threadIdx.x;
            char var_53 = (var_52 == 0);
            if (var_53) {
                var_51[0] = var_50;
            } else {
            }
            __syncthreads();
            float var_54 = var_51[0];
            float var_57[1];
            long long int var_58[1];
            var_58[0] = 0;
            while (method_65(var_58)) {
                long long int var_60 = var_58[0];
                long long int var_61 = (128 * var_60);
                long long int var_62 = (var_19 + var_61);
                long long int var_63 = (128 - var_61);
                char var_64 = (var_62 < 128);
                if (var_64) {
                    char var_65 = (var_60 >= 0);
                    char var_67;
                    if (var_65) {
                        var_67 = (var_60 < 1);
                    } else {
                        var_67 = 0;
                    }
                    char var_68 = (var_67 == 0);
                    if (var_68) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_69 = var_28[var_60];
                    float var_70 = (var_69 - var_54);
                    float var_71 = exp(var_70);
                    char var_73;
                    if (var_65) {
                        var_73 = (var_60 < 1);
                    } else {
                        var_73 = 0;
                    }
                    char var_74 = (var_73 == 0);
                    if (var_74) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_57[var_60] = var_71;
                } else {
                }
                long long int var_75 = (var_60 + 1);
                var_58[0] = var_75;
            }
            long long int var_76 = var_58[0];
            float var_77 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_57);
            __shared__ float var_78[1];
            long long int var_79 = threadIdx.x;
            char var_80 = (var_79 == 0);
            if (var_80) {
                var_78[0] = var_77;
            } else {
            }
            __syncthreads();
            float var_81 = var_78[0];
            long long int var_82[1];
            var_82[0] = 0;
            while (method_65(var_82)) {
                long long int var_84 = var_82[0];
                long long int var_85 = (128 * var_84);
                long long int var_86 = (var_19 + var_85);
                long long int var_87 = (128 - var_85);
                char var_88 = (var_86 < 128);
                if (var_88) {
                    char var_89 = (var_86 >= 0);
                    char var_90 = (var_89 == 0);
                    if (var_90) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_91 = (var_12 + var_86);
                    char var_92 = (var_84 >= 0);
                    char var_94;
                    if (var_92) {
                        var_94 = (var_84 < 1);
                    } else {
                        var_94 = 0;
                    }
                    char var_95 = (var_94 == 0);
                    if (var_95) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_96 = var_57[var_84];
                    float var_97 = var_1[var_91];
                    float var_98 = (var_96 / var_81);
                    var_1[var_91] = var_98;
                } else {
                }
                long long int var_99 = (var_84 + 1);
                var_82[0] = var_99;
            }
            long long int var_100 = var_82[0];
            long long int var_101 = (var_7 + 1);
            var_5[0] = var_101;
        }
        long long int var_102 = var_5[0];
    }
    __global__ void method_178(float * var_0, float * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.y;
        long long int var_4 = blockIdx.y;
        long long int var_5 = (var_3 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_65(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 1);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_13 = (var_8 * 128);
            char var_15;
            if (var_9) {
                var_15 = (var_8 < 1);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_1[var_8];
            long long int var_18 = threadIdx.x;
            long long int var_19 = blockIdx.x;
            long long int var_20 = (128 * var_19);
            long long int var_21 = (var_18 + var_20);
            float var_22 = 0;
            float var_23 = __int_as_float(0x7f800000);
            long long int var_24 = 0;
            long long int var_25[1];
            float var_26[1];
            float var_27[1];
            long long int var_28[1];
            var_25[0] = var_21;
            var_26[0] = var_22;
            var_27[0] = var_23;
            var_28[0] = var_24;
            while (method_179(var_25, var_26, var_27, var_28)) {
                long long int var_30 = var_25[0];
                float var_31 = var_26[0];
                float var_32 = var_27[0];
                long long int var_33 = var_28[0];
                char var_34 = (var_30 >= 0);
                char var_36;
                if (var_34) {
                    var_36 = (var_30 < 128);
                } else {
                    var_36 = 0;
                }
                char var_37 = (var_36 == 0);
                if (var_37) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_38 = (var_13 + var_30);
                float var_39 = var_0[var_38];
                float var_40[1];
                float var_41 = var_40[0];
                float var_42[1];
                float var_43 = var_42[0];
                cub::BlockScan<float,128,cub::BLOCK_SCAN_RAKING_MEMOIZE,1,1>().InclusiveSum(var_39, var_41, var_43);
                float var_44 = (var_31 + var_41);
                float var_45 = (var_31 + var_43);
                float var_46 = (var_44 - var_17);
                char var_47 = (var_46 < 0);
                float var_48;
                if (var_47) {
                    var_48 = __int_as_float(0x7f800000);
                } else {
                    var_48 = var_46;
                }
                FunPointer5 var_51 = method_180;
                Tuple6 var_52 = cub::BlockReduce<Tuple6,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(make_Tuple6(var_48, var_30), var_51);
                float var_53 = var_52.mem_0;
                long long int var_54 = var_52.mem_1;
                char var_55 = (var_32 <= var_53);
                Tuple6 var_56;
                if (var_55) {
                    var_56 = make_Tuple6(var_32, var_33);
                } else {
                    var_56 = make_Tuple6(var_53, var_54);
                }
                float var_57 = var_56.mem_0;
                long long int var_58 = var_56.mem_1;
                long long int var_59 = (var_30 + 128);
                var_25[0] = var_59;
                var_26[0] = var_45;
                var_27[0] = var_57;
                var_28[0] = var_58;
            }
            long long int var_60 = var_25[0];
            float var_61 = var_26[0];
            float var_62 = var_27[0];
            long long int var_63 = var_28[0];
            long long int var_64 = threadIdx.x;
            char var_65 = (var_64 == 0);
            if (var_65) {
                char var_67;
                if (var_9) {
                    var_67 = (var_8 < 1);
                } else {
                    var_67 = 0;
                }
                char var_68 = (var_67 == 0);
                if (var_68) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_69 = var_2[var_8];
                var_2[var_8] = var_63;
            } else {
            }
            long long int var_70 = (var_8 + 1);
            var_6[0] = var_70;
        }
        long long int var_71 = var_6[0];
    }
    __global__ void method_63(float * var_0, float * var_1, float * var_2, float * var_3) {
        long long int var_4 = threadIdx.y;
        long long int var_5 = blockIdx.y;
        long long int var_6 = (var_4 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_64(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 64);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_14 = (var_9 * 128);
            char var_16;
            if (var_10) {
                var_16 = (var_9 < 64);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_18 = threadIdx.x;
            long long int var_19 = blockIdx.x;
            long long int var_20 = (128 * var_19);
            long long int var_21 = (var_18 + var_20);
            float var_39[1];
            long long int var_40[1];
            var_40[0] = 0;
            while (method_65(var_40)) {
                long long int var_42 = var_40[0];
                long long int var_43 = (128 * var_42);
                long long int var_44 = (var_21 + var_43);
                long long int var_45 = (128 - var_43);
                char var_46 = (var_44 < 128);
                if (var_46) {
                    char var_47 = (var_42 >= 0);
                    char var_49;
                    if (var_47) {
                        var_49 = (var_42 < 1);
                    } else {
                        var_49 = 0;
                    }
                    char var_50 = (var_49 == 0);
                    if (var_50) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_51 = (var_44 >= 0);
                    char var_52 = (var_51 == 0);
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_53 = (var_14 + var_44);
                    float var_54 = var_2[var_53];
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_55 = var_0[var_44];
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_56 = var_1[var_44];
                    float var_57 = (var_55 * var_54);
                    float var_58 = (var_57 + var_56);
                    var_39[var_42] = var_58;
                } else {
                }
                long long int var_59 = (var_42 + 1);
                var_40[0] = var_59;
            }
            long long int var_60 = var_40[0];
            float var_61 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_39);
            __shared__ float var_62[1];
            long long int var_63 = threadIdx.x;
            char var_64 = (var_63 == 0);
            if (var_64) {
                var_62[0] = var_61;
            } else {
            }
            __syncthreads();
            float var_65 = var_62[0];
            float var_68[1];
            long long int var_69[1];
            var_69[0] = 0;
            while (method_65(var_69)) {
                long long int var_71 = var_69[0];
                long long int var_72 = (128 * var_71);
                long long int var_73 = (var_21 + var_72);
                long long int var_74 = (128 - var_72);
                char var_75 = (var_73 < 128);
                if (var_75) {
                    char var_76 = (var_71 >= 0);
                    char var_78;
                    if (var_76) {
                        var_78 = (var_71 < 1);
                    } else {
                        var_78 = 0;
                    }
                    char var_79 = (var_78 == 0);
                    if (var_79) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_80 = var_39[var_71];
                    float var_81 = (var_65 / 128);
                    float var_82 = (var_80 - var_81);
                    char var_84;
                    if (var_76) {
                        var_84 = (var_71 < 1);
                    } else {
                        var_84 = 0;
                    }
                    char var_85 = (var_84 == 0);
                    if (var_85) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_68[var_71] = var_82;
                } else {
                }
                long long int var_86 = (var_71 + 1);
                var_69[0] = var_86;
            }
            long long int var_87 = var_69[0];
            float var_89[1];
            long long int var_90[1];
            var_90[0] = 0;
            while (method_65(var_90)) {
                long long int var_92 = var_90[0];
                long long int var_93 = (128 * var_92);
                long long int var_94 = (var_21 + var_93);
                long long int var_95 = (128 - var_93);
                char var_96 = (var_94 < 128);
                if (var_96) {
                    char var_97 = (var_92 >= 0);
                    char var_99;
                    if (var_97) {
                        var_99 = (var_92 < 1);
                    } else {
                        var_99 = 0;
                    }
                    char var_100 = (var_99 == 0);
                    if (var_100) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_101 = var_68[var_92];
                    float var_102 = (var_101 * var_101);
                    char var_104;
                    if (var_97) {
                        var_104 = (var_92 < 1);
                    } else {
                        var_104 = 0;
                    }
                    char var_105 = (var_104 == 0);
                    if (var_105) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_89[var_92] = var_102;
                } else {
                }
                long long int var_106 = (var_92 + 1);
                var_90[0] = var_106;
            }
            long long int var_107 = var_90[0];
            float var_108 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_89);
            __shared__ float var_109[1];
            long long int var_110 = threadIdx.x;
            char var_111 = (var_110 == 0);
            if (var_111) {
                var_109[0] = var_108;
            } else {
            }
            __syncthreads();
            float var_112 = var_109[0];
            long long int var_113[1];
            var_113[0] = 0;
            while (method_65(var_113)) {
                long long int var_115 = var_113[0];
                long long int var_116 = (128 * var_115);
                long long int var_117 = (var_21 + var_116);
                long long int var_118 = (128 - var_116);
                char var_119 = (var_117 < 128);
                if (var_119) {
                    char var_120 = (var_117 >= 0);
                    char var_121 = (var_120 == 0);
                    if (var_121) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_122 = (var_14 + var_117);
                    char var_123 = (var_115 >= 0);
                    char var_125;
                    if (var_123) {
                        var_125 = (var_115 < 1);
                    } else {
                        var_125 = 0;
                    }
                    char var_126 = (var_125 == 0);
                    if (var_126) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_127 = var_68[var_115];
                    float var_128 = var_3[var_122];
                    float var_129 = (var_112 / 128);
                    float var_130 = (0.0025 + var_129);
                    float var_131 = sqrt(var_130);
                    float var_132 = (var_127 / var_131);
                    char var_133 = (var_132 > 0);
                    float var_134;
                    if (var_133) {
                        var_134 = var_132;
                    } else {
                        var_134 = 0;
                    }
                    var_3[var_122] = var_134;
                } else {
                }
                long long int var_135 = (var_115 + 1);
                var_113[0] = var_135;
            }
            long long int var_136 = var_113[0];
            long long int var_137 = (var_9 + 64);
            var_7[0] = var_137;
        }
        long long int var_138 = var_7[0];
    }
    __global__ void method_69(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6) {
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_64(var_10)) {
            long long int var_12 = var_10[0];
            char var_13 = (var_12 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_12 < 64);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = (var_12 * 128);
            char var_19;
            if (var_13) {
                var_19 = (var_12 < 64);
            } else {
                var_19 = 0;
            }
            char var_20 = (var_19 == 0);
            if (var_20) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_21 = threadIdx.x;
            long long int var_22 = blockIdx.x;
            long long int var_23 = (128 * var_22);
            long long int var_24 = (var_21 + var_23);
            Tuple0 var_44[1];
            long long int var_45[1];
            var_45[0] = 0;
            while (method_65(var_45)) {
                long long int var_47 = var_45[0];
                long long int var_48 = (128 * var_47);
                long long int var_49 = (var_24 + var_48);
                long long int var_50 = (128 - var_48);
                char var_51 = (var_49 < 128);
                if (var_51) {
                    char var_52 = (var_47 >= 0);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_47 < 1);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_56 = (var_49 >= 0);
                    char var_57 = (var_56 == 0);
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_58 = (var_17 + var_49);
                    float var_59 = var_4[var_58];
                    float var_60 = var_5[var_58];
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_61 = var_0[var_49];
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_62 = var_1[var_49];
                    EnvStack1 var_63 = make_EnvStack1(var_61, var_62, var_60);
                    float var_64 = (var_61 * var_60);
                    float var_65 = (var_64 + var_62);
                    var_44[var_47] = make_Tuple0(var_63, var_59, var_65);
                } else {
                }
                long long int var_66 = (var_47 + 1);
                var_45[0] = var_66;
            }
            long long int var_67 = var_45[0];
            float var_68[1];
            long long int var_69[1];
            var_69[0] = 0;
            while (method_65(var_69)) {
                long long int var_71 = var_69[0];
                long long int var_72 = (128 * var_71);
                long long int var_73 = (var_24 + var_72);
                long long int var_74 = (128 - var_72);
                char var_75 = (var_73 < 128);
                if (var_75) {
                    char var_76 = (var_71 >= 0);
                    char var_78;
                    if (var_76) {
                        var_78 = (var_71 < 1);
                    } else {
                        var_78 = 0;
                    }
                    char var_79 = (var_78 == 0);
                    if (var_79) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_80 = var_44[var_71];
                    EnvStack1 var_81 = var_80.mem_0;
                    float var_82 = var_80.mem_1;
                    float var_83 = var_80.mem_2;
                    char var_85;
                    if (var_76) {
                        var_85 = (var_71 < 1);
                    } else {
                        var_85 = 0;
                    }
                    char var_86 = (var_85 == 0);
                    if (var_86) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_68[var_71] = var_83;
                } else {
                }
                long long int var_87 = (var_71 + 1);
                var_69[0] = var_87;
            }
            long long int var_88 = var_69[0];
            float var_89 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_68);
            __shared__ float var_90[1];
            long long int var_91 = threadIdx.x;
            char var_92 = (var_91 == 0);
            if (var_92) {
                var_90[0] = var_89;
            } else {
            }
            __syncthreads();
            float var_93 = var_90[0];
            Tuple0 var_96[1];
            long long int var_97[1];
            var_97[0] = 0;
            while (method_65(var_97)) {
                long long int var_99 = var_97[0];
                long long int var_100 = (128 * var_99);
                long long int var_101 = (var_24 + var_100);
                long long int var_102 = (128 - var_100);
                char var_103 = (var_101 < 128);
                if (var_103) {
                    char var_104 = (var_99 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_99 < 1);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_108 = var_44[var_99];
                    EnvStack1 var_109 = var_108.mem_0;
                    float var_110 = var_108.mem_1;
                    float var_111 = var_108.mem_2;
                    float var_112 = (var_93 / 128);
                    float var_113 = (var_111 - var_112);
                    char var_115;
                    if (var_104) {
                        var_115 = (var_99 < 1);
                    } else {
                        var_115 = 0;
                    }
                    char var_116 = (var_115 == 0);
                    if (var_116) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_96[var_99] = make_Tuple0(var_109, var_110, var_113);
                } else {
                }
                long long int var_117 = (var_99 + 1);
                var_97[0] = var_117;
            }
            long long int var_118 = var_97[0];
            float var_120[1];
            long long int var_121[1];
            var_121[0] = 0;
            while (method_65(var_121)) {
                long long int var_123 = var_121[0];
                long long int var_124 = (128 * var_123);
                long long int var_125 = (var_24 + var_124);
                long long int var_126 = (128 - var_124);
                char var_127 = (var_125 < 128);
                if (var_127) {
                    char var_128 = (var_123 >= 0);
                    char var_130;
                    if (var_128) {
                        var_130 = (var_123 < 1);
                    } else {
                        var_130 = 0;
                    }
                    char var_131 = (var_130 == 0);
                    if (var_131) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_132 = var_96[var_123];
                    EnvStack1 var_133 = var_132.mem_0;
                    float var_134 = var_132.mem_1;
                    float var_135 = var_132.mem_2;
                    float var_136 = (var_135 * var_135);
                    char var_138;
                    if (var_128) {
                        var_138 = (var_123 < 1);
                    } else {
                        var_138 = 0;
                    }
                    char var_139 = (var_138 == 0);
                    if (var_139) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_120[var_123] = var_136;
                } else {
                }
                long long int var_140 = (var_123 + 1);
                var_121[0] = var_140;
            }
            long long int var_141 = var_121[0];
            float var_142 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_120);
            __shared__ float var_143[1];
            long long int var_144 = threadIdx.x;
            char var_145 = (var_144 == 0);
            if (var_145) {
                var_143[0] = var_142;
            } else {
            }
            __syncthreads();
            float var_146 = var_143[0];
            Tuple2 var_152[1];
            long long int var_153[1];
            var_153[0] = 0;
            while (method_65(var_153)) {
                long long int var_155 = var_153[0];
                long long int var_156 = (128 * var_155);
                long long int var_157 = (var_24 + var_156);
                long long int var_158 = (128 - var_156);
                char var_159 = (var_157 < 128);
                if (var_159) {
                    char var_160 = (var_155 >= 0);
                    char var_162;
                    if (var_160) {
                        var_162 = (var_155 < 1);
                    } else {
                        var_162 = 0;
                    }
                    char var_163 = (var_162 == 0);
                    if (var_163) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple0 var_164 = var_96[var_155];
                    EnvStack1 var_165 = var_164.mem_0;
                    float var_166 = var_164.mem_1;
                    float var_167 = var_164.mem_2;
                    char var_168 = (var_167 > 0);
                    float var_169;
                    if (var_168) {
                        var_169 = var_166;
                    } else {
                        var_169 = 0;
                    }
                    float var_170 = (var_146 / 128);
                    float var_171 = (0.0025 + var_170);
                    float var_172 = sqrt(var_171);
                    char var_174;
                    if (var_160) {
                        var_174 = (var_155 < 1);
                    } else {
                        var_174 = 0;
                    }
                    char var_175 = (var_174 == 0);
                    if (var_175) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_152[var_155] = make_Tuple2(var_165, var_169, var_167, var_172);
                } else {
                }
                long long int var_176 = (var_155 + 1);
                var_153[0] = var_176;
            }
            long long int var_177 = var_153[0];
            float var_182[1];
            long long int var_183[1];
            var_183[0] = 0;
            while (method_65(var_183)) {
                long long int var_185 = var_183[0];
                long long int var_186 = (128 * var_185);
                long long int var_187 = (var_24 + var_186);
                long long int var_188 = (128 - var_186);
                char var_189 = (var_187 < 128);
                if (var_189) {
                    char var_190 = (var_185 >= 0);
                    char var_192;
                    if (var_190) {
                        var_192 = (var_185 < 1);
                    } else {
                        var_192 = 0;
                    }
                    char var_193 = (var_192 == 0);
                    if (var_193) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple2 var_194 = var_152[var_185];
                    EnvStack1 var_195 = var_194.mem_0;
                    float var_196 = var_194.mem_1;
                    float var_197 = var_194.mem_2;
                    float var_198 = var_194.mem_3;
                    float var_199 = (-var_196);
                    float var_200 = (var_199 * var_197);
                    float var_201 = (var_198 * var_198);
                    float var_202 = (var_200 / var_201);
                    char var_204;
                    if (var_190) {
                        var_204 = (var_185 < 1);
                    } else {
                        var_204 = 0;
                    }
                    char var_205 = (var_204 == 0);
                    if (var_205) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_182[var_185] = var_202;
                } else {
                }
                long long int var_206 = (var_185 + 1);
                var_183[0] = var_206;
            }
            long long int var_207 = var_183[0];
            float var_208 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_182);
            __shared__ float var_209[1];
            long long int var_210 = threadIdx.x;
            char var_211 = (var_210 == 0);
            if (var_211) {
                var_209[0] = var_208;
            } else {
            }
            __syncthreads();
            float var_212 = var_209[0];
            Tuple3 var_218[1];
            long long int var_219[1];
            var_219[0] = 0;
            while (method_65(var_219)) {
                long long int var_221 = var_219[0];
                long long int var_222 = (128 * var_221);
                long long int var_223 = (var_24 + var_222);
                long long int var_224 = (128 - var_222);
                char var_225 = (var_223 < 128);
                if (var_225) {
                    char var_226 = (var_221 >= 0);
                    char var_228;
                    if (var_226) {
                        var_228 = (var_221 < 1);
                    } else {
                        var_228 = 0;
                    }
                    char var_229 = (var_228 == 0);
                    if (var_229) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple2 var_230 = var_152[var_221];
                    EnvStack1 var_231 = var_230.mem_0;
                    float var_232 = var_230.mem_1;
                    float var_233 = var_230.mem_2;
                    float var_234 = var_230.mem_3;
                    float var_235 = (var_232 / var_234);
                    float var_236 = (var_212 * var_233);
                    float var_237 = (var_234 * 128);
                    float var_238 = (var_236 / var_237);
                    float var_239 = (var_235 + var_238);
                    char var_241;
                    if (var_226) {
                        var_241 = (var_221 < 1);
                    } else {
                        var_241 = 0;
                    }
                    char var_242 = (var_241 == 0);
                    if (var_242) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_218[var_221] = make_Tuple3(var_231, var_239);
                } else {
                }
                long long int var_243 = (var_221 + 1);
                var_219[0] = var_243;
            }
            long long int var_244 = var_219[0];
            float var_245[1];
            long long int var_246[1];
            var_246[0] = 0;
            while (method_65(var_246)) {
                long long int var_248 = var_246[0];
                long long int var_249 = (128 * var_248);
                long long int var_250 = (var_24 + var_249);
                long long int var_251 = (128 - var_249);
                char var_252 = (var_250 < 128);
                if (var_252) {
                    char var_253 = (var_248 >= 0);
                    char var_255;
                    if (var_253) {
                        var_255 = (var_248 < 1);
                    } else {
                        var_255 = 0;
                    }
                    char var_256 = (var_255 == 0);
                    if (var_256) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_257 = var_218[var_248];
                    EnvStack1 var_258 = var_257.mem_0;
                    float var_259 = var_257.mem_1;
                    char var_261;
                    if (var_253) {
                        var_261 = (var_248 < 1);
                    } else {
                        var_261 = 0;
                    }
                    char var_262 = (var_261 == 0);
                    if (var_262) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_245[var_248] = var_259;
                } else {
                }
                long long int var_263 = (var_248 + 1);
                var_246[0] = var_263;
            }
            long long int var_264 = var_246[0];
            float var_265 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_245);
            __shared__ float var_266[1];
            long long int var_267 = threadIdx.x;
            char var_268 = (var_267 == 0);
            if (var_268) {
                var_266[0] = var_265;
            } else {
            }
            __syncthreads();
            float var_269 = var_266[0];
            long long int var_270[1];
            var_270[0] = 0;
            while (method_65(var_270)) {
                long long int var_272 = var_270[0];
                long long int var_273 = (128 * var_272);
                long long int var_274 = (var_24 + var_273);
                long long int var_275 = (128 - var_273);
                char var_276 = (var_274 < 128);
                if (var_276) {
                    char var_277 = (var_274 >= 0);
                    char var_278 = (var_277 == 0);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_279 = (var_17 + var_274);
                    char var_280 = (var_272 >= 0);
                    char var_282;
                    if (var_280) {
                        var_282 = (var_272 < 1);
                    } else {
                        var_282 = 0;
                    }
                    char var_283 = (var_282 == 0);
                    if (var_283) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_284 = var_218[var_272];
                    EnvStack1 var_285 = var_284.mem_0;
                    float var_286 = var_284.mem_1;
                    float var_287 = var_285.mem_0;
                    float var_288 = var_285.mem_1;
                    float var_289 = var_285.mem_2;
                    float var_290 = var_6[var_279];
                    float var_291 = (var_269 / 128);
                    float var_292 = (var_286 - var_291);
                    float var_293 = (var_292 * var_289);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_294 = var_2 + var_274;
                    atomicAdd(var_294, var_293);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_295 = var_3 + var_274;
                    atomicAdd(var_295, var_292);
                    float var_296 = (var_292 * var_287);
                    float var_297 = (var_290 + var_296);
                    var_6[var_279] = var_297;
                } else {
                }
                long long int var_298 = (var_272 + 1);
                var_270[0] = var_298;
            }
            long long int var_299 = var_270[0];
            long long int var_300 = (var_12 + 64);
            var_10[0] = var_300;
        }
        long long int var_301 = var_10[0];
    }
    __global__ void method_90(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.y;
        long long int var_3 = blockIdx.y;
        long long int var_4 = (var_2 + var_3);
        long long int var_5[1];
        var_5[0] = var_4;
        while (method_64(var_5)) {
            long long int var_7 = var_5[0];
            char var_8 = (var_7 >= 0);
            char var_10;
            if (var_8) {
                var_10 = (var_7 < 64);
            } else {
                var_10 = 0;
            }
            char var_11 = (var_10 == 0);
            if (var_11) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_12 = (var_7 * 128);
            char var_14;
            if (var_8) {
                var_14 = (var_7 < 64);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.x;
            long long int var_17 = blockIdx.x;
            long long int var_18 = (128 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_27[1];
            long long int var_28[1];
            var_28[0] = 0;
            while (method_65(var_28)) {
                long long int var_30 = var_28[0];
                long long int var_31 = (128 * var_30);
                long long int var_32 = (var_19 + var_31);
                long long int var_33 = (128 - var_31);
                char var_34 = (var_32 < 128);
                if (var_34) {
                    char var_35 = (var_30 >= 0);
                    char var_37;
                    if (var_35) {
                        var_37 = (var_30 < 1);
                    } else {
                        var_37 = 0;
                    }
                    char var_38 = (var_37 == 0);
                    if (var_38) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_39 = (var_32 >= 0);
                    char var_40 = (var_39 == 0);
                    if (var_40) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_41 = (var_12 + var_32);
                    float var_42 = var_0[var_41];
                    var_27[var_30] = var_42;
                } else {
                }
                long long int var_43 = (var_30 + 1);
                var_28[0] = var_43;
            }
            long long int var_44 = var_28[0];
            FunPointer4 var_47 = method_91;
            float var_48 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_27, var_47);
            __shared__ float var_49[1];
            long long int var_50 = threadIdx.x;
            char var_51 = (var_50 == 0);
            if (var_51) {
                var_49[0] = var_48;
            } else {
            }
            __syncthreads();
            float var_52 = var_49[0];
            float var_55[1];
            long long int var_56[1];
            var_56[0] = 0;
            while (method_65(var_56)) {
                long long int var_58 = var_56[0];
                long long int var_59 = (128 * var_58);
                long long int var_60 = (var_19 + var_59);
                long long int var_61 = (128 - var_59);
                char var_62 = (var_60 < 128);
                if (var_62) {
                    char var_63 = (var_58 >= 0);
                    char var_65;
                    if (var_63) {
                        var_65 = (var_58 < 1);
                    } else {
                        var_65 = 0;
                    }
                    char var_66 = (var_65 == 0);
                    if (var_66) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_67 = var_27[var_58];
                    float var_68 = (var_67 - var_52);
                    float var_69 = exp(var_68);
                    char var_71;
                    if (var_63) {
                        var_71 = (var_58 < 1);
                    } else {
                        var_71 = 0;
                    }
                    char var_72 = (var_71 == 0);
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_55[var_58] = var_69;
                } else {
                }
                long long int var_73 = (var_58 + 1);
                var_56[0] = var_73;
            }
            long long int var_74 = var_56[0];
            float var_75 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_55);
            __shared__ float var_76[1];
            long long int var_77 = threadIdx.x;
            char var_78 = (var_77 == 0);
            if (var_78) {
                var_76[0] = var_75;
            } else {
            }
            __syncthreads();
            float var_79 = var_76[0];
            long long int var_80[1];
            var_80[0] = 0;
            while (method_65(var_80)) {
                long long int var_82 = var_80[0];
                long long int var_83 = (128 * var_82);
                long long int var_84 = (var_19 + var_83);
                long long int var_85 = (128 - var_83);
                char var_86 = (var_84 < 128);
                if (var_86) {
                    char var_87 = (var_84 >= 0);
                    char var_88 = (var_87 == 0);
                    if (var_88) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_89 = (var_12 + var_84);
                    char var_90 = (var_82 >= 0);
                    char var_92;
                    if (var_90) {
                        var_92 = (var_82 < 1);
                    } else {
                        var_92 = 0;
                    }
                    char var_93 = (var_92 == 0);
                    if (var_93) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_94 = var_55[var_82];
                    float var_95 = var_1[var_89];
                    float var_96 = (var_94 / var_79);
                    var_1[var_89] = var_96;
                } else {
                }
                long long int var_97 = (var_82 + 1);
                var_80[0] = var_97;
            }
            long long int var_98 = var_80[0];
            long long int var_99 = (var_7 + 64);
            var_5[0] = var_99;
        }
        long long int var_100 = var_5[0];
    }
    __global__ void method_124(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_37(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.01 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 128);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_127(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_128(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 16384);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 16384);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.01 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_140(long long int * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_141(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 % 32);
            long long int var_10 = (var_8 / 32);
            long long int var_11[1];
            var_11[0] = var_9;
            while (method_37(var_11)) {
                long long int var_13 = var_11[0];
                long long int var_14 = var_0[0];
                char var_15 = (var_13 == var_14);
                float var_16;
                if (var_15) {
                    var_16 = 1;
                } else {
                    var_16 = 0;
                }
                char var_17 = (var_13 >= 0);
                char var_19;
                if (var_17) {
                    var_19 = (var_13 < 128);
                } else {
                    var_19 = 0;
                }
                char var_20 = (var_19 == 0);
                if (var_20) {
                    // "Argument out of bounds."
                } else {
                }
                float var_21 = var_1[var_13];
                var_1[var_13] = var_16;
                long long int var_22 = (var_13 + 32);
                var_11[0] = var_22;
            }
            long long int var_23 = var_11[0];
            long long int var_24 = (var_8 + 32);
            var_6[0] = var_24;
        }
        long long int var_25 = var_6[0];
    }
    __global__ void method_166(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_37(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (var_16 + var_17);
            float var_19 = 0;
            long long int var_20[1];
            float var_21[1];
            var_20[0] = var_18;
            var_21[0] = var_19;
            while (method_167(var_20, var_21)) {
                long long int var_23 = var_20[0];
                float var_24 = var_21[0];
                char var_25 = (var_23 >= 0);
                char var_27;
                if (var_25) {
                    var_27 = (var_23 < 1);
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_27 == 0);
                if (var_28) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_29 = (var_23 * 128);
                char var_31;
                if (var_9) {
                    var_31 = (var_8 < 128);
                } else {
                    var_31 = 0;
                }
                char var_32 = (var_31 == 0);
                if (var_32) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_33 = (var_29 + var_8);
                float var_34 = var_0[var_33];
                float var_35 = (var_24 + var_34);
                long long int var_36 = (var_23 + 1);
                var_20[0] = var_36;
                var_21[0] = var_35;
            }
            long long int var_37 = var_20[0];
            float var_38 = var_21[0];
            long long int var_39 = threadIdx.x;
            long long int var_40 = threadIdx.y;
            float var_41 = var_1[var_8];
            float var_42 = (var_38 + var_41);
            var_1[var_8] = var_42;
            long long int var_43 = (var_8 + 128);
            var_6[0] = var_43;
        }
        long long int var_44 = var_6[0];
    }
    __global__ void method_187(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6) {
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_65(var_10)) {
            long long int var_12 = var_10[0];
            char var_13 = (var_12 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_12 < 1);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = (var_12 * 128);
            char var_19;
            if (var_13) {
                var_19 = (var_12 < 1);
            } else {
                var_19 = 0;
            }
            char var_20 = (var_19 == 0);
            if (var_20) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_21 = threadIdx.x;
            long long int var_22 = blockIdx.x;
            long long int var_23 = (128 * var_22);
            long long int var_24 = (var_21 + var_23);
            float var_56[1];
            long long int var_57[1];
            var_57[0] = 0;
            while (method_65(var_57)) {
                long long int var_59 = var_57[0];
                long long int var_60 = (128 * var_59);
                long long int var_61 = (var_24 + var_60);
                long long int var_62 = (128 - var_60);
                char var_63 = (var_61 < 128);
                if (var_63) {
                    char var_64 = (var_59 >= 0);
                    char var_66;
                    if (var_64) {
                        var_66 = (var_59 < 1);
                    } else {
                        var_66 = 0;
                    }
                    char var_67 = (var_66 == 0);
                    if (var_67) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_68 = (var_61 >= 0);
                    char var_69 = (var_68 == 0);
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_70 = (var_17 + var_61);
                    float var_71 = var_4[var_70];
                    float var_72 = var_5[var_70];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_73 = var_0[var_61];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_74 = var_1[var_61];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_75 = var_2[var_61];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_76 = var_3[var_61];
                    float var_77 = (var_73 * var_71);
                    float var_78 = (var_77 * var_72);
                    float var_79 = (var_74 * var_72);
                    float var_80 = (var_78 + var_79);
                    float var_81 = (var_75 * var_71);
                    float var_82 = (var_80 + var_81);
                    float var_83 = (var_82 + var_76);
                    var_56[var_59] = var_83;
                } else {
                }
                long long int var_84 = (var_59 + 1);
                var_57[0] = var_84;
            }
            long long int var_85 = var_57[0];
            float var_86 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_56);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            float var_93[1];
            long long int var_94[1];
            var_94[0] = 0;
            while (method_65(var_94)) {
                long long int var_96 = var_94[0];
                long long int var_97 = (128 * var_96);
                long long int var_98 = (var_24 + var_97);
                long long int var_99 = (128 - var_97);
                char var_100 = (var_98 < 128);
                if (var_100) {
                    char var_101 = (var_96 >= 0);
                    char var_103;
                    if (var_101) {
                        var_103 = (var_96 < 1);
                    } else {
                        var_103 = 0;
                    }
                    char var_104 = (var_103 == 0);
                    if (var_104) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_105 = var_56[var_96];
                    float var_106 = (var_90 / 128);
                    float var_107 = (var_105 - var_106);
                    char var_109;
                    if (var_101) {
                        var_109 = (var_96 < 1);
                    } else {
                        var_109 = 0;
                    }
                    char var_110 = (var_109 == 0);
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_93[var_96] = var_107;
                } else {
                }
                long long int var_111 = (var_96 + 1);
                var_94[0] = var_111;
            }
            long long int var_112 = var_94[0];
            float var_114[1];
            long long int var_115[1];
            var_115[0] = 0;
            while (method_65(var_115)) {
                long long int var_117 = var_115[0];
                long long int var_118 = (128 * var_117);
                long long int var_119 = (var_24 + var_118);
                long long int var_120 = (128 - var_118);
                char var_121 = (var_119 < 128);
                if (var_121) {
                    char var_122 = (var_117 >= 0);
                    char var_124;
                    if (var_122) {
                        var_124 = (var_117 < 1);
                    } else {
                        var_124 = 0;
                    }
                    char var_125 = (var_124 == 0);
                    if (var_125) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_126 = var_93[var_117];
                    float var_127 = (var_126 * var_126);
                    char var_129;
                    if (var_122) {
                        var_129 = (var_117 < 1);
                    } else {
                        var_129 = 0;
                    }
                    char var_130 = (var_129 == 0);
                    if (var_130) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_114[var_117] = var_127;
                } else {
                }
                long long int var_131 = (var_117 + 1);
                var_115[0] = var_131;
            }
            long long int var_132 = var_115[0];
            float var_133 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_114);
            __shared__ float var_134[1];
            long long int var_135 = threadIdx.x;
            char var_136 = (var_135 == 0);
            if (var_136) {
                var_134[0] = var_133;
            } else {
            }
            __syncthreads();
            float var_137 = var_134[0];
            long long int var_138[1];
            var_138[0] = 0;
            while (method_65(var_138)) {
                long long int var_140 = var_138[0];
                long long int var_141 = (128 * var_140);
                long long int var_142 = (var_24 + var_141);
                long long int var_143 = (128 - var_141);
                char var_144 = (var_142 < 128);
                if (var_144) {
                    char var_145 = (var_142 >= 0);
                    char var_146 = (var_145 == 0);
                    if (var_146) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_147 = (var_17 + var_142);
                    char var_148 = (var_140 >= 0);
                    char var_150;
                    if (var_148) {
                        var_150 = (var_140 < 1);
                    } else {
                        var_150 = 0;
                    }
                    char var_151 = (var_150 == 0);
                    if (var_151) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_152 = var_93[var_140];
                    float var_153 = var_6[var_147];
                    float var_154 = (var_137 / 128);
                    float var_155 = (0.0025 + var_154);
                    float var_156 = sqrt(var_155);
                    float var_157 = (var_152 / var_156);
                    char var_158 = (var_157 > 0);
                    float var_159;
                    if (var_158) {
                        var_159 = var_157;
                    } else {
                        var_159 = 0;
                    }
                    var_6[var_147] = var_159;
                } else {
                }
                long long int var_160 = (var_140 + 1);
                var_138[0] = var_160;
            }
            long long int var_161 = var_138[0];
            long long int var_162 = (var_12 + 1);
            var_10[0] = var_162;
        }
        long long int var_163 = var_10[0];
    }
    __global__ void method_191(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6, float * var_7, float * var_8, float * var_9, float * var_10, float * var_11, float * var_12) {
        long long int var_13 = threadIdx.y;
        long long int var_14 = blockIdx.y;
        long long int var_15 = (var_13 + var_14);
        long long int var_16[1];
        var_16[0] = var_15;
        while (method_65(var_16)) {
            long long int var_18 = var_16[0];
            char var_19 = (var_18 >= 0);
            char var_21;
            if (var_19) {
                var_21 = (var_18 < 1);
            } else {
                var_21 = 0;
            }
            char var_22 = (var_21 == 0);
            if (var_22) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_23 = (var_18 * 128);
            char var_25;
            if (var_19) {
                var_25 = (var_18 < 1);
            } else {
                var_25 = 0;
            }
            char var_26 = (var_25 == 0);
            if (var_26) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_27 = threadIdx.x;
            long long int var_28 = blockIdx.x;
            long long int var_29 = (128 * var_28);
            long long int var_30 = (var_27 + var_29);
            Tuple7 var_64[1];
            long long int var_65[1];
            var_65[0] = 0;
            while (method_65(var_65)) {
                long long int var_67 = var_65[0];
                long long int var_68 = (128 * var_67);
                long long int var_69 = (var_30 + var_68);
                long long int var_70 = (128 - var_68);
                char var_71 = (var_69 < 128);
                if (var_71) {
                    char var_72 = (var_67 >= 0);
                    char var_74;
                    if (var_72) {
                        var_74 = (var_67 < 1);
                    } else {
                        var_74 = 0;
                    }
                    char var_75 = (var_74 == 0);
                    if (var_75) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_76 = (var_69 >= 0);
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_78 = (var_23 + var_69);
                    float var_79 = var_8[var_78];
                    float var_80 = var_9[var_78];
                    float var_81 = var_10[var_78];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_82 = var_0[var_69];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_83 = var_1[var_69];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_84 = var_2[var_69];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_85 = var_3[var_69];
                    EnvStack8 var_86 = make_EnvStack8(var_82, var_83, var_84, var_85, var_80, var_81);
                    float var_87 = (var_82 * var_80);
                    float var_88 = (var_87 * var_81);
                    float var_89 = (var_83 * var_81);
                    float var_90 = (var_88 + var_89);
                    float var_91 = (var_84 * var_80);
                    float var_92 = (var_90 + var_91);
                    float var_93 = (var_92 + var_85);
                    var_64[var_67] = make_Tuple7(var_86, var_79, var_93);
                } else {
                }
                long long int var_94 = (var_67 + 1);
                var_65[0] = var_94;
            }
            long long int var_95 = var_65[0];
            float var_96[1];
            long long int var_97[1];
            var_97[0] = 0;
            while (method_65(var_97)) {
                long long int var_99 = var_97[0];
                long long int var_100 = (128 * var_99);
                long long int var_101 = (var_30 + var_100);
                long long int var_102 = (128 - var_100);
                char var_103 = (var_101 < 128);
                if (var_103) {
                    char var_104 = (var_99 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_99 < 1);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_108 = var_64[var_99];
                    EnvStack8 var_109 = var_108.mem_0;
                    float var_110 = var_108.mem_1;
                    float var_111 = var_108.mem_2;
                    char var_113;
                    if (var_104) {
                        var_113 = (var_99 < 1);
                    } else {
                        var_113 = 0;
                    }
                    char var_114 = (var_113 == 0);
                    if (var_114) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_96[var_99] = var_111;
                } else {
                }
                long long int var_115 = (var_99 + 1);
                var_97[0] = var_115;
            }
            long long int var_116 = var_97[0];
            float var_117 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_96);
            __shared__ float var_118[1];
            long long int var_119 = threadIdx.x;
            char var_120 = (var_119 == 0);
            if (var_120) {
                var_118[0] = var_117;
            } else {
            }
            __syncthreads();
            float var_121 = var_118[0];
            Tuple7 var_124[1];
            long long int var_125[1];
            var_125[0] = 0;
            while (method_65(var_125)) {
                long long int var_127 = var_125[0];
                long long int var_128 = (128 * var_127);
                long long int var_129 = (var_30 + var_128);
                long long int var_130 = (128 - var_128);
                char var_131 = (var_129 < 128);
                if (var_131) {
                    char var_132 = (var_127 >= 0);
                    char var_134;
                    if (var_132) {
                        var_134 = (var_127 < 1);
                    } else {
                        var_134 = 0;
                    }
                    char var_135 = (var_134 == 0);
                    if (var_135) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_136 = var_64[var_127];
                    EnvStack8 var_137 = var_136.mem_0;
                    float var_138 = var_136.mem_1;
                    float var_139 = var_136.mem_2;
                    float var_140 = (var_121 / 128);
                    float var_141 = (var_139 - var_140);
                    char var_143;
                    if (var_132) {
                        var_143 = (var_127 < 1);
                    } else {
                        var_143 = 0;
                    }
                    char var_144 = (var_143 == 0);
                    if (var_144) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_124[var_127] = make_Tuple7(var_137, var_138, var_141);
                } else {
                }
                long long int var_145 = (var_127 + 1);
                var_125[0] = var_145;
            }
            long long int var_146 = var_125[0];
            float var_148[1];
            long long int var_149[1];
            var_149[0] = 0;
            while (method_65(var_149)) {
                long long int var_151 = var_149[0];
                long long int var_152 = (128 * var_151);
                long long int var_153 = (var_30 + var_152);
                long long int var_154 = (128 - var_152);
                char var_155 = (var_153 < 128);
                if (var_155) {
                    char var_156 = (var_151 >= 0);
                    char var_158;
                    if (var_156) {
                        var_158 = (var_151 < 1);
                    } else {
                        var_158 = 0;
                    }
                    char var_159 = (var_158 == 0);
                    if (var_159) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_160 = var_124[var_151];
                    EnvStack8 var_161 = var_160.mem_0;
                    float var_162 = var_160.mem_1;
                    float var_163 = var_160.mem_2;
                    float var_164 = (var_163 * var_163);
                    char var_166;
                    if (var_156) {
                        var_166 = (var_151 < 1);
                    } else {
                        var_166 = 0;
                    }
                    char var_167 = (var_166 == 0);
                    if (var_167) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_148[var_151] = var_164;
                } else {
                }
                long long int var_168 = (var_151 + 1);
                var_149[0] = var_168;
            }
            long long int var_169 = var_149[0];
            float var_170 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_148);
            __shared__ float var_171[1];
            long long int var_172 = threadIdx.x;
            char var_173 = (var_172 == 0);
            if (var_173) {
                var_171[0] = var_170;
            } else {
            }
            __syncthreads();
            float var_174 = var_171[0];
            Tuple9 var_180[1];
            long long int var_181[1];
            var_181[0] = 0;
            while (method_65(var_181)) {
                long long int var_183 = var_181[0];
                long long int var_184 = (128 * var_183);
                long long int var_185 = (var_30 + var_184);
                long long int var_186 = (128 - var_184);
                char var_187 = (var_185 < 128);
                if (var_187) {
                    char var_188 = (var_183 >= 0);
                    char var_190;
                    if (var_188) {
                        var_190 = (var_183 < 1);
                    } else {
                        var_190 = 0;
                    }
                    char var_191 = (var_190 == 0);
                    if (var_191) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_192 = var_124[var_183];
                    EnvStack8 var_193 = var_192.mem_0;
                    float var_194 = var_192.mem_1;
                    float var_195 = var_192.mem_2;
                    char var_196 = (var_195 > 0);
                    float var_197;
                    if (var_196) {
                        var_197 = var_194;
                    } else {
                        var_197 = 0;
                    }
                    float var_198 = (var_174 / 128);
                    float var_199 = (0.0025 + var_198);
                    float var_200 = sqrt(var_199);
                    char var_202;
                    if (var_188) {
                        var_202 = (var_183 < 1);
                    } else {
                        var_202 = 0;
                    }
                    char var_203 = (var_202 == 0);
                    if (var_203) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_180[var_183] = make_Tuple9(var_193, var_197, var_195, var_200);
                } else {
                }
                long long int var_204 = (var_183 + 1);
                var_181[0] = var_204;
            }
            long long int var_205 = var_181[0];
            float var_210[1];
            long long int var_211[1];
            var_211[0] = 0;
            while (method_65(var_211)) {
                long long int var_213 = var_211[0];
                long long int var_214 = (128 * var_213);
                long long int var_215 = (var_30 + var_214);
                long long int var_216 = (128 - var_214);
                char var_217 = (var_215 < 128);
                if (var_217) {
                    char var_218 = (var_213 >= 0);
                    char var_220;
                    if (var_218) {
                        var_220 = (var_213 < 1);
                    } else {
                        var_220 = 0;
                    }
                    char var_221 = (var_220 == 0);
                    if (var_221) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple9 var_222 = var_180[var_213];
                    EnvStack8 var_223 = var_222.mem_0;
                    float var_224 = var_222.mem_1;
                    float var_225 = var_222.mem_2;
                    float var_226 = var_222.mem_3;
                    float var_227 = (-var_224);
                    float var_228 = (var_227 * var_225);
                    float var_229 = (var_226 * var_226);
                    float var_230 = (var_228 / var_229);
                    char var_232;
                    if (var_218) {
                        var_232 = (var_213 < 1);
                    } else {
                        var_232 = 0;
                    }
                    char var_233 = (var_232 == 0);
                    if (var_233) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_210[var_213] = var_230;
                } else {
                }
                long long int var_234 = (var_213 + 1);
                var_211[0] = var_234;
            }
            long long int var_235 = var_211[0];
            float var_236 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_210);
            __shared__ float var_237[1];
            long long int var_238 = threadIdx.x;
            char var_239 = (var_238 == 0);
            if (var_239) {
                var_237[0] = var_236;
            } else {
            }
            __syncthreads();
            float var_240 = var_237[0];
            Tuple10 var_246[1];
            long long int var_247[1];
            var_247[0] = 0;
            while (method_65(var_247)) {
                long long int var_249 = var_247[0];
                long long int var_250 = (128 * var_249);
                long long int var_251 = (var_30 + var_250);
                long long int var_252 = (128 - var_250);
                char var_253 = (var_251 < 128);
                if (var_253) {
                    char var_254 = (var_249 >= 0);
                    char var_256;
                    if (var_254) {
                        var_256 = (var_249 < 1);
                    } else {
                        var_256 = 0;
                    }
                    char var_257 = (var_256 == 0);
                    if (var_257) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple9 var_258 = var_180[var_249];
                    EnvStack8 var_259 = var_258.mem_0;
                    float var_260 = var_258.mem_1;
                    float var_261 = var_258.mem_2;
                    float var_262 = var_258.mem_3;
                    float var_263 = (var_260 / var_262);
                    float var_264 = (var_240 * var_261);
                    float var_265 = (var_262 * 128);
                    float var_266 = (var_264 / var_265);
                    float var_267 = (var_263 + var_266);
                    char var_269;
                    if (var_254) {
                        var_269 = (var_249 < 1);
                    } else {
                        var_269 = 0;
                    }
                    char var_270 = (var_269 == 0);
                    if (var_270) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_246[var_249] = make_Tuple10(var_259, var_267);
                } else {
                }
                long long int var_271 = (var_249 + 1);
                var_247[0] = var_271;
            }
            long long int var_272 = var_247[0];
            float var_273[1];
            long long int var_274[1];
            var_274[0] = 0;
            while (method_65(var_274)) {
                long long int var_276 = var_274[0];
                long long int var_277 = (128 * var_276);
                long long int var_278 = (var_30 + var_277);
                long long int var_279 = (128 - var_277);
                char var_280 = (var_278 < 128);
                if (var_280) {
                    char var_281 = (var_276 >= 0);
                    char var_283;
                    if (var_281) {
                        var_283 = (var_276 < 1);
                    } else {
                        var_283 = 0;
                    }
                    char var_284 = (var_283 == 0);
                    if (var_284) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple10 var_285 = var_246[var_276];
                    EnvStack8 var_286 = var_285.mem_0;
                    float var_287 = var_285.mem_1;
                    char var_289;
                    if (var_281) {
                        var_289 = (var_276 < 1);
                    } else {
                        var_289 = 0;
                    }
                    char var_290 = (var_289 == 0);
                    if (var_290) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_273[var_276] = var_287;
                } else {
                }
                long long int var_291 = (var_276 + 1);
                var_274[0] = var_291;
            }
            long long int var_292 = var_274[0];
            float var_293 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_273);
            __shared__ float var_294[1];
            long long int var_295 = threadIdx.x;
            char var_296 = (var_295 == 0);
            if (var_296) {
                var_294[0] = var_293;
            } else {
            }
            __syncthreads();
            float var_297 = var_294[0];
            long long int var_298[1];
            var_298[0] = 0;
            while (method_65(var_298)) {
                long long int var_300 = var_298[0];
                long long int var_301 = (128 * var_300);
                long long int var_302 = (var_30 + var_301);
                long long int var_303 = (128 - var_301);
                char var_304 = (var_302 < 128);
                if (var_304) {
                    char var_305 = (var_302 >= 0);
                    char var_306 = (var_305 == 0);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_307 = (var_23 + var_302);
                    char var_308 = (var_300 >= 0);
                    char var_310;
                    if (var_308) {
                        var_310 = (var_300 < 1);
                    } else {
                        var_310 = 0;
                    }
                    char var_311 = (var_310 == 0);
                    if (var_311) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple10 var_312 = var_246[var_300];
                    EnvStack8 var_313 = var_312.mem_0;
                    float var_314 = var_312.mem_1;
                    float var_315 = var_313.mem_0;
                    float var_316 = var_313.mem_1;
                    float var_317 = var_313.mem_2;
                    float var_318 = var_313.mem_3;
                    float var_319 = var_313.mem_4;
                    float var_320 = var_313.mem_5;
                    float var_321 = var_11[var_307];
                    float var_322 = var_12[var_307];
                    float var_323 = (var_297 / 128);
                    float var_324 = (var_314 - var_323);
                    float var_325 = (var_319 * var_320);
                    float var_326 = (var_324 * var_325);
                    float var_327 = (var_324 * var_320);
                    float var_328 = (var_324 * var_319);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_329 = var_4 + var_302;
                    atomicAdd(var_329, var_326);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_330 = var_5 + var_302;
                    atomicAdd(var_330, var_327);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_331 = var_6 + var_302;
                    atomicAdd(var_331, var_328);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_332 = var_7 + var_302;
                    atomicAdd(var_332, var_324);
                    float var_333 = (var_315 * var_320);
                    float var_334 = (var_333 + var_317);
                    float var_335 = (var_315 * var_319);
                    float var_336 = (var_335 + var_316);
                    float var_337 = (var_324 * var_334);
                    float var_338 = (var_324 * var_336);
                    float var_339 = (var_321 + var_337);
                    float var_340 = (var_322 + var_338);
                    var_11[var_307] = var_339;
                    var_12[var_307] = var_340;
                } else {
                }
                long long int var_341 = (var_300 + 1);
                var_298[0] = var_341;
            }
            long long int var_342 = var_298[0];
            long long int var_343 = (var_18 + 1);
            var_16[0] = var_343;
        }
        long long int var_344 = var_16[0];
    }
    __global__ void method_53(unsigned char * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (256 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_54(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 % 32);
            long long int var_10 = (var_8 / 32);
            long long int var_11 = (var_10 % 64);
            long long int var_12 = (var_10 / 64);
            char var_13 = (var_11 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_11 < 64);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            char var_18;
            if (var_13) {
                var_18 = (var_11 < 64);
            } else {
                var_18 = 0;
            }
            char var_19 = (var_18 == 0);
            if (var_19) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_20 = (var_11 * 128);
            long long int var_21[1];
            var_21[0] = var_9;
            while (method_37(var_21)) {
                long long int var_23 = var_21[0];
                unsigned char var_24 = var_0[var_11];
                long long int var_25 = ((long long int) (var_24));
                char var_26 = (var_23 == var_25);
                float var_27;
                if (var_26) {
                    var_27 = 1;
                } else {
                    var_27 = 0;
                }
                char var_28 = (var_23 >= 0);
                char var_30;
                if (var_28) {
                    var_30 = (var_23 < 128);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_20 + var_23);
                float var_33 = var_1[var_32];
                var_1[var_32] = var_27;
                long long int var_34 = (var_23 + 32);
                var_21[0] = var_34;
            }
            long long int var_35 = var_21[0];
            long long int var_36 = (var_8 + 2048);
            var_6[0] = var_36;
        }
        long long int var_37 = var_6[0];
    }
    __global__ void method_81(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_37(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_20 = 0;
            long long int var_21[1];
            float var_22[1];
            var_21[0] = var_19;
            var_22[0] = var_20;
            while (method_82(var_21, var_22)) {
                long long int var_24 = var_21[0];
                float var_25 = var_22[0];
                char var_26 = (var_24 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_24 < 64);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_24 * 128);
                char var_32;
                if (var_9) {
                    var_32 = (var_8 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_8);
                float var_35 = var_0[var_34];
                float var_36 = (var_25 + var_35);
                long long int var_37 = (var_24 + 32);
                var_21[0] = var_37;
                var_22[0] = var_36;
            }
            long long int var_38 = var_21[0];
            float var_39 = var_22[0];
            long long int var_40 = threadIdx.x;
            long long int var_41 = threadIdx.y;
            __shared__ float var_42[992];
            long long int var_43[1];
            float var_44[1];
            var_43[0] = 32;
            var_44[0] = var_39;
            while (method_83(var_43, var_44)) {
                long long int var_46 = var_43[0];
                float var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                char var_49 = (var_41 < var_46);
                char var_51;
                if (var_49) {
                    var_51 = (var_41 >= var_48);
                } else {
                    var_51 = 0;
                }
                if (var_51) {
                    char var_52 = (var_41 >= 1);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_41 < 32);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_41 - 1);
                    long long int var_57 = (var_56 * 32);
                    char var_58 = (var_40 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_40 < 32);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 + var_40);
                    var_42[var_62] = var_47;
                } else {
                }
                __syncthreads();
                char var_63 = (var_41 < var_48);
                float var_86;
                if (var_63) {
                    long long int var_64 = (var_41 + var_48);
                    long long int var_65[1];
                    float var_66[1];
                    var_65[0] = var_64;
                    var_66[0] = var_47;
                    while (method_84(var_46, var_65, var_66)) {
                        long long int var_68 = var_65[0];
                        float var_69 = var_66[0];
                        char var_70 = (var_68 >= 1);
                        char var_72;
                        if (var_70) {
                            var_72 = (var_68 < 32);
                        } else {
                            var_72 = 0;
                        }
                        char var_73 = (var_72 == 0);
                        if (var_73) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_74 = (var_68 - 1);
                        long long int var_75 = (var_74 * 32);
                        char var_76 = (var_40 >= 0);
                        char var_78;
                        if (var_76) {
                            var_78 = (var_40 < 32);
                        } else {
                            var_78 = 0;
                        }
                        char var_79 = (var_78 == 0);
                        if (var_79) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_80 = (var_75 + var_40);
                        float var_81 = var_42[var_80];
                        float var_82 = (var_69 + var_81);
                        long long int var_83 = (var_68 + var_48);
                        var_65[0] = var_83;
                        var_66[0] = var_82;
                    }
                    long long int var_84 = var_65[0];
                    var_86 = var_66[0];
                } else {
                    var_86 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_86;
            }
            long long int var_87 = var_43[0];
            float var_88 = var_44[0];
            long long int var_89 = threadIdx.y;
            char var_90 = (var_89 == 0);
            if (var_90) {
                float var_91 = var_1[var_8];
                float var_92 = (var_88 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 128);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_101(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (128 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_102(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 8192);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            char var_15;
            if (var_10) {
                var_15 = (var_9 < 8192);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            float var_17 = var_0[var_9];
            float var_18 = var_1[var_9];
            float var_19 = var_2[var_9];
            float var_20 = (var_17 - var_18);
            float var_21 = (var_20 / 64);
            float var_22 = (var_19 + var_21);
            var_2[var_9] = var_22;
            long long int var_23 = (var_9 + 8192);
            var_7[0] = var_23;
        }
        long long int var_24 = var_7[0];
    }
    __global__ void method_110(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6) {
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_64(var_10)) {
            long long int var_12 = var_10[0];
            char var_13 = (var_12 >= 0);
            char var_15;
            if (var_13) {
                var_15 = (var_12 < 64);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = (var_12 * 128);
            char var_19;
            if (var_13) {
                var_19 = (var_12 < 64);
            } else {
                var_19 = 0;
            }
            char var_20 = (var_19 == 0);
            if (var_20) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_21 = threadIdx.x;
            long long int var_22 = blockIdx.x;
            long long int var_23 = (128 * var_22);
            long long int var_24 = (var_21 + var_23);
            float var_56[1];
            long long int var_57[1];
            var_57[0] = 0;
            while (method_65(var_57)) {
                long long int var_59 = var_57[0];
                long long int var_60 = (128 * var_59);
                long long int var_61 = (var_24 + var_60);
                long long int var_62 = (128 - var_60);
                char var_63 = (var_61 < 128);
                if (var_63) {
                    char var_64 = (var_59 >= 0);
                    char var_66;
                    if (var_64) {
                        var_66 = (var_59 < 1);
                    } else {
                        var_66 = 0;
                    }
                    char var_67 = (var_66 == 0);
                    if (var_67) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_68 = (var_61 >= 0);
                    char var_69 = (var_68 == 0);
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_70 = (var_17 + var_61);
                    float var_71 = var_4[var_70];
                    float var_72 = var_5[var_70];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_73 = var_0[var_61];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_74 = var_1[var_61];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_75 = var_2[var_61];
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_76 = var_3[var_61];
                    float var_77 = (var_73 * var_71);
                    float var_78 = (var_77 * var_72);
                    float var_79 = (var_74 * var_72);
                    float var_80 = (var_78 + var_79);
                    float var_81 = (var_75 * var_71);
                    float var_82 = (var_80 + var_81);
                    float var_83 = (var_82 + var_76);
                    var_56[var_59] = var_83;
                } else {
                }
                long long int var_84 = (var_59 + 1);
                var_57[0] = var_84;
            }
            long long int var_85 = var_57[0];
            float var_86 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_56);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            float var_93[1];
            long long int var_94[1];
            var_94[0] = 0;
            while (method_65(var_94)) {
                long long int var_96 = var_94[0];
                long long int var_97 = (128 * var_96);
                long long int var_98 = (var_24 + var_97);
                long long int var_99 = (128 - var_97);
                char var_100 = (var_98 < 128);
                if (var_100) {
                    char var_101 = (var_96 >= 0);
                    char var_103;
                    if (var_101) {
                        var_103 = (var_96 < 1);
                    } else {
                        var_103 = 0;
                    }
                    char var_104 = (var_103 == 0);
                    if (var_104) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_105 = var_56[var_96];
                    float var_106 = (var_90 / 128);
                    float var_107 = (var_105 - var_106);
                    char var_109;
                    if (var_101) {
                        var_109 = (var_96 < 1);
                    } else {
                        var_109 = 0;
                    }
                    char var_110 = (var_109 == 0);
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_93[var_96] = var_107;
                } else {
                }
                long long int var_111 = (var_96 + 1);
                var_94[0] = var_111;
            }
            long long int var_112 = var_94[0];
            float var_114[1];
            long long int var_115[1];
            var_115[0] = 0;
            while (method_65(var_115)) {
                long long int var_117 = var_115[0];
                long long int var_118 = (128 * var_117);
                long long int var_119 = (var_24 + var_118);
                long long int var_120 = (128 - var_118);
                char var_121 = (var_119 < 128);
                if (var_121) {
                    char var_122 = (var_117 >= 0);
                    char var_124;
                    if (var_122) {
                        var_124 = (var_117 < 1);
                    } else {
                        var_124 = 0;
                    }
                    char var_125 = (var_124 == 0);
                    if (var_125) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_126 = var_93[var_117];
                    float var_127 = (var_126 * var_126);
                    char var_129;
                    if (var_122) {
                        var_129 = (var_117 < 1);
                    } else {
                        var_129 = 0;
                    }
                    char var_130 = (var_129 == 0);
                    if (var_130) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_114[var_117] = var_127;
                } else {
                }
                long long int var_131 = (var_117 + 1);
                var_115[0] = var_131;
            }
            long long int var_132 = var_115[0];
            float var_133 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_114);
            __shared__ float var_134[1];
            long long int var_135 = threadIdx.x;
            char var_136 = (var_135 == 0);
            if (var_136) {
                var_134[0] = var_133;
            } else {
            }
            __syncthreads();
            float var_137 = var_134[0];
            long long int var_138[1];
            var_138[0] = 0;
            while (method_65(var_138)) {
                long long int var_140 = var_138[0];
                long long int var_141 = (128 * var_140);
                long long int var_142 = (var_24 + var_141);
                long long int var_143 = (128 - var_141);
                char var_144 = (var_142 < 128);
                if (var_144) {
                    char var_145 = (var_142 >= 0);
                    char var_146 = (var_145 == 0);
                    if (var_146) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_147 = (var_17 + var_142);
                    char var_148 = (var_140 >= 0);
                    char var_150;
                    if (var_148) {
                        var_150 = (var_140 < 1);
                    } else {
                        var_150 = 0;
                    }
                    char var_151 = (var_150 == 0);
                    if (var_151) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_152 = var_93[var_140];
                    float var_153 = var_6[var_147];
                    float var_154 = (var_137 / 128);
                    float var_155 = (0.0025 + var_154);
                    float var_156 = sqrt(var_155);
                    float var_157 = (var_152 / var_156);
                    char var_158 = (var_157 > 0);
                    float var_159;
                    if (var_158) {
                        var_159 = var_157;
                    } else {
                        var_159 = 0;
                    }
                    var_6[var_147] = var_159;
                } else {
                }
                long long int var_160 = (var_140 + 1);
                var_138[0] = var_160;
            }
            long long int var_161 = var_138[0];
            long long int var_162 = (var_12 + 64);
            var_10[0] = var_162;
        }
        long long int var_163 = var_10[0];
    }
    __global__ void method_114(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6, float * var_7, float * var_8, float * var_9, float * var_10, float * var_11, float * var_12) {
        long long int var_13 = threadIdx.y;
        long long int var_14 = blockIdx.y;
        long long int var_15 = (var_13 + var_14);
        long long int var_16[1];
        var_16[0] = var_15;
        while (method_64(var_16)) {
            long long int var_18 = var_16[0];
            char var_19 = (var_18 >= 0);
            char var_21;
            if (var_19) {
                var_21 = (var_18 < 64);
            } else {
                var_21 = 0;
            }
            char var_22 = (var_21 == 0);
            if (var_22) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_23 = (var_18 * 128);
            char var_25;
            if (var_19) {
                var_25 = (var_18 < 64);
            } else {
                var_25 = 0;
            }
            char var_26 = (var_25 == 0);
            if (var_26) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_27 = threadIdx.x;
            long long int var_28 = blockIdx.x;
            long long int var_29 = (128 * var_28);
            long long int var_30 = (var_27 + var_29);
            Tuple7 var_64[1];
            long long int var_65[1];
            var_65[0] = 0;
            while (method_65(var_65)) {
                long long int var_67 = var_65[0];
                long long int var_68 = (128 * var_67);
                long long int var_69 = (var_30 + var_68);
                long long int var_70 = (128 - var_68);
                char var_71 = (var_69 < 128);
                if (var_71) {
                    char var_72 = (var_67 >= 0);
                    char var_74;
                    if (var_72) {
                        var_74 = (var_67 < 1);
                    } else {
                        var_74 = 0;
                    }
                    char var_75 = (var_74 == 0);
                    if (var_75) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_76 = (var_69 >= 0);
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_78 = (var_23 + var_69);
                    float var_79 = var_8[var_78];
                    float var_80 = var_9[var_78];
                    float var_81 = var_10[var_78];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_82 = var_0[var_69];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_83 = var_1[var_69];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_84 = var_2[var_69];
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_85 = var_3[var_69];
                    EnvStack8 var_86 = make_EnvStack8(var_82, var_83, var_84, var_85, var_80, var_81);
                    float var_87 = (var_82 * var_80);
                    float var_88 = (var_87 * var_81);
                    float var_89 = (var_83 * var_81);
                    float var_90 = (var_88 + var_89);
                    float var_91 = (var_84 * var_80);
                    float var_92 = (var_90 + var_91);
                    float var_93 = (var_92 + var_85);
                    var_64[var_67] = make_Tuple7(var_86, var_79, var_93);
                } else {
                }
                long long int var_94 = (var_67 + 1);
                var_65[0] = var_94;
            }
            long long int var_95 = var_65[0];
            float var_96[1];
            long long int var_97[1];
            var_97[0] = 0;
            while (method_65(var_97)) {
                long long int var_99 = var_97[0];
                long long int var_100 = (128 * var_99);
                long long int var_101 = (var_30 + var_100);
                long long int var_102 = (128 - var_100);
                char var_103 = (var_101 < 128);
                if (var_103) {
                    char var_104 = (var_99 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_99 < 1);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_108 = var_64[var_99];
                    EnvStack8 var_109 = var_108.mem_0;
                    float var_110 = var_108.mem_1;
                    float var_111 = var_108.mem_2;
                    char var_113;
                    if (var_104) {
                        var_113 = (var_99 < 1);
                    } else {
                        var_113 = 0;
                    }
                    char var_114 = (var_113 == 0);
                    if (var_114) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_96[var_99] = var_111;
                } else {
                }
                long long int var_115 = (var_99 + 1);
                var_97[0] = var_115;
            }
            long long int var_116 = var_97[0];
            float var_117 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_96);
            __shared__ float var_118[1];
            long long int var_119 = threadIdx.x;
            char var_120 = (var_119 == 0);
            if (var_120) {
                var_118[0] = var_117;
            } else {
            }
            __syncthreads();
            float var_121 = var_118[0];
            Tuple7 var_124[1];
            long long int var_125[1];
            var_125[0] = 0;
            while (method_65(var_125)) {
                long long int var_127 = var_125[0];
                long long int var_128 = (128 * var_127);
                long long int var_129 = (var_30 + var_128);
                long long int var_130 = (128 - var_128);
                char var_131 = (var_129 < 128);
                if (var_131) {
                    char var_132 = (var_127 >= 0);
                    char var_134;
                    if (var_132) {
                        var_134 = (var_127 < 1);
                    } else {
                        var_134 = 0;
                    }
                    char var_135 = (var_134 == 0);
                    if (var_135) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_136 = var_64[var_127];
                    EnvStack8 var_137 = var_136.mem_0;
                    float var_138 = var_136.mem_1;
                    float var_139 = var_136.mem_2;
                    float var_140 = (var_121 / 128);
                    float var_141 = (var_139 - var_140);
                    char var_143;
                    if (var_132) {
                        var_143 = (var_127 < 1);
                    } else {
                        var_143 = 0;
                    }
                    char var_144 = (var_143 == 0);
                    if (var_144) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_124[var_127] = make_Tuple7(var_137, var_138, var_141);
                } else {
                }
                long long int var_145 = (var_127 + 1);
                var_125[0] = var_145;
            }
            long long int var_146 = var_125[0];
            float var_148[1];
            long long int var_149[1];
            var_149[0] = 0;
            while (method_65(var_149)) {
                long long int var_151 = var_149[0];
                long long int var_152 = (128 * var_151);
                long long int var_153 = (var_30 + var_152);
                long long int var_154 = (128 - var_152);
                char var_155 = (var_153 < 128);
                if (var_155) {
                    char var_156 = (var_151 >= 0);
                    char var_158;
                    if (var_156) {
                        var_158 = (var_151 < 1);
                    } else {
                        var_158 = 0;
                    }
                    char var_159 = (var_158 == 0);
                    if (var_159) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_160 = var_124[var_151];
                    EnvStack8 var_161 = var_160.mem_0;
                    float var_162 = var_160.mem_1;
                    float var_163 = var_160.mem_2;
                    float var_164 = (var_163 * var_163);
                    char var_166;
                    if (var_156) {
                        var_166 = (var_151 < 1);
                    } else {
                        var_166 = 0;
                    }
                    char var_167 = (var_166 == 0);
                    if (var_167) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_148[var_151] = var_164;
                } else {
                }
                long long int var_168 = (var_151 + 1);
                var_149[0] = var_168;
            }
            long long int var_169 = var_149[0];
            float var_170 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_148);
            __shared__ float var_171[1];
            long long int var_172 = threadIdx.x;
            char var_173 = (var_172 == 0);
            if (var_173) {
                var_171[0] = var_170;
            } else {
            }
            __syncthreads();
            float var_174 = var_171[0];
            Tuple9 var_180[1];
            long long int var_181[1];
            var_181[0] = 0;
            while (method_65(var_181)) {
                long long int var_183 = var_181[0];
                long long int var_184 = (128 * var_183);
                long long int var_185 = (var_30 + var_184);
                long long int var_186 = (128 - var_184);
                char var_187 = (var_185 < 128);
                if (var_187) {
                    char var_188 = (var_183 >= 0);
                    char var_190;
                    if (var_188) {
                        var_190 = (var_183 < 1);
                    } else {
                        var_190 = 0;
                    }
                    char var_191 = (var_190 == 0);
                    if (var_191) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_192 = var_124[var_183];
                    EnvStack8 var_193 = var_192.mem_0;
                    float var_194 = var_192.mem_1;
                    float var_195 = var_192.mem_2;
                    char var_196 = (var_195 > 0);
                    float var_197;
                    if (var_196) {
                        var_197 = var_194;
                    } else {
                        var_197 = 0;
                    }
                    float var_198 = (var_174 / 128);
                    float var_199 = (0.0025 + var_198);
                    float var_200 = sqrt(var_199);
                    char var_202;
                    if (var_188) {
                        var_202 = (var_183 < 1);
                    } else {
                        var_202 = 0;
                    }
                    char var_203 = (var_202 == 0);
                    if (var_203) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_180[var_183] = make_Tuple9(var_193, var_197, var_195, var_200);
                } else {
                }
                long long int var_204 = (var_183 + 1);
                var_181[0] = var_204;
            }
            long long int var_205 = var_181[0];
            float var_210[1];
            long long int var_211[1];
            var_211[0] = 0;
            while (method_65(var_211)) {
                long long int var_213 = var_211[0];
                long long int var_214 = (128 * var_213);
                long long int var_215 = (var_30 + var_214);
                long long int var_216 = (128 - var_214);
                char var_217 = (var_215 < 128);
                if (var_217) {
                    char var_218 = (var_213 >= 0);
                    char var_220;
                    if (var_218) {
                        var_220 = (var_213 < 1);
                    } else {
                        var_220 = 0;
                    }
                    char var_221 = (var_220 == 0);
                    if (var_221) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple9 var_222 = var_180[var_213];
                    EnvStack8 var_223 = var_222.mem_0;
                    float var_224 = var_222.mem_1;
                    float var_225 = var_222.mem_2;
                    float var_226 = var_222.mem_3;
                    float var_227 = (-var_224);
                    float var_228 = (var_227 * var_225);
                    float var_229 = (var_226 * var_226);
                    float var_230 = (var_228 / var_229);
                    char var_232;
                    if (var_218) {
                        var_232 = (var_213 < 1);
                    } else {
                        var_232 = 0;
                    }
                    char var_233 = (var_232 == 0);
                    if (var_233) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_210[var_213] = var_230;
                } else {
                }
                long long int var_234 = (var_213 + 1);
                var_211[0] = var_234;
            }
            long long int var_235 = var_211[0];
            float var_236 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_210);
            __shared__ float var_237[1];
            long long int var_238 = threadIdx.x;
            char var_239 = (var_238 == 0);
            if (var_239) {
                var_237[0] = var_236;
            } else {
            }
            __syncthreads();
            float var_240 = var_237[0];
            Tuple10 var_246[1];
            long long int var_247[1];
            var_247[0] = 0;
            while (method_65(var_247)) {
                long long int var_249 = var_247[0];
                long long int var_250 = (128 * var_249);
                long long int var_251 = (var_30 + var_250);
                long long int var_252 = (128 - var_250);
                char var_253 = (var_251 < 128);
                if (var_253) {
                    char var_254 = (var_249 >= 0);
                    char var_256;
                    if (var_254) {
                        var_256 = (var_249 < 1);
                    } else {
                        var_256 = 0;
                    }
                    char var_257 = (var_256 == 0);
                    if (var_257) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple9 var_258 = var_180[var_249];
                    EnvStack8 var_259 = var_258.mem_0;
                    float var_260 = var_258.mem_1;
                    float var_261 = var_258.mem_2;
                    float var_262 = var_258.mem_3;
                    float var_263 = (var_260 / var_262);
                    float var_264 = (var_240 * var_261);
                    float var_265 = (var_262 * 128);
                    float var_266 = (var_264 / var_265);
                    float var_267 = (var_263 + var_266);
                    char var_269;
                    if (var_254) {
                        var_269 = (var_249 < 1);
                    } else {
                        var_269 = 0;
                    }
                    char var_270 = (var_269 == 0);
                    if (var_270) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_246[var_249] = make_Tuple10(var_259, var_267);
                } else {
                }
                long long int var_271 = (var_249 + 1);
                var_247[0] = var_271;
            }
            long long int var_272 = var_247[0];
            float var_273[1];
            long long int var_274[1];
            var_274[0] = 0;
            while (method_65(var_274)) {
                long long int var_276 = var_274[0];
                long long int var_277 = (128 * var_276);
                long long int var_278 = (var_30 + var_277);
                long long int var_279 = (128 - var_277);
                char var_280 = (var_278 < 128);
                if (var_280) {
                    char var_281 = (var_276 >= 0);
                    char var_283;
                    if (var_281) {
                        var_283 = (var_276 < 1);
                    } else {
                        var_283 = 0;
                    }
                    char var_284 = (var_283 == 0);
                    if (var_284) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple10 var_285 = var_246[var_276];
                    EnvStack8 var_286 = var_285.mem_0;
                    float var_287 = var_285.mem_1;
                    char var_289;
                    if (var_281) {
                        var_289 = (var_276 < 1);
                    } else {
                        var_289 = 0;
                    }
                    char var_290 = (var_289 == 0);
                    if (var_290) {
                        // "Argument out of bounds."
                    } else {
                    }
                    var_273[var_276] = var_287;
                } else {
                }
                long long int var_291 = (var_276 + 1);
                var_274[0] = var_291;
            }
            long long int var_292 = var_274[0];
            float var_293 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_273);
            __shared__ float var_294[1];
            long long int var_295 = threadIdx.x;
            char var_296 = (var_295 == 0);
            if (var_296) {
                var_294[0] = var_293;
            } else {
            }
            __syncthreads();
            float var_297 = var_294[0];
            long long int var_298[1];
            var_298[0] = 0;
            while (method_65(var_298)) {
                long long int var_300 = var_298[0];
                long long int var_301 = (128 * var_300);
                long long int var_302 = (var_30 + var_301);
                long long int var_303 = (128 - var_301);
                char var_304 = (var_302 < 128);
                if (var_304) {
                    char var_305 = (var_302 >= 0);
                    char var_306 = (var_305 == 0);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_307 = (var_23 + var_302);
                    char var_308 = (var_300 >= 0);
                    char var_310;
                    if (var_308) {
                        var_310 = (var_300 < 1);
                    } else {
                        var_310 = 0;
                    }
                    char var_311 = (var_310 == 0);
                    if (var_311) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple10 var_312 = var_246[var_300];
                    EnvStack8 var_313 = var_312.mem_0;
                    float var_314 = var_312.mem_1;
                    float var_315 = var_313.mem_0;
                    float var_316 = var_313.mem_1;
                    float var_317 = var_313.mem_2;
                    float var_318 = var_313.mem_3;
                    float var_319 = var_313.mem_4;
                    float var_320 = var_313.mem_5;
                    float var_321 = var_11[var_307];
                    float var_322 = var_12[var_307];
                    float var_323 = (var_297 / 128);
                    float var_324 = (var_314 - var_323);
                    float var_325 = (var_319 * var_320);
                    float var_326 = (var_324 * var_325);
                    float var_327 = (var_324 * var_320);
                    float var_328 = (var_324 * var_319);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_329 = var_4 + var_302;
                    atomicAdd(var_329, var_326);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_330 = var_5 + var_302;
                    atomicAdd(var_330, var_327);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_331 = var_6 + var_302;
                    atomicAdd(var_331, var_328);
                    if (var_306) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_332 = var_7 + var_302;
                    atomicAdd(var_332, var_324);
                    float var_333 = (var_315 * var_320);
                    float var_334 = (var_333 + var_317);
                    float var_335 = (var_315 * var_319);
                    float var_336 = (var_335 + var_316);
                    float var_337 = (var_324 * var_334);
                    float var_338 = (var_324 * var_336);
                    float var_339 = (var_321 + var_337);
                    float var_340 = (var_322 + var_338);
                    var_11[var_307] = var_339;
                    var_12[var_307] = var_340;
                } else {
                }
                long long int var_341 = (var_300 + 1);
                var_298[0] = var_341;
            }
            long long int var_342 = var_298[0];
            long long int var_343 = (var_18 + 64);
            var_16[0] = var_343;
        }
        long long int var_344 = var_16[0];
    }
    __device__ char method_37(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 128);
    }
    __device__ char method_25(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1115392);
    }
    __device__ char method_65(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1);
    }
    __device__ char method_64(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 64);
    }
    __device__ char method_96(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 8192);
    }
    __device__ float method_91(float var_0, float var_1) {
        char var_2 = (var_0 > var_1);
        if (var_2) {
            return var_0;
        } else {
            return var_1;
        }
    }
    __device__ char method_179(long long int * var_0, float * var_1, float * var_2, long long int * var_3) {
        long long int var_4 = var_0[0];
        float var_5 = var_1[0];
        float var_6 = var_2[0];
        long long int var_7 = var_3[0];
        return (var_4 < 128);
    }
    __device__ Tuple6 method_180(Tuple6 var_0, Tuple6 var_1) {
        float var_2 = var_0.mem_0;
        long long int var_3 = var_0.mem_1;
        float var_4 = var_1.mem_0;
        long long int var_5 = var_1.mem_1;
        char var_6 = (var_2 <= var_4);
        Tuple6 var_7;
        if (var_6) {
            var_7 = make_Tuple6(var_2, var_3);
        } else {
            var_7 = make_Tuple6(var_4, var_5);
        }
        float var_8 = var_7.mem_0;
        long long int var_9 = var_7.mem_1;
        return make_Tuple6(var_8, var_9);
    }
    __device__ char method_128(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 16384);
    }
    __device__ char method_141(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 32);
    }
    __device__ char method_167(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 1);
    }
    __device__ char method_54(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 2048);
    }
    __device__ char method_82(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 64);
    }
    __device__ char method_83(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_84(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
    __device__ char method_102(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 8192);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and Env1 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<Env1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: Env19
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack4 =
    struct
    val mem_0: ResizeArray<Env3>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap5 =
    {
    mem_0: EnvStack2
    mem_1: (uint64 ref)
    mem_2: uint64
    mem_3: EnvStack4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap5
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap5
    }
and EnvHeap8 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap5
    }
and Env9 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env19
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack10 =
    struct
    val mem_0: ResizeArray<Env9>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap11 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvHeap5
    }
and Env12 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env16
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack13 =
    struct
    val mem_0: ResizeArray<Env12>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    }
and EnvHeap15 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env16 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    mem_6: (int64 ref)
    mem_7: EnvHeap15
    }
and Env18 =
    struct
    val mem_0: Env9
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env19 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack20 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack21 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack22 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap23 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    mem_8: (int64 ref)
    mem_9: (uint64 ref)
    mem_10: (int64 ref)
    mem_11: (uint64 ref)
    mem_12: (int64 ref)
    mem_13: (uint64 ref)
    mem_14: (int64 ref)
    mem_15: (uint64 ref)
    mem_16: (int64 ref)
    mem_17: (uint64 ref)
    mem_18: (int64 ref)
    mem_19: (uint64 ref)
    mem_20: (int64 ref)
    mem_21: (uint64 ref)
    mem_22: (int64 ref)
    mem_23: (uint64 ref)
    }
and EnvStack24 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack25 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack26 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack27 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack28 =
    struct
    val mem_0: (int64 [])
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack29 =
    struct
    val mem_0: ResizeArray<EnvStack28>
    val mem_1: EnvStack28
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and Env30 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack31 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack32 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack33 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack34 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack35 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack36 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap6), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_7((var_0: EnvHeap15), (var_1: EnvHeap14), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_9((var_0: (uint8 [])), (var_1: (char [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: char) = var_1.[int32 var_3]
        let (var_6: int64) = (int64 var_5)
        let (var_7: bool) = (var_6 < 128L)
        let (var_8: bool) = (var_7 = false)
        if var_8 then
            (failwith "The inputs need to be in the [0,127] range.")
        else
            ()
        var_0.[int32 var_3] <- (uint8 var_6)
        let (var_9: int64) = (var_3 + 1L)
        method_9((var_0: (uint8 [])), (var_1: (char [])), (var_2: int64), (var_9: int64))
    else
        ()
and method_10((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (uint8 [])), (var_4: int64), (var_5: int64)): Env18 =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
    let (var_9: int64) = (var_2 * var_5)
    let (var_10: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_3,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_11: int64) = var_10.AddrOfPinnedObject().ToInt64()
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (uint64 var_4)
    let (var_14: uint64) = (var_13 + var_12)
    let (var_15: Env9) = method_12((var_9: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_16: (int64 ref)) = var_15.mem_0
    let (var_17: Env19) = var_15.mem_1
    let (var_18: (uint64 ref)) = var_17.mem_0
    let (var_19: uint64) = method_5((var_18: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_9)
    let (var_25: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_21, var_23, var_24, var_8)
    if var_25 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_25)
    var_10.Free()
    (Env18((Env9(var_16, (Env19(var_18))))))
and method_5((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_19((var_0: uint64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): EnvStack20 =
    let (var_16: Env9) = method_20((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    let (var_17: (int64 ref)) = var_16.mem_0
    let (var_18: Env19) = var_16.mem_1
    let (var_19: (uint64 ref)) = var_18.mem_0
    method_21((var_0: uint64), (var_17: (int64 ref)), (var_19: (uint64 ref)), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    EnvStack20((var_17: (int64 ref)), (var_19: (uint64 ref)))
and method_26((var_0: EnvHeap15), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack21 =
    let (var_2: Env9) = method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_29((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack21((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_30((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack21 =
    let (var_4: Env9) = method_28((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_31((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack21((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 512L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_33((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: float32) = 1.000000f
    method_34((var_4: float32), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
and method_38((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack22 =
    let (var_4: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_39((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack22((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_40((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: float32) = 0.500000f
    method_34((var_4: float32), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
and method_41((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack22 =
    let (var_2: Env9) = method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
    let (var_9: ManagedCuda.CudaContext) = var_0.mem_0
    method_39((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_9: ManagedCuda.CudaContext), (var_8: ManagedCuda.BasicTypes.CUstream))
    EnvStack22((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_42((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack21 =
    let (var_2: Env9) = method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_43((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack21((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_44((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: EnvHeap15), (var_19: (int64 ref)), (var_20: EnvHeap15), (var_21: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_23: int64)): unit =
    let (var_24: bool) = (var_23 < 5L)
    if var_24 then
        let (var_25: string) = System.String.Format("iteration {0}",var_23)
        let (var_26: string) = System.String.Format("Starting timing for: {0}",var_25)
        System.Console.WriteLine(var_26)
        let (var_27: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
        let (var_28: int64) = 0L
        let (var_29: float) = 0.000000
        let (var_30: int64) = 0L
        let (var_31: float) = method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_21: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_28: int64), (var_29: float), (var_17: (int64 ref)), (var_18: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_19: (int64 ref)), (var_20: EnvHeap15), (var_30: int64))
        let (var_32: System.TimeSpan) = var_27.Elapsed
        let (var_33: string) = System.String.Format("The time was {0} for: {1}",var_32,var_25)
        System.Console.WriteLine(var_33)
        System.Console.WriteLine("----")
        let (var_40: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_41: EnvStack10) = EnvStack10((var_40: ResizeArray<Env9>))
        let (var_42: ManagedCuda.CudaContext) = var_21.mem_0
        let (var_43: ManagedCuda.CudaBlas.CudaBlas) = var_21.mem_1
        let (var_44: ManagedCuda.CudaRand.CudaRandDevice) = var_21.mem_2
        let (var_45: EnvStack10) = var_21.mem_3
        let (var_46: EnvStack13) = var_21.mem_4
        let (var_47: EnvHeap5) = var_21.mem_5
        let (var_48: (int64 ref)) = var_21.mem_6
        let (var_49: EnvHeap15) = var_21.mem_7
        let (var_50: EnvHeap17) = ({mem_0 = (var_42: ManagedCuda.CudaContext); mem_1 = (var_43: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_44: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_41: EnvStack10); mem_4 = (var_46: EnvStack13); mem_5 = (var_47: EnvHeap5); mem_6 = (var_48: (int64 ref)); mem_7 = (var_49: EnvHeap15)} : EnvHeap17)
        let (var_51: Env9) = method_133((var_50: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule))
        let (var_52: (int64 ref)) = var_51.mem_0
        let (var_53: Env19) = var_51.mem_1
        let (var_54: (uint64 ref)) = var_53.mem_0
        let (var_55: int64) = 0L
        let (var_56: int64) = 10L
        method_134((var_52: (int64 ref)), (var_54: (uint64 ref)), (var_55: int64), (var_50: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_56: int64))
        method_17((var_50: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule))
        let (var_125: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_126: EnvStack10) = EnvStack10((var_125: ResizeArray<Env9>))
        let (var_127: ManagedCuda.CudaContext) = var_50.mem_0
        let (var_128: ManagedCuda.CudaBlas.CudaBlas) = var_50.mem_1
        let (var_129: ManagedCuda.CudaRand.CudaRandDevice) = var_50.mem_2
        let (var_130: EnvStack10) = var_50.mem_3
        let (var_131: EnvStack13) = var_50.mem_4
        let (var_132: EnvHeap5) = var_50.mem_5
        let (var_133: (int64 ref)) = var_50.mem_6
        let (var_134: EnvHeap15) = var_50.mem_7
        let (var_135: EnvHeap17) = ({mem_0 = (var_127: ManagedCuda.CudaContext); mem_1 = (var_128: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_129: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_126: EnvStack10); mem_4 = (var_131: EnvStack13); mem_5 = (var_132: EnvHeap5); mem_6 = (var_133: (int64 ref)); mem_7 = (var_134: EnvHeap15)} : EnvHeap17)
        let (var_136: EnvStack24) = method_135((var_135: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_52: (int64 ref)), (var_54: (uint64 ref)))
        let (var_137: (int64 ref)) = var_136.mem_0
        let (var_138: (uint64 ref)) = var_136.mem_1
        let (var_139: EnvStack25) = method_142((var_135: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_137: (int64 ref)), (var_138: (uint64 ref)), (var_8: EnvHeap23))
        let (var_140: (int64 ref)) = var_139.mem_0
        let (var_141: (uint64 ref)) = var_139.mem_1
        let (var_142: (int64 ref)) = var_139.mem_2
        let (var_143: (uint64 ref)) = var_139.mem_3
        let (var_144: (unit -> unit)) = var_139.mem_4
        let (var_145: EnvStack26) = method_157((var_135: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_140: (int64 ref)), (var_141: (uint64 ref)), (var_142: (int64 ref)), (var_143: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)))
        let (var_146: (int64 ref)) = var_145.mem_0
        let (var_147: (uint64 ref)) = var_145.mem_1
        let (var_148: (int64 ref)) = var_145.mem_2
        let (var_149: (uint64 ref)) = var_145.mem_3
        let (var_150: (unit -> unit)) = var_145.mem_4
        let (var_151: EnvStack27) = method_182((var_135: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_146: (int64 ref)), (var_147: (uint64 ref)), (var_148: (int64 ref)), (var_149: (uint64 ref)))
        let (var_152: (int64 ref)) = var_151.mem_0
        let (var_153: (uint64 ref)) = var_151.mem_1
        let (var_154: int64) = 1L
        let (var_155: int64) = 0L
        let (var_156: int64) = 1L
        let (var_157: (int64 [])) = method_181((var_135: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_154: int64), (var_152: (int64 ref)), (var_153: (uint64 ref)), (var_155: int64), (var_156: int64))
        let (var_158: EnvStack28) = EnvStack28((var_157: (int64 [])))
        let (var_159: ResizeArray<EnvStack28>) = ResizeArray<EnvStack28>()
        let (var_160: EnvStack29) = EnvStack29((var_159: ResizeArray<EnvStack28>), (var_158: EnvStack28))
        let (var_161: ResizeArray<EnvStack28>) = var_160.mem_0
        let (var_162: EnvStack28) = var_160.mem_1
        var_161.Add(var_158)
        let (var_169: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_170: EnvStack10) = EnvStack10((var_169: ResizeArray<Env9>))
        let (var_171: ManagedCuda.CudaContext) = var_135.mem_0
        let (var_172: ManagedCuda.CudaBlas.CudaBlas) = var_135.mem_1
        let (var_173: ManagedCuda.CudaRand.CudaRandDevice) = var_135.mem_2
        let (var_174: EnvStack10) = var_135.mem_3
        let (var_175: EnvStack13) = var_135.mem_4
        let (var_176: EnvHeap5) = var_135.mem_5
        let (var_177: (int64 ref)) = var_135.mem_6
        let (var_178: EnvHeap15) = var_135.mem_7
        let (var_179: EnvHeap17) = ({mem_0 = (var_171: ManagedCuda.CudaContext); mem_1 = (var_172: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_173: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_170: EnvStack10); mem_4 = (var_175: EnvStack13); mem_5 = (var_176: EnvHeap5); mem_6 = (var_177: (int64 ref)); mem_7 = (var_178: EnvHeap15)} : EnvHeap17)
        let (var_180: EnvStack10) = var_179.mem_3
        method_18((var_152: (int64 ref)), (var_153: (uint64 ref)), (var_180: EnvStack10))
        method_18((var_142: (int64 ref)), (var_143: (uint64 ref)), (var_180: EnvStack10))
        method_119((var_174: EnvStack10))
        let (var_230: int64) = 1L
        let (var_231: EnvStack29) = method_193((var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_50: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_160: EnvStack29), (var_142: (int64 ref)), (var_143: (uint64 ref)), (var_179: EnvHeap17), (var_152: (int64 ref)), (var_153: (uint64 ref)), (var_230: int64))
        System.Console.WriteLine("Sample:")
        let (var_232: ResizeArray<EnvStack28>) = var_231.mem_0
        let (var_233: EnvStack28) = var_231.mem_1
        let (var_235: (EnvStack28 -> unit)) = method_195
        var_232.ForEach <| System.Action<_>(var_235)
        System.Console.WriteLine()
        System.Console.WriteLine("-----")
        method_119((var_130: EnvStack10))
        let (var_236: string) = System.String.Format("Training: {0}",var_31)
        System.Console.WriteLine(var_236)
        if (System.Double.IsNaN var_31) then
            System.Console.WriteLine("Training diverged. Aborting...")
        else
            let (var_237: int64) = (var_23 + 1L)
            method_44((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: EnvHeap15), (var_19: (int64 ref)), (var_20: EnvHeap15), (var_21: EnvHeap17), (var_22: ManagedCuda.BasicTypes.CUmodule), (var_237: int64))
    else
        ()
and method_196((var_0: EnvStack13)): unit =
    let (var_1: ResizeArray<Env12>) = var_0.mem_0
    let (var_3: (Env12 -> unit)) = method_197
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_119((var_0: EnvStack10)): unit =
    let (var_1: ResizeArray<Env9>) = var_0.mem_0
    let (var_3: (Env9 -> unit)) = method_120
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_2 ((var_0: Env3)): bool =
    let (var_1: Env19) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: uint64) = (!var_2)
    (var_4 = 0UL)
and method_3 ((var_0: Env3)): (Env3 -> int32) =
    let (var_1: Env19) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    method_4((var_2: (uint64 ref)))
and method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_3: uint64), (var_4: int32)): uint64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: ResizeArray<Env3>) = var_1.mem_0
        let (var_7: Env3) = var_6.[var_4]
        let (var_8: Env19) = var_7.mem_0
        let (var_9: (uint64 ref)) = var_8.mem_0
        let (var_10: uint64) = var_7.mem_1
        let (var_11: uint64) = method_5((var_9: (uint64 ref)))
        let (var_12: bool) = (var_11 >= var_3)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "The next pointer should be higher than the last.")
        else
            ()
        let (var_14: uint64) = method_5((var_9: (uint64 ref)))
        let (var_15: uint64) = (var_14 - var_3)
        let (var_16: uint64) = (var_3 + 256UL)
        let (var_17: uint64) = (var_16 - 1UL)
        let (var_18: uint64) = (var_17 &&& 18446744073709551360UL)
        let (var_19: uint64) = (var_18 - var_3)
        let (var_20: bool) = (var_15 > var_19)
        if var_20 then
            let (var_21: ResizeArray<Env1>) = var_0.mem_0
            let (var_22: uint64) = (var_15 - var_19)
            var_21.Add((Env1(var_18, var_22)))
        else
            ()
        let (var_23: uint64) = (var_14 + var_10)
        let (var_24: int32) = (var_4 + 1)
        method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_23: uint64), (var_24: int32))
    else
        var_3
and method_8((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: EnvStack13)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env12>) = var_2.mem_0
    var_5.Add((Env12(var_0, (Env16(var_1)))))
and method_11((var_0: EnvHeap15)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_12((var_0: int64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    method_13((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_0: int64))
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 1115392L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_21((var_0: uint64), (var_1: (int64 ref)), (var_2: (uint64 ref)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_5: uint64) = method_5((var_2: (uint64 ref)))
    method_22((var_0: uint64), (var_5: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule))
and method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 65536L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_29((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(16384L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.062500f)
and method_31((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(65536L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env9 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env19) = method_14((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack10) = var_0.mem_3
    method_18((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack10))
    (Env9(var_9, (Env19(var_8))))
and method_34((var_0: float32), (var_1: (int64 ref)), (var_2: (uint64 ref)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_5: uint64) = method_5((var_2: (uint64 ref)))
    method_35((var_0: float32), (var_5: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_39((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(512L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_43((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(16384L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.088388f)
and method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_14: EnvHeap23), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_25: int64)): float =
    let (var_26: bool) = (var_25 < 272L)
    if var_26 then
        let (var_27: bool) = (var_25 >= 0L)
        let (var_28: bool) = (var_27 = false)
        if var_28 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_29: int64) = (var_25 * 4096L)
        if var_28 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_30: int64) = (64L + var_29)
        method_17((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_37: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_38: EnvStack10) = EnvStack10((var_37: ResizeArray<Env9>))
        let (var_39: ManagedCuda.CudaContext) = var_2.mem_0
        let (var_40: ManagedCuda.CudaBlas.CudaBlas) = var_2.mem_1
        let (var_41: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
        let (var_42: EnvStack10) = var_2.mem_3
        let (var_43: EnvStack13) = var_2.mem_4
        let (var_44: EnvHeap5) = var_2.mem_5
        let (var_45: (int64 ref)) = var_2.mem_6
        let (var_46: EnvHeap15) = var_2.mem_7
        let (var_47: EnvHeap17) = ({mem_0 = (var_39: ManagedCuda.CudaContext); mem_1 = (var_40: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_41: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_38: EnvStack10); mem_4 = (var_43: EnvStack13); mem_5 = (var_44: EnvHeap5); mem_6 = (var_45: (int64 ref)); mem_7 = (var_46: EnvHeap15)} : EnvHeap17)
        let (var_115: (int64 ref)) = var_47.mem_6
        let (var_116: EnvHeap15) = var_47.mem_7
        let (var_117: ManagedCuda.CudaContext) = var_47.mem_0
        let (var_118: ManagedCuda.CudaBlas.CudaBlas) = var_47.mem_1
        let (var_119: ManagedCuda.CudaRand.CudaRandDevice) = var_47.mem_2
        let (var_120: EnvStack10) = var_47.mem_3
        let (var_121: EnvStack13) = var_47.mem_4
        let (var_122: EnvHeap5) = var_47.mem_5
        let (var_123: EnvHeap17) = ({mem_0 = (var_117: ManagedCuda.CudaContext); mem_1 = (var_118: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_119: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_120: EnvStack10); mem_4 = (var_121: EnvStack13); mem_5 = (var_122: EnvHeap5); mem_6 = (var_12: (int64 ref)); mem_7 = (var_13: EnvHeap15)} : EnvHeap17)
        let (var_124: Env30) = method_46((var_13: EnvHeap15))
        let (var_125: EnvHeap15) = var_124.mem_0
        let (var_126: ManagedCuda.CudaEvent) = var_125.mem_0
        let (var_127: ManagedCuda.BasicTypes.CUstream) = method_11((var_116: EnvHeap15))
        var_126.Record(var_127)
        let (var_128: ManagedCuda.CudaStream) = var_125.mem_2
        var_128.WaitEvent var_126.Event
        let (var_129: EnvStack31) = method_47((var_123: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_29: int64), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_115: (int64 ref)), (var_116: EnvHeap15))
        let (var_130: (int64 ref)) = var_129.mem_0
        let (var_131: (uint64 ref)) = var_129.mem_1
        let (var_132: EnvHeap17) = ({mem_0 = (var_117: ManagedCuda.CudaContext); mem_1 = (var_118: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_119: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_120: EnvStack10); mem_4 = (var_121: EnvStack13); mem_5 = (var_122: EnvHeap5); mem_6 = (var_10: (int64 ref)); mem_7 = (var_11: EnvHeap15)} : EnvHeap17)
        let (var_133: Env30) = method_46((var_11: EnvHeap15))
        let (var_134: EnvHeap15) = var_133.mem_0
        let (var_135: ManagedCuda.CudaEvent) = var_134.mem_0
        let (var_136: ManagedCuda.BasicTypes.CUstream) = method_11((var_13: EnvHeap15))
        var_135.Record(var_136)
        let (var_137: ManagedCuda.CudaStream) = var_134.mem_2
        var_137.WaitEvent var_135.Event
        let (var_138: EnvStack32) = method_55((var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_132: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_130: (int64 ref)), (var_131: (uint64 ref)), (var_14: EnvHeap23))
        let (var_139: (int64 ref)) = var_138.mem_0
        let (var_140: (uint64 ref)) = var_138.mem_1
        let (var_141: (int64 ref)) = var_138.mem_2
        let (var_142: (uint64 ref)) = var_138.mem_3
        let (var_143: (unit -> unit)) = var_138.mem_4
        let (var_144: EnvHeap17) = ({mem_0 = (var_117: ManagedCuda.CudaContext); mem_1 = (var_118: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_119: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_120: EnvStack10); mem_4 = (var_121: EnvStack13); mem_5 = (var_122: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_145: Env30) = method_46((var_9: EnvHeap15))
        let (var_146: EnvHeap15) = var_145.mem_0
        let (var_147: ManagedCuda.CudaEvent) = var_146.mem_0
        let (var_148: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
        var_147.Record(var_148)
        let (var_149: ManagedCuda.CudaStream) = var_146.mem_2
        var_149.WaitEvent var_147.Event
        let (var_150: EnvStack33) = method_72((var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_144: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_139: (int64 ref)), (var_140: (uint64 ref)), (var_141: (int64 ref)), (var_142: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)))
        let (var_151: (int64 ref)) = var_150.mem_0
        let (var_152: (uint64 ref)) = var_150.mem_1
        let (var_153: (int64 ref)) = var_150.mem_2
        let (var_154: (uint64 ref)) = var_150.mem_3
        let (var_155: (unit -> unit)) = var_150.mem_4
        let (var_156: EnvHeap17) = ({mem_0 = (var_117: ManagedCuda.CudaContext); mem_1 = (var_118: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_119: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_120: EnvStack10); mem_4 = (var_121: EnvStack13); mem_5 = (var_122: EnvHeap5); mem_6 = (var_23: (int64 ref)); mem_7 = (var_24: EnvHeap15)} : EnvHeap17)
        let (var_157: Env30) = method_46((var_24: EnvHeap15))
        let (var_158: EnvHeap15) = var_157.mem_0
        let (var_159: ManagedCuda.CudaEvent) = var_158.mem_0
        let (var_160: ManagedCuda.BasicTypes.CUstream) = method_11((var_116: EnvHeap15))
        var_159.Record(var_160)
        let (var_161: ManagedCuda.CudaStream) = var_158.mem_2
        var_161.WaitEvent var_159.Event
        let (var_162: EnvStack31) = method_85((var_156: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_30: int64), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_115: (int64 ref)), (var_116: EnvHeap15))
        let (var_163: (int64 ref)) = var_162.mem_0
        let (var_164: (uint64 ref)) = var_162.mem_1
        let (var_165: EnvHeap17) = ({mem_0 = (var_117: ManagedCuda.CudaContext); mem_1 = (var_118: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_119: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_120: EnvStack10); mem_4 = (var_121: EnvStack13); mem_5 = (var_122: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_166: Env30) = method_46((var_7: EnvHeap15))
        let (var_167: EnvHeap15) = var_166.mem_0
        let (var_168: ManagedCuda.CudaEvent) = var_167.mem_0
        let (var_169: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_168.Record(var_169)
        let (var_170: ManagedCuda.CudaStream) = var_167.mem_2
        var_170.WaitEvent var_168.Event
        let (var_171: Env30) = method_46((var_7: EnvHeap15))
        let (var_172: EnvHeap15) = var_171.mem_0
        let (var_173: ManagedCuda.CudaEvent) = var_172.mem_0
        let (var_174: ManagedCuda.BasicTypes.CUstream) = method_11((var_24: EnvHeap15))
        var_173.Record(var_174)
        let (var_175: ManagedCuda.CudaStream) = var_172.mem_2
        var_175.WaitEvent var_173.Event
        let (var_176: EnvStack34) = method_86((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_165: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_151: (int64 ref)), (var_152: (uint64 ref)), (var_153: (int64 ref)), (var_154: (uint64 ref)), (var_163: (int64 ref)), (var_164: (uint64 ref)))
        let (var_177: (int64 ref)) = var_176.mem_0
        let (var_178: (uint64 ref)) = var_176.mem_1
        let (var_179: (unit -> unit)) = var_176.mem_2
        let (var_180: (unit -> unit)) = method_103((var_143: (unit -> unit)), (var_155: (unit -> unit)), (var_179: (unit -> unit)))
        let (var_181: (unit -> float32)) = method_104((var_177: (int64 ref)), (var_178: (uint64 ref)), (var_47: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_238: int64) = 1L
        method_118((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_29: int64), (var_30: int64), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_14: EnvHeap23), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_47: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_25: int64), (var_2: EnvHeap17), (var_181: (unit -> float32)), (var_180: (unit -> unit)), (var_139: (int64 ref)), (var_140: (uint64 ref)), (var_141: (int64 ref)), (var_142: (uint64 ref)), (var_238: int64))
    else
        let (var_240: float) = (float var_4)
        (var_5 / var_240)
and method_133((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 8L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_134((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_5: int64)): unit =
    let (var_6: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(1L))
    var_6.[int32 0L] <- var_5
    let (var_7: (int64 ref)) = var_3.mem_6
    let (var_8: EnvHeap15) = var_3.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    let (var_10: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_6,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_11: int64) = var_10.AddrOfPinnedObject().ToInt64()
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = method_5((var_1: (uint64 ref)))
    let (var_14: int64) = (var_2 * 8L)
    let (var_15: uint64) = (uint64 var_14)
    let (var_16: uint64) = (var_13 + var_15)
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(8L)
    let (var_22: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_18, var_20, var_21, var_9)
    if var_22 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_22)
    var_10.Free()
and method_17((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_5
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_135((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: (uint64 ref))): EnvStack24 =
    let (var_6: uint64) = method_5((var_5: (uint64 ref)))
    let (var_7: EnvStack24) = method_136((var_6: uint64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: (uint64 ref)) = var_7.mem_1
    EnvStack24((var_8: (int64 ref)), (var_9: (uint64 ref)))
and method_142((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap23)): EnvStack25 =
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: (uint64 ref)) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_2
    let (var_10: (uint64 ref)) = var_6.mem_3
    let (var_11: (int64 ref)) = var_6.mem_4
    let (var_12: (uint64 ref)) = var_6.mem_5
    let (var_13: (int64 ref)) = var_6.mem_6
    let (var_14: (uint64 ref)) = var_6.mem_7
    let (var_15: (int64 ref)) = var_6.mem_8
    let (var_16: (uint64 ref)) = var_6.mem_9
    let (var_17: (int64 ref)) = var_6.mem_10
    let (var_18: (uint64 ref)) = var_6.mem_11
    let (var_19: (int64 ref)) = var_6.mem_12
    let (var_20: (uint64 ref)) = var_6.mem_13
    let (var_21: (int64 ref)) = var_6.mem_14
    let (var_22: (uint64 ref)) = var_6.mem_15
    let (var_23: (int64 ref)) = var_6.mem_16
    let (var_24: (uint64 ref)) = var_6.mem_17
    let (var_25: (int64 ref)) = var_6.mem_18
    let (var_26: (uint64 ref)) = var_6.mem_19
    let (var_27: (int64 ref)) = var_6.mem_20
    let (var_28: (uint64 ref)) = var_6.mem_21
    let (var_29: (int64 ref)) = var_6.mem_22
    let (var_30: (uint64 ref)) = var_6.mem_23
    let (var_31: EnvStack24) = method_143((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_32: (int64 ref)) = var_31.mem_0
    let (var_33: (uint64 ref)) = var_31.mem_1
    let (var_34: EnvStack24) = method_145((var_32: (int64 ref)), (var_33: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_35: (int64 ref)) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_34.mem_1
    let (var_37: uint64) = method_5((var_18: (uint64 ref)))
    let (var_38: uint64) = method_5((var_22: (uint64 ref)))
    let (var_39: EnvStack24) = method_147((var_37: uint64), (var_38: uint64), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_40: (int64 ref)) = var_39.mem_0
    let (var_41: (uint64 ref)) = var_39.mem_1
    let (var_42: EnvStack24) = method_145((var_40: (int64 ref)), (var_41: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_43: (int64 ref)) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_42.mem_1
    let (var_45: (unit -> unit)) = method_151((var_35: (int64 ref)), (var_36: (uint64 ref)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)))
    EnvStack25((var_43: (int64 ref)), (var_44: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_45: (unit -> unit)))
and method_157((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref))): EnvStack26 =
    let (var_16: EnvStack24) = method_143((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_17: (int64 ref)) = var_16.mem_0
    let (var_18: (uint64 ref)) = var_16.mem_1
    let (var_19: EnvStack24) = method_145((var_17: (int64 ref)), (var_18: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: (int64 ref)) = var_19.mem_0
    let (var_21: (uint64 ref)) = var_19.mem_1
    method_158((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_22: (unit -> unit)) = method_161((var_20: (int64 ref)), (var_21: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack26((var_20: (int64 ref)), (var_21: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_22: (unit -> unit)))
and method_182((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref))): EnvStack27 =
    let (var_6: EnvStack24) = method_169((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: (uint64 ref)) = var_6.mem_1
    let (var_9: EnvStack35) = method_173((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: (uint64 ref)) = var_9.mem_1
    let (var_12: EnvStack27) = method_175((var_7: (int64 ref)), (var_8: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    EnvStack27((var_13: (int64 ref)), (var_14: (uint64 ref)))
and method_181((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64), (var_6: int64)): (int64 []) =
    let (var_7: (int64 ref)) = var_0.mem_6
    let (var_8: EnvHeap15) = var_0.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    let (var_10: int64) = (var_2 * var_6)
    let (var_11: uint64) = method_5((var_4: (uint64 ref)))
    let (var_12: int64) = (var_5 * 8L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_11 + var_13)
    let (var_15: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_10))
    let (var_16: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_15,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_17: int64) = var_16.AddrOfPinnedObject().ToInt64()
    let (var_18: uint64) = (uint64 var_17)
    let (var_19: int64) = (var_10 * 8L)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_18)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_25: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_21, var_23, var_24, var_9)
    if var_25 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_25)
    var_16.Free()
    var_15
and method_18((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack10)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env9>) = var_2.mem_0
    var_5.Add((Env9(var_0, (Env19(var_1)))))
and method_193((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: EnvHeap23), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_17: EnvStack29), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: EnvHeap17), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: int64)): EnvStack29 =
    let (var_24: bool) = (var_23 < 2048L)
    if var_24 then
        method_17((var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule))
        let (var_31: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_32: EnvStack10) = EnvStack10((var_31: ResizeArray<Env9>))
        let (var_33: ManagedCuda.CudaContext) = var_15.mem_0
        let (var_34: ManagedCuda.CudaBlas.CudaBlas) = var_15.mem_1
        let (var_35: ManagedCuda.CudaRand.CudaRandDevice) = var_15.mem_2
        let (var_36: EnvStack10) = var_15.mem_3
        let (var_37: EnvStack13) = var_15.mem_4
        let (var_38: EnvHeap5) = var_15.mem_5
        let (var_39: (int64 ref)) = var_15.mem_6
        let (var_40: EnvHeap15) = var_15.mem_7
        let (var_41: EnvHeap17) = ({mem_0 = (var_33: ManagedCuda.CudaContext); mem_1 = (var_34: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_35: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_32: EnvStack10); mem_4 = (var_37: EnvStack13); mem_5 = (var_38: EnvHeap5); mem_6 = (var_39: (int64 ref)); mem_7 = (var_40: EnvHeap15)} : EnvHeap17)
        let (var_42: EnvStack24) = method_135((var_41: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_21: (int64 ref)), (var_22: (uint64 ref)))
        let (var_43: (int64 ref)) = var_42.mem_0
        let (var_44: (uint64 ref)) = var_42.mem_1
        let (var_45: EnvStack25) = method_183((var_41: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_6: EnvHeap23))
        let (var_46: (int64 ref)) = var_45.mem_0
        let (var_47: (uint64 ref)) = var_45.mem_1
        let (var_48: (int64 ref)) = var_45.mem_2
        let (var_49: (uint64 ref)) = var_45.mem_3
        let (var_50: (unit -> unit)) = var_45.mem_4
        let (var_51: EnvStack26) = method_157((var_41: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)))
        let (var_52: (int64 ref)) = var_51.mem_0
        let (var_53: (uint64 ref)) = var_51.mem_1
        let (var_54: (int64 ref)) = var_51.mem_2
        let (var_55: (uint64 ref)) = var_51.mem_3
        let (var_56: (unit -> unit)) = var_51.mem_4
        let (var_57: EnvStack27) = method_194((var_41: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_52: (int64 ref)), (var_53: (uint64 ref)), (var_54: (int64 ref)), (var_55: (uint64 ref)))
        let (var_58: (int64 ref)) = var_57.mem_0
        let (var_59: (uint64 ref)) = var_57.mem_1
        let (var_60: int64) = 1L
        let (var_61: int64) = 0L
        let (var_62: int64) = 1L
        let (var_63: (int64 [])) = method_181((var_41: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_60: int64), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_61: int64), (var_62: int64))
        let (var_64: EnvStack28) = EnvStack28((var_63: (int64 [])))
        let (var_65: ResizeArray<EnvStack28>) = var_17.mem_0
        let (var_66: EnvStack28) = var_17.mem_1
        var_65.Add(var_64)
        let (var_73: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_74: EnvStack10) = EnvStack10((var_73: ResizeArray<Env9>))
        let (var_75: ManagedCuda.CudaContext) = var_41.mem_0
        let (var_76: ManagedCuda.CudaBlas.CudaBlas) = var_41.mem_1
        let (var_77: ManagedCuda.CudaRand.CudaRandDevice) = var_41.mem_2
        let (var_78: EnvStack10) = var_41.mem_3
        let (var_79: EnvStack13) = var_41.mem_4
        let (var_80: EnvHeap5) = var_41.mem_5
        let (var_81: (int64 ref)) = var_41.mem_6
        let (var_82: EnvHeap15) = var_41.mem_7
        let (var_83: EnvHeap17) = ({mem_0 = (var_75: ManagedCuda.CudaContext); mem_1 = (var_76: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_77: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_74: EnvStack10); mem_4 = (var_79: EnvStack13); mem_5 = (var_80: EnvHeap5); mem_6 = (var_81: (int64 ref)); mem_7 = (var_82: EnvHeap15)} : EnvHeap17)
        let (var_84: EnvStack10) = var_83.mem_3
        method_18((var_58: (int64 ref)), (var_59: (uint64 ref)), (var_84: EnvStack10))
        method_18((var_48: (int64 ref)), (var_49: (uint64 ref)), (var_84: EnvStack10))
        let (var_85: EnvStack10) = var_20.mem_3
        method_119((var_85: EnvStack10))
        method_119((var_78: EnvStack10))
        let (var_86: int64) = (var_23 + 1L)
        method_193((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: EnvHeap23), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: EnvHeap17), (var_16: ManagedCuda.BasicTypes.CUmodule), (var_17: EnvStack29), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_83: EnvHeap17), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_86: int64))
    else
        let (var_88: EnvStack10) = var_20.mem_3
        method_119((var_88: EnvStack10))
        var_17
and method_195 ((var_0: EnvStack28)): unit =
    let (var_1: (int64 [])) = var_0.mem_0
    let (var_2: int64) = var_1.[int32 0L]
    let (var_3: char) = (char var_2)
    let (var_4: string) = System.String.Format("{0}",var_3)
    System.Console.Write(var_4)
and method_197 ((var_0: Env12)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env16) = var_0.mem_1
    let (var_3: EnvHeap15) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        let (var_8: ManagedCuda.CudaStream) = var_3.mem_2
        var_8.Dispose()
        let (var_9: ManagedCuda.CudaEvent) = var_3.mem_0
        var_9.Dispose()
        let (var_10: (bool ref)) = var_3.mem_1
        var_10 := false
    else
        ()
and method_120 ((var_0: Env9)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env19) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        var_3 := 0UL
    else
        ()
and method_4 ((var_1: (uint64 ref))) ((var_0: Env3)): int32 =
    let (var_2: Env19) = var_0.mem_0
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: uint64) = var_0.mem_1
    let (var_5: uint64) = method_5((var_1: (uint64 ref)))
    let (var_6: uint64) = method_5((var_3: (uint64 ref)))
    let (var_7: bool) = (var_5 < var_6)
    if var_7 then
        -1
    else
        let (var_8: bool) = (var_5 = var_6)
        if var_8 then
            0
        else
            1
and method_22((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_23((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_14((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env19 =
    let (var_3: EnvHeap5) = var_0.mem_5
    let (var_4: (uint64 ref)) = var_3.mem_1
    let (var_5: uint64) = var_3.mem_2
    let (var_6: EnvStack4) = var_3.mem_3
    let (var_7: EnvStack2) = var_3.mem_0
    let (var_8: ResizeArray<Env1>) = var_7.mem_0
    let (var_9: int32) = var_8.get_Count()
    let (var_10: bool) = (var_9 > 0)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Out of memory in the designated section.")
    else
        ()
    let (var_12: Env1) = var_8.[0]
    let (var_13: uint64) = var_12.mem_0
    let (var_14: uint64) = var_12.mem_1
    let (var_15: bool) = (var_2 <= var_14)
    let (var_42: Env3) =
        if var_15 then
            let (var_16: uint64) = (var_13 + var_2)
            let (var_17: uint64) = (var_14 - var_2)
            var_8.[0] <- (Env1(var_16, var_17))
            let (var_18: (uint64 ref)) = (ref var_13)
            (Env3((Env19(var_18)), var_2))
        else
            let (var_20: (Env1 -> (Env1 -> int32))) = method_15
            let (var_21: System.Comparison<Env1>) = System.Comparison<Env1>(var_20)
            var_8.Sort(var_21)
            let (var_22: Env1) = var_8.[0]
            let (var_23: uint64) = var_22.mem_0
            let (var_24: uint64) = var_22.mem_1
            let (var_25: bool) = (var_2 <= var_24)
            if var_25 then
                let (var_26: uint64) = (var_23 + var_2)
                let (var_27: uint64) = (var_24 - var_2)
                var_8.[0] <- (Env1(var_26, var_27))
                let (var_28: (uint64 ref)) = (ref var_23)
                (Env3((Env19(var_28)), var_2))
            else
                method_17((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                let (var_30: (Env1 -> (Env1 -> int32))) = method_15
                let (var_31: System.Comparison<Env1>) = System.Comparison<Env1>(var_30)
                var_8.Sort(var_31)
                let (var_32: Env1) = var_8.[0]
                let (var_33: uint64) = var_32.mem_0
                let (var_34: uint64) = var_32.mem_1
                let (var_35: bool) = (var_2 <= var_34)
                if var_35 then
                    let (var_36: uint64) = (var_33 + var_2)
                    let (var_37: uint64) = (var_34 - var_2)
                    var_8.[0] <- (Env1(var_36, var_37))
                    let (var_38: (uint64 ref)) = (ref var_33)
                    (Env3((Env19(var_38)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_43: Env19) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_43.mem_0
    let (var_45: uint64) = var_42.mem_1
    let (var_46: ResizeArray<Env3>) = var_6.mem_0
    var_46.Add((Env3((Env19(var_44)), var_45)))
    (Env19(var_44))
and method_35((var_0: float32), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_36((var_0: float32), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_36", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_46((var_0: EnvHeap15)): Env30 =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    (Env30(var_0))
and method_47((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: EnvHeap15), (var_7: (int64 ref)), (var_8: EnvHeap15)): EnvStack31 =
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = (uint64 var_4)
    let (var_11: uint64) = (var_9 + var_10)
    let (var_12: EnvStack31) = method_48((var_11: uint64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    EnvStack31((var_13: (int64 ref)), (var_14: (uint64 ref)))
and method_55((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap23)): EnvStack32 =
    let (var_9: (int64 ref)) = var_8.mem_0
    let (var_10: (uint64 ref)) = var_8.mem_1
    let (var_11: (int64 ref)) = var_8.mem_2
    let (var_12: (uint64 ref)) = var_8.mem_3
    let (var_13: (int64 ref)) = var_8.mem_4
    let (var_14: (uint64 ref)) = var_8.mem_5
    let (var_15: (int64 ref)) = var_8.mem_6
    let (var_16: (uint64 ref)) = var_8.mem_7
    let (var_17: (int64 ref)) = var_8.mem_8
    let (var_18: (uint64 ref)) = var_8.mem_9
    let (var_19: (int64 ref)) = var_8.mem_10
    let (var_20: (uint64 ref)) = var_8.mem_11
    let (var_21: (int64 ref)) = var_8.mem_12
    let (var_22: (uint64 ref)) = var_8.mem_13
    let (var_23: (int64 ref)) = var_8.mem_14
    let (var_24: (uint64 ref)) = var_8.mem_15
    let (var_25: (int64 ref)) = var_8.mem_16
    let (var_26: (uint64 ref)) = var_8.mem_17
    let (var_27: (int64 ref)) = var_8.mem_18
    let (var_28: (uint64 ref)) = var_8.mem_19
    let (var_29: (int64 ref)) = var_8.mem_20
    let (var_30: (uint64 ref)) = var_8.mem_21
    let (var_31: (int64 ref)) = var_8.mem_22
    let (var_32: (uint64 ref)) = var_8.mem_23
    let (var_33: EnvStack31) = method_56((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_34: (int64 ref)) = var_33.mem_0
    let (var_35: (uint64 ref)) = var_33.mem_1
    let (var_36: EnvStack31) = method_58((var_34: (int64 ref)), (var_35: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_37: (int64 ref)) = var_36.mem_0
    let (var_38: (uint64 ref)) = var_36.mem_1
    let (var_39: uint64) = method_5((var_20: (uint64 ref)))
    let (var_40: uint64) = method_5((var_24: (uint64 ref)))
    let (var_41: EnvStack31) = method_60((var_39: uint64), (var_40: uint64), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_42: (int64 ref)) = var_41.mem_0
    let (var_43: (uint64 ref)) = var_41.mem_1
    let (var_44: EnvStack31) = method_58((var_42: (int64 ref)), (var_43: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_45: (int64 ref)) = var_44.mem_0
    let (var_46: (uint64 ref)) = var_44.mem_1
    let (var_47: (unit -> unit)) = method_66((var_37: (int64 ref)), (var_38: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_45: (int64 ref)), (var_46: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack32((var_45: (int64 ref)), (var_46: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_47: (unit -> unit)))
and method_72((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref))): EnvStack33 =
    let (var_18: EnvStack31) = method_56((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_19: (int64 ref)) = var_18.mem_0
    let (var_20: (uint64 ref)) = var_18.mem_1
    let (var_21: EnvStack31) = method_58((var_19: (int64 ref)), (var_20: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_22: (int64 ref)) = var_21.mem_0
    let (var_23: (uint64 ref)) = var_21.mem_1
    method_73((var_12: (int64 ref)), (var_13: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_24: (unit -> unit)) = method_76((var_22: (int64 ref)), (var_23: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack33((var_22: (int64 ref)), (var_23: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_24: (unit -> unit)))
and method_85((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: int64), (var_5: (int64 ref)), (var_6: EnvHeap15), (var_7: (int64 ref)), (var_8: EnvHeap15)): EnvStack31 =
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = (uint64 var_4)
    let (var_11: uint64) = (var_9 + var_10)
    let (var_12: EnvStack31) = method_48((var_11: uint64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    EnvStack31((var_13: (int64 ref)), (var_14: (uint64 ref)))
and method_86((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref))): EnvStack34 =
    let (var_14: EnvStack31) = method_87((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
    let (var_15: (int64 ref)) = var_14.mem_0
    let (var_16: (uint64 ref)) = var_14.mem_1
    let (var_17: EnvStack36) = method_92((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
    let (var_18: (int64 ref)) = var_17.mem_0
    let (var_19: (uint64 ref)) = var_17.mem_1
    let (var_20: (unit -> unit)) = method_97((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15))
    EnvStack34((var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (unit -> unit)))
and method_103 ((var_0: (unit -> unit)), (var_1: (unit -> unit)), (var_2: (unit -> unit))) (): unit =
    var_2()
    var_1()
    var_0()
and method_104 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)) (): float32 =
    let (var_4: int64) = 1L
    let (var_5: int64) = 0L
    let (var_6: (float32 [])) = method_105((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_5: int64))
    var_6.[int32 0L]
and method_118((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_25: int64), (var_26: float), (var_27: int64), (var_28: EnvHeap17), (var_29: (unit -> float32)), (var_30: (unit -> unit)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_35: int64)): float =
    let (var_36: bool) = (var_35 < 64L)
    if var_36 then
        let (var_37: bool) = (var_35 >= 0L)
        let (var_38: bool) = (var_37 = false)
        if var_38 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_39: int64) = (var_35 * 64L)
        let (var_40: int64) = (var_2 + var_39)
        if var_38 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_41: int64) = (var_3 + var_39)
        let (var_42: (int64 ref)) = var_23.mem_6
        let (var_43: EnvHeap15) = var_23.mem_7
        let (var_44: ManagedCuda.CudaContext) = var_23.mem_0
        let (var_45: ManagedCuda.CudaBlas.CudaBlas) = var_23.mem_1
        let (var_46: ManagedCuda.CudaRand.CudaRandDevice) = var_23.mem_2
        let (var_47: EnvStack10) = var_23.mem_3
        let (var_48: EnvStack13) = var_23.mem_4
        let (var_49: EnvHeap5) = var_23.mem_5
        let (var_50: EnvHeap17) = ({mem_0 = (var_44: ManagedCuda.CudaContext); mem_1 = (var_45: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_46: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_47: EnvStack10); mem_4 = (var_48: EnvStack13); mem_5 = (var_49: EnvHeap5); mem_6 = (var_10: (int64 ref)); mem_7 = (var_11: EnvHeap15)} : EnvHeap17)
        let (var_51: Env30) = method_46((var_11: EnvHeap15))
        let (var_52: EnvHeap15) = var_51.mem_0
        let (var_53: ManagedCuda.CudaEvent) = var_52.mem_0
        let (var_54: ManagedCuda.BasicTypes.CUstream) = method_11((var_43: EnvHeap15))
        var_53.Record(var_54)
        let (var_55: ManagedCuda.CudaStream) = var_52.mem_2
        var_55.WaitEvent var_53.Event
        let (var_56: EnvStack31) = method_47((var_50: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_40: int64), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_42: (int64 ref)), (var_43: EnvHeap15))
        let (var_57: (int64 ref)) = var_56.mem_0
        let (var_58: (uint64 ref)) = var_56.mem_1
        let (var_59: EnvHeap17) = ({mem_0 = (var_44: ManagedCuda.CudaContext); mem_1 = (var_45: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_46: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_47: EnvStack10); mem_4 = (var_48: EnvStack13); mem_5 = (var_49: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_60: Env30) = method_46((var_9: EnvHeap15))
        let (var_61: EnvHeap15) = var_60.mem_0
        let (var_62: ManagedCuda.CudaEvent) = var_61.mem_0
        let (var_63: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
        var_62.Record(var_63)
        let (var_64: ManagedCuda.CudaStream) = var_61.mem_2
        var_64.WaitEvent var_62.Event
        let (var_65: EnvStack32) = method_106((var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_59: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_57: (int64 ref)), (var_58: (uint64 ref)), (var_12: EnvHeap23))
        let (var_66: (int64 ref)) = var_65.mem_0
        let (var_67: (uint64 ref)) = var_65.mem_1
        let (var_68: (int64 ref)) = var_65.mem_2
        let (var_69: (uint64 ref)) = var_65.mem_3
        let (var_70: (unit -> unit)) = var_65.mem_4
        let (var_71: EnvHeap17) = ({mem_0 = (var_44: ManagedCuda.CudaContext); mem_1 = (var_45: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_46: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_47: EnvStack10); mem_4 = (var_48: EnvStack13); mem_5 = (var_49: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_72: Env30) = method_46((var_7: EnvHeap15))
        let (var_73: EnvHeap15) = var_72.mem_0
        let (var_74: ManagedCuda.CudaEvent) = var_73.mem_0
        let (var_75: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_74.Record(var_75)
        let (var_76: ManagedCuda.CudaStream) = var_73.mem_2
        var_76.WaitEvent var_74.Event
        let (var_77: EnvStack33) = method_72((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_71: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_66: (int64 ref)), (var_67: (uint64 ref)), (var_68: (int64 ref)), (var_69: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)))
        let (var_78: (int64 ref)) = var_77.mem_0
        let (var_79: (uint64 ref)) = var_77.mem_1
        let (var_80: (int64 ref)) = var_77.mem_2
        let (var_81: (uint64 ref)) = var_77.mem_3
        let (var_82: (unit -> unit)) = var_77.mem_4
        let (var_83: EnvHeap17) = ({mem_0 = (var_44: ManagedCuda.CudaContext); mem_1 = (var_45: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_46: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_47: EnvStack10); mem_4 = (var_48: EnvStack13); mem_5 = (var_49: EnvHeap5); mem_6 = (var_21: (int64 ref)); mem_7 = (var_22: EnvHeap15)} : EnvHeap17)
        let (var_84: Env30) = method_46((var_22: EnvHeap15))
        let (var_85: EnvHeap15) = var_84.mem_0
        let (var_86: ManagedCuda.CudaEvent) = var_85.mem_0
        let (var_87: ManagedCuda.BasicTypes.CUstream) = method_11((var_43: EnvHeap15))
        var_86.Record(var_87)
        let (var_88: ManagedCuda.CudaStream) = var_85.mem_2
        var_88.WaitEvent var_86.Event
        let (var_89: EnvStack31) = method_85((var_83: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_41: int64), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_42: (int64 ref)), (var_43: EnvHeap15))
        let (var_90: (int64 ref)) = var_89.mem_0
        let (var_91: (uint64 ref)) = var_89.mem_1
        let (var_92: EnvHeap17) = ({mem_0 = (var_44: ManagedCuda.CudaContext); mem_1 = (var_45: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_46: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_47: EnvStack10); mem_4 = (var_48: EnvStack13); mem_5 = (var_49: EnvHeap5); mem_6 = (var_4: (int64 ref)); mem_7 = (var_5: EnvHeap15)} : EnvHeap17)
        let (var_93: Env30) = method_46((var_5: EnvHeap15))
        let (var_94: EnvHeap15) = var_93.mem_0
        let (var_95: ManagedCuda.CudaEvent) = var_94.mem_0
        let (var_96: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
        var_95.Record(var_96)
        let (var_97: ManagedCuda.CudaStream) = var_94.mem_2
        var_97.WaitEvent var_95.Event
        let (var_98: Env30) = method_46((var_5: EnvHeap15))
        let (var_99: EnvHeap15) = var_98.mem_0
        let (var_100: ManagedCuda.CudaEvent) = var_99.mem_0
        let (var_101: ManagedCuda.BasicTypes.CUstream) = method_11((var_22: EnvHeap15))
        var_100.Record(var_101)
        let (var_102: ManagedCuda.CudaStream) = var_99.mem_2
        var_102.WaitEvent var_100.Event
        let (var_103: EnvStack34) = method_86((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_92: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_78: (int64 ref)), (var_79: (uint64 ref)), (var_80: (int64 ref)), (var_81: (uint64 ref)), (var_90: (int64 ref)), (var_91: (uint64 ref)))
        let (var_104: (int64 ref)) = var_103.mem_0
        let (var_105: (uint64 ref)) = var_103.mem_1
        let (var_106: (unit -> unit)) = var_103.mem_2
        let (var_107: (unit -> unit)) = method_116((var_30: (unit -> unit)), (var_70: (unit -> unit)), (var_82: (unit -> unit)), (var_106: (unit -> unit)))
        let (var_108: (unit -> float32)) = method_117((var_104: (int64 ref)), (var_105: (uint64 ref)), (var_29: (unit -> float32)), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule))
        let (var_109: int64) = (var_35 + 1L)
        method_118((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_25: int64), (var_26: float), (var_27: int64), (var_28: EnvHeap17), (var_108: (unit -> float32)), (var_107: (unit -> unit)), (var_66: (int64 ref)), (var_67: (uint64 ref)), (var_68: (int64 ref)), (var_69: (uint64 ref)), (var_109: int64))
    else
        let (var_111: float32) = var_29()
        let (var_112: float) = (float var_111)
        let (var_113: float) = (var_26 + var_112)
        let (var_114: int64) = (var_25 + 1L)
        let (var_121: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_122: EnvStack10) = EnvStack10((var_121: ResizeArray<Env9>))
        let (var_123: ManagedCuda.CudaContext) = var_23.mem_0
        let (var_124: ManagedCuda.CudaBlas.CudaBlas) = var_23.mem_1
        let (var_125: ManagedCuda.CudaRand.CudaRandDevice) = var_23.mem_2
        let (var_126: EnvStack10) = var_23.mem_3
        let (var_127: EnvStack13) = var_23.mem_4
        let (var_128: EnvHeap5) = var_23.mem_5
        let (var_129: (int64 ref)) = var_23.mem_6
        let (var_130: EnvHeap15) = var_23.mem_7
        let (var_131: EnvHeap17) = ({mem_0 = (var_123: ManagedCuda.CudaContext); mem_1 = (var_124: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_125: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_122: EnvStack10); mem_4 = (var_127: EnvStack13); mem_5 = (var_128: EnvHeap5); mem_6 = (var_129: (int64 ref)); mem_7 = (var_130: EnvHeap15)} : EnvHeap17)
        let (var_132: EnvStack10) = var_131.mem_3
        method_18((var_33: (int64 ref)), (var_34: (uint64 ref)), (var_132: EnvStack10))
        if (System.Double.IsNaN var_113) then
            method_119((var_126: EnvStack10))
            method_119((var_132: EnvStack10))
            let (var_133: float) = (float var_114)
            (var_113 / var_133)
        else
            var_30()
            method_121((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule))
            method_119((var_126: EnvStack10))
            let (var_135: int64) = (var_27 + 1L)
            method_129((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_28: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_114: int64), (var_113: float), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_131: EnvHeap17), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_135: int64))
and method_136((var_0: uint64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_12: Env9) = method_32((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: Env19) = var_12.mem_1
    let (var_15: (uint64 ref)) = var_14.mem_0
    method_137((var_0: uint64), (var_13: (int64 ref)), (var_15: (uint64 ref)), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_13: (int64 ref)), (var_15: (uint64 ref)))
and method_143((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_6: Env9) = method_32((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env19) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_144((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_145((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_4: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_146((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack24((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_147((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_28: Env9) = method_32((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_29: (int64 ref)) = var_28.mem_0
    let (var_30: Env19) = var_28.mem_1
    let (var_31: (uint64 ref)) = var_30.mem_0
    method_148((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_29: (int64 ref)), (var_31: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_29: (int64 ref)), (var_31: (uint64 ref)))
and method_151 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref))) (): unit =
    let (var_24: uint64) = method_5((var_15: (uint64 ref)))
    let (var_25: uint64) = method_5((var_19: (uint64 ref)))
    let (var_26: uint64) = method_5((var_13: (uint64 ref)))
    let (var_27: uint64) = method_5((var_17: (uint64 ref)))
    method_152((var_24: uint64), (var_25: uint64), (var_26: uint64), (var_27: uint64), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_155((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
and method_158((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_159((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_161 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)) (): unit =
    method_162((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_169((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_5: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env19) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    method_170((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_6: (int64 ref)), (var_8: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_173((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack35 =
    let (var_2: Env9) = method_93((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_174((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack35((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_175((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack27 =
    let (var_11: Env9) = method_133((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_12: (int64 ref)) = var_11.mem_0
    let (var_13: Env19) = var_11.mem_1
    let (var_14: (uint64 ref)) = var_13.mem_0
    method_176((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_12: (int64 ref)), (var_14: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack27((var_12: (int64 ref)), (var_14: (uint64 ref)))
and method_183((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap23)): EnvStack25 =
    let (var_9: (int64 ref)) = var_8.mem_0
    let (var_10: (uint64 ref)) = var_8.mem_1
    let (var_11: (int64 ref)) = var_8.mem_2
    let (var_12: (uint64 ref)) = var_8.mem_3
    let (var_13: (int64 ref)) = var_8.mem_4
    let (var_14: (uint64 ref)) = var_8.mem_5
    let (var_15: (int64 ref)) = var_8.mem_6
    let (var_16: (uint64 ref)) = var_8.mem_7
    let (var_17: (int64 ref)) = var_8.mem_8
    let (var_18: (uint64 ref)) = var_8.mem_9
    let (var_19: (int64 ref)) = var_8.mem_10
    let (var_20: (uint64 ref)) = var_8.mem_11
    let (var_21: (int64 ref)) = var_8.mem_12
    let (var_22: (uint64 ref)) = var_8.mem_13
    let (var_23: (int64 ref)) = var_8.mem_14
    let (var_24: (uint64 ref)) = var_8.mem_15
    let (var_25: (int64 ref)) = var_8.mem_16
    let (var_26: (uint64 ref)) = var_8.mem_17
    let (var_27: (int64 ref)) = var_8.mem_18
    let (var_28: (uint64 ref)) = var_8.mem_19
    let (var_29: (int64 ref)) = var_8.mem_20
    let (var_30: (uint64 ref)) = var_8.mem_21
    let (var_31: (int64 ref)) = var_8.mem_22
    let (var_32: (uint64 ref)) = var_8.mem_23
    let (var_33: EnvStack24) = method_143((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_34: (int64 ref)) = var_33.mem_0
    let (var_35: (uint64 ref)) = var_33.mem_1
    let (var_36: EnvStack24) = method_145((var_34: (int64 ref)), (var_35: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_37: (int64 ref)) = var_36.mem_0
    let (var_38: (uint64 ref)) = var_36.mem_1
    let (var_39: EnvStack24) = method_143((var_2: (int64 ref)), (var_3: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_40: (int64 ref)) = var_39.mem_0
    let (var_41: (uint64 ref)) = var_39.mem_1
    let (var_42: EnvStack24) = method_145((var_40: (int64 ref)), (var_41: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_43: (int64 ref)) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_42.mem_1
    let (var_45: uint64) = method_5((var_12: (uint64 ref)))
    let (var_46: uint64) = method_5((var_16: (uint64 ref)))
    let (var_47: uint64) = method_5((var_20: (uint64 ref)))
    let (var_48: uint64) = method_5((var_24: (uint64 ref)))
    let (var_49: EnvStack24) = method_184((var_45: uint64), (var_46: uint64), (var_47: uint64), (var_48: uint64), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_50: (int64 ref)) = var_49.mem_0
    let (var_51: (uint64 ref)) = var_49.mem_1
    let (var_52: EnvStack24) = method_145((var_50: (int64 ref)), (var_51: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_53: (int64 ref)) = var_52.mem_0
    let (var_54: (uint64 ref)) = var_52.mem_1
    let (var_55: (unit -> unit)) = method_188((var_37: (int64 ref)), (var_38: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_29: (int64 ref)), (var_30: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_53: (int64 ref)), (var_54: (uint64 ref)), (var_50: (int64 ref)), (var_51: (uint64 ref)))
    EnvStack25((var_53: (int64 ref)), (var_54: (uint64 ref)), (var_50: (int64 ref)), (var_51: (uint64 ref)), (var_55: (unit -> unit)))
and method_194((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref))): EnvStack27 =
    let (var_6: EnvStack24) = method_169((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: (uint64 ref)) = var_6.mem_1
    let (var_9: EnvStack35) = method_173((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: (uint64 ref)) = var_9.mem_1
    let (var_12: EnvStack27) = method_175((var_7: (int64 ref)), (var_8: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    EnvStack27((var_13: (int64 ref)), (var_14: (uint64 ref)))
and method_23((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_24((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_24", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4357u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_15 ((var_0: Env1)): (Env1 -> int32) =
    let (var_1: uint64) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_16((var_2: uint64))
and method_48((var_0: uint64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): EnvStack31 =
    let (var_13: Env9) = method_49((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    let (var_14: (int64 ref)) = var_13.mem_0
    let (var_15: Env19) = var_13.mem_1
    let (var_16: (uint64 ref)) = var_15.mem_0
    method_50((var_0: uint64), (var_14: (int64 ref)), (var_16: (uint64 ref)), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    EnvStack31((var_14: (int64 ref)), (var_16: (uint64 ref)))
and method_56((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack31 =
    let (var_6: Env9) = method_49((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env19) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack31((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_58((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack31 =
    let (var_4: Env9) = method_49((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_59((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack31((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_60((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack31 =
    let (var_28: Env9) = method_49((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_29: (int64 ref)) = var_28.mem_0
    let (var_30: Env19) = var_28.mem_1
    let (var_31: (uint64 ref)) = var_30.mem_0
    method_61((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_29: (int64 ref)), (var_31: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack31((var_29: (int64 ref)), (var_31: (uint64 ref)))
and method_66 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: EnvHeap15), (var_26: (int64 ref)), (var_27: EnvHeap15)) (): unit =
    let (var_28: uint64) = method_5((var_15: (uint64 ref)))
    let (var_29: uint64) = method_5((var_19: (uint64 ref)))
    let (var_30: uint64) = method_5((var_13: (uint64 ref)))
    let (var_31: uint64) = method_5((var_17: (uint64 ref)))
    method_67((var_28: uint64), (var_29: uint64), (var_30: uint64), (var_31: uint64), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_70((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    let (var_32: Env30) = method_46((var_27: EnvHeap15))
    let (var_33: EnvHeap15) = var_32.mem_0
    let (var_34: ManagedCuda.CudaEvent) = var_33.mem_0
    let (var_35: ManagedCuda.BasicTypes.CUstream) = method_11((var_25: EnvHeap15))
    var_34.Record(var_35)
    let (var_36: ManagedCuda.CudaStream) = var_33.mem_2
    var_36.WaitEvent var_34.Event
and method_73((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_74((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_76 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: EnvHeap15), (var_20: (int64 ref)), (var_21: EnvHeap15)) (): unit =
    method_77((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    let (var_22: Env30) = method_46((var_21: EnvHeap15))
    let (var_23: EnvHeap15) = var_22.mem_0
    let (var_24: ManagedCuda.CudaEvent) = var_23.mem_0
    let (var_25: ManagedCuda.BasicTypes.CUstream) = method_11((var_19: EnvHeap15))
    var_24.Record(var_25)
    let (var_26: ManagedCuda.CudaStream) = var_23.mem_2
    var_26.WaitEvent var_24.Event
and method_87((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack31 =
    let (var_7: Env9) = method_49((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env19) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    EnvStack31((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_92((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack36 =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_12: Env9) = method_93((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: Env19) = var_12.mem_1
    let (var_15: (uint64 ref)) = var_14.mem_0
    let (var_16: uint64) = method_5((var_15: (uint64 ref)))
    method_94((var_6: uint64), (var_7: uint64), (var_16: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
    EnvStack36((var_13: (int64 ref)), (var_15: (uint64 ref)))
and method_97 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15)) (): unit =
    method_98((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
    let (var_14: Env30) = method_46((var_11: EnvHeap15))
    let (var_15: EnvHeap15) = var_14.mem_0
    let (var_16: ManagedCuda.CudaEvent) = var_15.mem_0
    let (var_17: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    var_16.Record(var_17)
    let (var_18: ManagedCuda.CudaStream) = var_15.mem_2
    var_18.WaitEvent var_16.Event
    let (var_19: Env30) = method_46((var_13: EnvHeap15))
    let (var_20: EnvHeap15) = var_19.mem_0
    let (var_21: ManagedCuda.CudaEvent) = var_20.mem_0
    let (var_22: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    var_21.Record(var_22)
    let (var_23: ManagedCuda.CudaStream) = var_20.mem_2
    var_23.WaitEvent var_21.Event
and method_105((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (float32 []) =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
    let (var_9: uint64) = method_5((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 4L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 4L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_106((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: EnvHeap23)): EnvStack32 =
    let (var_13: (int64 ref)) = var_12.mem_0
    let (var_14: (uint64 ref)) = var_12.mem_1
    let (var_15: (int64 ref)) = var_12.mem_2
    let (var_16: (uint64 ref)) = var_12.mem_3
    let (var_17: (int64 ref)) = var_12.mem_4
    let (var_18: (uint64 ref)) = var_12.mem_5
    let (var_19: (int64 ref)) = var_12.mem_6
    let (var_20: (uint64 ref)) = var_12.mem_7
    let (var_21: (int64 ref)) = var_12.mem_8
    let (var_22: (uint64 ref)) = var_12.mem_9
    let (var_23: (int64 ref)) = var_12.mem_10
    let (var_24: (uint64 ref)) = var_12.mem_11
    let (var_25: (int64 ref)) = var_12.mem_12
    let (var_26: (uint64 ref)) = var_12.mem_13
    let (var_27: (int64 ref)) = var_12.mem_14
    let (var_28: (uint64 ref)) = var_12.mem_15
    let (var_29: (int64 ref)) = var_12.mem_16
    let (var_30: (uint64 ref)) = var_12.mem_17
    let (var_31: (int64 ref)) = var_12.mem_18
    let (var_32: (uint64 ref)) = var_12.mem_19
    let (var_33: (int64 ref)) = var_12.mem_20
    let (var_34: (uint64 ref)) = var_12.mem_21
    let (var_35: (int64 ref)) = var_12.mem_22
    let (var_36: (uint64 ref)) = var_12.mem_23
    let (var_37: EnvStack31) = method_56((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_38: (int64 ref)) = var_37.mem_0
    let (var_39: (uint64 ref)) = var_37.mem_1
    let (var_40: EnvStack31) = method_58((var_38: (int64 ref)), (var_39: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_41: (int64 ref)) = var_40.mem_0
    let (var_42: (uint64 ref)) = var_40.mem_1
    let (var_43: EnvStack31) = method_56((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_44: (int64 ref)) = var_43.mem_0
    let (var_45: (uint64 ref)) = var_43.mem_1
    let (var_46: EnvStack31) = method_58((var_44: (int64 ref)), (var_45: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_47: (int64 ref)) = var_46.mem_0
    let (var_48: (uint64 ref)) = var_46.mem_1
    let (var_49: uint64) = method_5((var_16: (uint64 ref)))
    let (var_50: uint64) = method_5((var_20: (uint64 ref)))
    let (var_51: uint64) = method_5((var_24: (uint64 ref)))
    let (var_52: uint64) = method_5((var_28: (uint64 ref)))
    let (var_53: EnvStack31) = method_107((var_49: uint64), (var_50: uint64), (var_51: uint64), (var_52: uint64), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_44: (int64 ref)), (var_45: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_54: (int64 ref)) = var_53.mem_0
    let (var_55: (uint64 ref)) = var_53.mem_1
    let (var_56: EnvStack31) = method_58((var_54: (int64 ref)), (var_55: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_57: (int64 ref)) = var_56.mem_0
    let (var_58: (uint64 ref)) = var_56.mem_1
    let (var_59: (unit -> unit)) = method_111((var_41: (int64 ref)), (var_42: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_29: (int64 ref)), (var_30: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_47: (int64 ref)), (var_48: (uint64 ref)), (var_44: (int64 ref)), (var_45: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_57: (int64 ref)), (var_58: (uint64 ref)), (var_54: (int64 ref)), (var_55: (uint64 ref)), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack32((var_57: (int64 ref)), (var_58: (uint64 ref)), (var_54: (int64 ref)), (var_55: (uint64 ref)), (var_59: (unit -> unit)))
and method_116 ((var_0: (unit -> unit)), (var_1: (unit -> unit)), (var_2: (unit -> unit)), (var_3: (unit -> unit))) (): unit =
    var_3()
    var_2()
    var_1()
    var_0()
and method_117 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (unit -> float32)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)) (): float32 =
    let (var_5: float32) = var_2()
    let (var_6: int64) = 1L
    let (var_7: int64) = 0L
    let (var_8: (float32 [])) = method_105((var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_6: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_7: int64))
    let (var_9: float32) = var_8.[int32 0L]
    (var_5 + var_9)
and method_121((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: EnvHeap15), (var_19: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_21: ManagedCuda.CudaContext) = var_19.mem_0
    let (var_22: ManagedCuda.CudaBlas.CudaBlas) = var_19.mem_1
    let (var_23: ManagedCuda.CudaRand.CudaRandDevice) = var_19.mem_2
    let (var_24: EnvStack10) = var_19.mem_3
    let (var_25: EnvStack13) = var_19.mem_4
    let (var_26: EnvHeap5) = var_19.mem_5
    let (var_27: (int64 ref)) = var_19.mem_6
    let (var_28: EnvHeap15) = var_19.mem_7
    let (var_29: EnvHeap17) = ({mem_0 = (var_21: ManagedCuda.CudaContext); mem_1 = (var_22: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_23: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_24: EnvStack10); mem_4 = (var_25: EnvStack13); mem_5 = (var_26: EnvHeap5); mem_6 = (var_4: (int64 ref)); mem_7 = (var_5: EnvHeap15)} : EnvHeap17)
    let (var_30: (int64 ref)) = var_8.mem_0
    let (var_31: (uint64 ref)) = var_8.mem_1
    let (var_32: (int64 ref)) = var_8.mem_2
    let (var_33: (uint64 ref)) = var_8.mem_3
    let (var_34: (int64 ref)) = var_8.mem_4
    let (var_35: (uint64 ref)) = var_8.mem_5
    let (var_36: (int64 ref)) = var_8.mem_6
    let (var_37: (uint64 ref)) = var_8.mem_7
    let (var_38: (int64 ref)) = var_8.mem_8
    let (var_39: (uint64 ref)) = var_8.mem_9
    let (var_40: (int64 ref)) = var_8.mem_10
    let (var_41: (uint64 ref)) = var_8.mem_11
    let (var_42: (int64 ref)) = var_8.mem_12
    let (var_43: (uint64 ref)) = var_8.mem_13
    let (var_44: (int64 ref)) = var_8.mem_14
    let (var_45: (uint64 ref)) = var_8.mem_15
    let (var_46: (int64 ref)) = var_8.mem_16
    let (var_47: (uint64 ref)) = var_8.mem_17
    let (var_48: (int64 ref)) = var_8.mem_18
    let (var_49: (uint64 ref)) = var_8.mem_19
    let (var_50: (int64 ref)) = var_8.mem_20
    let (var_51: (uint64 ref)) = var_8.mem_21
    let (var_52: (int64 ref)) = var_8.mem_22
    let (var_53: (uint64 ref)) = var_8.mem_23
    method_122((var_32: (int64 ref)), (var_33: (uint64 ref)), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_29: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    method_122((var_36: (int64 ref)), (var_37: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_29: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    method_122((var_40: (int64 ref)), (var_41: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_29: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    method_122((var_44: (int64 ref)), (var_45: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_29: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    method_125((var_48: (int64 ref)), (var_49: (uint64 ref)), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_29: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    method_125((var_52: (int64 ref)), (var_53: (uint64 ref)), (var_50: (int64 ref)), (var_51: (uint64 ref)), (var_29: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    let (var_54: EnvHeap17) = ({mem_0 = (var_21: ManagedCuda.CudaContext); mem_1 = (var_22: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_23: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_24: EnvStack10); mem_4 = (var_25: EnvStack13); mem_5 = (var_26: EnvHeap5); mem_6 = (var_2: (int64 ref)); mem_7 = (var_3: EnvHeap15)} : EnvHeap17)
    method_122((var_11: (int64 ref)), (var_12: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_54: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
    method_125((var_15: (int64 ref)), (var_16: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_54: EnvHeap17), (var_20: ManagedCuda.BasicTypes.CUmodule))
and method_129((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_14: EnvHeap23), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_25: EnvHeap17), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: int64)): float =
    let (var_29: bool) = (var_28 < 272L)
    if var_29 then
        let (var_30: bool) = (var_28 >= 0L)
        let (var_31: bool) = (var_30 = false)
        if var_31 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_32: int64) = (var_28 * 4096L)
        if var_31 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_33: int64) = (64L + var_32)
        method_17((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_40: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_41: EnvStack10) = EnvStack10((var_40: ResizeArray<Env9>))
        let (var_42: ManagedCuda.CudaContext) = var_2.mem_0
        let (var_43: ManagedCuda.CudaBlas.CudaBlas) = var_2.mem_1
        let (var_44: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
        let (var_45: EnvStack10) = var_2.mem_3
        let (var_46: EnvStack13) = var_2.mem_4
        let (var_47: EnvHeap5) = var_2.mem_5
        let (var_48: (int64 ref)) = var_2.mem_6
        let (var_49: EnvHeap15) = var_2.mem_7
        let (var_50: EnvHeap17) = ({mem_0 = (var_42: ManagedCuda.CudaContext); mem_1 = (var_43: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_44: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_41: EnvStack10); mem_4 = (var_46: EnvStack13); mem_5 = (var_47: EnvHeap5); mem_6 = (var_48: (int64 ref)); mem_7 = (var_49: EnvHeap15)} : EnvHeap17)
        let (var_118: (int64 ref)) = var_50.mem_6
        let (var_119: EnvHeap15) = var_50.mem_7
        let (var_120: ManagedCuda.CudaContext) = var_50.mem_0
        let (var_121: ManagedCuda.CudaBlas.CudaBlas) = var_50.mem_1
        let (var_122: ManagedCuda.CudaRand.CudaRandDevice) = var_50.mem_2
        let (var_123: EnvStack10) = var_50.mem_3
        let (var_124: EnvStack13) = var_50.mem_4
        let (var_125: EnvHeap5) = var_50.mem_5
        let (var_126: EnvHeap17) = ({mem_0 = (var_120: ManagedCuda.CudaContext); mem_1 = (var_121: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_122: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_123: EnvStack10); mem_4 = (var_124: EnvStack13); mem_5 = (var_125: EnvHeap5); mem_6 = (var_12: (int64 ref)); mem_7 = (var_13: EnvHeap15)} : EnvHeap17)
        let (var_127: Env30) = method_46((var_13: EnvHeap15))
        let (var_128: EnvHeap15) = var_127.mem_0
        let (var_129: ManagedCuda.CudaEvent) = var_128.mem_0
        let (var_130: ManagedCuda.BasicTypes.CUstream) = method_11((var_119: EnvHeap15))
        var_129.Record(var_130)
        let (var_131: ManagedCuda.CudaStream) = var_128.mem_2
        var_131.WaitEvent var_129.Event
        let (var_132: EnvStack31) = method_47((var_126: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_32: int64), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_118: (int64 ref)), (var_119: EnvHeap15))
        let (var_133: (int64 ref)) = var_132.mem_0
        let (var_134: (uint64 ref)) = var_132.mem_1
        let (var_135: EnvHeap17) = ({mem_0 = (var_120: ManagedCuda.CudaContext); mem_1 = (var_121: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_122: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_123: EnvStack10); mem_4 = (var_124: EnvStack13); mem_5 = (var_125: EnvHeap5); mem_6 = (var_10: (int64 ref)); mem_7 = (var_11: EnvHeap15)} : EnvHeap17)
        let (var_136: Env30) = method_46((var_11: EnvHeap15))
        let (var_137: EnvHeap15) = var_136.mem_0
        let (var_138: ManagedCuda.CudaEvent) = var_137.mem_0
        let (var_139: ManagedCuda.BasicTypes.CUstream) = method_11((var_13: EnvHeap15))
        var_138.Record(var_139)
        let (var_140: ManagedCuda.CudaStream) = var_137.mem_2
        var_140.WaitEvent var_138.Event
        let (var_141: EnvStack32) = method_130((var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_135: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_133: (int64 ref)), (var_134: (uint64 ref)), (var_14: EnvHeap23))
        let (var_142: (int64 ref)) = var_141.mem_0
        let (var_143: (uint64 ref)) = var_141.mem_1
        let (var_144: (int64 ref)) = var_141.mem_2
        let (var_145: (uint64 ref)) = var_141.mem_3
        let (var_146: (unit -> unit)) = var_141.mem_4
        let (var_147: EnvHeap17) = ({mem_0 = (var_120: ManagedCuda.CudaContext); mem_1 = (var_121: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_122: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_123: EnvStack10); mem_4 = (var_124: EnvStack13); mem_5 = (var_125: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_148: Env30) = method_46((var_9: EnvHeap15))
        let (var_149: EnvHeap15) = var_148.mem_0
        let (var_150: ManagedCuda.CudaEvent) = var_149.mem_0
        let (var_151: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
        var_150.Record(var_151)
        let (var_152: ManagedCuda.CudaStream) = var_149.mem_2
        var_152.WaitEvent var_150.Event
        let (var_153: EnvStack33) = method_72((var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_147: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_142: (int64 ref)), (var_143: (uint64 ref)), (var_144: (int64 ref)), (var_145: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)))
        let (var_154: (int64 ref)) = var_153.mem_0
        let (var_155: (uint64 ref)) = var_153.mem_1
        let (var_156: (int64 ref)) = var_153.mem_2
        let (var_157: (uint64 ref)) = var_153.mem_3
        let (var_158: (unit -> unit)) = var_153.mem_4
        let (var_159: EnvHeap17) = ({mem_0 = (var_120: ManagedCuda.CudaContext); mem_1 = (var_121: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_122: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_123: EnvStack10); mem_4 = (var_124: EnvStack13); mem_5 = (var_125: EnvHeap5); mem_6 = (var_23: (int64 ref)); mem_7 = (var_24: EnvHeap15)} : EnvHeap17)
        let (var_160: Env30) = method_46((var_24: EnvHeap15))
        let (var_161: EnvHeap15) = var_160.mem_0
        let (var_162: ManagedCuda.CudaEvent) = var_161.mem_0
        let (var_163: ManagedCuda.BasicTypes.CUstream) = method_11((var_119: EnvHeap15))
        var_162.Record(var_163)
        let (var_164: ManagedCuda.CudaStream) = var_161.mem_2
        var_164.WaitEvent var_162.Event
        let (var_165: EnvStack31) = method_85((var_159: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_33: int64), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_118: (int64 ref)), (var_119: EnvHeap15))
        let (var_166: (int64 ref)) = var_165.mem_0
        let (var_167: (uint64 ref)) = var_165.mem_1
        let (var_168: EnvHeap17) = ({mem_0 = (var_120: ManagedCuda.CudaContext); mem_1 = (var_121: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_122: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_123: EnvStack10); mem_4 = (var_124: EnvStack13); mem_5 = (var_125: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_169: Env30) = method_46((var_7: EnvHeap15))
        let (var_170: EnvHeap15) = var_169.mem_0
        let (var_171: ManagedCuda.CudaEvent) = var_170.mem_0
        let (var_172: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_171.Record(var_172)
        let (var_173: ManagedCuda.CudaStream) = var_170.mem_2
        var_173.WaitEvent var_171.Event
        let (var_174: Env30) = method_46((var_7: EnvHeap15))
        let (var_175: EnvHeap15) = var_174.mem_0
        let (var_176: ManagedCuda.CudaEvent) = var_175.mem_0
        let (var_177: ManagedCuda.BasicTypes.CUstream) = method_11((var_24: EnvHeap15))
        var_176.Record(var_177)
        let (var_178: ManagedCuda.CudaStream) = var_175.mem_2
        var_178.WaitEvent var_176.Event
        let (var_179: EnvStack34) = method_86((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_168: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_154: (int64 ref)), (var_155: (uint64 ref)), (var_156: (int64 ref)), (var_157: (uint64 ref)), (var_166: (int64 ref)), (var_167: (uint64 ref)))
        let (var_180: (int64 ref)) = var_179.mem_0
        let (var_181: (uint64 ref)) = var_179.mem_1
        let (var_182: (unit -> unit)) = var_179.mem_2
        let (var_183: (unit -> unit)) = method_103((var_146: (unit -> unit)), (var_158: (unit -> unit)), (var_182: (unit -> unit)))
        let (var_184: (unit -> float32)) = method_104((var_180: (int64 ref)), (var_181: (uint64 ref)), (var_50: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_241: int64) = 1L
        method_132((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_32: int64), (var_33: int64), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: (int64 ref)), (var_13: EnvHeap15), (var_14: EnvHeap23), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: EnvHeap15), (var_50: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_28: int64), (var_2: EnvHeap17), (var_25: EnvHeap17), (var_184: (unit -> float32)), (var_183: (unit -> unit)), (var_142: (int64 ref)), (var_143: (uint64 ref)), (var_144: (int64 ref)), (var_145: (uint64 ref)), (var_241: int64))
    else
        let (var_243: EnvStack10) = var_25.mem_3
        method_119((var_243: EnvStack10))
        let (var_244: float) = (float var_4)
        (var_5 / var_244)
and method_137((var_0: uint64), (var_1: (int64 ref)), (var_2: (uint64 ref)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_5: uint64) = method_5((var_2: (uint64 ref)))
    method_138((var_0: uint64), (var_5: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule))
and method_144((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 1, 128, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_146((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(512L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_148((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    let (var_9: uint64) = method_5((var_5: (uint64 ref)))
    method_149((var_0: uint64), (var_1: uint64), (var_8: uint64), (var_9: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap17))
and method_152((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_12: uint64) = method_5((var_5: (uint64 ref)))
    let (var_13: uint64) = method_5((var_7: (uint64 ref)))
    let (var_14: uint64) = method_5((var_9: (uint64 ref)))
    method_153((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_12: uint64), (var_13: uint64), (var_14: uint64), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap17))
and method_155((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_156((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
and method_159((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_160((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_160", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_162((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_163((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_156((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_164((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_170((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_171((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_93((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 4L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_174((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(1L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateUniform32(var_11, var_5)
and method_176((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_1: (uint64 ref)))
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = method_5((var_5: (uint64 ref)))
    method_177((var_8: uint64), (var_9: uint64), (var_10: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap17))
and method_184((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule)): EnvStack24 =
    let (var_45: Env9) = method_32((var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    let (var_46: (int64 ref)) = var_45.mem_0
    let (var_47: Env19) = var_45.mem_1
    let (var_48: (uint64 ref)) = var_47.mem_0
    method_185((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_46: (int64 ref)), (var_48: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    EnvStack24((var_46: (int64 ref)), (var_48: (uint64 ref)))
and method_188 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref))) (): unit =
    let (var_42: uint64) = method_5((var_25: (uint64 ref)))
    let (var_43: uint64) = method_5((var_29: (uint64 ref)))
    let (var_44: uint64) = method_5((var_33: (uint64 ref)))
    let (var_45: uint64) = method_5((var_37: (uint64 ref)))
    let (var_46: uint64) = method_5((var_23: (uint64 ref)))
    let (var_47: uint64) = method_5((var_27: (uint64 ref)))
    let (var_48: uint64) = method_5((var_31: (uint64 ref)))
    let (var_49: uint64) = method_5((var_35: (uint64 ref)))
    method_189((var_42: uint64), (var_43: uint64), (var_44: uint64), (var_45: uint64), (var_46: uint64), (var_47: uint64), (var_48: uint64), (var_49: uint64), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_155((var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_155((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
and method_16 ((var_1: uint64)) ((var_0: Env1)): int32 =
    let (var_2: uint64) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        -1
    else
        let (var_5: bool) = (var_3 = var_1)
        if var_5 then
            0
        else
            1
and method_49((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 32768L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_50((var_0: uint64), (var_1: (int64 ref)), (var_2: (uint64 ref)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_5: uint64) = method_5((var_2: (uint64 ref)))
    method_51((var_0: uint64), (var_5: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule))
and method_57((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 64, 128, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_59((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(32768L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_61((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    let (var_9: uint64) = method_5((var_5: (uint64 ref)))
    method_62((var_0: uint64), (var_1: uint64), (var_8: uint64), (var_9: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap17))
and method_67((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_12: uint64) = method_5((var_5: (uint64 ref)))
    let (var_13: uint64) = method_5((var_7: (uint64 ref)))
    let (var_14: uint64) = method_5((var_9: (uint64 ref)))
    method_68((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_12: uint64), (var_13: uint64), (var_14: uint64), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap17))
and method_70((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_71((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
and method_74((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_75((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_75", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_77((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_78((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_71((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_79((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_89((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_94((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_95((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_95", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1024u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_98((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_99((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
and method_107((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule)): EnvStack31 =
    let (var_45: Env9) = method_49((var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    let (var_46: (int64 ref)) = var_45.mem_0
    let (var_47: Env19) = var_45.mem_1
    let (var_48: (uint64 ref)) = var_47.mem_0
    method_108((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_46: (int64 ref)), (var_48: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    EnvStack31((var_46: (int64 ref)), (var_48: (uint64 ref)))
and method_111 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_44: (int64 ref)), (var_45: EnvHeap15), (var_46: (int64 ref)), (var_47: EnvHeap15)) (): unit =
    let (var_48: uint64) = method_5((var_27: (uint64 ref)))
    let (var_49: uint64) = method_5((var_31: (uint64 ref)))
    let (var_50: uint64) = method_5((var_35: (uint64 ref)))
    let (var_51: uint64) = method_5((var_39: (uint64 ref)))
    let (var_52: uint64) = method_5((var_25: (uint64 ref)))
    let (var_53: uint64) = method_5((var_29: (uint64 ref)))
    let (var_54: uint64) = method_5((var_33: (uint64 ref)))
    let (var_55: uint64) = method_5((var_37: (uint64 ref)))
    method_112((var_48: uint64), (var_49: uint64), (var_50: uint64), (var_51: uint64), (var_52: uint64), (var_53: uint64), (var_54: uint64), (var_55: uint64), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_115((var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_70((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    let (var_56: Env30) = method_46((var_47: EnvHeap15))
    let (var_57: EnvHeap15) = var_56.mem_0
    let (var_58: ManagedCuda.CudaEvent) = var_57.mem_0
    let (var_59: ManagedCuda.BasicTypes.CUstream) = method_11((var_45: EnvHeap15))
    var_58.Record(var_59)
    let (var_60: ManagedCuda.CudaStream) = var_57.mem_2
    var_60.WaitEvent var_58.Event
and method_122((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_123((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_125((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_126((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_130((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap23)): EnvStack32 =
    let (var_11: (int64 ref)) = var_10.mem_0
    let (var_12: (uint64 ref)) = var_10.mem_1
    let (var_13: (int64 ref)) = var_10.mem_2
    let (var_14: (uint64 ref)) = var_10.mem_3
    let (var_15: (int64 ref)) = var_10.mem_4
    let (var_16: (uint64 ref)) = var_10.mem_5
    let (var_17: (int64 ref)) = var_10.mem_6
    let (var_18: (uint64 ref)) = var_10.mem_7
    let (var_19: (int64 ref)) = var_10.mem_8
    let (var_20: (uint64 ref)) = var_10.mem_9
    let (var_21: (int64 ref)) = var_10.mem_10
    let (var_22: (uint64 ref)) = var_10.mem_11
    let (var_23: (int64 ref)) = var_10.mem_12
    let (var_24: (uint64 ref)) = var_10.mem_13
    let (var_25: (int64 ref)) = var_10.mem_14
    let (var_26: (uint64 ref)) = var_10.mem_15
    let (var_27: (int64 ref)) = var_10.mem_16
    let (var_28: (uint64 ref)) = var_10.mem_17
    let (var_29: (int64 ref)) = var_10.mem_18
    let (var_30: (uint64 ref)) = var_10.mem_19
    let (var_31: (int64 ref)) = var_10.mem_20
    let (var_32: (uint64 ref)) = var_10.mem_21
    let (var_33: (int64 ref)) = var_10.mem_22
    let (var_34: (uint64 ref)) = var_10.mem_23
    let (var_35: EnvStack31) = method_56((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_29: (int64 ref)), (var_30: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_36: (int64 ref)) = var_35.mem_0
    let (var_37: (uint64 ref)) = var_35.mem_1
    let (var_38: EnvStack31) = method_58((var_36: (int64 ref)), (var_37: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_39: (int64 ref)) = var_38.mem_0
    let (var_40: (uint64 ref)) = var_38.mem_1
    let (var_41: EnvStack31) = method_56((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_42: (int64 ref)) = var_41.mem_0
    let (var_43: (uint64 ref)) = var_41.mem_1
    let (var_44: EnvStack31) = method_58((var_42: (int64 ref)), (var_43: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_45: (int64 ref)) = var_44.mem_0
    let (var_46: (uint64 ref)) = var_44.mem_1
    let (var_47: uint64) = method_5((var_14: (uint64 ref)))
    let (var_48: uint64) = method_5((var_18: (uint64 ref)))
    let (var_49: uint64) = method_5((var_22: (uint64 ref)))
    let (var_50: uint64) = method_5((var_26: (uint64 ref)))
    let (var_51: EnvStack31) = method_107((var_47: uint64), (var_48: uint64), (var_49: uint64), (var_50: uint64), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_52: (int64 ref)) = var_51.mem_0
    let (var_53: (uint64 ref)) = var_51.mem_1
    let (var_54: EnvStack31) = method_58((var_52: (int64 ref)), (var_53: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_55: (int64 ref)) = var_54.mem_0
    let (var_56: (uint64 ref)) = var_54.mem_1
    let (var_57: (unit -> unit)) = method_131((var_39: (int64 ref)), (var_40: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_29: (int64 ref)), (var_30: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_45: (int64 ref)), (var_46: (uint64 ref)), (var_42: (int64 ref)), (var_43: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_55: (int64 ref)), (var_56: (uint64 ref)), (var_52: (int64 ref)), (var_53: (uint64 ref)), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack32((var_55: (int64 ref)), (var_56: (uint64 ref)), (var_52: (int64 ref)), (var_53: (uint64 ref)), (var_57: (unit -> unit)))
and method_132((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_25: int64), (var_26: float), (var_27: int64), (var_28: EnvHeap17), (var_29: EnvHeap17), (var_30: (unit -> float32)), (var_31: (unit -> unit)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_36: int64)): float =
    let (var_37: bool) = (var_36 < 64L)
    if var_37 then
        let (var_38: bool) = (var_36 >= 0L)
        let (var_39: bool) = (var_38 = false)
        if var_39 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_40: int64) = (var_36 * 64L)
        let (var_41: int64) = (var_2 + var_40)
        if var_39 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_42: int64) = (var_3 + var_40)
        let (var_43: (int64 ref)) = var_23.mem_6
        let (var_44: EnvHeap15) = var_23.mem_7
        let (var_45: ManagedCuda.CudaContext) = var_23.mem_0
        let (var_46: ManagedCuda.CudaBlas.CudaBlas) = var_23.mem_1
        let (var_47: ManagedCuda.CudaRand.CudaRandDevice) = var_23.mem_2
        let (var_48: EnvStack10) = var_23.mem_3
        let (var_49: EnvStack13) = var_23.mem_4
        let (var_50: EnvHeap5) = var_23.mem_5
        let (var_51: EnvHeap17) = ({mem_0 = (var_45: ManagedCuda.CudaContext); mem_1 = (var_46: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_47: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_48: EnvStack10); mem_4 = (var_49: EnvStack13); mem_5 = (var_50: EnvHeap5); mem_6 = (var_10: (int64 ref)); mem_7 = (var_11: EnvHeap15)} : EnvHeap17)
        let (var_52: Env30) = method_46((var_11: EnvHeap15))
        let (var_53: EnvHeap15) = var_52.mem_0
        let (var_54: ManagedCuda.CudaEvent) = var_53.mem_0
        let (var_55: ManagedCuda.BasicTypes.CUstream) = method_11((var_44: EnvHeap15))
        var_54.Record(var_55)
        let (var_56: ManagedCuda.CudaStream) = var_53.mem_2
        var_56.WaitEvent var_54.Event
        let (var_57: EnvStack31) = method_47((var_51: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_41: int64), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_43: (int64 ref)), (var_44: EnvHeap15))
        let (var_58: (int64 ref)) = var_57.mem_0
        let (var_59: (uint64 ref)) = var_57.mem_1
        let (var_60: EnvHeap17) = ({mem_0 = (var_45: ManagedCuda.CudaContext); mem_1 = (var_46: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_47: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_48: EnvStack10); mem_4 = (var_49: EnvStack13); mem_5 = (var_50: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_61: Env30) = method_46((var_9: EnvHeap15))
        let (var_62: EnvHeap15) = var_61.mem_0
        let (var_63: ManagedCuda.CudaEvent) = var_62.mem_0
        let (var_64: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
        var_63.Record(var_64)
        let (var_65: ManagedCuda.CudaStream) = var_62.mem_2
        var_65.WaitEvent var_63.Event
        let (var_66: EnvStack32) = method_106((var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_60: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_12: EnvHeap23))
        let (var_67: (int64 ref)) = var_66.mem_0
        let (var_68: (uint64 ref)) = var_66.mem_1
        let (var_69: (int64 ref)) = var_66.mem_2
        let (var_70: (uint64 ref)) = var_66.mem_3
        let (var_71: (unit -> unit)) = var_66.mem_4
        let (var_72: EnvHeap17) = ({mem_0 = (var_45: ManagedCuda.CudaContext); mem_1 = (var_46: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_47: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_48: EnvStack10); mem_4 = (var_49: EnvStack13); mem_5 = (var_50: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_73: Env30) = method_46((var_7: EnvHeap15))
        let (var_74: EnvHeap15) = var_73.mem_0
        let (var_75: ManagedCuda.CudaEvent) = var_74.mem_0
        let (var_76: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_75.Record(var_76)
        let (var_77: ManagedCuda.CudaStream) = var_74.mem_2
        var_77.WaitEvent var_75.Event
        let (var_78: EnvStack33) = method_72((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_72: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_67: (int64 ref)), (var_68: (uint64 ref)), (var_69: (int64 ref)), (var_70: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)))
        let (var_79: (int64 ref)) = var_78.mem_0
        let (var_80: (uint64 ref)) = var_78.mem_1
        let (var_81: (int64 ref)) = var_78.mem_2
        let (var_82: (uint64 ref)) = var_78.mem_3
        let (var_83: (unit -> unit)) = var_78.mem_4
        let (var_84: EnvHeap17) = ({mem_0 = (var_45: ManagedCuda.CudaContext); mem_1 = (var_46: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_47: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_48: EnvStack10); mem_4 = (var_49: EnvStack13); mem_5 = (var_50: EnvHeap5); mem_6 = (var_21: (int64 ref)); mem_7 = (var_22: EnvHeap15)} : EnvHeap17)
        let (var_85: Env30) = method_46((var_22: EnvHeap15))
        let (var_86: EnvHeap15) = var_85.mem_0
        let (var_87: ManagedCuda.CudaEvent) = var_86.mem_0
        let (var_88: ManagedCuda.BasicTypes.CUstream) = method_11((var_44: EnvHeap15))
        var_87.Record(var_88)
        let (var_89: ManagedCuda.CudaStream) = var_86.mem_2
        var_89.WaitEvent var_87.Event
        let (var_90: EnvStack31) = method_85((var_84: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_42: int64), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_43: (int64 ref)), (var_44: EnvHeap15))
        let (var_91: (int64 ref)) = var_90.mem_0
        let (var_92: (uint64 ref)) = var_90.mem_1
        let (var_93: EnvHeap17) = ({mem_0 = (var_45: ManagedCuda.CudaContext); mem_1 = (var_46: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_47: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_48: EnvStack10); mem_4 = (var_49: EnvStack13); mem_5 = (var_50: EnvHeap5); mem_6 = (var_4: (int64 ref)); mem_7 = (var_5: EnvHeap15)} : EnvHeap17)
        let (var_94: Env30) = method_46((var_5: EnvHeap15))
        let (var_95: EnvHeap15) = var_94.mem_0
        let (var_96: ManagedCuda.CudaEvent) = var_95.mem_0
        let (var_97: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
        var_96.Record(var_97)
        let (var_98: ManagedCuda.CudaStream) = var_95.mem_2
        var_98.WaitEvent var_96.Event
        let (var_99: Env30) = method_46((var_5: EnvHeap15))
        let (var_100: EnvHeap15) = var_99.mem_0
        let (var_101: ManagedCuda.CudaEvent) = var_100.mem_0
        let (var_102: ManagedCuda.BasicTypes.CUstream) = method_11((var_22: EnvHeap15))
        var_101.Record(var_102)
        let (var_103: ManagedCuda.CudaStream) = var_100.mem_2
        var_103.WaitEvent var_101.Event
        let (var_104: EnvStack34) = method_86((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_93: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_79: (int64 ref)), (var_80: (uint64 ref)), (var_81: (int64 ref)), (var_82: (uint64 ref)), (var_91: (int64 ref)), (var_92: (uint64 ref)))
        let (var_105: (int64 ref)) = var_104.mem_0
        let (var_106: (uint64 ref)) = var_104.mem_1
        let (var_107: (unit -> unit)) = var_104.mem_2
        let (var_108: (unit -> unit)) = method_116((var_31: (unit -> unit)), (var_71: (unit -> unit)), (var_83: (unit -> unit)), (var_107: (unit -> unit)))
        let (var_109: (unit -> float32)) = method_117((var_105: (int64 ref)), (var_106: (uint64 ref)), (var_30: (unit -> float32)), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule))
        let (var_110: int64) = (var_36 + 1L)
        method_132((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_25: int64), (var_26: float), (var_27: int64), (var_28: EnvHeap17), (var_29: EnvHeap17), (var_109: (unit -> float32)), (var_108: (unit -> unit)), (var_67: (int64 ref)), (var_68: (uint64 ref)), (var_69: (int64 ref)), (var_70: (uint64 ref)), (var_110: int64))
    else
        let (var_112: float32) = var_30()
        let (var_113: float) = (float var_112)
        let (var_114: float) = (var_26 + var_113)
        let (var_115: int64) = (var_25 + 1L)
        let (var_122: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_123: EnvStack10) = EnvStack10((var_122: ResizeArray<Env9>))
        let (var_124: ManagedCuda.CudaContext) = var_23.mem_0
        let (var_125: ManagedCuda.CudaBlas.CudaBlas) = var_23.mem_1
        let (var_126: ManagedCuda.CudaRand.CudaRandDevice) = var_23.mem_2
        let (var_127: EnvStack10) = var_23.mem_3
        let (var_128: EnvStack13) = var_23.mem_4
        let (var_129: EnvHeap5) = var_23.mem_5
        let (var_130: (int64 ref)) = var_23.mem_6
        let (var_131: EnvHeap15) = var_23.mem_7
        let (var_132: EnvHeap17) = ({mem_0 = (var_124: ManagedCuda.CudaContext); mem_1 = (var_125: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_126: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_123: EnvStack10); mem_4 = (var_128: EnvStack13); mem_5 = (var_129: EnvHeap5); mem_6 = (var_130: (int64 ref)); mem_7 = (var_131: EnvHeap15)} : EnvHeap17)
        let (var_133: EnvStack10) = var_132.mem_3
        method_18((var_34: (int64 ref)), (var_35: (uint64 ref)), (var_133: EnvStack10))
        if (System.Double.IsNaN var_114) then
            let (var_134: EnvStack10) = var_29.mem_3
            method_119((var_134: EnvStack10))
            method_119((var_127: EnvStack10))
            method_119((var_133: EnvStack10))
            let (var_135: float) = (float var_115)
            (var_114 / var_135)
        else
            var_31()
            method_121((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_23: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule))
            let (var_137: EnvStack10) = var_29.mem_3
            method_119((var_137: EnvStack10))
            method_119((var_127: EnvStack10))
            let (var_138: int64) = (var_27 + 1L)
            method_129((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_28: EnvHeap17), (var_24: ManagedCuda.BasicTypes.CUmodule), (var_115: int64), (var_114: float), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: EnvHeap15), (var_132: EnvHeap17), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_138: int64))
and method_138((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_139((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_149((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_5: EnvHeap17)): unit =
    // Cuda join point
    // method_150((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64))
    let (var_6: ManagedCuda.CudaContext) = var_5.mem_0
    let (var_7: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_150", var_4, var_6)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_7.set_GridDimensions(var_8)
    let (var_9: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_7.set_BlockDimensions(var_9)
    let (var_10: (int64 ref)) = var_5.mem_6
    let (var_11: EnvHeap15) = var_5.mem_7
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
    let (var_14: (System.Object [])) = [|var_0; var_1; var_2; var_3|]: (System.Object [])
    var_7.RunAsync(var_12, var_14)
and method_153((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17)): unit =
    // Cuda join point
    // method_154((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64))
    let (var_9: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_10: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_154", var_7, var_9)
    let (var_11: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_10.set_GridDimensions(var_11)
    let (var_12: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_10.set_BlockDimensions(var_12)
    let (var_13: (int64 ref)) = var_8.mem_6
    let (var_14: EnvHeap15) = var_8.mem_7
    let (var_15: ManagedCuda.BasicTypes.CUstream) = method_11((var_14: EnvHeap15))
    let (var_17: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6|]: (System.Object [])
    var_10.RunAsync(var_15, var_17)
and method_156((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 128, 1, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_163((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 1, 128, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_164((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_165((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_171((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_172((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_172", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_177((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_178((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_178", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_185((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_12: uint64) = method_5((var_5: (uint64 ref)))
    let (var_13: uint64) = method_5((var_7: (uint64 ref)))
    let (var_14: uint64) = method_5((var_9: (uint64 ref)))
    method_186((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_12: uint64), (var_13: uint64), (var_14: uint64), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap17))
and method_189((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: EnvHeap17), (var_19: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_20: uint64) = method_5((var_9: (uint64 ref)))
    let (var_21: uint64) = method_5((var_11: (uint64 ref)))
    let (var_22: uint64) = method_5((var_13: (uint64 ref)))
    let (var_23: uint64) = method_5((var_15: (uint64 ref)))
    let (var_24: uint64) = method_5((var_17: (uint64 ref)))
    method_190((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_20: uint64), (var_21: uint64), (var_22: uint64), (var_23: uint64), (var_24: uint64), (var_19: ManagedCuda.BasicTypes.CUmodule), (var_18: EnvHeap17))
and method_51((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_52((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_62((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_5: EnvHeap17)): unit =
    // Cuda join point
    // method_63((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64))
    let (var_6: ManagedCuda.CudaContext) = var_5.mem_0
    let (var_7: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_63", var_4, var_6)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_7.set_GridDimensions(var_8)
    let (var_9: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_7.set_BlockDimensions(var_9)
    let (var_10: (int64 ref)) = var_5.mem_6
    let (var_11: EnvHeap15) = var_5.mem_7
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
    let (var_14: (System.Object [])) = [|var_0; var_1; var_2; var_3|]: (System.Object [])
    var_7.RunAsync(var_12, var_14)
and method_68((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17)): unit =
    // Cuda join point
    // method_69((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64))
    let (var_9: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_10: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_69", var_7, var_9)
    let (var_11: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_10.set_GridDimensions(var_11)
    let (var_12: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_10.set_BlockDimensions(var_12)
    let (var_13: (int64 ref)) = var_8.mem_6
    let (var_14: EnvHeap15) = var_8.mem_7
    let (var_15: ManagedCuda.BasicTypes.CUstream) = method_11((var_14: EnvHeap15))
    let (var_17: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6|]: (System.Object [])
    var_10.RunAsync(var_15, var_17)
and method_71((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 128, 64, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_78((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 64, 128, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_79((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_80((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_89((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_90((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_90", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_99((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: uint64) = method_5((var_1: (uint64 ref)))
    let (var_9: uint64) = method_5((var_3: (uint64 ref)))
    let (var_10: uint64) = method_5((var_5: (uint64 ref)))
    method_100((var_8: uint64), (var_9: uint64), (var_10: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_6: EnvHeap17))
and method_108((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_12: uint64) = method_5((var_5: (uint64 ref)))
    let (var_13: uint64) = method_5((var_7: (uint64 ref)))
    let (var_14: uint64) = method_5((var_9: (uint64 ref)))
    method_109((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_12: uint64), (var_13: uint64), (var_14: uint64), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_10: EnvHeap17))
and method_112((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: EnvHeap17), (var_19: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_20: uint64) = method_5((var_9: (uint64 ref)))
    let (var_21: uint64) = method_5((var_11: (uint64 ref)))
    let (var_22: uint64) = method_5((var_13: (uint64 ref)))
    let (var_23: uint64) = method_5((var_15: (uint64 ref)))
    let (var_24: uint64) = method_5((var_17: (uint64 ref)))
    method_113((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_20: uint64), (var_21: uint64), (var_22: uint64), (var_23: uint64), (var_24: uint64), (var_19: ManagedCuda.BasicTypes.CUmodule), (var_18: EnvHeap17))
and method_115((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_78((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
    method_71((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
and method_123((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_124((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_124", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_126((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_127((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_127", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_131 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_40: (int64 ref)), (var_41: (uint64 ref)), (var_42: (int64 ref)), (var_43: EnvHeap15), (var_44: (int64 ref)), (var_45: EnvHeap15)) (): unit =
    let (var_46: uint64) = method_5((var_25: (uint64 ref)))
    let (var_47: uint64) = method_5((var_29: (uint64 ref)))
    let (var_48: uint64) = method_5((var_33: (uint64 ref)))
    let (var_49: uint64) = method_5((var_37: (uint64 ref)))
    let (var_50: uint64) = method_5((var_23: (uint64 ref)))
    let (var_51: uint64) = method_5((var_27: (uint64 ref)))
    let (var_52: uint64) = method_5((var_31: (uint64 ref)))
    let (var_53: uint64) = method_5((var_35: (uint64 ref)))
    method_112((var_46: uint64), (var_47: uint64), (var_48: uint64), (var_49: uint64), (var_50: uint64), (var_51: uint64), (var_52: uint64), (var_53: uint64), (var_38: (int64 ref)), (var_39: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_70((var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    method_70((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
    let (var_54: Env30) = method_46((var_45: EnvHeap15))
    let (var_55: EnvHeap15) = var_54.mem_0
    let (var_56: ManagedCuda.CudaEvent) = var_55.mem_0
    let (var_57: ManagedCuda.BasicTypes.CUstream) = method_11((var_43: EnvHeap15))
    var_56.Record(var_57)
    let (var_58: ManagedCuda.CudaStream) = var_55.mem_2
    var_58.WaitEvent var_56.Event
and method_139((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_140((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_140", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_165((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_166((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_166", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_186((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17)): unit =
    // Cuda join point
    // method_187((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64))
    let (var_9: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_10: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_187", var_7, var_9)
    let (var_11: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_10.set_GridDimensions(var_11)
    let (var_12: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_10.set_BlockDimensions(var_12)
    let (var_13: (int64 ref)) = var_8.mem_6
    let (var_14: EnvHeap15) = var_8.mem_7
    let (var_15: ManagedCuda.BasicTypes.CUstream) = method_11((var_14: EnvHeap15))
    let (var_17: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6|]: (System.Object [])
    var_10.RunAsync(var_15, var_17)
and method_190((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: EnvHeap17)): unit =
    // Cuda join point
    // method_191((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64))
    let (var_15: ManagedCuda.CudaContext) = var_14.mem_0
    let (var_16: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_191", var_13, var_15)
    let (var_17: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_16.set_GridDimensions(var_17)
    let (var_18: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_16.set_BlockDimensions(var_18)
    let (var_19: (int64 ref)) = var_14.mem_6
    let (var_20: EnvHeap15) = var_14.mem_7
    let (var_21: ManagedCuda.BasicTypes.CUstream) = method_11((var_20: EnvHeap15))
    let (var_23: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6; var_7; var_8; var_9; var_10; var_11; var_12|]: (System.Object [])
    var_16.RunAsync(var_21, var_23)
and method_52((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_53((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_53", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(8u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_80((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_81((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_81", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_100((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_101((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_101", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_109((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17)): unit =
    // Cuda join point
    // method_110((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64))
    let (var_9: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_10: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_110", var_7, var_9)
    let (var_11: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_10.set_GridDimensions(var_11)
    let (var_12: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_10.set_BlockDimensions(var_12)
    let (var_13: (int64 ref)) = var_8.mem_6
    let (var_14: EnvHeap15) = var_8.mem_7
    let (var_15: ManagedCuda.BasicTypes.CUstream) = method_11((var_14: EnvHeap15))
    let (var_17: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6|]: (System.Object [])
    var_10.RunAsync(var_15, var_17)
and method_113((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: EnvHeap17)): unit =
    // Cuda join point
    // method_114((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64))
    let (var_15: ManagedCuda.CudaContext) = var_14.mem_0
    let (var_16: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_114", var_13, var_15)
    let (var_17: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_16.set_GridDimensions(var_17)
    let (var_18: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_16.set_BlockDimensions(var_18)
    let (var_19: (int64 ref)) = var_14.mem_6
    let (var_20: EnvHeap15) = var_14.mem_7
    let (var_21: ManagedCuda.BasicTypes.CUstream) = method_11((var_20: EnvHeap15))
    let (var_23: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6; var_7; var_8; var_9; var_10; var_11; var_12|]: (System.Object [])
    var_16.RunAsync(var_21, var_23)
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1073741824UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_41: ResizeArray<Env1>) = ResizeArray<Env1>()
let (var_42: EnvStack2) = EnvStack2((var_41: ResizeArray<Env1>))
let (var_43: ResizeArray<Env3>) = ResizeArray<Env3>()
let (var_44: EnvStack4) = EnvStack4((var_43: ResizeArray<Env3>))
let (var_45: EnvHeap5) = ({mem_0 = (var_42: EnvStack2); mem_1 = (var_40: (uint64 ref)); mem_2 = (var_35: uint64); mem_3 = (var_44: EnvStack4)} : EnvHeap5)
let (var_46: EnvHeap6) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_45: EnvHeap5)} : EnvHeap6)
method_1((var_46: EnvHeap6), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_47: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_48: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_47)
let (var_49: ManagedCuda.CudaContext) = var_46.mem_0
let (var_50: EnvHeap5) = var_46.mem_1
let (var_51: EnvHeap7) = ({mem_0 = (var_49: ManagedCuda.CudaContext); mem_1 = (var_48: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_50: EnvHeap5)} : EnvHeap7)
let (var_52: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_53: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_54: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_52, var_53)
let (var_55: ManagedCuda.CudaContext) = var_51.mem_0
let (var_56: ManagedCuda.CudaRand.CudaRandDevice) = var_51.mem_1
let (var_57: EnvHeap5) = var_51.mem_2
let (var_58: EnvHeap8) = ({mem_0 = (var_55: ManagedCuda.CudaContext); mem_1 = (var_54: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_56: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_57: EnvHeap5)} : EnvHeap8)
let (var_65: ResizeArray<Env9>) = ResizeArray<Env9>()
let (var_66: EnvStack10) = EnvStack10((var_65: ResizeArray<Env9>))
let (var_67: ManagedCuda.CudaContext) = var_58.mem_0
let (var_68: ManagedCuda.CudaBlas.CudaBlas) = var_58.mem_1
let (var_69: ManagedCuda.CudaRand.CudaRandDevice) = var_58.mem_2
let (var_70: EnvHeap5) = var_58.mem_3
let (var_71: EnvHeap11) = ({mem_0 = (var_67: ManagedCuda.CudaContext); mem_1 = (var_68: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_69: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_66: EnvStack10); mem_4 = (var_70: EnvHeap5)} : EnvHeap11)
let (var_83: ResizeArray<Env12>) = ResizeArray<Env12>()
let (var_84: EnvStack13) = EnvStack13((var_83: ResizeArray<Env12>))
let (var_85: ManagedCuda.CudaContext) = var_71.mem_0
let (var_86: ManagedCuda.CudaBlas.CudaBlas) = var_71.mem_1
let (var_87: ManagedCuda.CudaRand.CudaRandDevice) = var_71.mem_2
let (var_88: EnvStack10) = var_71.mem_3
let (var_89: EnvHeap5) = var_71.mem_4
let (var_90: EnvHeap14) = ({mem_0 = (var_85: ManagedCuda.CudaContext); mem_1 = (var_86: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_87: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_88: EnvStack10); mem_4 = (var_84: EnvStack13); mem_5 = (var_89: EnvHeap5)} : EnvHeap14)
let (var_91: (bool ref)) = (ref true)
let (var_92: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_93: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_94: EnvHeap15) = ({mem_0 = (var_93: ManagedCuda.CudaEvent); mem_1 = (var_91: (bool ref)); mem_2 = (var_92: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_95: Env12) = method_7((var_94: EnvHeap15), (var_90: EnvHeap14), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_96: (int64 ref)) = var_95.mem_0
let (var_97: Env16) = var_95.mem_1
let (var_98: EnvHeap15) = var_97.mem_0
let (var_99: ManagedCuda.CudaContext) = var_90.mem_0
let (var_100: ManagedCuda.CudaBlas.CudaBlas) = var_90.mem_1
let (var_101: ManagedCuda.CudaRand.CudaRandDevice) = var_90.mem_2
let (var_102: EnvStack10) = var_90.mem_3
let (var_103: EnvStack13) = var_90.mem_4
let (var_104: EnvHeap5) = var_90.mem_5
let (var_105: EnvHeap17) = ({mem_0 = (var_99: ManagedCuda.CudaContext); mem_1 = (var_100: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_101: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_102: EnvStack10); mem_4 = (var_103: EnvStack13); mem_5 = (var_104: EnvHeap5); mem_6 = (var_96: (int64 ref)); mem_7 = (var_98: EnvHeap15)} : EnvHeap17)
let (var_107: (char [])) = System.IO.File.ReadAllText("C:\\ML Datasets\\TinyShakespeare\\tiny_shakespeare.txt").ToCharArray()
let (var_108: int64) = var_107.LongLength
let (var_109: bool) = (var_108 >= 0L)
let (var_110: bool) = (var_109 = false)
if var_110 then
    (failwith "The input to init needs to be greater or equal to 0.")
else
    ()
let (var_115: (uint8 [])) = Array.zeroCreate<uint8> (System.Convert.ToInt32(var_108))
let (var_116: int64) = 0L
method_9((var_115: (uint8 [])), (var_107: (char [])), (var_108: int64), (var_116: int64))
let (var_117: int64) = var_115.LongLength
let (var_118: bool) = (var_117 > 0L)
let (var_119: bool) = (var_118 = false)
if var_119 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_120: bool) = (var_117 = 1115394L)
let (var_121: bool) = (var_120 = false)
if var_121 then
    (failwith "The dimensions must match.")
else
    ()
let (var_122: int64) = 1115394L
let (var_123: int64) = 0L
let (var_124: int64) = 1L
let (var_125: Env18) = method_10((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_122: int64), (var_115: (uint8 [])), (var_123: int64), (var_124: int64))
let (var_126: Env9) = var_125.mem_0
let (var_127: (int64 ref)) = var_126.mem_0
let (var_128: Env19) = var_126.mem_1
let (var_129: (uint64 ref)) = var_128.mem_0
let (var_130: uint64) = method_5((var_129: (uint64 ref)))
let (var_131: EnvStack20) = method_19((var_130: uint64), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_132: (int64 ref)) = var_131.mem_0
let (var_133: (uint64 ref)) = var_131.mem_1
let (var_134: (bool ref)) = (ref true)
let (var_135: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_136: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_137: EnvHeap15) = ({mem_0 = (var_136: ManagedCuda.CudaEvent); mem_1 = (var_134: (bool ref)); mem_2 = (var_135: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_138: Env12) = method_26((var_137: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_139: (int64 ref)) = var_138.mem_0
let (var_140: Env16) = var_138.mem_1
let (var_141: EnvHeap15) = var_140.mem_0
let (var_142: ManagedCuda.CudaContext) = var_105.mem_0
let (var_143: ManagedCuda.CudaBlas.CudaBlas) = var_105.mem_1
let (var_144: ManagedCuda.CudaRand.CudaRandDevice) = var_105.mem_2
let (var_145: EnvStack10) = var_105.mem_3
let (var_146: EnvStack13) = var_105.mem_4
let (var_147: EnvHeap5) = var_105.mem_5
let (var_148: (int64 ref)) = var_105.mem_6
let (var_149: EnvHeap15) = var_105.mem_7
let (var_150: EnvHeap17) = ({mem_0 = (var_142: ManagedCuda.CudaContext); mem_1 = (var_143: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_144: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_145: EnvStack10); mem_4 = (var_146: EnvStack13); mem_5 = (var_147: EnvHeap5); mem_6 = (var_139: (int64 ref)); mem_7 = (var_141: EnvHeap15)} : EnvHeap17)
let (var_151: (int64 ref)) = var_150.mem_6
let (var_152: EnvHeap15) = var_150.mem_7
let (var_153: EnvStack21) = method_27((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_154: (int64 ref)) = var_153.mem_0
let (var_155: (uint64 ref)) = var_153.mem_1
let (var_156: EnvStack21) = method_30((var_154: (int64 ref)), (var_155: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_157: (int64 ref)) = var_156.mem_0
let (var_158: (uint64 ref)) = var_156.mem_1
let (var_159: EnvStack21) = method_27((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_160: (int64 ref)) = var_159.mem_0
let (var_161: (uint64 ref)) = var_159.mem_1
let (var_162: EnvStack21) = method_30((var_160: (int64 ref)), (var_161: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_163: (int64 ref)) = var_162.mem_0
let (var_164: (uint64 ref)) = var_162.mem_1
let (var_165: Env9) = method_32((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_166: (int64 ref)) = var_165.mem_0
let (var_167: Env19) = var_165.mem_1
let (var_168: (uint64 ref)) = var_167.mem_0
method_33((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_166: (int64 ref)), (var_168: (uint64 ref)))
let (var_169: EnvStack22) = method_38((var_166: (int64 ref)), (var_168: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_170: (int64 ref)) = var_169.mem_0
let (var_171: (uint64 ref)) = var_169.mem_1
let (var_172: Env9) = method_32((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_173: (int64 ref)) = var_172.mem_0
let (var_174: Env19) = var_172.mem_1
let (var_175: (uint64 ref)) = var_174.mem_0
method_40((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_173: (int64 ref)), (var_175: (uint64 ref)))
let (var_176: EnvStack22) = method_38((var_173: (int64 ref)), (var_175: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_177: (int64 ref)) = var_176.mem_0
let (var_178: (uint64 ref)) = var_176.mem_1
let (var_179: Env9) = method_32((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_180: (int64 ref)) = var_179.mem_0
let (var_181: Env19) = var_179.mem_1
let (var_182: (uint64 ref)) = var_181.mem_0
method_40((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_180: (int64 ref)), (var_182: (uint64 ref)))
let (var_183: EnvStack22) = method_38((var_180: (int64 ref)), (var_182: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_184: (int64 ref)) = var_183.mem_0
let (var_185: (uint64 ref)) = var_183.mem_1
let (var_186: EnvStack22) = method_41((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_187: (int64 ref)) = var_186.mem_0
let (var_188: (uint64 ref)) = var_186.mem_1
let (var_189: EnvStack22) = method_38((var_187: (int64 ref)), (var_188: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_190: (int64 ref)) = var_189.mem_0
let (var_191: (uint64 ref)) = var_189.mem_1
let (var_192: EnvHeap23) = ({mem_0 = (var_170: (int64 ref)); mem_1 = (var_171: (uint64 ref)); mem_2 = (var_166: (int64 ref)); mem_3 = (var_168: (uint64 ref)); mem_4 = (var_177: (int64 ref)); mem_5 = (var_178: (uint64 ref)); mem_6 = (var_173: (int64 ref)); mem_7 = (var_175: (uint64 ref)); mem_8 = (var_184: (int64 ref)); mem_9 = (var_185: (uint64 ref)); mem_10 = (var_180: (int64 ref)); mem_11 = (var_182: (uint64 ref)); mem_12 = (var_190: (int64 ref)); mem_13 = (var_191: (uint64 ref)); mem_14 = (var_187: (int64 ref)); mem_15 = (var_188: (uint64 ref)); mem_16 = (var_157: (int64 ref)); mem_17 = (var_158: (uint64 ref)); mem_18 = (var_154: (int64 ref)); mem_19 = (var_155: (uint64 ref)); mem_20 = (var_163: (int64 ref)); mem_21 = (var_164: (uint64 ref)); mem_22 = (var_160: (int64 ref)); mem_23 = (var_161: (uint64 ref))} : EnvHeap23)
let (var_193: (bool ref)) = (ref true)
let (var_194: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_195: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_196: EnvHeap15) = ({mem_0 = (var_195: ManagedCuda.CudaEvent); mem_1 = (var_193: (bool ref)); mem_2 = (var_194: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_197: Env12) = method_26((var_196: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_198: (int64 ref)) = var_197.mem_0
let (var_199: Env16) = var_197.mem_1
let (var_200: EnvHeap15) = var_199.mem_0
let (var_201: EnvHeap17) = ({mem_0 = (var_142: ManagedCuda.CudaContext); mem_1 = (var_143: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_144: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_145: EnvStack10); mem_4 = (var_146: EnvStack13); mem_5 = (var_147: EnvHeap5); mem_6 = (var_198: (int64 ref)); mem_7 = (var_200: EnvHeap15)} : EnvHeap17)
let (var_202: (int64 ref)) = var_201.mem_6
let (var_203: EnvHeap15) = var_201.mem_7
let (var_204: EnvStack21) = method_42((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_205: (int64 ref)) = var_204.mem_0
let (var_206: (uint64 ref)) = var_204.mem_1
let (var_207: EnvStack21) = method_30((var_205: (int64 ref)), (var_206: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_208: (int64 ref)) = var_207.mem_0
let (var_209: (uint64 ref)) = var_207.mem_1
let (var_210: EnvStack22) = method_41((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_211: (int64 ref)) = var_210.mem_0
let (var_212: (uint64 ref)) = var_210.mem_1
let (var_213: EnvStack22) = method_38((var_211: (int64 ref)), (var_212: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_214: (int64 ref)) = var_213.mem_0
let (var_215: (uint64 ref)) = var_213.mem_1
let (var_216: (bool ref)) = (ref true)
let (var_217: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_218: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_219: EnvHeap15) = ({mem_0 = (var_218: ManagedCuda.CudaEvent); mem_1 = (var_216: (bool ref)); mem_2 = (var_217: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_220: Env12) = method_26((var_219: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_221: (int64 ref)) = var_220.mem_0
let (var_222: Env16) = var_220.mem_1
let (var_223: EnvHeap15) = var_222.mem_0
let (var_224: EnvHeap17) = ({mem_0 = (var_142: ManagedCuda.CudaContext); mem_1 = (var_143: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_144: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_145: EnvStack10); mem_4 = (var_146: EnvStack13); mem_5 = (var_147: EnvHeap5); mem_6 = (var_221: (int64 ref)); mem_7 = (var_223: EnvHeap15)} : EnvHeap17)
let (var_225: (int64 ref)) = var_224.mem_6
let (var_226: EnvHeap15) = var_224.mem_7
let (var_227: (bool ref)) = (ref true)
let (var_228: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_229: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_230: EnvHeap15) = ({mem_0 = (var_229: ManagedCuda.CudaEvent); mem_1 = (var_227: (bool ref)); mem_2 = (var_228: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_231: Env12) = method_26((var_230: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_232: (int64 ref)) = var_231.mem_0
let (var_233: Env16) = var_231.mem_1
let (var_234: EnvHeap15) = var_233.mem_0
let (var_235: EnvHeap17) = ({mem_0 = (var_142: ManagedCuda.CudaContext); mem_1 = (var_143: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_144: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_145: EnvStack10); mem_4 = (var_146: EnvStack13); mem_5 = (var_147: EnvHeap5); mem_6 = (var_232: (int64 ref)); mem_7 = (var_234: EnvHeap15)} : EnvHeap17)
let (var_236: (int64 ref)) = var_235.mem_6
let (var_237: EnvHeap15) = var_235.mem_7
let (var_238: (bool ref)) = (ref true)
let (var_239: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_240: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_241: EnvHeap15) = ({mem_0 = (var_240: ManagedCuda.CudaEvent); mem_1 = (var_238: (bool ref)); mem_2 = (var_239: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_242: Env12) = method_26((var_241: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_243: (int64 ref)) = var_242.mem_0
let (var_244: Env16) = var_242.mem_1
let (var_245: EnvHeap15) = var_244.mem_0
let (var_246: EnvHeap17) = ({mem_0 = (var_142: ManagedCuda.CudaContext); mem_1 = (var_143: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_144: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_145: EnvStack10); mem_4 = (var_146: EnvStack13); mem_5 = (var_147: EnvHeap5); mem_6 = (var_243: (int64 ref)); mem_7 = (var_245: EnvHeap15)} : EnvHeap17)
let (var_247: (int64 ref)) = var_246.mem_6
let (var_248: EnvHeap15) = var_246.mem_7
System.Console.WriteLine("Starting timing for: whole loop")
let (var_249: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_250: int64) = 0L
method_44((var_132: (int64 ref)), (var_133: (uint64 ref)), (var_225: (int64 ref)), (var_226: EnvHeap15), (var_202: (int64 ref)), (var_203: EnvHeap15), (var_151: (int64 ref)), (var_152: EnvHeap15), (var_192: EnvHeap23), (var_214: (int64 ref)), (var_215: (uint64 ref)), (var_211: (int64 ref)), (var_212: (uint64 ref)), (var_208: (int64 ref)), (var_209: (uint64 ref)), (var_205: (int64 ref)), (var_206: (uint64 ref)), (var_247: (int64 ref)), (var_248: EnvHeap15), (var_236: (int64 ref)), (var_237: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_250: int64))
let (var_251: System.TimeSpan) = var_249.Elapsed
let (var_252: string) = System.String.Format("The time was {0} for: {1}",var_251,"whole loop")
System.Console.WriteLine(var_252)
method_196((var_103: EnvStack13))
method_119((var_88: EnvStack10))
var_54.Dispose()
var_48.Dispose()
let (var_253: uint64) = method_5((var_40: (uint64 ref)))
let (var_254: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_253)
let (var_255: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_254)
var_49.FreeMemory(var_255)
var_40 := 0UL
var_1.Dispose()

