module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    __global__ void method_8(long long int * var_0, long long int * var_1);
    __global__ void method_13(long long int * var_0, long long int * var_1, long long int * var_2);
    __device__ char method_9(long long int * var_0);
    __device__ char method_10(long long int * var_0, long long int * var_1);
    __device__ char method_11(long long int * var_0, long long int * var_1);
    __device__ char method_12(long long int var_0, long long int * var_1, long long int * var_2);
    
    __global__ void method_8(long long int * var_0, long long int * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (10 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_9(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 + 10);
            char var_10 = (var_8 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_8 < 10);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            char var_15;
            if (var_10) {
                var_15 = (var_8 < 10);
            } else {
                var_15 = 0;
            }
            char var_16 = (var_15 == 0);
            if (var_16) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_17 = threadIdx.y;
            long long int var_18 = blockIdx.y;
            long long int var_19 = (32 * var_18);
            long long int var_20 = (var_17 + var_19);
            long long int var_21 = 0;
            long long int var_22[1];
            long long int var_23[1];
            var_22[0] = var_20;
            var_23[0] = var_21;
            while (method_10(var_22, var_23)) {
                long long int var_25 = var_22[0];
                long long int var_26 = var_23[0];
                long long int var_27 = (var_25 + 32);
                char var_28 = (var_25 >= 0);
                char var_30;
                if (var_28) {
                    var_30 = (var_25 < 128);
                } else {
                    var_30 = 0;
                }
                char var_31 = (var_30 == 0);
                if (var_31) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_32 = (var_25 * 10);
                char var_34;
                if (var_10) {
                    var_34 = (var_8 < 10);
                } else {
                    var_34 = 0;
                }
                char var_35 = (var_34 == 0);
                if (var_35) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_36 = (var_32 + var_8);
                long long int var_37 = var_0[var_36];
                long long int var_38 = (var_37 + 1);
                long long int var_39 = (var_26 + var_38);
                var_22[0] = var_27;
                var_23[0] = var_39;
            }
            long long int var_40 = var_22[0];
            long long int var_41 = var_23[0];
            __shared__ long long int var_42[1023];
            long long int var_43[1];
            long long int var_44[1];
            var_43[0] = 32;
            var_44[0] = var_41;
            while (method_11(var_43, var_44)) {
                long long int var_46 = var_43[0];
                long long int var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                long long int var_49 = threadIdx.y;
                char var_50 = (var_49 < var_46);
                char var_53;
                if (var_50) {
                    long long int var_51 = threadIdx.y;
                    var_53 = (var_51 >= var_48);
                } else {
                    var_53 = 0;
                }
                if (var_53) {
                    long long int var_54 = threadIdx.y;
                    long long int var_55 = (var_54 - 1);
                    char var_56 = (var_55 >= 0);
                    char var_58;
                    if (var_56) {
                        var_58 = (var_55 < 31);
                    } else {
                        var_58 = 0;
                    }
                    char var_59 = (var_58 == 0);
                    if (var_59) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_60 = (var_55 * 33);
                    long long int var_61 = threadIdx.x;
                    char var_62 = (var_61 >= 0);
                    char var_64;
                    if (var_62) {
                        var_64 = (var_61 < 33);
                    } else {
                        var_64 = 0;
                    }
                    char var_65 = (var_64 == 0);
                    if (var_65) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_66 = (var_60 + var_61);
                    var_42[var_66] = var_47;
                } else {
                }
                __syncthreads();
                long long int var_67 = threadIdx.y;
                char var_68 = (var_67 < var_48);
                long long int var_93;
                if (var_68) {
                    long long int var_69 = threadIdx.y;
                    long long int var_70 = (var_69 + var_48);
                    long long int var_71[1];
                    long long int var_72[1];
                    var_71[0] = var_70;
                    var_72[0] = var_47;
                    while (method_12(var_46, var_71, var_72)) {
                        long long int var_74 = var_71[0];
                        long long int var_75 = var_72[0];
                        long long int var_76 = (var_74 + var_48);
                        long long int var_77 = (var_74 - 1);
                        char var_78 = (var_77 >= 0);
                        char var_80;
                        if (var_78) {
                            var_80 = (var_77 < 31);
                        } else {
                            var_80 = 0;
                        }
                        char var_81 = (var_80 == 0);
                        if (var_81) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_82 = (var_77 * 33);
                        long long int var_83 = threadIdx.x;
                        char var_84 = (var_83 >= 0);
                        char var_86;
                        if (var_84) {
                            var_86 = (var_83 < 33);
                        } else {
                            var_86 = 0;
                        }
                        char var_87 = (var_86 == 0);
                        if (var_87) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_88 = (var_82 + var_83);
                        long long int var_89 = var_42[var_88];
                        long long int var_90 = (var_75 + var_89);
                        var_71[0] = var_76;
                        var_72[0] = var_90;
                    }
                    long long int var_91 = var_71[0];
                    var_93 = var_72[0];
                } else {
                    var_93 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_93;
            }
            long long int var_94 = var_43[0];
            long long int var_95 = var_44[0];
            long long int var_96 = threadIdx.y;
            char var_97 = (var_96 == 0);
            if (var_97) {
                long long int var_98 = var_1[var_8];
                long long int var_99 = (var_95 / 2);
                var_1[var_8] = var_99;
            } else {
            }
            var_6[0] = var_9;
        }
        long long int var_100 = var_6[0];
    }
    __global__ void method_13(long long int * var_0, long long int * var_1, long long int * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (10 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_9(var_7)) {
            long long int var_9 = var_7[0];
            long long int var_10 = (var_9 + 10);
            char var_11 = (var_9 >= 0);
            char var_13;
            if (var_11) {
                var_13 = (var_9 < 10);
            } else {
                var_13 = 0;
            }
            char var_14 = (var_13 == 0);
            if (var_14) {
                // "Argument out of bounds."
            } else {
            }
            char var_16;
            if (var_11) {
                var_16 = (var_9 < 10);
            } else {
                var_16 = 0;
            }
            char var_17 = (var_16 == 0);
            if (var_17) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_18 = threadIdx.y;
            long long int var_19 = blockIdx.y;
            long long int var_20 = (32 * var_19);
            long long int var_21 = (var_18 + var_20);
            long long int var_22 = 0;
            long long int var_23[1];
            long long int var_24[1];
            var_23[0] = var_21;
            var_24[0] = var_22;
            while (method_10(var_23, var_24)) {
                long long int var_26 = var_23[0];
                long long int var_27 = var_24[0];
                long long int var_28 = (var_26 + 32);
                char var_29 = (var_26 >= 0);
                char var_31;
                if (var_29) {
                    var_31 = (var_26 < 128);
                } else {
                    var_31 = 0;
                }
                char var_32 = (var_31 == 0);
                if (var_32) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_33 = (var_26 * 10);
                char var_35;
                if (var_11) {
                    var_35 = (var_9 < 10);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_37 = (var_33 + var_9);
                long long int var_38 = var_0[var_37];
                long long int var_39 = var_1[var_9];
                long long int var_40 = (var_38 + var_39);
                long long int var_41 = (var_27 + var_40);
                var_23[0] = var_28;
                var_24[0] = var_41;
            }
            long long int var_42 = var_23[0];
            long long int var_43 = var_24[0];
            __shared__ long long int var_44[1023];
            long long int var_45[1];
            long long int var_46[1];
            var_45[0] = 32;
            var_46[0] = var_43;
            while (method_11(var_45, var_46)) {
                long long int var_48 = var_45[0];
                long long int var_49 = var_46[0];
                long long int var_50 = (var_48 / 2);
                long long int var_51 = threadIdx.y;
                char var_52 = (var_51 < var_48);
                char var_55;
                if (var_52) {
                    long long int var_53 = threadIdx.y;
                    var_55 = (var_53 >= var_50);
                } else {
                    var_55 = 0;
                }
                if (var_55) {
                    long long int var_56 = threadIdx.y;
                    long long int var_57 = (var_56 - 1);
                    char var_58 = (var_57 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_57 < 31);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 * 33);
                    long long int var_63 = threadIdx.x;
                    char var_64 = (var_63 >= 0);
                    char var_66;
                    if (var_64) {
                        var_66 = (var_63 < 33);
                    } else {
                        var_66 = 0;
                    }
                    char var_67 = (var_66 == 0);
                    if (var_67) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_68 = (var_62 + var_63);
                    var_44[var_68] = var_49;
                } else {
                }
                __syncthreads();
                long long int var_69 = threadIdx.y;
                char var_70 = (var_69 < var_50);
                long long int var_95;
                if (var_70) {
                    long long int var_71 = threadIdx.y;
                    long long int var_72 = (var_71 + var_50);
                    long long int var_73[1];
                    long long int var_74[1];
                    var_73[0] = var_72;
                    var_74[0] = var_49;
                    while (method_12(var_48, var_73, var_74)) {
                        long long int var_76 = var_73[0];
                        long long int var_77 = var_74[0];
                        long long int var_78 = (var_76 + var_50);
                        long long int var_79 = (var_76 - 1);
                        char var_80 = (var_79 >= 0);
                        char var_82;
                        if (var_80) {
                            var_82 = (var_79 < 31);
                        } else {
                            var_82 = 0;
                        }
                        char var_83 = (var_82 == 0);
                        if (var_83) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_84 = (var_79 * 33);
                        long long int var_85 = threadIdx.x;
                        char var_86 = (var_85 >= 0);
                        char var_88;
                        if (var_86) {
                            var_88 = (var_85 < 33);
                        } else {
                            var_88 = 0;
                        }
                        char var_89 = (var_88 == 0);
                        if (var_89) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_90 = (var_84 + var_85);
                        long long int var_91 = var_44[var_90];
                        long long int var_92 = (var_77 + var_91);
                        var_73[0] = var_78;
                        var_74[0] = var_92;
                    }
                    long long int var_93 = var_73[0];
                    var_95 = var_74[0];
                } else {
                    var_95 = var_49;
                }
                var_45[0] = var_50;
                var_46[0] = var_95;
            }
            long long int var_96 = var_45[0];
            long long int var_97 = var_46[0];
            long long int var_98 = threadIdx.y;
            char var_99 = (var_98 == 0);
            if (var_99) {
                long long int var_100 = var_2[var_9];
                long long int var_101 = (var_97 / 2);
                var_2[var_9] = var_101;
            } else {
            }
            var_7[0] = var_10;
        }
        long long int var_102 = var_7[0];
    }
    __device__ char method_9(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 10);
    }
    __device__ char method_10(long long int * var_0, long long int * var_1) {
        long long int var_2 = var_0[0];
        long long int var_3 = var_1[0];
        return (var_2 < 128);
    }
    __device__ char method_11(long long int * var_0, long long int * var_1) {
        long long int var_2 = var_0[0];
        long long int var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_12(long long int var_0, long long int * var_1, long long int * var_2) {
        long long int var_3 = var_1[0];
        long long int var_4 = var_2[0];
        return (var_3 < var_0);
    }
}
"""

type Union0 =
    | Union0Case0 of Tuple1
    | Union0Case1
and Tuple1 =
    struct
    val mem_0: ManagedCuda.BasicTypes.CUdeviceptr
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack2 =
    struct
    val mem_0: (Union0 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: EnvStack2
    val mem_1: int64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    let (var_2: string) = System.String.Format("{0}",var_1)
    System.Console.WriteLine(var_2)
and method_1((var_0: (Union0 ref))): ManagedCuda.BasicTypes.CUdeviceptr =
    let (var_1: Union0) = (!var_0)
    match var_1 with
    | Union0Case0(var_2) ->
        var_2.mem_0
    | Union0Case1 ->
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
and method_2((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 128L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 0L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_5: int64) = (var_1 * 10L)
        let (var_6: int64) = 0L
        method_3((var_0: (int64 [])), (var_5: int64), (var_6: int64))
        let (var_7: int64) = (var_1 + 1L)
        method_2((var_0: (int64 [])), (var_7: int64))
    else
        ()
and method_4((var_0: (int64 [])), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 10L)
    if var_2 then
        let (var_3: bool) = (var_1 >= 0L)
        let (var_4: bool) = (var_3 = false)
        if var_4 then
            (failwith "Argument out of bounds.")
        else
            ()
        var_0.[int32 var_1] <- 10L
        let (var_5: int64) = (var_1 + 1L)
        method_4((var_0: (int64 [])), (var_5: int64))
    else
        ()
and method_5((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64)): EnvStack2 =
    let (var_4: int32) = var_1.get_Count()
    let (var_5: bool) = (var_4 > 0)
    if var_5 then
        let (var_6: Env3) = var_1.Peek()
        let (var_7: EnvStack2) = var_6.mem_0
        let (var_8: int64) = var_6.mem_1
        let (var_9: (Union0 ref)) = var_7.mem_0
        let (var_10: Union0) = (!var_9)
        match var_10 with
        | Union0Case0(var_11) ->
            let (var_12: ManagedCuda.BasicTypes.CUdeviceptr) = var_11.mem_0
            method_6((var_12: ManagedCuda.BasicTypes.CUdeviceptr), (var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>), (var_7: EnvStack2), (var_8: int64))
        | Union0Case1 ->
            let (var_14: Env3) = var_1.Pop()
            let (var_15: EnvStack2) = var_14.mem_0
            let (var_16: int64) = var_14.mem_1
            method_5((var_0: uint64), (var_1: System.Collections.Generic.Stack<Env3>), (var_2: uint64), (var_3: int64))
    else
        method_7((var_0: uint64), (var_2: uint64), (var_3: int64), (var_1: System.Collections.Generic.Stack<Env3>))
and method_14((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64)): unit =
    let (var_12: int64) = (var_10 * var_11)
    let (var_13: bool) = (0L = var_7)
    let (var_14: bool) = (var_13 = false)
    if var_14 then
        (failwith "The inner dimensions much have offsets of 0. They must not be 'view'ed. Consider reshaping a copy of the tensor instead")
    else
        ()
    let (var_15: int64) = (var_11 * var_9)
    let (var_16: int64) = (var_10 * var_15)
    let (var_17: bool) = (var_6 = 0L)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_19: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_12))
    let (var_20: (Union0 ref)) = var_5.mem_0
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_20: (Union0 ref)))
    var_0.CopyToHost(var_19, var_21)
    let (var_22: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_23: string) = ""
    let (var_24: int64) = 0L
    method_15((var_22: System.Text.StringBuilder), (var_24: int64))
    let (var_25: System.Text.StringBuilder) = var_22.AppendLine("[|")
    let (var_26: int64) = 0L
    method_16((var_22: System.Text.StringBuilder), (var_23: string), (var_19: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64), (var_10: int64), (var_11: int64), (var_26: int64))
    let (var_27: int64) = 0L
    method_15((var_22: System.Text.StringBuilder), (var_27: int64))
    let (var_28: System.Text.StringBuilder) = var_22.AppendLine("|]")
    let (var_29: string) = var_22.ToString()
    let (var_30: string) = System.String.Format("{0}",var_29)
    System.Console.WriteLine(var_30)
and method_19((var_0: ManagedCuda.CudaContext), (var_1: ManagedCuda.CudaStream), (var_2: uint64), (var_3: uint64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64), (var_7: int64), (var_8: int64)): unit =
    let (var_9: int64) = (var_8 * var_7)
    let (var_10: bool) = (var_6 = 0L)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Only unviewed arrays are allowed for now.")
    else
        ()
    let (var_12: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(var_8))
    let (var_13: (Union0 ref)) = var_5.mem_0
    let (var_14: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_13: (Union0 ref)))
    var_0.CopyToHost(var_12, var_14)
    let (var_15: System.Text.StringBuilder) = System.Text.StringBuilder()
    let (var_16: string) = ""
    let (var_17: int64) = 0L
    method_15((var_15: System.Text.StringBuilder), (var_17: int64))
    let (var_18: System.Text.StringBuilder) = var_15.Append("[|")
    let (var_19: int64) = 0L
    let (var_20: string) = method_18((var_15: System.Text.StringBuilder), (var_12: (int64 [])), (var_6: int64), (var_7: int64), (var_8: int64), (var_16: string), (var_19: int64))
    let (var_21: System.Text.StringBuilder) = var_15.AppendLine("|]")
    let (var_22: string) = var_15.ToString()
    let (var_23: string) = System.String.Format("{0}",var_22)
    System.Console.WriteLine(var_23)
and method_3((var_0: (int64 [])), (var_1: int64), (var_2: int64)): unit =
    let (var_3: bool) = (var_2 < 10L)
    if var_3 then
        let (var_4: bool) = (var_2 >= 0L)
        let (var_5: bool) = (var_4 = false)
        if var_5 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_6: int64) = (var_1 + var_2)
        var_0.[int32 var_6] <- var_2
        let (var_7: int64) = (var_2 + 1L)
        method_3((var_0: (int64 [])), (var_1: int64), (var_7: int64))
    else
        ()
and method_6((var_0: ManagedCuda.BasicTypes.CUdeviceptr), (var_1: uint64), (var_2: uint64), (var_3: int64), (var_4: System.Collections.Generic.Stack<Env3>), (var_5: EnvStack2), (var_6: int64)): EnvStack2 =
    let (var_7: ManagedCuda.BasicTypes.SizeT) = var_0.Pointer
    let (var_8: uint64) = uint64 var_7
    let (var_9: uint64) = uint64 var_6
    let (var_10: int64) = (var_3 % 256L)
    let (var_11: int64) = (var_3 - var_10)
    let (var_12: int64) = (var_11 + 256L)
    let (var_13: uint64) = (var_8 + var_9)
    let (var_14: uint64) = (var_1 + var_2)
    let (var_15: uint64) = uint64 var_12
    let (var_16: uint64) = (var_14 - var_13)
    let (var_17: bool) = (var_15 <= var_16)
    let (var_18: bool) = (var_17 = false)
    if var_18 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_19: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_13)
    let (var_20: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_19)
    let (var_21: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_20))))
    let (var_22: EnvStack2) = EnvStack2((var_21: (Union0 ref)))
    var_4.Push((Env3(var_22, var_12)))
    var_22
and method_7((var_0: uint64), (var_1: uint64), (var_2: int64), (var_3: System.Collections.Generic.Stack<Env3>)): EnvStack2 =
    let (var_4: int64) = (var_2 % 256L)
    let (var_5: int64) = (var_2 - var_4)
    let (var_6: int64) = (var_5 + 256L)
    let (var_7: uint64) = (var_0 + var_1)
    let (var_8: uint64) = uint64 var_6
    let (var_9: uint64) = (var_7 - var_0)
    let (var_10: bool) = (var_8 <= var_9)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Cache size has been exceeded in the allocator.")
    else
        ()
    let (var_12: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_0)
    let (var_13: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_12)
    let (var_14: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_13))))
    let (var_15: EnvStack2) = EnvStack2((var_14: (Union0 ref)))
    var_3.Push((Env3(var_15, var_6)))
    var_15
and method_15((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 0L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_15((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
and method_16((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_9: int64)): unit =
    let (var_10: bool) = (var_9 < var_7)
    if var_10 then
        let (var_11: bool) = (var_9 >= 0L)
        let (var_12: bool) = (var_11 = false)
        if var_12 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_13: int64) = (var_9 * var_5)
        let (var_14: int64) = (var_3 + var_13)
        let (var_15: int64) = (var_14 + var_4)
        let (var_16: int64) = 0L
        method_17((var_0: System.Text.StringBuilder), (var_16: int64))
        let (var_17: System.Text.StringBuilder) = var_0.Append("[|")
        let (var_18: int64) = 0L
        let (var_19: string) = method_18((var_0: System.Text.StringBuilder), (var_2: (int64 [])), (var_15: int64), (var_6: int64), (var_8: int64), (var_1: string), (var_18: int64))
        let (var_20: System.Text.StringBuilder) = var_0.AppendLine("|]")
        let (var_21: int64) = (var_9 + 1L)
        method_16((var_0: System.Text.StringBuilder), (var_1: string), (var_2: (int64 [])), (var_3: int64), (var_4: int64), (var_5: int64), (var_6: int64), (var_7: int64), (var_8: int64), (var_21: int64))
    else
        ()
and method_18((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_5: string), (var_6: int64)): string =
    let (var_7: bool) = (var_6 < var_4)
    if var_7 then
        let (var_8: System.Text.StringBuilder) = var_0.Append(var_5)
        let (var_9: bool) = (var_6 >= 0L)
        let (var_10: bool) = (var_9 = false)
        if var_10 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_11: int64) = (var_6 * var_3)
        let (var_12: int64) = (var_2 + var_11)
        let (var_13: int64) = var_1.[int32 var_12]
        let (var_14: string) = System.String.Format("{0}",var_13)
        let (var_15: System.Text.StringBuilder) = var_0.Append(var_14)
        let (var_16: string) = "; "
        let (var_17: int64) = (var_6 + 1L)
        method_18((var_0: System.Text.StringBuilder), (var_1: (int64 [])), (var_2: int64), (var_3: int64), (var_4: int64), (var_16: string), (var_17: int64))
    else
        var_5
and method_17((var_0: System.Text.StringBuilder), (var_1: int64)): unit =
    let (var_2: bool) = (var_1 < 4L)
    if var_2 then
        let (var_3: System.Text.StringBuilder) = var_0.Append(' ')
        let (var_4: int64) = (var_1 + 1L)
        method_17((var_0: System.Text.StringBuilder), (var_4: int64))
    else
        ()
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvars64.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\""|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_10; "\" -I\"C:/cub-1.7.4\" -I\""; var_11; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
let (var_34: string) = System.String.Format("{0}",var_33)
System.Console.WriteLine(var_34)
let (var_35: ManagedCuda.CudaDeviceProperties) = var_1.GetDeviceInfo()
let (var_36: ManagedCuda.BasicTypes.SizeT) = var_35.get_TotalGlobalMemory()
let (var_37: int64) = int64 var_36
let (var_38: float) = float var_37
let (var_39: float) = (0.700000 * var_38)
let (var_40: int64) = int64 var_39
let (var_41: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_40)
let (var_42: ManagedCuda.BasicTypes.CUdeviceptr) = var_1.AllocateMemory(var_41)
let (var_43: (Union0 ref)) = (ref (Union0Case0(Tuple1(var_42))))
let (var_44: EnvStack2) = EnvStack2((var_43: (Union0 ref)))
let (var_45: System.Collections.Generic.Stack<Env3>) = System.Collections.Generic.Stack<Env3>()
let (var_46: (Union0 ref)) = var_44.mem_0
let (var_47: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
let (var_48: ManagedCuda.BasicTypes.SizeT) = var_47.Pointer
let (var_49: uint64) = uint64 var_48
let (var_50: uint64) = uint64 var_40
let (var_51: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_52: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(1280L))
let (var_53: int64) = 0L
method_2((var_52: (int64 [])), (var_53: int64))
let (var_54: (int64 [])) = Array.zeroCreate<int64> (System.Convert.ToInt32(10L))
let (var_55: int64) = 0L
method_4((var_54: (int64 [])), (var_55: int64))
let (var_56: int64) = var_52.LongLength
let (var_57: int64) = (var_56 * 8L)
let (var_58: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_57: int64))
let (var_59: (Union0 ref)) = var_58.mem_0
let (var_60: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_59: (Union0 ref)))
var_1.CopyToDevice(var_60, var_52)
let (var_61: int64) = var_54.LongLength
let (var_62: int64) = (var_61 * 8L)
let (var_63: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_62: int64))
let (var_64: (Union0 ref)) = var_63.mem_0
let (var_65: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_64: (Union0 ref)))
var_1.CopyToDevice(var_65, var_54)
let (var_68: int64) = 80L
let (var_69: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_68: int64))
let (var_70: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_59: (Union0 ref)))
let (var_71: (Union0 ref)) = var_69.mem_0
let (var_72: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_71: (Union0 ref)))
// Cuda join point
// method_8((var_70: ManagedCuda.BasicTypes.CUdeviceptr), (var_72: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_73: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_8", var_32, var_1)
let (var_74: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_73.set_GridDimensions(var_74)
let (var_75: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
var_73.set_BlockDimensions(var_75)
let (var_76: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_78: (System.Object [])) = [|var_70; var_72|]: (System.Object [])
var_73.RunAsync(var_76, var_78)
let (var_81: int64) = 80L
let (var_82: EnvStack2) = method_5((var_49: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_50: uint64), (var_81: int64))
let (var_83: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_59: (Union0 ref)))
let (var_84: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_64: (Union0 ref)))
let (var_85: (Union0 ref)) = var_82.mem_0
let (var_86: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_85: (Union0 ref)))
// Cuda join point
// method_13((var_83: ManagedCuda.BasicTypes.CUdeviceptr), (var_84: ManagedCuda.BasicTypes.CUdeviceptr), (var_86: ManagedCuda.BasicTypes.CUdeviceptr))
let (var_87: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_13", var_32, var_1)
let (var_88: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
var_87.set_GridDimensions(var_88)
let (var_89: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(10u, 32u, 1u)
var_87.set_BlockDimensions(var_89)
let (var_90: ManagedCuda.BasicTypes.CUstream) = var_51.get_Stream()
let (var_92: (System.Object [])) = [|var_83; var_84; var_86|]: (System.Object [])
var_87.RunAsync(var_90, var_92)
let (var_93: int64) = 0L
let (var_94: int64) = 0L
let (var_95: int64) = 10L
let (var_96: int64) = 1L
let (var_97: int64) = 128L
let (var_98: int64) = 10L
method_14((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_58: EnvStack2), (var_93: int64), (var_94: int64), (var_95: int64), (var_96: int64), (var_97: int64), (var_98: int64))
let (var_99: int64) = 0L
let (var_100: int64) = 1L
let (var_101: int64) = 10L
method_19((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_69: EnvStack2), (var_99: int64), (var_100: int64), (var_101: int64))
let (var_102: int64) = 0L
let (var_103: int64) = 1L
let (var_104: int64) = 10L
method_19((var_1: ManagedCuda.CudaContext), (var_51: ManagedCuda.CudaStream), (var_49: uint64), (var_50: uint64), (var_45: System.Collections.Generic.Stack<Env3>), (var_82: EnvStack2), (var_102: int64), (var_103: int64), (var_104: int64))
var_85 := Union0Case1
var_71 := Union0Case1
var_64 := Union0Case1
var_59 := Union0Case1
var_51.Dispose()
let (var_105: ManagedCuda.BasicTypes.CUdeviceptr) = method_1((var_46: (Union0 ref)))
var_1.FreeMemory(var_105)
var_46 := Union0Case1
var_1.Dispose()

