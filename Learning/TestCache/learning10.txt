module SpiralExample.Main
let cuda_kernels = """
#include "cub/cub.cuh"

extern "C" {
    struct Tuple9 {
        float mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple9 make_Tuple9(float mem_0, float mem_1){
        Tuple9 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    typedef float(*FunPointer0)(float, float);
    struct EnvStack2 {
        float mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ EnvStack2 make_EnvStack2(float mem_0, float mem_1, float mem_2){
        EnvStack2 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    struct Tuple1 {
        EnvStack2 mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ Tuple1 make_Tuple1(EnvStack2 mem_0, float mem_1, float mem_2){
        Tuple1 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    struct Tuple3 {
        EnvStack2 mem_0;
        float mem_1;
        float mem_2;
        float mem_3;
    };
    __device__ __forceinline__ Tuple3 make_Tuple3(EnvStack2 mem_0, float mem_1, float mem_2, float mem_3){
        Tuple3 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        tmp.mem_3 = mem_3;
        return tmp;
    }
    struct Tuple4 {
        EnvStack2 mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple4 make_Tuple4(EnvStack2 mem_0, float mem_1){
        Tuple4 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    struct EnvStack6 {
        float mem_0;
        float mem_1;
        float mem_2;
        float mem_3;
        float mem_4;
        float mem_5;
    };
    __device__ __forceinline__ EnvStack6 make_EnvStack6(float mem_0, float mem_1, float mem_2, float mem_3, float mem_4, float mem_5){
        EnvStack6 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        tmp.mem_3 = mem_3;
        tmp.mem_4 = mem_4;
        tmp.mem_5 = mem_5;
        return tmp;
    }
    struct Tuple5 {
        EnvStack6 mem_0;
        float mem_1;
        float mem_2;
    };
    __device__ __forceinline__ Tuple5 make_Tuple5(EnvStack6 mem_0, float mem_1, float mem_2){
        Tuple5 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        return tmp;
    }
    struct Tuple7 {
        EnvStack6 mem_0;
        float mem_1;
        float mem_2;
        float mem_3;
    };
    __device__ __forceinline__ Tuple7 make_Tuple7(EnvStack6 mem_0, float mem_1, float mem_2, float mem_3){
        Tuple7 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        tmp.mem_2 = mem_2;
        tmp.mem_3 = mem_3;
        return tmp;
    }
    struct Tuple8 {
        EnvStack6 mem_0;
        float mem_1;
    };
    __device__ __forceinline__ Tuple8 make_Tuple8(EnvStack6 mem_0, float mem_1){
        Tuple8 tmp;
        tmp.mem_0 = mem_0;
        tmp.mem_1 = mem_1;
        return tmp;
    }
    __global__ void method_36(float var_0, float * var_1);
    __global__ void method_24(unsigned char * var_0, float * var_1);
    __global__ void method_71(float * var_0, float * var_1, float * var_2);
    __global__ void method_86(float * var_0, float * var_1, float * var_2);
    __global__ void method_91(float * var_0, float * var_1);
    __global__ void method_56(float * var_0, float * var_1, float * var_2, float * var_3);
    __global__ void method_119(float * var_0, float * var_1);
    __global__ void method_122(float * var_0, float * var_1);
    __global__ void method_63(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6);
    __global__ void method_78(float * var_0, float * var_1);
    __global__ void method_96(float * var_0, float * var_1, float * var_2);
    __global__ void method_104(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6);
    __global__ void method_109(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6, float * var_7, float * var_8, float * var_9, float * var_10, float * var_11, float * var_12);
    __device__ char method_26(long long int * var_0);
    __device__ char method_25(long long int * var_0);
    __device__ char method_57(long long int * var_0);
    __device__ char method_58(long long int * var_0);
    __device__ float method_87(float var_0, float var_1);
    __device__ char method_79(long long int * var_0, float * var_1);
    __device__ char method_123(long long int * var_0);
    __device__ char method_80(long long int * var_0, float * var_1);
    __device__ char method_81(long long int var_0, long long int * var_1, float * var_2);
    
    __global__ void method_36(float var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_26(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_1[var_8];
            var_1[var_8] = var_0;
            long long int var_17 = (var_8 + 128);
            var_6[0] = var_17;
        }
        long long int var_18 = var_6[0];
    }
    __global__ void method_24(unsigned char * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (256 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_25(var_6)) {
            long long int var_8 = var_6[0];
            long long int var_9 = (var_8 % 32);
            long long int var_10 = (var_8 / 32);
            long long int var_11 = (var_10 % 64);
            long long int var_12 = (var_10 / 64);
            long long int var_13 = (var_12 % 17428);
            long long int var_14 = (var_12 / 17428);
            char var_15 = (var_13 >= 0);
            char var_17;
            if (var_15) {
                var_17 = (var_13 < 17428);
            } else {
                var_17 = 0;
            }
            char var_18 = (var_17 == 0);
            if (var_18) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_19 = (var_13 * 8192);
            char var_20 = (var_11 >= 0);
            char var_22;
            if (var_20) {
                var_22 = (var_11 < 64);
            } else {
                var_22 = 0;
            }
            char var_23 = (var_22 == 0);
            if (var_23) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_24 = (var_11 * 17428);
            char var_26;
            if (var_15) {
                var_26 = (var_13 < 17428);
            } else {
                var_26 = 0;
            }
            char var_27 = (var_26 == 0);
            if (var_27) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_28 = (var_24 + var_13);
            unsigned char var_29 = var_0[var_28];
            char var_31;
            if (var_20) {
                var_31 = (var_11 < 64);
            } else {
                var_31 = 0;
            }
            char var_32 = (var_31 == 0);
            if (var_32) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_33 = (var_11 * 128);
            long long int var_34 = (var_19 + var_33);
            long long int var_35[1];
            var_35[0] = var_9;
            while (method_26(var_35)) {
                long long int var_37 = var_35[0];
                unsigned char var_38 = ((unsigned char) (var_37));
                char var_39 = (var_29 == var_38);
                float var_40;
                if (var_39) {
                    var_40 = 1;
                } else {
                    var_40 = 0;
                }
                char var_41 = (var_37 >= 0);
                char var_43;
                if (var_41) {
                    var_43 = (var_37 < 128);
                } else {
                    var_43 = 0;
                }
                char var_44 = (var_43 == 0);
                if (var_44) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_45 = (var_34 + var_37);
                float var_46 = var_1[var_45];
                var_1[var_45] = var_40;
                long long int var_47 = (var_37 + 32);
                var_35[0] = var_47;
            }
            long long int var_48 = var_35[0];
            long long int var_49 = (var_8 + 35692544);
            var_6[0] = var_49;
        }
        long long int var_50 = var_6[0];
    }
    __global__ void method_71(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (32 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7[1];
        var_7[0] = var_6;
        while (method_26(var_7)) {
            long long int var_9 = var_7[0];
            char var_10 = (var_9 >= 0);
            char var_12;
            if (var_10) {
                var_12 = (var_9 < 128);
            } else {
                var_12 = 0;
            }
            char var_13 = (var_12 == 0);
            if (var_13) {
                // "Argument out of bounds."
            } else {
            }
            float var_14 = var_0[var_9];
            long long int var_15 = threadIdx.y;
            long long int var_16 = blockIdx.y;
            long long int var_17 = (32 * var_16);
            long long int var_18 = (var_15 + var_17);
            long long int var_19[1];
            var_19[0] = var_18;
            while (method_57(var_19)) {
                long long int var_21 = var_19[0];
                char var_22 = (var_21 >= 0);
                char var_24;
                if (var_22) {
                    var_24 = (var_21 < 64);
                } else {
                    var_24 = 0;
                }
                char var_25 = (var_24 == 0);
                if (var_25) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_26 = (var_21 * 128);
                char var_28;
                if (var_10) {
                    var_28 = (var_9 < 128);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_26 + var_9);
                char var_32;
                if (var_22) {
                    var_32 = (var_21 < 64);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                char var_35;
                if (var_10) {
                    var_35 = (var_9 < 128);
                } else {
                    var_35 = 0;
                }
                char var_36 = (var_35 == 0);
                if (var_36) {
                    // "Argument out of bounds."
                } else {
                }
                float var_37 = var_1[var_30];
                float var_38 = var_2[var_30];
                float var_39 = (var_14 + var_37);
                var_2[var_30] = var_39;
                long long int var_40 = (var_21 + 32);
                var_19[0] = var_40;
            }
            long long int var_41 = var_19[0];
            long long int var_42 = (var_9 + 128);
            var_7[0] = var_42;
        }
        long long int var_43 = var_7[0];
    }
    __global__ void method_86(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (128 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_57(var_10)) {
            long long int var_12 = var_10[0];
            float var_26[1];
            long long int var_27[1];
            var_27[0] = 0;
            while (method_58(var_27)) {
                long long int var_29 = var_27[0];
                long long int var_30 = (128 * var_29);
                long long int var_31 = (var_6 + var_30);
                long long int var_32 = (128 - var_30);
                char var_33 = (var_31 < 128);
                if (var_33) {
                    char var_34 = (var_29 >= 0);
                    char var_36;
                    if (var_34) {
                        var_36 = (var_29 < 1);
                    } else {
                        var_36 = 0;
                    }
                    char var_37 = (var_36 == 0);
                    if (var_37) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_38 = (var_12 >= 0);
                    char var_40;
                    if (var_38) {
                        var_40 = (var_12 < 64);
                    } else {
                        var_40 = 0;
                    }
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 * 128);
                    char var_43 = (var_31 >= 0);
                    char var_44 = (var_43 == 0);
                    if (var_44) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_45 = (var_42 + var_31);
                    float var_46 = var_0[var_45];
                    var_26[var_29] = var_46;
                } else {
                }
                long long int var_47 = (var_29 + 1);
                var_27[0] = var_47;
            }
            long long int var_48 = var_27[0];
            FunPointer0 var_51 = method_87;
            float var_52 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_26, var_51);
            __shared__ float var_53[1];
            long long int var_54 = threadIdx.x;
            char var_55 = (var_54 == 0);
            if (var_55) {
                var_53[0] = var_52;
            } else {
            }
            __syncthreads();
            float var_56 = var_53[0];
            float var_66[1];
            long long int var_67[1];
            var_67[0] = 0;
            while (method_58(var_67)) {
                long long int var_69 = var_67[0];
                long long int var_70 = (128 * var_69);
                long long int var_71 = (var_6 + var_70);
                long long int var_72 = (128 - var_70);
                char var_73 = (var_71 < 128);
                if (var_73) {
                    char var_74 = (var_69 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_69 < 1);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_79;
                    if (var_74) {
                        var_79 = (var_69 < 1);
                    } else {
                        var_79 = 0;
                    }
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_81 = var_26[var_69];
                    float var_82 = (var_81 - var_56);
                    float var_83 = exp(var_82);
                    var_66[var_69] = var_83;
                } else {
                }
                long long int var_84 = (var_69 + 1);
                var_67[0] = var_84;
            }
            long long int var_85 = var_67[0];
            float var_86 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_66);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            float var_113[1];
            long long int var_114[1];
            var_114[0] = 0;
            while (method_58(var_114)) {
                long long int var_116 = var_114[0];
                long long int var_117 = (128 * var_116);
                long long int var_118 = (var_6 + var_117);
                long long int var_119 = (128 - var_117);
                char var_120 = (var_118 < 128);
                if (var_120) {
                    char var_121 = (var_116 >= 0);
                    char var_123;
                    if (var_121) {
                        var_123 = (var_116 < 1);
                    } else {
                        var_123 = 0;
                    }
                    char var_124 = (var_123 == 0);
                    if (var_124) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_126;
                    if (var_121) {
                        var_126 = (var_116 < 1);
                    } else {
                        var_126 = 0;
                    }
                    char var_127 = (var_126 == 0);
                    if (var_127) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_128 = var_66[var_116];
                    float var_129 = (var_128 / var_90);
                    char var_130 = (var_12 >= 0);
                    char var_132;
                    if (var_130) {
                        var_132 = (var_12 < 64);
                    } else {
                        var_132 = 0;
                    }
                    char var_133 = (var_132 == 0);
                    if (var_133) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_134 = (var_12 * 128);
                    char var_135 = (var_118 >= 0);
                    char var_136 = (var_135 == 0);
                    if (var_136) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_137 = (var_134 + var_118);
                    float var_138 = var_1[var_137];
                    float var_139 = (-var_138);
                    float var_140 = log(var_129);
                    float var_141 = (var_139 * var_140);
                    var_113[var_116] = var_141;
                } else {
                }
                long long int var_142 = (var_116 + 1);
                var_114[0] = var_142;
            }
            long long int var_143 = var_114[0];
            float var_144 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_113);
            long long int var_145[1];
            var_145[0] = 0;
            while (method_58(var_145)) {
                long long int var_147 = var_145[0];
                long long int var_148 = (128 * var_147);
                long long int var_149 = (var_6 + var_148);
                long long int var_150 = (128 - var_148);
                char var_151 = (var_149 < 128);
                if (var_151) {
                    char var_152 = (var_147 >= 0);
                    char var_154;
                    if (var_152) {
                        var_154 = (var_147 < 1);
                    } else {
                        var_154 = 0;
                    }
                    char var_155 = (var_154 == 0);
                    if (var_155) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_156 = var_113[var_147];
                    long long int var_157 = threadIdx.x;
                    char var_158 = (var_157 == 0);
                    if (var_158) {
                        char var_159 = (var_12 >= 0);
                        char var_161;
                        if (var_159) {
                            var_161 = (var_12 < 64);
                        } else {
                            var_161 = 0;
                        }
                        char var_162 = (var_161 == 0);
                        if (var_162) {
                            // "Argument out of bounds."
                        } else {
                        }
                        float var_163 = (var_144 / 64);
                        var_2[var_12] = var_163;
                    } else {
                    }
                } else {
                }
                long long int var_164 = (var_147 + 1);
                var_145[0] = var_164;
            }
            long long int var_165 = var_145[0];
            long long int var_166 = (var_12 + 64);
            var_10[0] = var_166;
        }
        long long int var_167 = var_10[0];
    }
    __global__ void method_91(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (64 * var_3);
        long long int var_5 = (var_2 + var_4);
        float var_6 = 0;
        long long int var_7[1];
        float var_8[1];
        var_7[0] = var_5;
        var_8[0] = var_6;
        while (method_79(var_7, var_8)) {
            long long int var_10 = var_7[0];
            float var_11 = var_8[0];
            char var_12 = (var_10 >= 0);
            char var_14;
            if (var_12) {
                var_14 = (var_10 < 64);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_10];
            float var_17 = (var_11 + var_16);
            long long int var_18 = (var_10 + 64);
            var_7[0] = var_18;
            var_8[0] = var_17;
        }
        long long int var_19 = var_7[0];
        float var_20 = var_8[0];
        float var_21 = cub::BlockReduce<float,64,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_20);
        long long int var_22 = threadIdx.x;
        char var_23 = (var_22 == 0);
        if (var_23) {
            long long int var_24 = blockIdx.x;
            char var_25 = (var_24 >= 0);
            char var_27;
            if (var_25) {
                var_27 = (var_24 < 1);
            } else {
                var_27 = 0;
            }
            char var_28 = (var_27 == 0);
            if (var_28) {
                // "Argument out of bounds."
            } else {
            }
            var_1[var_24] = var_21;
        } else {
        }
    }
    __global__ void method_56(float * var_0, float * var_1, float * var_2, float * var_3) {
        long long int var_4 = threadIdx.x;
        long long int var_5 = blockIdx.x;
        long long int var_6 = (128 * var_5);
        long long int var_7 = (var_4 + var_6);
        long long int var_8 = threadIdx.y;
        long long int var_9 = blockIdx.y;
        long long int var_10 = (var_8 + var_9);
        long long int var_11[1];
        var_11[0] = var_10;
        while (method_57(var_11)) {
            long long int var_13 = var_11[0];
            float var_37[1];
            long long int var_38[1];
            var_38[0] = 0;
            while (method_58(var_38)) {
                long long int var_40 = var_38[0];
                long long int var_41 = (128 * var_40);
                long long int var_42 = (var_7 + var_41);
                long long int var_43 = (128 - var_41);
                char var_44 = (var_42 < 128);
                if (var_44) {
                    char var_45 = (var_40 >= 0);
                    char var_47;
                    if (var_45) {
                        var_47 = (var_40 < 1);
                    } else {
                        var_47 = 0;
                    }
                    char var_48 = (var_47 == 0);
                    if (var_48) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_49 = (var_13 >= 0);
                    char var_51;
                    if (var_49) {
                        var_51 = (var_13 < 64);
                    } else {
                        var_51 = 0;
                    }
                    char var_52 = (var_51 == 0);
                    if (var_52) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_53 = (var_13 * 128);
                    char var_54 = (var_42 >= 0);
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_53 + var_42);
                    float var_57 = var_0[var_56];
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_58 = var_1[var_42];
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_59 = var_2[var_42];
                    float var_60 = (var_58 * var_57);
                    float var_61 = (var_60 + var_59);
                    var_37[var_40] = var_61;
                } else {
                }
                long long int var_62 = (var_40 + 1);
                var_38[0] = var_62;
            }
            long long int var_63 = var_38[0];
            float var_64 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_37);
            __shared__ float var_65[1];
            long long int var_66 = threadIdx.x;
            char var_67 = (var_66 == 0);
            if (var_67) {
                var_65[0] = var_64;
            } else {
            }
            __syncthreads();
            float var_68 = var_65[0];
            float var_78[1];
            long long int var_79[1];
            var_79[0] = 0;
            while (method_58(var_79)) {
                long long int var_81 = var_79[0];
                long long int var_82 = (128 * var_81);
                long long int var_83 = (var_7 + var_82);
                long long int var_84 = (128 - var_82);
                char var_85 = (var_83 < 128);
                if (var_85) {
                    char var_86 = (var_81 >= 0);
                    char var_88;
                    if (var_86) {
                        var_88 = (var_81 < 1);
                    } else {
                        var_88 = 0;
                    }
                    char var_89 = (var_88 == 0);
                    if (var_89) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_91;
                    if (var_86) {
                        var_91 = (var_81 < 1);
                    } else {
                        var_91 = 0;
                    }
                    char var_92 = (var_91 == 0);
                    if (var_92) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_93 = var_37[var_81];
                    float var_94 = (var_68 / 128);
                    float var_95 = (var_93 - var_94);
                    var_78[var_81] = var_95;
                } else {
                }
                long long int var_96 = (var_81 + 1);
                var_79[0] = var_96;
            }
            long long int var_97 = var_79[0];
            float var_106[1];
            long long int var_107[1];
            var_107[0] = 0;
            while (method_58(var_107)) {
                long long int var_109 = var_107[0];
                long long int var_110 = (128 * var_109);
                long long int var_111 = (var_7 + var_110);
                long long int var_112 = (128 - var_110);
                char var_113 = (var_111 < 128);
                if (var_113) {
                    char var_114 = (var_109 >= 0);
                    char var_116;
                    if (var_114) {
                        var_116 = (var_109 < 1);
                    } else {
                        var_116 = 0;
                    }
                    char var_117 = (var_116 == 0);
                    if (var_117) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_119;
                    if (var_114) {
                        var_119 = (var_109 < 1);
                    } else {
                        var_119 = 0;
                    }
                    char var_120 = (var_119 == 0);
                    if (var_120) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_121 = var_78[var_109];
                    float var_122 = (var_121 * var_121);
                    var_106[var_109] = var_122;
                } else {
                }
                long long int var_123 = (var_109 + 1);
                var_107[0] = var_123;
            }
            long long int var_124 = var_107[0];
            float var_125 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_106);
            __shared__ float var_126[1];
            long long int var_127 = threadIdx.x;
            char var_128 = (var_127 == 0);
            if (var_128) {
                var_126[0] = var_125;
            } else {
            }
            __syncthreads();
            float var_129 = var_126[0];
            long long int var_130[1];
            var_130[0] = 0;
            while (method_58(var_130)) {
                long long int var_132 = var_130[0];
                long long int var_133 = (128 * var_132);
                long long int var_134 = (var_7 + var_133);
                long long int var_135 = (128 - var_133);
                char var_136 = (var_134 < 128);
                if (var_136) {
                    char var_137 = (var_132 >= 0);
                    char var_139;
                    if (var_137) {
                        var_139 = (var_132 < 1);
                    } else {
                        var_139 = 0;
                    }
                    char var_140 = (var_139 == 0);
                    if (var_140) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_141 = var_78[var_132];
                    char var_142 = (var_13 >= 0);
                    char var_144;
                    if (var_142) {
                        var_144 = (var_13 < 64);
                    } else {
                        var_144 = 0;
                    }
                    char var_145 = (var_144 == 0);
                    if (var_145) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_146 = (var_13 * 128);
                    char var_147 = (var_134 >= 0);
                    char var_148 = (var_147 == 0);
                    if (var_148) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_149 = (var_146 + var_134);
                    float var_150 = var_3[var_149];
                    float var_151 = (var_129 / 128);
                    float var_152 = (0.0025 + var_151);
                    float var_153 = sqrt(var_152);
                    float var_154 = (var_141 / var_153);
                    char var_155 = (var_154 > 0);
                    float var_156;
                    if (var_155) {
                        var_156 = var_154;
                    } else {
                        var_156 = 0;
                    }
                    var_3[var_149] = var_156;
                } else {
                }
                long long int var_157 = (var_132 + 1);
                var_130[0] = var_157;
            }
            long long int var_158 = var_130[0];
            long long int var_159 = (var_13 + 64);
            var_11[0] = var_159;
        }
        long long int var_160 = var_11[0];
    }
    __global__ void method_119(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_26(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.01 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 128);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_122(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (128 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_123(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 16384);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 16384);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            float var_16 = var_0[var_8];
            float var_17 = var_1[var_8];
            float var_18 = (0.01 * var_17);
            float var_19 = (var_16 - var_18);
            var_0[var_8] = var_19;
            var_1[var_8] = 0;
            long long int var_20 = (var_8 + 8192);
            var_6[0] = var_20;
        }
        long long int var_21 = var_6[0];
    }
    __global__ void method_63(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6) {
        long long int var_7 = threadIdx.x;
        long long int var_8 = blockIdx.x;
        long long int var_9 = (128 * var_8);
        long long int var_10 = (var_7 + var_9);
        long long int var_11 = threadIdx.y;
        long long int var_12 = blockIdx.y;
        long long int var_13 = (var_11 + var_12);
        long long int var_14[1];
        var_14[0] = var_13;
        while (method_57(var_14)) {
            long long int var_16 = var_14[0];
            Tuple1 var_42[1];
            long long int var_43[1];
            var_43[0] = 0;
            while (method_58(var_43)) {
                long long int var_45 = var_43[0];
                long long int var_46 = (128 * var_45);
                long long int var_47 = (var_10 + var_46);
                long long int var_48 = (128 - var_46);
                char var_49 = (var_47 < 128);
                if (var_49) {
                    char var_50 = (var_45 >= 0);
                    char var_52;
                    if (var_50) {
                        var_52 = (var_45 < 1);
                    } else {
                        var_52 = 0;
                    }
                    char var_53 = (var_52 == 0);
                    if (var_53) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_54 = (var_16 >= 0);
                    char var_56;
                    if (var_54) {
                        var_56 = (var_16 < 64);
                    } else {
                        var_56 = 0;
                    }
                    char var_57 = (var_56 == 0);
                    if (var_57) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_58 = (var_16 * 128);
                    char var_59 = (var_47 >= 0);
                    char var_60 = (var_59 == 0);
                    if (var_60) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_61 = (var_58 + var_47);
                    float var_62 = var_0[var_61];
                    float var_63 = var_1[var_61];
                    if (var_60) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_64 = var_2[var_47];
                    if (var_60) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_65 = var_3[var_47];
                    EnvStack2 var_66 = make_EnvStack2(var_64, var_65, var_63);
                    float var_67 = (var_64 * var_63);
                    float var_68 = (var_67 + var_65);
                    var_42[var_45] = make_Tuple1(var_66, var_62, var_68);
                } else {
                }
                long long int var_69 = (var_45 + 1);
                var_43[0] = var_69;
            }
            long long int var_70 = var_43[0];
            float var_81[1];
            long long int var_82[1];
            var_82[0] = 0;
            while (method_58(var_82)) {
                long long int var_84 = var_82[0];
                long long int var_85 = (128 * var_84);
                long long int var_86 = (var_10 + var_85);
                long long int var_87 = (128 - var_85);
                char var_88 = (var_86 < 128);
                if (var_88) {
                    char var_89 = (var_84 >= 0);
                    char var_91;
                    if (var_89) {
                        var_91 = (var_84 < 1);
                    } else {
                        var_91 = 0;
                    }
                    char var_92 = (var_91 == 0);
                    if (var_92) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_94;
                    if (var_89) {
                        var_94 = (var_84 < 1);
                    } else {
                        var_94 = 0;
                    }
                    char var_95 = (var_94 == 0);
                    if (var_95) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_96 = var_42[var_84];
                    EnvStack2 var_97 = var_96.mem_0;
                    float var_98 = var_96.mem_1;
                    float var_99 = var_96.mem_2;
                    var_81[var_84] = var_99;
                } else {
                }
                long long int var_100 = (var_84 + 1);
                var_82[0] = var_100;
            }
            long long int var_101 = var_82[0];
            float var_102 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_81);
            __shared__ float var_103[1];
            long long int var_104 = threadIdx.x;
            char var_105 = (var_104 == 0);
            if (var_105) {
                var_103[0] = var_102;
            } else {
            }
            __syncthreads();
            float var_106 = var_103[0];
            Tuple1 var_119[1];
            long long int var_120[1];
            var_120[0] = 0;
            while (method_58(var_120)) {
                long long int var_122 = var_120[0];
                long long int var_123 = (128 * var_122);
                long long int var_124 = (var_10 + var_123);
                long long int var_125 = (128 - var_123);
                char var_126 = (var_124 < 128);
                if (var_126) {
                    char var_127 = (var_122 >= 0);
                    char var_129;
                    if (var_127) {
                        var_129 = (var_122 < 1);
                    } else {
                        var_129 = 0;
                    }
                    char var_130 = (var_129 == 0);
                    if (var_130) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_132;
                    if (var_127) {
                        var_132 = (var_122 < 1);
                    } else {
                        var_132 = 0;
                    }
                    char var_133 = (var_132 == 0);
                    if (var_133) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_134 = var_42[var_122];
                    EnvStack2 var_135 = var_134.mem_0;
                    float var_136 = var_134.mem_1;
                    float var_137 = var_134.mem_2;
                    float var_138 = (var_106 / 128);
                    float var_139 = (var_137 - var_138);
                    var_119[var_122] = make_Tuple1(var_135, var_136, var_139);
                } else {
                }
                long long int var_140 = (var_122 + 1);
                var_120[0] = var_140;
            }
            long long int var_141 = var_120[0];
            float var_153[1];
            long long int var_154[1];
            var_154[0] = 0;
            while (method_58(var_154)) {
                long long int var_156 = var_154[0];
                long long int var_157 = (128 * var_156);
                long long int var_158 = (var_10 + var_157);
                long long int var_159 = (128 - var_157);
                char var_160 = (var_158 < 128);
                if (var_160) {
                    char var_161 = (var_156 >= 0);
                    char var_163;
                    if (var_161) {
                        var_163 = (var_156 < 1);
                    } else {
                        var_163 = 0;
                    }
                    char var_164 = (var_163 == 0);
                    if (var_164) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_166;
                    if (var_161) {
                        var_166 = (var_156 < 1);
                    } else {
                        var_166 = 0;
                    }
                    char var_167 = (var_166 == 0);
                    if (var_167) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_168 = var_119[var_156];
                    EnvStack2 var_169 = var_168.mem_0;
                    float var_170 = var_168.mem_1;
                    float var_171 = var_168.mem_2;
                    float var_172 = (var_171 * var_171);
                    var_153[var_156] = var_172;
                } else {
                }
                long long int var_173 = (var_156 + 1);
                var_154[0] = var_173;
            }
            long long int var_174 = var_154[0];
            float var_175 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_153);
            __shared__ float var_176[1];
            long long int var_177 = threadIdx.x;
            char var_178 = (var_177 == 0);
            if (var_178) {
                var_176[0] = var_175;
            } else {
            }
            __syncthreads();
            float var_179 = var_176[0];
            Tuple3 var_195[1];
            long long int var_196[1];
            var_196[0] = 0;
            while (method_58(var_196)) {
                long long int var_198 = var_196[0];
                long long int var_199 = (128 * var_198);
                long long int var_200 = (var_10 + var_199);
                long long int var_201 = (128 - var_199);
                char var_202 = (var_200 < 128);
                if (var_202) {
                    char var_203 = (var_198 >= 0);
                    char var_205;
                    if (var_203) {
                        var_205 = (var_198 < 1);
                    } else {
                        var_205 = 0;
                    }
                    char var_206 = (var_205 == 0);
                    if (var_206) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_208;
                    if (var_203) {
                        var_208 = (var_198 < 1);
                    } else {
                        var_208 = 0;
                    }
                    char var_209 = (var_208 == 0);
                    if (var_209) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple1 var_210 = var_119[var_198];
                    EnvStack2 var_211 = var_210.mem_0;
                    float var_212 = var_210.mem_1;
                    float var_213 = var_210.mem_2;
                    char var_214 = (var_213 > 0);
                    float var_215;
                    if (var_214) {
                        var_215 = var_212;
                    } else {
                        var_215 = 0;
                    }
                    float var_216 = (var_179 / 128);
                    float var_217 = (0.0025 + var_216);
                    float var_218 = sqrt(var_217);
                    var_195[var_198] = make_Tuple3(var_211, var_215, var_213, var_218);
                } else {
                }
                long long int var_219 = (var_198 + 1);
                var_196[0] = var_219;
            }
            long long int var_220 = var_196[0];
            float var_236[1];
            long long int var_237[1];
            var_237[0] = 0;
            while (method_58(var_237)) {
                long long int var_239 = var_237[0];
                long long int var_240 = (128 * var_239);
                long long int var_241 = (var_10 + var_240);
                long long int var_242 = (128 - var_240);
                char var_243 = (var_241 < 128);
                if (var_243) {
                    char var_244 = (var_239 >= 0);
                    char var_246;
                    if (var_244) {
                        var_246 = (var_239 < 1);
                    } else {
                        var_246 = 0;
                    }
                    char var_247 = (var_246 == 0);
                    if (var_247) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_249;
                    if (var_244) {
                        var_249 = (var_239 < 1);
                    } else {
                        var_249 = 0;
                    }
                    char var_250 = (var_249 == 0);
                    if (var_250) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_251 = var_195[var_239];
                    EnvStack2 var_252 = var_251.mem_0;
                    float var_253 = var_251.mem_1;
                    float var_254 = var_251.mem_2;
                    float var_255 = var_251.mem_3;
                    float var_256 = (-var_253);
                    float var_257 = (var_256 * var_254);
                    float var_258 = (var_255 * var_255);
                    float var_259 = (var_257 / var_258);
                    var_236[var_239] = var_259;
                } else {
                }
                long long int var_260 = (var_239 + 1);
                var_237[0] = var_260;
            }
            long long int var_261 = var_237[0];
            float var_262 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_236);
            __shared__ float var_263[1];
            long long int var_264 = threadIdx.x;
            char var_265 = (var_264 == 0);
            if (var_265) {
                var_263[0] = var_262;
            } else {
            }
            __syncthreads();
            float var_266 = var_263[0];
            Tuple4 var_283[1];
            long long int var_284[1];
            var_284[0] = 0;
            while (method_58(var_284)) {
                long long int var_286 = var_284[0];
                long long int var_287 = (128 * var_286);
                long long int var_288 = (var_10 + var_287);
                long long int var_289 = (128 - var_287);
                char var_290 = (var_288 < 128);
                if (var_290) {
                    char var_291 = (var_286 >= 0);
                    char var_293;
                    if (var_291) {
                        var_293 = (var_286 < 1);
                    } else {
                        var_293 = 0;
                    }
                    char var_294 = (var_293 == 0);
                    if (var_294) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_296;
                    if (var_291) {
                        var_296 = (var_286 < 1);
                    } else {
                        var_296 = 0;
                    }
                    char var_297 = (var_296 == 0);
                    if (var_297) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple3 var_298 = var_195[var_286];
                    EnvStack2 var_299 = var_298.mem_0;
                    float var_300 = var_298.mem_1;
                    float var_301 = var_298.mem_2;
                    float var_302 = var_298.mem_3;
                    float var_303 = (var_300 / var_302);
                    float var_304 = (var_266 * var_301);
                    float var_305 = (var_302 * 128);
                    float var_306 = (var_304 / var_305);
                    float var_307 = (var_303 + var_306);
                    var_283[var_286] = make_Tuple4(var_299, var_307);
                } else {
                }
                long long int var_308 = (var_286 + 1);
                var_284[0] = var_308;
            }
            long long int var_309 = var_284[0];
            float var_319[1];
            long long int var_320[1];
            var_320[0] = 0;
            while (method_58(var_320)) {
                long long int var_322 = var_320[0];
                long long int var_323 = (128 * var_322);
                long long int var_324 = (var_10 + var_323);
                long long int var_325 = (128 - var_323);
                char var_326 = (var_324 < 128);
                if (var_326) {
                    char var_327 = (var_322 >= 0);
                    char var_329;
                    if (var_327) {
                        var_329 = (var_322 < 1);
                    } else {
                        var_329 = 0;
                    }
                    char var_330 = (var_329 == 0);
                    if (var_330) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_332;
                    if (var_327) {
                        var_332 = (var_322 < 1);
                    } else {
                        var_332 = 0;
                    }
                    char var_333 = (var_332 == 0);
                    if (var_333) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple4 var_334 = var_283[var_322];
                    EnvStack2 var_335 = var_334.mem_0;
                    float var_336 = var_334.mem_1;
                    var_319[var_322] = var_336;
                } else {
                }
                long long int var_337 = (var_322 + 1);
                var_320[0] = var_337;
            }
            long long int var_338 = var_320[0];
            float var_339 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_319);
            __shared__ float var_340[1];
            long long int var_341 = threadIdx.x;
            char var_342 = (var_341 == 0);
            if (var_342) {
                var_340[0] = var_339;
            } else {
            }
            __syncthreads();
            float var_343 = var_340[0];
            long long int var_344[1];
            var_344[0] = 0;
            while (method_58(var_344)) {
                long long int var_346 = var_344[0];
                long long int var_347 = (128 * var_346);
                long long int var_348 = (var_10 + var_347);
                long long int var_349 = (128 - var_347);
                char var_350 = (var_348 < 128);
                if (var_350) {
                    char var_351 = (var_346 >= 0);
                    char var_353;
                    if (var_351) {
                        var_353 = (var_346 < 1);
                    } else {
                        var_353 = 0;
                    }
                    char var_354 = (var_353 == 0);
                    if (var_354) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple4 var_355 = var_283[var_346];
                    EnvStack2 var_356 = var_355.mem_0;
                    float var_357 = var_355.mem_1;
                    char var_358 = (var_16 >= 0);
                    char var_360;
                    if (var_358) {
                        var_360 = (var_16 < 64);
                    } else {
                        var_360 = 0;
                    }
                    char var_361 = (var_360 == 0);
                    if (var_361) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_362 = (var_16 * 128);
                    char var_363 = (var_348 >= 0);
                    char var_364 = (var_363 == 0);
                    if (var_364) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_365 = (var_362 + var_348);
                    float var_366 = var_6[var_365];
                    float var_367 = var_356.mem_0;
                    float var_368 = var_356.mem_1;
                    float var_369 = var_356.mem_2;
                    float var_370 = (var_343 / 128);
                    float var_371 = (var_357 - var_370);
                    float var_372 = (var_371 * var_369);
                    if (var_364) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_373 = var_4 + var_348;
                    atomicAdd(var_373, var_372);
                    if (var_364) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_374 = var_5 + var_348;
                    atomicAdd(var_374, var_371);
                    float var_375 = (var_371 * var_367);
                    float var_376 = (var_366 + var_375);
                    var_6[var_365] = var_376;
                } else {
                }
                long long int var_377 = (var_346 + 1);
                var_344[0] = var_377;
            }
            long long int var_378 = var_344[0];
            long long int var_379 = (var_16 + 64);
            var_14[0] = var_379;
        }
        long long int var_380 = var_14[0];
    }
    __global__ void method_78(float * var_0, float * var_1) {
        long long int var_2 = threadIdx.x;
        long long int var_3 = blockIdx.x;
        long long int var_4 = (32 * var_3);
        long long int var_5 = (var_2 + var_4);
        long long int var_6[1];
        var_6[0] = var_5;
        while (method_26(var_6)) {
            long long int var_8 = var_6[0];
            char var_9 = (var_8 >= 0);
            char var_11;
            if (var_9) {
                var_11 = (var_8 < 128);
            } else {
                var_11 = 0;
            }
            char var_12 = (var_11 == 0);
            if (var_12) {
                // "Argument out of bounds."
            } else {
            }
            char var_14;
            if (var_9) {
                var_14 = (var_8 < 128);
            } else {
                var_14 = 0;
            }
            char var_15 = (var_14 == 0);
            if (var_15) {
                // "Argument out of bounds."
            } else {
            }
            long long int var_16 = threadIdx.y;
            long long int var_17 = blockIdx.y;
            long long int var_18 = (32 * var_17);
            long long int var_19 = (var_16 + var_18);
            float var_20 = 0;
            long long int var_21[1];
            float var_22[1];
            var_21[0] = var_19;
            var_22[0] = var_20;
            while (method_79(var_21, var_22)) {
                long long int var_24 = var_21[0];
                float var_25 = var_22[0];
                char var_26 = (var_24 >= 0);
                char var_28;
                if (var_26) {
                    var_28 = (var_24 < 64);
                } else {
                    var_28 = 0;
                }
                char var_29 = (var_28 == 0);
                if (var_29) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_30 = (var_24 * 128);
                char var_32;
                if (var_9) {
                    var_32 = (var_8 < 128);
                } else {
                    var_32 = 0;
                }
                char var_33 = (var_32 == 0);
                if (var_33) {
                    // "Argument out of bounds."
                } else {
                }
                long long int var_34 = (var_30 + var_8);
                float var_35 = var_0[var_34];
                float var_36 = (var_25 + var_35);
                long long int var_37 = (var_24 + 32);
                var_21[0] = var_37;
                var_22[0] = var_36;
            }
            long long int var_38 = var_21[0];
            float var_39 = var_22[0];
            long long int var_40 = threadIdx.x;
            long long int var_41 = threadIdx.y;
            __shared__ float var_42[992];
            long long int var_43[1];
            float var_44[1];
            var_43[0] = 32;
            var_44[0] = var_39;
            while (method_80(var_43, var_44)) {
                long long int var_46 = var_43[0];
                float var_47 = var_44[0];
                long long int var_48 = (var_46 / 2);
                char var_49 = (var_41 < var_46);
                char var_51;
                if (var_49) {
                    var_51 = (var_41 >= var_48);
                } else {
                    var_51 = 0;
                }
                if (var_51) {
                    char var_52 = (var_41 >= 1);
                    char var_54;
                    if (var_52) {
                        var_54 = (var_41 < 32);
                    } else {
                        var_54 = 0;
                    }
                    char var_55 = (var_54 == 0);
                    if (var_55) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_56 = (var_41 - 1);
                    long long int var_57 = (var_56 * 32);
                    char var_58 = (var_40 >= 0);
                    char var_60;
                    if (var_58) {
                        var_60 = (var_40 < 32);
                    } else {
                        var_60 = 0;
                    }
                    char var_61 = (var_60 == 0);
                    if (var_61) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_62 = (var_57 + var_40);
                    var_42[var_62] = var_47;
                } else {
                }
                __syncthreads();
                char var_63 = (var_41 < var_48);
                float var_86;
                if (var_63) {
                    long long int var_64 = (var_41 + var_48);
                    long long int var_65[1];
                    float var_66[1];
                    var_65[0] = var_64;
                    var_66[0] = var_47;
                    while (method_81(var_46, var_65, var_66)) {
                        long long int var_68 = var_65[0];
                        float var_69 = var_66[0];
                        char var_70 = (var_68 >= 1);
                        char var_72;
                        if (var_70) {
                            var_72 = (var_68 < 32);
                        } else {
                            var_72 = 0;
                        }
                        char var_73 = (var_72 == 0);
                        if (var_73) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_74 = (var_68 - 1);
                        long long int var_75 = (var_74 * 32);
                        char var_76 = (var_40 >= 0);
                        char var_78;
                        if (var_76) {
                            var_78 = (var_40 < 32);
                        } else {
                            var_78 = 0;
                        }
                        char var_79 = (var_78 == 0);
                        if (var_79) {
                            // "Argument out of bounds."
                        } else {
                        }
                        long long int var_80 = (var_75 + var_40);
                        float var_81 = var_42[var_80];
                        float var_82 = (var_69 + var_81);
                        long long int var_83 = (var_68 + var_48);
                        var_65[0] = var_83;
                        var_66[0] = var_82;
                    }
                    long long int var_84 = var_65[0];
                    var_86 = var_66[0];
                } else {
                    var_86 = var_47;
                }
                var_43[0] = var_48;
                var_44[0] = var_86;
            }
            long long int var_87 = var_43[0];
            float var_88 = var_44[0];
            long long int var_89 = threadIdx.y;
            char var_90 = (var_89 == 0);
            if (var_90) {
                float var_91 = var_1[var_8];
                float var_92 = (var_88 + var_91);
                var_1[var_8] = var_92;
            } else {
            }
            long long int var_93 = (var_8 + 128);
            var_6[0] = var_93;
        }
        long long int var_94 = var_6[0];
    }
    __global__ void method_96(float * var_0, float * var_1, float * var_2) {
        long long int var_3 = threadIdx.x;
        long long int var_4 = blockIdx.x;
        long long int var_5 = (128 * var_4);
        long long int var_6 = (var_3 + var_5);
        long long int var_7 = threadIdx.y;
        long long int var_8 = blockIdx.y;
        long long int var_9 = (var_7 + var_8);
        long long int var_10[1];
        var_10[0] = var_9;
        while (method_57(var_10)) {
            long long int var_12 = var_10[0];
            float var_26[1];
            long long int var_27[1];
            var_27[0] = 0;
            while (method_58(var_27)) {
                long long int var_29 = var_27[0];
                long long int var_30 = (128 * var_29);
                long long int var_31 = (var_6 + var_30);
                long long int var_32 = (128 - var_30);
                char var_33 = (var_31 < 128);
                if (var_33) {
                    char var_34 = (var_29 >= 0);
                    char var_36;
                    if (var_34) {
                        var_36 = (var_29 < 1);
                    } else {
                        var_36 = 0;
                    }
                    char var_37 = (var_36 == 0);
                    if (var_37) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_38 = (var_12 >= 0);
                    char var_40;
                    if (var_38) {
                        var_40 = (var_12 < 64);
                    } else {
                        var_40 = 0;
                    }
                    char var_41 = (var_40 == 0);
                    if (var_41) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_42 = (var_12 * 128);
                    char var_43 = (var_31 >= 0);
                    char var_44 = (var_43 == 0);
                    if (var_44) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_45 = (var_42 + var_31);
                    float var_46 = var_0[var_45];
                    var_26[var_29] = var_46;
                } else {
                }
                long long int var_47 = (var_29 + 1);
                var_27[0] = var_47;
            }
            long long int var_48 = var_27[0];
            FunPointer0 var_51 = method_87;
            float var_52 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Reduce(var_26, var_51);
            __shared__ float var_53[1];
            long long int var_54 = threadIdx.x;
            char var_55 = (var_54 == 0);
            if (var_55) {
                var_53[0] = var_52;
            } else {
            }
            __syncthreads();
            float var_56 = var_53[0];
            float var_66[1];
            long long int var_67[1];
            var_67[0] = 0;
            while (method_58(var_67)) {
                long long int var_69 = var_67[0];
                long long int var_70 = (128 * var_69);
                long long int var_71 = (var_6 + var_70);
                long long int var_72 = (128 - var_70);
                char var_73 = (var_71 < 128);
                if (var_73) {
                    char var_74 = (var_69 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_69 < 1);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_79;
                    if (var_74) {
                        var_79 = (var_69 < 1);
                    } else {
                        var_79 = 0;
                    }
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_81 = var_26[var_69];
                    float var_82 = (var_81 - var_56);
                    float var_83 = exp(var_82);
                    var_66[var_69] = var_83;
                } else {
                }
                long long int var_84 = (var_69 + 1);
                var_67[0] = var_84;
            }
            long long int var_85 = var_67[0];
            float var_86 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_66);
            __shared__ float var_87[1];
            long long int var_88 = threadIdx.x;
            char var_89 = (var_88 == 0);
            if (var_89) {
                var_87[0] = var_86;
            } else {
            }
            __syncthreads();
            float var_90 = var_87[0];
            long long int var_91[1];
            var_91[0] = 0;
            while (method_58(var_91)) {
                long long int var_93 = var_91[0];
                long long int var_94 = (128 * var_93);
                long long int var_95 = (var_6 + var_94);
                long long int var_96 = (128 - var_94);
                char var_97 = (var_95 < 128);
                if (var_97) {
                    char var_98 = (var_93 >= 0);
                    char var_100;
                    if (var_98) {
                        var_100 = (var_93 < 1);
                    } else {
                        var_100 = 0;
                    }
                    char var_101 = (var_100 == 0);
                    if (var_101) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_102 = var_66[var_93];
                    float var_103 = (var_102 / var_90);
                    char var_104 = (var_12 >= 0);
                    char var_106;
                    if (var_104) {
                        var_106 = (var_12 < 64);
                    } else {
                        var_106 = 0;
                    }
                    char var_107 = (var_106 == 0);
                    if (var_107) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_108 = (var_12 * 128);
                    char var_109 = (var_95 >= 0);
                    char var_110 = (var_109 == 0);
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_111 = (var_108 + var_95);
                    float var_112 = var_2[var_111];
                    char var_114;
                    if (var_104) {
                        var_114 = (var_12 < 64);
                    } else {
                        var_114 = 0;
                    }
                    char var_115 = (var_114 == 0);
                    if (var_115) {
                        // "Argument out of bounds."
                    } else {
                    }
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_117;
                    if (var_104) {
                        var_117 = (var_12 < 64);
                    } else {
                        var_117 = 0;
                    }
                    char var_118 = (var_117 == 0);
                    if (var_118) {
                        // "Argument out of bounds."
                    } else {
                    }
                    if (var_110) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_119 = var_1[var_111];
                    float var_120 = (var_103 - var_112);
                    float var_121 = (var_120 / 64);
                    float var_122 = (var_119 + var_121);
                    var_1[var_111] = var_122;
                } else {
                }
                long long int var_123 = (var_93 + 1);
                var_91[0] = var_123;
            }
            long long int var_124 = var_91[0];
            long long int var_125 = (var_12 + 64);
            var_10[0] = var_125;
        }
        long long int var_126 = var_10[0];
    }
    __global__ void method_104(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6) {
        long long int var_7 = threadIdx.x;
        long long int var_8 = blockIdx.x;
        long long int var_9 = (128 * var_8);
        long long int var_10 = (var_7 + var_9);
        long long int var_11 = threadIdx.y;
        long long int var_12 = blockIdx.y;
        long long int var_13 = (var_11 + var_12);
        long long int var_14[1];
        var_14[0] = var_13;
        while (method_57(var_14)) {
            long long int var_16 = var_14[0];
            float var_54[1];
            long long int var_55[1];
            var_55[0] = 0;
            while (method_58(var_55)) {
                long long int var_57 = var_55[0];
                long long int var_58 = (128 * var_57);
                long long int var_59 = (var_10 + var_58);
                long long int var_60 = (128 - var_58);
                char var_61 = (var_59 < 128);
                if (var_61) {
                    char var_62 = (var_57 >= 0);
                    char var_64;
                    if (var_62) {
                        var_64 = (var_57 < 1);
                    } else {
                        var_64 = 0;
                    }
                    char var_65 = (var_64 == 0);
                    if (var_65) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_66 = (var_16 >= 0);
                    char var_68;
                    if (var_66) {
                        var_68 = (var_16 < 64);
                    } else {
                        var_68 = 0;
                    }
                    char var_69 = (var_68 == 0);
                    if (var_69) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_70 = (var_16 * 128);
                    char var_71 = (var_59 >= 0);
                    char var_72 = (var_71 == 0);
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_73 = (var_70 + var_59);
                    float var_74 = var_0[var_73];
                    float var_75 = var_1[var_73];
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_76 = var_2[var_59];
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_77 = var_3[var_59];
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_78 = var_4[var_59];
                    if (var_72) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_79 = var_5[var_59];
                    float var_80 = (var_76 * var_74);
                    float var_81 = (var_80 * var_75);
                    float var_82 = (var_77 * var_75);
                    float var_83 = (var_81 + var_82);
                    float var_84 = (var_78 * var_74);
                    float var_85 = (var_83 + var_84);
                    float var_86 = (var_85 + var_79);
                    var_54[var_57] = var_86;
                } else {
                }
                long long int var_87 = (var_57 + 1);
                var_55[0] = var_87;
            }
            long long int var_88 = var_55[0];
            float var_89 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_54);
            __shared__ float var_90[1];
            long long int var_91 = threadIdx.x;
            char var_92 = (var_91 == 0);
            if (var_92) {
                var_90[0] = var_89;
            } else {
            }
            __syncthreads();
            float var_93 = var_90[0];
            float var_103[1];
            long long int var_104[1];
            var_104[0] = 0;
            while (method_58(var_104)) {
                long long int var_106 = var_104[0];
                long long int var_107 = (128 * var_106);
                long long int var_108 = (var_10 + var_107);
                long long int var_109 = (128 - var_107);
                char var_110 = (var_108 < 128);
                if (var_110) {
                    char var_111 = (var_106 >= 0);
                    char var_113;
                    if (var_111) {
                        var_113 = (var_106 < 1);
                    } else {
                        var_113 = 0;
                    }
                    char var_114 = (var_113 == 0);
                    if (var_114) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_116;
                    if (var_111) {
                        var_116 = (var_106 < 1);
                    } else {
                        var_116 = 0;
                    }
                    char var_117 = (var_116 == 0);
                    if (var_117) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_118 = var_54[var_106];
                    float var_119 = (var_93 / 128);
                    float var_120 = (var_118 - var_119);
                    var_103[var_106] = var_120;
                } else {
                }
                long long int var_121 = (var_106 + 1);
                var_104[0] = var_121;
            }
            long long int var_122 = var_104[0];
            float var_131[1];
            long long int var_132[1];
            var_132[0] = 0;
            while (method_58(var_132)) {
                long long int var_134 = var_132[0];
                long long int var_135 = (128 * var_134);
                long long int var_136 = (var_10 + var_135);
                long long int var_137 = (128 - var_135);
                char var_138 = (var_136 < 128);
                if (var_138) {
                    char var_139 = (var_134 >= 0);
                    char var_141;
                    if (var_139) {
                        var_141 = (var_134 < 1);
                    } else {
                        var_141 = 0;
                    }
                    char var_142 = (var_141 == 0);
                    if (var_142) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_144;
                    if (var_139) {
                        var_144 = (var_134 < 1);
                    } else {
                        var_144 = 0;
                    }
                    char var_145 = (var_144 == 0);
                    if (var_145) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_146 = var_103[var_134];
                    float var_147 = (var_146 * var_146);
                    var_131[var_134] = var_147;
                } else {
                }
                long long int var_148 = (var_134 + 1);
                var_132[0] = var_148;
            }
            long long int var_149 = var_132[0];
            float var_150 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_131);
            __shared__ float var_151[1];
            long long int var_152 = threadIdx.x;
            char var_153 = (var_152 == 0);
            if (var_153) {
                var_151[0] = var_150;
            } else {
            }
            __syncthreads();
            float var_154 = var_151[0];
            long long int var_155[1];
            var_155[0] = 0;
            while (method_58(var_155)) {
                long long int var_157 = var_155[0];
                long long int var_158 = (128 * var_157);
                long long int var_159 = (var_10 + var_158);
                long long int var_160 = (128 - var_158);
                char var_161 = (var_159 < 128);
                if (var_161) {
                    char var_162 = (var_157 >= 0);
                    char var_164;
                    if (var_162) {
                        var_164 = (var_157 < 1);
                    } else {
                        var_164 = 0;
                    }
                    char var_165 = (var_164 == 0);
                    if (var_165) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_166 = var_103[var_157];
                    char var_167 = (var_16 >= 0);
                    char var_169;
                    if (var_167) {
                        var_169 = (var_16 < 64);
                    } else {
                        var_169 = 0;
                    }
                    char var_170 = (var_169 == 0);
                    if (var_170) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_171 = (var_16 * 128);
                    char var_172 = (var_159 >= 0);
                    char var_173 = (var_172 == 0);
                    if (var_173) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_174 = (var_171 + var_159);
                    float var_175 = var_6[var_174];
                    float var_176 = (var_154 / 128);
                    float var_177 = (0.0025 + var_176);
                    float var_178 = sqrt(var_177);
                    float var_179 = (var_166 / var_178);
                    char var_180 = (var_179 > 0);
                    float var_181;
                    if (var_180) {
                        var_181 = var_179;
                    } else {
                        var_181 = 0;
                    }
                    var_6[var_174] = var_181;
                } else {
                }
                long long int var_182 = (var_157 + 1);
                var_155[0] = var_182;
            }
            long long int var_183 = var_155[0];
            long long int var_184 = (var_16 + 64);
            var_14[0] = var_184;
        }
        long long int var_185 = var_14[0];
    }
    __global__ void method_109(float * var_0, float * var_1, float * var_2, float * var_3, float * var_4, float * var_5, float * var_6, float * var_7, float * var_8, float * var_9, float * var_10, float * var_11, float * var_12) {
        long long int var_13 = threadIdx.x;
        long long int var_14 = blockIdx.x;
        long long int var_15 = (128 * var_14);
        long long int var_16 = (var_13 + var_15);
        long long int var_17 = threadIdx.y;
        long long int var_18 = blockIdx.y;
        long long int var_19 = (var_17 + var_18);
        long long int var_20[1];
        var_20[0] = var_19;
        while (method_57(var_20)) {
            long long int var_22 = var_20[0];
            Tuple5 var_62[1];
            long long int var_63[1];
            var_63[0] = 0;
            while (method_58(var_63)) {
                long long int var_65 = var_63[0];
                long long int var_66 = (128 * var_65);
                long long int var_67 = (var_16 + var_66);
                long long int var_68 = (128 - var_66);
                char var_69 = (var_67 < 128);
                if (var_69) {
                    char var_70 = (var_65 >= 0);
                    char var_72;
                    if (var_70) {
                        var_72 = (var_65 < 1);
                    } else {
                        var_72 = 0;
                    }
                    char var_73 = (var_72 == 0);
                    if (var_73) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_74 = (var_22 >= 0);
                    char var_76;
                    if (var_74) {
                        var_76 = (var_22 < 64);
                    } else {
                        var_76 = 0;
                    }
                    char var_77 = (var_76 == 0);
                    if (var_77) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_78 = (var_22 * 128);
                    char var_79 = (var_67 >= 0);
                    char var_80 = (var_79 == 0);
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_81 = (var_78 + var_67);
                    float var_82 = var_0[var_81];
                    float var_83 = var_1[var_81];
                    float var_84 = var_2[var_81];
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_85 = var_3[var_67];
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_86 = var_4[var_67];
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_87 = var_5[var_67];
                    if (var_80) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float var_88 = var_6[var_67];
                    EnvStack6 var_89 = make_EnvStack6(var_85, var_86, var_87, var_88, var_83, var_84);
                    float var_90 = (var_85 * var_83);
                    float var_91 = (var_90 * var_84);
                    float var_92 = (var_86 * var_84);
                    float var_93 = (var_91 + var_92);
                    float var_94 = (var_87 * var_83);
                    float var_95 = (var_93 + var_94);
                    float var_96 = (var_95 + var_88);
                    var_62[var_65] = make_Tuple5(var_89, var_82, var_96);
                } else {
                }
                long long int var_97 = (var_65 + 1);
                var_63[0] = var_97;
            }
            long long int var_98 = var_63[0];
            float var_109[1];
            long long int var_110[1];
            var_110[0] = 0;
            while (method_58(var_110)) {
                long long int var_112 = var_110[0];
                long long int var_113 = (128 * var_112);
                long long int var_114 = (var_16 + var_113);
                long long int var_115 = (128 - var_113);
                char var_116 = (var_114 < 128);
                if (var_116) {
                    char var_117 = (var_112 >= 0);
                    char var_119;
                    if (var_117) {
                        var_119 = (var_112 < 1);
                    } else {
                        var_119 = 0;
                    }
                    char var_120 = (var_119 == 0);
                    if (var_120) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_122;
                    if (var_117) {
                        var_122 = (var_112 < 1);
                    } else {
                        var_122 = 0;
                    }
                    char var_123 = (var_122 == 0);
                    if (var_123) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple5 var_124 = var_62[var_112];
                    EnvStack6 var_125 = var_124.mem_0;
                    float var_126 = var_124.mem_1;
                    float var_127 = var_124.mem_2;
                    var_109[var_112] = var_127;
                } else {
                }
                long long int var_128 = (var_112 + 1);
                var_110[0] = var_128;
            }
            long long int var_129 = var_110[0];
            float var_130 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_109);
            __shared__ float var_131[1];
            long long int var_132 = threadIdx.x;
            char var_133 = (var_132 == 0);
            if (var_133) {
                var_131[0] = var_130;
            } else {
            }
            __syncthreads();
            float var_134 = var_131[0];
            Tuple5 var_147[1];
            long long int var_148[1];
            var_148[0] = 0;
            while (method_58(var_148)) {
                long long int var_150 = var_148[0];
                long long int var_151 = (128 * var_150);
                long long int var_152 = (var_16 + var_151);
                long long int var_153 = (128 - var_151);
                char var_154 = (var_152 < 128);
                if (var_154) {
                    char var_155 = (var_150 >= 0);
                    char var_157;
                    if (var_155) {
                        var_157 = (var_150 < 1);
                    } else {
                        var_157 = 0;
                    }
                    char var_158 = (var_157 == 0);
                    if (var_158) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_160;
                    if (var_155) {
                        var_160 = (var_150 < 1);
                    } else {
                        var_160 = 0;
                    }
                    char var_161 = (var_160 == 0);
                    if (var_161) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple5 var_162 = var_62[var_150];
                    EnvStack6 var_163 = var_162.mem_0;
                    float var_164 = var_162.mem_1;
                    float var_165 = var_162.mem_2;
                    float var_166 = (var_134 / 128);
                    float var_167 = (var_165 - var_166);
                    var_147[var_150] = make_Tuple5(var_163, var_164, var_167);
                } else {
                }
                long long int var_168 = (var_150 + 1);
                var_148[0] = var_168;
            }
            long long int var_169 = var_148[0];
            float var_181[1];
            long long int var_182[1];
            var_182[0] = 0;
            while (method_58(var_182)) {
                long long int var_184 = var_182[0];
                long long int var_185 = (128 * var_184);
                long long int var_186 = (var_16 + var_185);
                long long int var_187 = (128 - var_185);
                char var_188 = (var_186 < 128);
                if (var_188) {
                    char var_189 = (var_184 >= 0);
                    char var_191;
                    if (var_189) {
                        var_191 = (var_184 < 1);
                    } else {
                        var_191 = 0;
                    }
                    char var_192 = (var_191 == 0);
                    if (var_192) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_194;
                    if (var_189) {
                        var_194 = (var_184 < 1);
                    } else {
                        var_194 = 0;
                    }
                    char var_195 = (var_194 == 0);
                    if (var_195) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple5 var_196 = var_147[var_184];
                    EnvStack6 var_197 = var_196.mem_0;
                    float var_198 = var_196.mem_1;
                    float var_199 = var_196.mem_2;
                    float var_200 = (var_199 * var_199);
                    var_181[var_184] = var_200;
                } else {
                }
                long long int var_201 = (var_184 + 1);
                var_182[0] = var_201;
            }
            long long int var_202 = var_182[0];
            float var_203 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_181);
            __shared__ float var_204[1];
            long long int var_205 = threadIdx.x;
            char var_206 = (var_205 == 0);
            if (var_206) {
                var_204[0] = var_203;
            } else {
            }
            __syncthreads();
            float var_207 = var_204[0];
            Tuple7 var_223[1];
            long long int var_224[1];
            var_224[0] = 0;
            while (method_58(var_224)) {
                long long int var_226 = var_224[0];
                long long int var_227 = (128 * var_226);
                long long int var_228 = (var_16 + var_227);
                long long int var_229 = (128 - var_227);
                char var_230 = (var_228 < 128);
                if (var_230) {
                    char var_231 = (var_226 >= 0);
                    char var_233;
                    if (var_231) {
                        var_233 = (var_226 < 1);
                    } else {
                        var_233 = 0;
                    }
                    char var_234 = (var_233 == 0);
                    if (var_234) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_236;
                    if (var_231) {
                        var_236 = (var_226 < 1);
                    } else {
                        var_236 = 0;
                    }
                    char var_237 = (var_236 == 0);
                    if (var_237) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple5 var_238 = var_147[var_226];
                    EnvStack6 var_239 = var_238.mem_0;
                    float var_240 = var_238.mem_1;
                    float var_241 = var_238.mem_2;
                    char var_242 = (var_241 > 0);
                    float var_243;
                    if (var_242) {
                        var_243 = var_240;
                    } else {
                        var_243 = 0;
                    }
                    float var_244 = (var_207 / 128);
                    float var_245 = (0.0025 + var_244);
                    float var_246 = sqrt(var_245);
                    var_223[var_226] = make_Tuple7(var_239, var_243, var_241, var_246);
                } else {
                }
                long long int var_247 = (var_226 + 1);
                var_224[0] = var_247;
            }
            long long int var_248 = var_224[0];
            float var_264[1];
            long long int var_265[1];
            var_265[0] = 0;
            while (method_58(var_265)) {
                long long int var_267 = var_265[0];
                long long int var_268 = (128 * var_267);
                long long int var_269 = (var_16 + var_268);
                long long int var_270 = (128 - var_268);
                char var_271 = (var_269 < 128);
                if (var_271) {
                    char var_272 = (var_267 >= 0);
                    char var_274;
                    if (var_272) {
                        var_274 = (var_267 < 1);
                    } else {
                        var_274 = 0;
                    }
                    char var_275 = (var_274 == 0);
                    if (var_275) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_277;
                    if (var_272) {
                        var_277 = (var_267 < 1);
                    } else {
                        var_277 = 0;
                    }
                    char var_278 = (var_277 == 0);
                    if (var_278) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_279 = var_223[var_267];
                    EnvStack6 var_280 = var_279.mem_0;
                    float var_281 = var_279.mem_1;
                    float var_282 = var_279.mem_2;
                    float var_283 = var_279.mem_3;
                    float var_284 = (-var_281);
                    float var_285 = (var_284 * var_282);
                    float var_286 = (var_283 * var_283);
                    float var_287 = (var_285 / var_286);
                    var_264[var_267] = var_287;
                } else {
                }
                long long int var_288 = (var_267 + 1);
                var_265[0] = var_288;
            }
            long long int var_289 = var_265[0];
            float var_290 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_264);
            __shared__ float var_291[1];
            long long int var_292 = threadIdx.x;
            char var_293 = (var_292 == 0);
            if (var_293) {
                var_291[0] = var_290;
            } else {
            }
            __syncthreads();
            float var_294 = var_291[0];
            Tuple8 var_311[1];
            long long int var_312[1];
            var_312[0] = 0;
            while (method_58(var_312)) {
                long long int var_314 = var_312[0];
                long long int var_315 = (128 * var_314);
                long long int var_316 = (var_16 + var_315);
                long long int var_317 = (128 - var_315);
                char var_318 = (var_316 < 128);
                if (var_318) {
                    char var_319 = (var_314 >= 0);
                    char var_321;
                    if (var_319) {
                        var_321 = (var_314 < 1);
                    } else {
                        var_321 = 0;
                    }
                    char var_322 = (var_321 == 0);
                    if (var_322) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_324;
                    if (var_319) {
                        var_324 = (var_314 < 1);
                    } else {
                        var_324 = 0;
                    }
                    char var_325 = (var_324 == 0);
                    if (var_325) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple7 var_326 = var_223[var_314];
                    EnvStack6 var_327 = var_326.mem_0;
                    float var_328 = var_326.mem_1;
                    float var_329 = var_326.mem_2;
                    float var_330 = var_326.mem_3;
                    float var_331 = (var_328 / var_330);
                    float var_332 = (var_294 * var_329);
                    float var_333 = (var_330 * 128);
                    float var_334 = (var_332 / var_333);
                    float var_335 = (var_331 + var_334);
                    var_311[var_314] = make_Tuple8(var_327, var_335);
                } else {
                }
                long long int var_336 = (var_314 + 1);
                var_312[0] = var_336;
            }
            long long int var_337 = var_312[0];
            float var_347[1];
            long long int var_348[1];
            var_348[0] = 0;
            while (method_58(var_348)) {
                long long int var_350 = var_348[0];
                long long int var_351 = (128 * var_350);
                long long int var_352 = (var_16 + var_351);
                long long int var_353 = (128 - var_351);
                char var_354 = (var_352 < 128);
                if (var_354) {
                    char var_355 = (var_350 >= 0);
                    char var_357;
                    if (var_355) {
                        var_357 = (var_350 < 1);
                    } else {
                        var_357 = 0;
                    }
                    char var_358 = (var_357 == 0);
                    if (var_358) {
                        // "Argument out of bounds."
                    } else {
                    }
                    char var_360;
                    if (var_355) {
                        var_360 = (var_350 < 1);
                    } else {
                        var_360 = 0;
                    }
                    char var_361 = (var_360 == 0);
                    if (var_361) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple8 var_362 = var_311[var_350];
                    EnvStack6 var_363 = var_362.mem_0;
                    float var_364 = var_362.mem_1;
                    var_347[var_350] = var_364;
                } else {
                }
                long long int var_365 = (var_350 + 1);
                var_348[0] = var_365;
            }
            long long int var_366 = var_348[0];
            float var_367 = cub::BlockReduce<float,128,cub::BLOCK_REDUCE_WARP_REDUCTIONS,1,1>().Sum(var_347);
            __shared__ float var_368[1];
            long long int var_369 = threadIdx.x;
            char var_370 = (var_369 == 0);
            if (var_370) {
                var_368[0] = var_367;
            } else {
            }
            __syncthreads();
            float var_371 = var_368[0];
            long long int var_372[1];
            var_372[0] = 0;
            while (method_58(var_372)) {
                long long int var_374 = var_372[0];
                long long int var_375 = (128 * var_374);
                long long int var_376 = (var_16 + var_375);
                long long int var_377 = (128 - var_375);
                char var_378 = (var_376 < 128);
                if (var_378) {
                    char var_379 = (var_374 >= 0);
                    char var_381;
                    if (var_379) {
                        var_381 = (var_374 < 1);
                    } else {
                        var_381 = 0;
                    }
                    char var_382 = (var_381 == 0);
                    if (var_382) {
                        // "Argument out of bounds."
                    } else {
                    }
                    Tuple8 var_383 = var_311[var_374];
                    EnvStack6 var_384 = var_383.mem_0;
                    float var_385 = var_383.mem_1;
                    char var_386 = (var_22 >= 0);
                    char var_388;
                    if (var_386) {
                        var_388 = (var_22 < 64);
                    } else {
                        var_388 = 0;
                    }
                    char var_389 = (var_388 == 0);
                    if (var_389) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_390 = (var_22 * 128);
                    char var_391 = (var_376 >= 0);
                    char var_392 = (var_391 == 0);
                    if (var_392) {
                        // "Argument out of bounds."
                    } else {
                    }
                    long long int var_393 = (var_390 + var_376);
                    float var_394 = var_11[var_393];
                    float var_395 = var_12[var_393];
                    float var_396 = var_384.mem_0;
                    float var_397 = var_384.mem_1;
                    float var_398 = var_384.mem_2;
                    float var_399 = var_384.mem_3;
                    float var_400 = var_384.mem_4;
                    float var_401 = var_384.mem_5;
                    float var_402 = (var_371 / 128);
                    float var_403 = (var_385 - var_402);
                    float var_404 = (var_400 * var_401);
                    float var_405 = (var_403 * var_404);
                    float var_406 = (var_403 * var_401);
                    float var_407 = (var_403 * var_400);
                    if (var_392) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_408 = var_7 + var_376;
                    atomicAdd(var_408, var_405);
                    if (var_392) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_409 = var_8 + var_376;
                    atomicAdd(var_409, var_406);
                    if (var_392) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_410 = var_9 + var_376;
                    atomicAdd(var_410, var_407);
                    if (var_392) {
                        // "Argument out of bounds."
                    } else {
                    }
                    float * var_411 = var_10 + var_376;
                    atomicAdd(var_411, var_403);
                    float var_412 = (var_396 * var_401);
                    float var_413 = (var_412 + var_398);
                    float var_414 = (var_396 * var_400);
                    float var_415 = (var_414 + var_397);
                    float var_416 = (var_403 * var_413);
                    float var_417 = (var_403 * var_415);
                    float var_418 = (var_394 + var_416);
                    float var_419 = (var_395 + var_417);
                    var_11[var_393] = var_418;
                    var_12[var_393] = var_419;
                } else {
                }
                long long int var_420 = (var_374 + 1);
                var_372[0] = var_420;
            }
            long long int var_421 = var_372[0];
            long long int var_422 = (var_22 + 64);
            var_20[0] = var_422;
        }
        long long int var_423 = var_20[0];
    }
    __device__ char method_26(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 128);
    }
    __device__ char method_25(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 35692544);
    }
    __device__ char method_57(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 64);
    }
    __device__ char method_58(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 1);
    }
    __device__ float method_87(float var_0, float var_1) {
        char var_2 = (var_0 > var_1);
        if (var_2) {
            return var_0;
        } else {
            return var_1;
        }
    }
    __device__ char method_79(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 < 64);
    }
    __device__ char method_123(long long int * var_0) {
        long long int var_1 = var_0[0];
        return (var_1 < 16384);
    }
    __device__ char method_80(long long int * var_0, float * var_1) {
        long long int var_2 = var_0[0];
        float var_3 = var_1[0];
        return (var_2 >= 2);
    }
    __device__ char method_81(long long int var_0, long long int * var_1, float * var_2) {
        long long int var_3 = var_1[0];
        float var_4 = var_2[0];
        return (var_3 < var_0);
    }
}
"""

type EnvHeap0 =
    {
    mem_0: ManagedCuda.CudaContext
    }
and Env1 =
    struct
    val mem_0: uint64
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack2 =
    struct
    val mem_0: ResizeArray<Env1>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env3 =
    struct
    val mem_0: Env19
    val mem_1: uint64
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack4 =
    struct
    val mem_0: ResizeArray<Env3>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap5 =
    {
    mem_0: EnvStack2
    mem_1: (uint64 ref)
    mem_2: uint64
    mem_3: EnvStack4
    }
and EnvHeap6 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: EnvHeap5
    }
and EnvHeap7 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaRand.CudaRandDevice
    mem_2: EnvHeap5
    }
and EnvHeap8 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvHeap5
    }
and Env9 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env19
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack10 =
    struct
    val mem_0: ResizeArray<Env9>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap11 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvHeap5
    }
and Env12 =
    struct
    val mem_0: (int64 ref)
    val mem_1: Env16
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack13 =
    struct
    val mem_0: ResizeArray<Env12>
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap14 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    }
and EnvHeap15 =
    {
    mem_0: ManagedCuda.CudaEvent
    mem_1: (bool ref)
    mem_2: ManagedCuda.CudaStream
    }
and Env16 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvHeap17 =
    {
    mem_0: ManagedCuda.CudaContext
    mem_1: ManagedCuda.CudaBlas.CudaBlas
    mem_2: ManagedCuda.CudaRand.CudaRandDevice
    mem_3: EnvStack10
    mem_4: EnvStack13
    mem_5: EnvHeap5
    mem_6: (int64 ref)
    mem_7: EnvHeap15
    }
and Env18 =
    struct
    val mem_0: Env9
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and Env19 =
    struct
    val mem_0: (uint64 ref)
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack20 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack21 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack22 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvHeap23 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    mem_8: (int64 ref)
    mem_9: (uint64 ref)
    mem_10: (int64 ref)
    mem_11: (uint64 ref)
    mem_12: (int64 ref)
    mem_13: (uint64 ref)
    mem_14: (int64 ref)
    mem_15: (uint64 ref)
    mem_16: (int64 ref)
    mem_17: (uint64 ref)
    mem_18: (int64 ref)
    mem_19: (uint64 ref)
    mem_20: (int64 ref)
    mem_21: (uint64 ref)
    mem_22: (int64 ref)
    mem_23: (uint64 ref)
    }
and EnvHeap24 =
    {
    mem_0: (int64 ref)
    mem_1: (uint64 ref)
    mem_2: (int64 ref)
    mem_3: (uint64 ref)
    mem_4: (int64 ref)
    mem_5: (uint64 ref)
    mem_6: (int64 ref)
    mem_7: (uint64 ref)
    }
and Env25 =
    struct
    val mem_0: EnvHeap15
    new(arg_mem_0) = {mem_0 = arg_mem_0}
    end
and EnvStack26 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack27 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (int64 ref)
    val mem_3: (uint64 ref)
    val mem_4: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2, arg_mem_3, arg_mem_4) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2; mem_3 = arg_mem_3; mem_4 = arg_mem_4}
    end
and EnvStack28 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    val mem_2: (unit -> unit)
    new(arg_mem_0, arg_mem_1, arg_mem_2) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1; mem_2 = arg_mem_2}
    end
and EnvStack29 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
and EnvStack30 =
    struct
    val mem_0: (int64 ref)
    val mem_1: (uint64 ref)
    new(arg_mem_0, arg_mem_1) = {mem_0 = arg_mem_0; mem_1 = arg_mem_1}
    end
let rec method_0 ((var_0: System.Diagnostics.DataReceivedEventArgs)): unit =
    let (var_1: string) = var_0.get_Data()
    System.Console.WriteLine(var_1)
and method_1((var_0: EnvHeap6), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_7((var_0: EnvHeap15), (var_1: EnvHeap14), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_9((var_0: (uint8 [])), (var_1: (char [])), (var_2: int64), (var_3: int64)): unit =
    let (var_4: bool) = (var_3 < var_2)
    if var_4 then
        let (var_5: char) = var_1.[int32 var_3]
        let (var_6: int64) = (int64 var_5)
        let (var_7: bool) = (var_6 < 128L)
        let (var_8: bool) = (var_7 = false)
        if var_8 then
            (failwith "The inputs need to be in the [0,127] range.")
        else
            ()
        var_0.[int32 var_3] <- (uint8 var_6)
        let (var_9: int64) = (var_3 + 1L)
        method_9((var_0: (uint8 [])), (var_1: (char [])), (var_2: int64), (var_9: int64))
    else
        ()
and method_10((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (uint8 [])), (var_4: int64), (var_5: int64)): Env18 =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
    let (var_9: int64) = (var_2 * var_5)
    let (var_10: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_3,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_11: int64) = var_10.AddrOfPinnedObject().ToInt64()
    let (var_12: uint64) = (uint64 var_11)
    let (var_13: uint64) = (uint64 var_4)
    let (var_14: uint64) = (var_13 + var_12)
    let (var_15: Env9) = method_12((var_9: int64), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_16: (int64 ref)) = var_15.mem_0
    let (var_17: Env19) = var_15.mem_1
    let (var_18: (uint64 ref)) = var_17.mem_0
    let (var_19: uint64) = method_5((var_18: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_14)
    let (var_23: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_9)
    let (var_25: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_21, var_23, var_24, var_8)
    if var_25 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_25)
    var_10.Free()
    (Env18((Env9(var_16, (Env19(var_18))))))
and method_5((var_0: (uint64 ref))): uint64 =
    let (var_1: uint64) = (!var_0)
    let (var_2: bool) = (var_1 <> 0UL)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "A Cuda memory cell that has been disposed has been tried to be accessed.")
    else
        ()
    var_1
and method_19((var_0: uint64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): EnvStack20 =
    let (var_20: Env9) = method_20((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    let (var_21: (int64 ref)) = var_20.mem_0
    let (var_22: Env19) = var_20.mem_1
    let (var_23: (uint64 ref)) = var_22.mem_0
    method_21((var_0: uint64), (var_21: (int64 ref)), (var_23: (uint64 ref)), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule))
    EnvStack20((var_21: (int64 ref)), (var_23: (uint64 ref)))
and method_27((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack21 =
    let (var_2: Env9) = method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_29((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack21((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_30((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack21 =
    let (var_4: Env9) = method_28((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_31((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack21((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 512L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_33((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: float32) = 1.000000f
    method_34((var_4: float32), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
and method_37((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack22 =
    let (var_4: Env9) = method_32((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_38((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack22((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_39((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: (int64 ref)), (var_3: (uint64 ref))): unit =
    let (var_4: float32) = 0.500000f
    method_34((var_4: float32), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
and method_40((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack22 =
    let (var_2: Env9) = method_32((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
    let (var_9: ManagedCuda.CudaContext) = var_0.mem_0
    method_38((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_9: ManagedCuda.CudaContext), (var_8: ManagedCuda.BasicTypes.CUstream))
    EnvStack22((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_41((var_0: EnvHeap15), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env12 =
    let (var_3: (int64 ref)) = (ref 0L)
    let (var_4: EnvStack13) = var_1.mem_4
    method_8((var_3: (int64 ref)), (var_0: EnvHeap15), (var_4: EnvStack13))
    (Env12(var_3, (Env16(var_0))))
and method_42((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): EnvStack21 =
    let (var_2: Env9) = method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    let (var_3: (int64 ref)) = var_2.mem_0
    let (var_4: Env19) = var_2.mem_1
    let (var_5: (uint64 ref)) = var_4.mem_0
    method_43((var_3: (int64 ref)), (var_5: (uint64 ref)), (var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
    EnvStack21((var_3: (int64 ref)), (var_5: (uint64 ref)))
and method_44((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: EnvHeap24), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_12: int64)): unit =
    let (var_13: bool) = (var_12 < 5L)
    if var_13 then
        let (var_14: string) = System.String.Format("iteration {0}",var_12)
        let (var_15: string) = System.String.Format("Starting timing for: {0}",var_14)
        System.Console.WriteLine(var_15)
        let (var_16: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
        let (var_17: int64) = 0L
        let (var_18: float) = 0.000000
        let (var_19: int64) = 0L
        let (var_20: float) = method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_17: int64), (var_18: float), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: EnvHeap24), (var_19: int64))
        let (var_21: System.TimeSpan) = var_16.Elapsed
        let (var_22: string) = System.String.Format("The time was {0} for: {1}",var_21,var_14)
        System.Console.WriteLine(var_22)
        let (var_23: string) = System.String.Format("Training: {0}",var_20)
        System.Console.WriteLine(var_23)
        if (System.Double.IsNaN var_20) then
            System.Console.WriteLine("Training diverged. Aborting...")
        else
            let (var_24: int64) = (var_12 + 1L)
            method_44((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: EnvHeap23), (var_9: EnvHeap24), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule), (var_24: int64))
    else
        ()
and method_129((var_0: EnvStack13)): unit =
    let (var_1: ResizeArray<Env12>) = var_0.mem_0
    let (var_3: (Env12 -> unit)) = method_130
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_114((var_0: EnvStack10)): unit =
    let (var_1: ResizeArray<Env9>) = var_0.mem_0
    let (var_3: (Env9 -> unit)) = method_115
    var_1.ForEach <| System.Action<_>(var_3)
    var_1.Clear()
and method_2 ((var_0: Env3)): bool =
    let (var_1: Env19) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: uint64) = (!var_2)
    (var_4 = 0UL)
and method_3 ((var_0: Env3)): (Env3 -> int32) =
    let (var_1: Env19) = var_0.mem_0
    let (var_2: (uint64 ref)) = var_1.mem_0
    let (var_3: uint64) = var_0.mem_1
    method_4((var_2: (uint64 ref)))
and method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_3: uint64), (var_4: int32)): uint64 =
    let (var_5: bool) = (var_4 < var_2)
    if var_5 then
        let (var_6: ResizeArray<Env3>) = var_1.mem_0
        let (var_7: Env3) = var_6.[var_4]
        let (var_8: Env19) = var_7.mem_0
        let (var_9: (uint64 ref)) = var_8.mem_0
        let (var_10: uint64) = var_7.mem_1
        let (var_11: uint64) = method_5((var_9: (uint64 ref)))
        let (var_12: bool) = (var_11 >= var_3)
        let (var_13: bool) = (var_12 = false)
        if var_13 then
            (failwith "The next pointer should be higher than the last.")
        else
            ()
        let (var_14: uint64) = method_5((var_9: (uint64 ref)))
        let (var_15: uint64) = (var_14 - var_3)
        let (var_16: uint64) = (var_3 + 256UL)
        let (var_17: uint64) = (var_16 - 1UL)
        let (var_18: uint64) = (var_17 &&& 18446744073709551360UL)
        let (var_19: uint64) = (var_18 - var_3)
        let (var_20: bool) = (var_15 > var_19)
        if var_20 then
            let (var_21: ResizeArray<Env1>) = var_0.mem_0
            let (var_22: uint64) = (var_15 - var_19)
            var_21.Add((Env1(var_18, var_22)))
        else
            ()
        let (var_23: uint64) = (var_14 + var_10)
        let (var_24: int32) = (var_4 + 1)
        method_6((var_0: EnvStack2), (var_1: EnvStack4), (var_2: int32), (var_23: uint64), (var_24: int32))
    else
        var_3
and method_8((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: EnvStack13)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env12>) = var_2.mem_0
    var_5.Add((Env12(var_0, (Env16(var_1)))))
and method_11((var_0: EnvHeap15)): ManagedCuda.BasicTypes.CUstream =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    let (var_4: ManagedCuda.CudaStream) = var_0.mem_2
    var_4.Stream
and method_12((var_0: int64), (var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    method_13((var_1: EnvHeap17), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_0: int64))
and method_20((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 571080704L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_21((var_0: uint64), (var_1: (int64 ref)), (var_2: (uint64 ref)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_5: uint64) = method_5((var_2: (uint64 ref)))
    method_22((var_0: uint64), (var_5: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule))
and method_28((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 65536L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_29((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(16384L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.062500f)
and method_31((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(65536L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64)): Env9 =
    let (var_3: uint64) = (uint64 var_2)
    let (var_4: uint64) = (var_3 + 256UL)
    let (var_5: uint64) = (var_4 - 1UL)
    let (var_6: uint64) = (var_5 &&& 18446744073709551360UL)
    let (var_7: Env19) = method_14((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_6: uint64))
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: (int64 ref)) = (ref 0L)
    let (var_10: EnvStack10) = var_0.mem_3
    method_18((var_9: (int64 ref)), (var_8: (uint64 ref)), (var_10: EnvStack10))
    (Env9(var_9, (Env19(var_8))))
and method_34((var_0: float32), (var_1: (int64 ref)), (var_2: (uint64 ref)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_5: uint64) = method_5((var_2: (uint64 ref)))
    method_35((var_0: float32), (var_5: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_38((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(512L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_43((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(16384L)
    let (var_6: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
    let (var_7: (int64 ref)) = var_2.mem_6
    let (var_8: EnvHeap15) = var_2.mem_7
    let (var_9: ManagedCuda.BasicTypes.CUstream) = method_11((var_8: EnvHeap15))
    var_6.SetStream(var_9)
    let (var_10: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_11: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_10)
    var_6.GenerateNormal32(var_11, var_5, 0.000000f, 0.088388f)
and method_45((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: EnvHeap24), (var_14: int64)): float =
    let (var_15: bool) = (var_14 < 272L)
    if var_15 then
        let (var_16: bool) = (var_14 >= 0L)
        let (var_17: bool) = (var_16 = false)
        if var_17 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_18: int64) = (var_14 * 524288L)
        if var_17 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_19: int64) = (8192L + var_18)
        method_17((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_26: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_27: EnvStack10) = EnvStack10((var_26: ResizeArray<Env9>))
        let (var_28: ManagedCuda.CudaContext) = var_2.mem_0
        let (var_29: ManagedCuda.CudaBlas.CudaBlas) = var_2.mem_1
        let (var_30: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
        let (var_31: EnvStack10) = var_2.mem_3
        let (var_32: EnvStack13) = var_2.mem_4
        let (var_33: EnvHeap5) = var_2.mem_5
        let (var_34: (int64 ref)) = var_2.mem_6
        let (var_35: EnvHeap15) = var_2.mem_7
        let (var_36: EnvHeap17) = ({mem_0 = (var_28: ManagedCuda.CudaContext); mem_1 = (var_29: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_30: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_27: EnvStack10); mem_4 = (var_32: EnvStack13); mem_5 = (var_33: EnvHeap5); mem_6 = (var_34: (int64 ref)); mem_7 = (var_35: EnvHeap15)} : EnvHeap17)
        let (var_86: (int64 ref)) = var_36.mem_6
        let (var_87: EnvHeap15) = var_36.mem_7
        let (var_88: ManagedCuda.CudaContext) = var_36.mem_0
        let (var_89: ManagedCuda.CudaBlas.CudaBlas) = var_36.mem_1
        let (var_90: ManagedCuda.CudaRand.CudaRandDevice) = var_36.mem_2
        let (var_91: EnvStack10) = var_36.mem_3
        let (var_92: EnvStack13) = var_36.mem_4
        let (var_93: EnvHeap5) = var_36.mem_5
        let (var_94: EnvHeap17) = ({mem_0 = (var_88: ManagedCuda.CudaContext); mem_1 = (var_89: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_90: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_91: EnvStack10); mem_4 = (var_92: EnvStack13); mem_5 = (var_93: EnvHeap5); mem_6 = (var_10: (int64 ref)); mem_7 = (var_11: EnvHeap15)} : EnvHeap17)
        let (var_95: Env25) = method_46((var_11: EnvHeap15))
        let (var_96: EnvHeap15) = var_95.mem_0
        let (var_97: ManagedCuda.CudaEvent) = var_96.mem_0
        let (var_98: ManagedCuda.BasicTypes.CUstream) = method_11((var_87: EnvHeap15))
        var_97.Record(var_98)
        let (var_99: ManagedCuda.CudaStream) = var_96.mem_2
        var_99.WaitEvent var_97.Event
        let (var_100: EnvStack26) = method_47((var_10: (int64 ref)), (var_11: EnvHeap15), (var_86: (int64 ref)), (var_87: EnvHeap15), (var_94: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_18: int64), (var_12: EnvHeap23))
        let (var_101: (int64 ref)) = var_100.mem_0
        let (var_102: (uint64 ref)) = var_100.mem_1
        let (var_103: (int64 ref)) = var_100.mem_2
        let (var_104: (uint64 ref)) = var_100.mem_3
        let (var_105: (unit -> unit)) = var_100.mem_4
        let (var_106: EnvHeap17) = ({mem_0 = (var_88: ManagedCuda.CudaContext); mem_1 = (var_89: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_90: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_91: EnvStack10); mem_4 = (var_92: EnvStack13); mem_5 = (var_93: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_107: Env25) = method_46((var_9: EnvHeap15))
        let (var_108: EnvHeap15) = var_107.mem_0
        let (var_109: ManagedCuda.CudaEvent) = var_108.mem_0
        let (var_110: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
        var_109.Record(var_110)
        let (var_111: ManagedCuda.CudaStream) = var_108.mem_2
        var_111.WaitEvent var_109.Event
        let (var_112: EnvStack27) = method_66((var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_106: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_101: (int64 ref)), (var_102: (uint64 ref)), (var_103: (int64 ref)), (var_104: (uint64 ref)), (var_13: EnvHeap24))
        let (var_113: (int64 ref)) = var_112.mem_0
        let (var_114: (uint64 ref)) = var_112.mem_1
        let (var_115: (int64 ref)) = var_112.mem_2
        let (var_116: (uint64 ref)) = var_112.mem_3
        let (var_117: (unit -> unit)) = var_112.mem_4
        let (var_118: EnvHeap17) = ({mem_0 = (var_88: ManagedCuda.CudaContext); mem_1 = (var_89: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_90: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_91: EnvStack10); mem_4 = (var_92: EnvStack13); mem_5 = (var_93: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_119: Env25) = method_46((var_7: EnvHeap15))
        let (var_120: EnvHeap15) = var_119.mem_0
        let (var_121: ManagedCuda.CudaEvent) = var_120.mem_0
        let (var_122: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_121.Record(var_122)
        let (var_123: ManagedCuda.CudaStream) = var_120.mem_2
        var_123.WaitEvent var_121.Event
        let (var_124: Env25) = method_46((var_7: EnvHeap15))
        let (var_125: EnvHeap15) = var_124.mem_0
        let (var_126: ManagedCuda.CudaEvent) = var_125.mem_0
        let (var_127: ManagedCuda.BasicTypes.CUstream) = method_11((var_87: EnvHeap15))
        var_126.Record(var_127)
        let (var_128: ManagedCuda.CudaStream) = var_125.mem_2
        var_128.WaitEvent var_126.Event
        let (var_129: EnvStack28) = method_82((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_86: (int64 ref)), (var_87: EnvHeap15), (var_118: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_113: (int64 ref)), (var_114: (uint64 ref)), (var_115: (int64 ref)), (var_116: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_19: int64))
        let (var_130: (int64 ref)) = var_129.mem_0
        let (var_131: (uint64 ref)) = var_129.mem_1
        let (var_132: (unit -> unit)) = var_129.mem_2
        let (var_133: (unit -> unit)) = method_97((var_105: (unit -> unit)), (var_117: (unit -> unit)), (var_132: (unit -> unit)))
        let (var_134: (unit -> float32)) = method_98((var_130: (int64 ref)), (var_131: (uint64 ref)), (var_36: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_175: int64) = 1L
        method_113((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_18: int64), (var_19: int64), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: EnvHeap24), (var_36: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_14: int64), (var_2: EnvHeap17), (var_134: (unit -> float32)), (var_133: (unit -> unit)), (var_101: (int64 ref)), (var_102: (uint64 ref)), (var_103: (int64 ref)), (var_104: (uint64 ref)), (var_175: int64))
    else
        let (var_177: float) = (float var_4)
        (var_5 / var_177)
and method_130 ((var_0: Env12)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env16) = var_0.mem_1
    let (var_3: EnvHeap15) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        let (var_8: ManagedCuda.CudaStream) = var_3.mem_2
        var_8.Dispose()
        let (var_9: ManagedCuda.CudaEvent) = var_3.mem_0
        var_9.Dispose()
        let (var_10: (bool ref)) = var_3.mem_1
        var_10 := false
    else
        ()
and method_115 ((var_0: Env9)): unit =
    let (var_1: (int64 ref)) = var_0.mem_0
    let (var_2: Env19) = var_0.mem_1
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: int64) = (!var_1)
    let (var_5: int64) = (var_4 - 1L)
    var_1 := var_5
    let (var_6: int64) = (!var_1)
    let (var_7: bool) = (var_6 = 0L)
    if var_7 then
        var_3 := 0UL
    else
        ()
and method_4 ((var_1: (uint64 ref))) ((var_0: Env3)): int32 =
    let (var_2: Env19) = var_0.mem_0
    let (var_3: (uint64 ref)) = var_2.mem_0
    let (var_4: uint64) = var_0.mem_1
    let (var_5: uint64) = method_5((var_1: (uint64 ref)))
    let (var_6: uint64) = method_5((var_3: (uint64 ref)))
    let (var_7: bool) = (var_5 < var_6)
    if var_7 then
        -1
    else
        let (var_8: bool) = (var_5 = var_6)
        if var_8 then
            0
        else
            1
and method_22((var_0: uint64), (var_1: uint64), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_23((var_0: uint64), (var_1: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
and method_14((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: uint64)): Env19 =
    let (var_3: EnvHeap5) = var_0.mem_5
    let (var_4: (uint64 ref)) = var_3.mem_1
    let (var_5: uint64) = var_3.mem_2
    let (var_6: EnvStack4) = var_3.mem_3
    let (var_7: EnvStack2) = var_3.mem_0
    let (var_8: ResizeArray<Env1>) = var_7.mem_0
    let (var_9: int32) = var_8.get_Count()
    let (var_10: bool) = (var_9 > 0)
    let (var_11: bool) = (var_10 = false)
    if var_11 then
        (failwith "Out of memory in the designated section.")
    else
        ()
    let (var_12: Env1) = var_8.[0]
    let (var_13: uint64) = var_12.mem_0
    let (var_14: uint64) = var_12.mem_1
    let (var_15: bool) = (var_2 <= var_14)
    let (var_42: Env3) =
        if var_15 then
            let (var_16: uint64) = (var_13 + var_2)
            let (var_17: uint64) = (var_14 - var_2)
            var_8.[0] <- (Env1(var_16, var_17))
            let (var_18: (uint64 ref)) = (ref var_13)
            (Env3((Env19(var_18)), var_2))
        else
            let (var_20: (Env1 -> (Env1 -> int32))) = method_15
            let (var_21: System.Comparison<Env1>) = System.Comparison<Env1>(var_20)
            var_8.Sort(var_21)
            let (var_22: Env1) = var_8.[0]
            let (var_23: uint64) = var_22.mem_0
            let (var_24: uint64) = var_22.mem_1
            let (var_25: bool) = (var_2 <= var_24)
            if var_25 then
                let (var_26: uint64) = (var_23 + var_2)
                let (var_27: uint64) = (var_24 - var_2)
                var_8.[0] <- (Env1(var_26, var_27))
                let (var_28: (uint64 ref)) = (ref var_23)
                (Env3((Env19(var_28)), var_2))
            else
                method_17((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule))
                let (var_30: (Env1 -> (Env1 -> int32))) = method_15
                let (var_31: System.Comparison<Env1>) = System.Comparison<Env1>(var_30)
                var_8.Sort(var_31)
                let (var_32: Env1) = var_8.[0]
                let (var_33: uint64) = var_32.mem_0
                let (var_34: uint64) = var_32.mem_1
                let (var_35: bool) = (var_2 <= var_34)
                if var_35 then
                    let (var_36: uint64) = (var_33 + var_2)
                    let (var_37: uint64) = (var_34 - var_2)
                    var_8.[0] <- (Env1(var_36, var_37))
                    let (var_38: (uint64 ref)) = (ref var_33)
                    (Env3((Env19(var_38)), var_2))
                else
                    (failwith "Out of memory in the designated section.")
    let (var_43: Env19) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_43.mem_0
    let (var_45: uint64) = var_42.mem_1
    let (var_46: ResizeArray<Env3>) = var_6.mem_0
    var_46.Add((Env3((Env19(var_44)), var_45)))
    (Env19(var_44))
and method_18((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvStack10)): unit =
    let (var_3: int64) = (!var_0)
    let (var_4: int64) = (var_3 + 1L)
    var_0 := var_4
    let (var_5: ResizeArray<Env9>) = var_2.mem_0
    var_5.Add((Env9(var_0, (Env19(var_1)))))
and method_35((var_0: float32), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_36((var_0: float32), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_36", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_17((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_2: EnvHeap5) = var_0.mem_5
    let (var_3: (uint64 ref)) = var_2.mem_1
    let (var_4: uint64) = var_2.mem_2
    let (var_5: EnvStack2) = var_2.mem_0
    let (var_6: EnvStack4) = var_2.mem_3
    let (var_7: ResizeArray<Env3>) = var_6.mem_0
    let (var_9: (Env3 -> bool)) = method_2
    let (var_10: int32) = var_7.RemoveAll <| System.Predicate(var_9)
    let (var_12: (Env3 -> (Env3 -> int32))) = method_3
    let (var_13: System.Comparison<Env3>) = System.Comparison<Env3>(var_12)
    var_7.Sort(var_13)
    let (var_14: ResizeArray<Env1>) = var_5.mem_0
    var_14.Clear()
    let (var_15: int32) = var_7.get_Count()
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: int32) = 0
    let (var_18: uint64) = method_6((var_5: EnvStack2), (var_6: EnvStack4), (var_15: int32), (var_16: uint64), (var_17: int32))
    let (var_19: uint64) = method_5((var_3: (uint64 ref)))
    let (var_20: uint64) = (var_19 + var_4)
    let (var_21: uint64) = (var_20 - var_18)
    let (var_22: uint64) = (var_18 + 256UL)
    let (var_23: uint64) = (var_22 - 1UL)
    let (var_24: uint64) = (var_23 &&& 18446744073709551360UL)
    let (var_25: uint64) = (var_24 - var_18)
    let (var_26: bool) = (var_21 > var_25)
    if var_26 then
        let (var_27: uint64) = (var_21 - var_25)
        var_14.Add((Env1(var_24, var_27)))
    else
        ()
and method_46((var_0: EnvHeap15)): Env25 =
    let (var_1: (bool ref)) = var_0.mem_1
    let (var_2: bool) = (!var_1)
    let (var_3: bool) = (var_2 = false)
    if var_3 then
        (failwith "The stream has been disposed.")
    else
        ()
    (Env25(var_0))
and method_47((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_9: EnvHeap23)): EnvStack26 =
    let (var_10: (int64 ref)) = var_9.mem_0
    let (var_11: (uint64 ref)) = var_9.mem_1
    let (var_12: (int64 ref)) = var_9.mem_2
    let (var_13: (uint64 ref)) = var_9.mem_3
    let (var_14: (int64 ref)) = var_9.mem_4
    let (var_15: (uint64 ref)) = var_9.mem_5
    let (var_16: (int64 ref)) = var_9.mem_6
    let (var_17: (uint64 ref)) = var_9.mem_7
    let (var_18: (int64 ref)) = var_9.mem_8
    let (var_19: (uint64 ref)) = var_9.mem_9
    let (var_20: (int64 ref)) = var_9.mem_10
    let (var_21: (uint64 ref)) = var_9.mem_11
    let (var_22: (int64 ref)) = var_9.mem_12
    let (var_23: (uint64 ref)) = var_9.mem_13
    let (var_24: (int64 ref)) = var_9.mem_14
    let (var_25: (uint64 ref)) = var_9.mem_15
    let (var_26: (int64 ref)) = var_9.mem_16
    let (var_27: (uint64 ref)) = var_9.mem_17
    let (var_28: (int64 ref)) = var_9.mem_18
    let (var_29: (uint64 ref)) = var_9.mem_19
    let (var_30: (int64 ref)) = var_9.mem_20
    let (var_31: (uint64 ref)) = var_9.mem_21
    let (var_32: (int64 ref)) = var_9.mem_22
    let (var_33: (uint64 ref)) = var_9.mem_23
    let (var_34: EnvStack29) = method_48((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_35: (int64 ref)) = var_34.mem_0
    let (var_36: (uint64 ref)) = var_34.mem_1
    let (var_37: EnvStack29) = method_51((var_35: (int64 ref)), (var_36: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_38: (int64 ref)) = var_37.mem_0
    let (var_39: (uint64 ref)) = var_37.mem_1
    let (var_40: uint64) = method_5((var_21: (uint64 ref)))
    let (var_41: uint64) = method_5((var_25: (uint64 ref)))
    let (var_42: EnvStack29) = method_53((var_40: uint64), (var_41: uint64), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_43: (int64 ref)) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_42.mem_1
    let (var_45: EnvStack29) = method_51((var_43: (int64 ref)), (var_44: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_46: (int64 ref)) = var_45.mem_0
    let (var_47: (uint64 ref)) = var_45.mem_1
    let (var_48: (unit -> unit)) = method_59((var_38: (int64 ref)), (var_39: (uint64 ref)), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: int64), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack26((var_46: (int64 ref)), (var_47: (uint64 ref)), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_48: (unit -> unit)))
and method_66((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap24)): EnvStack27 =
    let (var_11: (int64 ref)) = var_10.mem_4
    let (var_12: (uint64 ref)) = var_10.mem_5
    let (var_13: (int64 ref)) = var_10.mem_6
    let (var_14: (uint64 ref)) = var_10.mem_7
    let (var_15: (int64 ref)) = var_10.mem_0
    let (var_16: (uint64 ref)) = var_10.mem_1
    let (var_17: (int64 ref)) = var_10.mem_2
    let (var_18: (uint64 ref)) = var_10.mem_3
    let (var_19: EnvStack29) = method_67((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_20: (int64 ref)) = var_19.mem_0
    let (var_21: (uint64 ref)) = var_19.mem_1
    let (var_22: EnvStack29) = method_51((var_20: (int64 ref)), (var_21: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_23: (int64 ref)) = var_22.mem_0
    let (var_24: (uint64 ref)) = var_22.mem_1
    method_69((var_17: (int64 ref)), (var_18: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_25: (unit -> unit)) = method_72((var_23: (int64 ref)), (var_24: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_11: (int64 ref)), (var_12: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack27((var_23: (int64 ref)), (var_24: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_25: (unit -> unit)))
and method_82((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: int64)): EnvStack28 =
    let (var_15: Env9) = method_83((var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
    let (var_16: (int64 ref)) = var_15.mem_0
    let (var_17: Env19) = var_15.mem_1
    let (var_18: (uint64 ref)) = var_17.mem_0
    let (var_19: uint64) = method_5((var_11: (uint64 ref)))
    let (var_20: uint64) = method_5((var_13: (uint64 ref)))
    let (var_21: int64) = (var_14 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: uint64) = method_5((var_18: (uint64 ref)))
    method_84((var_19: uint64), (var_23: uint64), (var_24: uint64), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
    let (var_25: EnvStack30) = method_88((var_16: (int64 ref)), (var_18: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule))
    let (var_26: (int64 ref)) = var_25.mem_0
    let (var_27: (uint64 ref)) = var_25.mem_1
    let (var_28: (unit -> unit)) = method_92((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: int64), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15))
    EnvStack28((var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: (unit -> unit)))
and method_97 ((var_0: (unit -> unit)), (var_1: (unit -> unit)), (var_2: (unit -> unit))) (): unit =
    var_2()
    var_1()
    var_0()
and method_98 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)) (): float32 =
    let (var_4: int64) = 1L
    let (var_5: int64) = 0L
    let (var_6: (float32 [])) = method_99((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_5: int64))
    var_6.[int32 0L]
and method_113((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: int64), (var_15: float), (var_16: int64), (var_17: EnvHeap17), (var_18: (unit -> float32)), (var_19: (unit -> unit)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: int64)): float =
    let (var_25: bool) = (var_24 < 64L)
    if var_25 then
        let (var_26: bool) = (var_24 >= 0L)
        let (var_27: bool) = (var_26 = false)
        if var_27 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_28: int64) = (var_24 * 8192L)
        let (var_29: int64) = (var_2 + var_28)
        if var_27 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_30: int64) = (var_3 + var_28)
        let (var_31: (int64 ref)) = var_12.mem_6
        let (var_32: EnvHeap15) = var_12.mem_7
        let (var_33: ManagedCuda.CudaContext) = var_12.mem_0
        let (var_34: ManagedCuda.CudaBlas.CudaBlas) = var_12.mem_1
        let (var_35: ManagedCuda.CudaRand.CudaRandDevice) = var_12.mem_2
        let (var_36: EnvStack10) = var_12.mem_3
        let (var_37: EnvStack13) = var_12.mem_4
        let (var_38: EnvHeap5) = var_12.mem_5
        let (var_39: EnvHeap17) = ({mem_0 = (var_33: ManagedCuda.CudaContext); mem_1 = (var_34: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_35: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_36: EnvStack10); mem_4 = (var_37: EnvStack13); mem_5 = (var_38: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_40: Env25) = method_46((var_9: EnvHeap15))
        let (var_41: EnvHeap15) = var_40.mem_0
        let (var_42: ManagedCuda.CudaEvent) = var_41.mem_0
        let (var_43: ManagedCuda.BasicTypes.CUstream) = method_11((var_32: EnvHeap15))
        var_42.Record(var_43)
        let (var_44: ManagedCuda.CudaStream) = var_41.mem_2
        var_44.WaitEvent var_42.Event
        let (var_45: EnvStack26) = method_100((var_8: (int64 ref)), (var_9: EnvHeap15), (var_31: (int64 ref)), (var_32: EnvHeap15), (var_39: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_29: int64), (var_10: EnvHeap23))
        let (var_46: (int64 ref)) = var_45.mem_0
        let (var_47: (uint64 ref)) = var_45.mem_1
        let (var_48: (int64 ref)) = var_45.mem_2
        let (var_49: (uint64 ref)) = var_45.mem_3
        let (var_50: (unit -> unit)) = var_45.mem_4
        let (var_51: EnvHeap17) = ({mem_0 = (var_33: ManagedCuda.CudaContext); mem_1 = (var_34: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_35: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_36: EnvStack10); mem_4 = (var_37: EnvStack13); mem_5 = (var_38: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_52: Env25) = method_46((var_7: EnvHeap15))
        let (var_53: EnvHeap15) = var_52.mem_0
        let (var_54: ManagedCuda.CudaEvent) = var_53.mem_0
        let (var_55: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_54.Record(var_55)
        let (var_56: ManagedCuda.CudaStream) = var_53.mem_2
        var_56.WaitEvent var_54.Event
        let (var_57: EnvStack27) = method_66((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_51: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_11: EnvHeap24))
        let (var_58: (int64 ref)) = var_57.mem_0
        let (var_59: (uint64 ref)) = var_57.mem_1
        let (var_60: (int64 ref)) = var_57.mem_2
        let (var_61: (uint64 ref)) = var_57.mem_3
        let (var_62: (unit -> unit)) = var_57.mem_4
        let (var_63: EnvHeap17) = ({mem_0 = (var_33: ManagedCuda.CudaContext); mem_1 = (var_34: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_35: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_36: EnvStack10); mem_4 = (var_37: EnvStack13); mem_5 = (var_38: EnvHeap5); mem_6 = (var_4: (int64 ref)); mem_7 = (var_5: EnvHeap15)} : EnvHeap17)
        let (var_64: Env25) = method_46((var_5: EnvHeap15))
        let (var_65: EnvHeap15) = var_64.mem_0
        let (var_66: ManagedCuda.CudaEvent) = var_65.mem_0
        let (var_67: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
        var_66.Record(var_67)
        let (var_68: ManagedCuda.CudaStream) = var_65.mem_2
        var_68.WaitEvent var_66.Event
        let (var_69: Env25) = method_46((var_5: EnvHeap15))
        let (var_70: EnvHeap15) = var_69.mem_0
        let (var_71: ManagedCuda.CudaEvent) = var_70.mem_0
        let (var_72: ManagedCuda.BasicTypes.CUstream) = method_11((var_32: EnvHeap15))
        var_71.Record(var_72)
        let (var_73: ManagedCuda.CudaStream) = var_70.mem_2
        var_73.WaitEvent var_71.Event
        let (var_74: EnvStack28) = method_82((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_31: (int64 ref)), (var_32: EnvHeap15), (var_63: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_60: (int64 ref)), (var_61: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_30: int64))
        let (var_75: (int64 ref)) = var_74.mem_0
        let (var_76: (uint64 ref)) = var_74.mem_1
        let (var_77: (unit -> unit)) = var_74.mem_2
        let (var_78: (unit -> unit)) = method_111((var_19: (unit -> unit)), (var_50: (unit -> unit)), (var_62: (unit -> unit)), (var_77: (unit -> unit)))
        let (var_79: (unit -> float32)) = method_112((var_75: (int64 ref)), (var_76: (uint64 ref)), (var_18: (unit -> float32)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
        let (var_80: int64) = (var_24 + 1L)
        method_113((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: int64), (var_15: float), (var_16: int64), (var_17: EnvHeap17), (var_79: (unit -> float32)), (var_78: (unit -> unit)), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_80: int64))
    else
        let (var_82: float32) = var_18()
        let (var_83: float) = (float var_82)
        let (var_84: float) = (var_15 + var_83)
        let (var_85: int64) = (var_14 + 1L)
        let (var_92: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_93: EnvStack10) = EnvStack10((var_92: ResizeArray<Env9>))
        let (var_94: ManagedCuda.CudaContext) = var_12.mem_0
        let (var_95: ManagedCuda.CudaBlas.CudaBlas) = var_12.mem_1
        let (var_96: ManagedCuda.CudaRand.CudaRandDevice) = var_12.mem_2
        let (var_97: EnvStack10) = var_12.mem_3
        let (var_98: EnvStack13) = var_12.mem_4
        let (var_99: EnvHeap5) = var_12.mem_5
        let (var_100: (int64 ref)) = var_12.mem_6
        let (var_101: EnvHeap15) = var_12.mem_7
        let (var_102: EnvHeap17) = ({mem_0 = (var_94: ManagedCuda.CudaContext); mem_1 = (var_95: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_96: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_93: EnvStack10); mem_4 = (var_98: EnvStack13); mem_5 = (var_99: EnvHeap5); mem_6 = (var_100: (int64 ref)); mem_7 = (var_101: EnvHeap15)} : EnvHeap17)
        let (var_103: EnvStack10) = var_102.mem_3
        method_18((var_22: (int64 ref)), (var_23: (uint64 ref)), (var_103: EnvStack10))
        if (System.Double.IsNaN var_84) then
            method_114((var_97: EnvStack10))
            method_114((var_103: EnvStack10))
            let (var_104: float) = (float var_85)
            (var_84 / var_104)
        else
            var_19()
            method_116((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
            method_114((var_97: EnvStack10))
            let (var_106: int64) = (var_16 + 1L)
            method_124((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_17: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_85: int64), (var_84: float), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_102: EnvHeap17), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_106: int64))
and method_23((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_24((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_24", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(139424u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(256u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_15 ((var_0: Env1)): (Env1 -> int32) =
    let (var_1: uint64) = var_0.mem_0
    let (var_2: uint64) = var_0.mem_1
    method_16((var_2: uint64))
and method_48((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_7: Env9) = method_49((var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    let (var_8: (int64 ref)) = var_7.mem_0
    let (var_9: Env19) = var_7.mem_1
    let (var_10: (uint64 ref)) = var_9.mem_0
    method_50((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_8: (int64 ref)), (var_10: (uint64 ref)), (var_5: EnvHeap17), (var_6: ManagedCuda.BasicTypes.CUmodule))
    EnvStack29((var_8: (int64 ref)), (var_10: (uint64 ref)))
and method_51((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_4: Env9) = method_49((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_5: (int64 ref)) = var_4.mem_0
    let (var_6: Env19) = var_4.mem_1
    let (var_7: (uint64 ref)) = var_6.mem_0
    let (var_8: (int64 ref)) = var_2.mem_6
    let (var_9: EnvHeap15) = var_2.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_11: ManagedCuda.CudaContext) = var_2.mem_0
    method_52((var_5: (int64 ref)), (var_7: (uint64 ref)), (var_11: ManagedCuda.CudaContext), (var_10: ManagedCuda.BasicTypes.CUstream))
    EnvStack29((var_5: (int64 ref)), (var_7: (uint64 ref)))
and method_53((var_0: uint64), (var_1: uint64), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_28: Env9) = method_49((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_29: (int64 ref)) = var_28.mem_0
    let (var_30: Env19) = var_28.mem_1
    let (var_31: (uint64 ref)) = var_30.mem_0
    let (var_32: uint64) = method_5((var_3: (uint64 ref)))
    let (var_33: uint64) = method_5((var_31: (uint64 ref)))
    method_54((var_32: uint64), (var_0: uint64), (var_1: uint64), (var_33: uint64), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack29((var_29: (int64 ref)), (var_31: (uint64 ref)))
and method_59 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: (int64 ref)), (var_26: EnvHeap15), (var_27: (int64 ref)), (var_28: EnvHeap15)) (): unit =
    let (var_29: uint64) = method_5((var_16: (uint64 ref)))
    let (var_30: uint64) = method_5((var_20: (uint64 ref)))
    let (var_31: uint64) = method_5((var_14: (uint64 ref)))
    let (var_32: uint64) = method_5((var_18: (uint64 ref)))
    method_60((var_29: uint64), (var_30: uint64), (var_31: uint64), (var_32: uint64), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    method_64((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    let (var_33: Env25) = method_46((var_28: EnvHeap15))
    let (var_34: EnvHeap15) = var_33.mem_0
    let (var_35: ManagedCuda.CudaEvent) = var_34.mem_0
    let (var_36: ManagedCuda.BasicTypes.CUstream) = method_11((var_26: EnvHeap15))
    var_35.Record(var_36)
    let (var_37: ManagedCuda.CudaStream) = var_34.mem_2
    var_37.WaitEvent var_35.Event
and method_67((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_6: Env9) = method_49((var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_7: (int64 ref)) = var_6.mem_0
    let (var_8: Env19) = var_6.mem_1
    let (var_9: (uint64 ref)) = var_8.mem_0
    method_68((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_7: (int64 ref)), (var_9: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    EnvStack29((var_7: (int64 ref)), (var_9: (uint64 ref)))
and method_69((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    let (var_8: uint64) = method_5((var_3: (uint64 ref)))
    method_70((var_6: uint64), (var_7: uint64), (var_8: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_72 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule), (var_18: (int64 ref)), (var_19: EnvHeap15), (var_20: (int64 ref)), (var_21: EnvHeap15)) (): unit =
    method_73((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    let (var_22: Env25) = method_46((var_21: EnvHeap15))
    let (var_23: EnvHeap15) = var_22.mem_0
    let (var_24: ManagedCuda.CudaEvent) = var_23.mem_0
    let (var_25: ManagedCuda.BasicTypes.CUstream) = method_11((var_19: EnvHeap15))
    var_24.Record(var_25)
    let (var_26: ManagedCuda.CudaStream) = var_23.mem_2
    var_26.WaitEvent var_24.Event
and method_83((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 256L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_84((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_85((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_88((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule)): EnvStack30 =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: Env9) = method_89((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
    let (var_6: (int64 ref)) = var_5.mem_0
    let (var_7: Env19) = var_5.mem_1
    let (var_8: (uint64 ref)) = var_7.mem_0
    let (var_9: uint64) = method_5((var_8: (uint64 ref)))
    method_90((var_4: uint64), (var_9: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_2: EnvHeap17))
    EnvStack30((var_6: (int64 ref)), (var_8: (uint64 ref)))
and method_92 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule), (var_9: (int64 ref)), (var_10: EnvHeap15), (var_11: (int64 ref)), (var_12: EnvHeap15), (var_13: (int64 ref)), (var_14: EnvHeap15)) (): unit =
    method_93((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
    let (var_15: Env25) = method_46((var_12: EnvHeap15))
    let (var_16: EnvHeap15) = var_15.mem_0
    let (var_17: ManagedCuda.CudaEvent) = var_16.mem_0
    let (var_18: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_17.Record(var_18)
    let (var_19: ManagedCuda.CudaStream) = var_16.mem_2
    var_19.WaitEvent var_17.Event
    let (var_20: Env25) = method_46((var_14: EnvHeap15))
    let (var_21: EnvHeap15) = var_20.mem_0
    let (var_22: ManagedCuda.CudaEvent) = var_21.mem_0
    let (var_23: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_22.Record(var_23)
    let (var_24: ManagedCuda.CudaStream) = var_21.mem_2
    var_24.WaitEvent var_22.Event
and method_99((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: int64)): (float32 []) =
    let (var_6: (int64 ref)) = var_0.mem_6
    let (var_7: EnvHeap15) = var_0.mem_7
    let (var_8: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
    let (var_9: uint64) = method_5((var_4: (uint64 ref)))
    let (var_10: int64) = (var_5 * 4L)
    let (var_11: uint64) = (uint64 var_10)
    let (var_12: uint64) = (var_9 + var_11)
    let (var_13: (float32 [])) = Array.zeroCreate<float32> (System.Convert.ToInt32(var_2))
    let (var_14: System.Runtime.InteropServices.GCHandle) = System.Runtime.InteropServices.GCHandle.Alloc(var_13,System.Runtime.InteropServices.GCHandleType.Pinned)
    let (var_15: int64) = var_14.AddrOfPinnedObject().ToInt64()
    let (var_16: uint64) = (uint64 var_15)
    let (var_17: int64) = (var_2 * 4L)
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_12)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_23: ManagedCuda.BasicTypes.CUResult) = ManagedCuda.DriverAPINativeMethods.AsynchronousMemcpy_v2.cuMemcpyAsync(var_19, var_21, var_22, var_8)
    if var_23 <> ManagedCuda.BasicTypes.CUResult.Success then raise <| new ManagedCuda.CudaException(var_23)
    var_14.Free()
    var_13
and method_100((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: int64), (var_13: EnvHeap23)): EnvStack26 =
    let (var_14: (int64 ref)) = var_13.mem_0
    let (var_15: (uint64 ref)) = var_13.mem_1
    let (var_16: (int64 ref)) = var_13.mem_2
    let (var_17: (uint64 ref)) = var_13.mem_3
    let (var_18: (int64 ref)) = var_13.mem_4
    let (var_19: (uint64 ref)) = var_13.mem_5
    let (var_20: (int64 ref)) = var_13.mem_6
    let (var_21: (uint64 ref)) = var_13.mem_7
    let (var_22: (int64 ref)) = var_13.mem_8
    let (var_23: (uint64 ref)) = var_13.mem_9
    let (var_24: (int64 ref)) = var_13.mem_10
    let (var_25: (uint64 ref)) = var_13.mem_11
    let (var_26: (int64 ref)) = var_13.mem_12
    let (var_27: (uint64 ref)) = var_13.mem_13
    let (var_28: (int64 ref)) = var_13.mem_14
    let (var_29: (uint64 ref)) = var_13.mem_15
    let (var_30: (int64 ref)) = var_13.mem_16
    let (var_31: (uint64 ref)) = var_13.mem_17
    let (var_32: (int64 ref)) = var_13.mem_18
    let (var_33: (uint64 ref)) = var_13.mem_19
    let (var_34: (int64 ref)) = var_13.mem_20
    let (var_35: (uint64 ref)) = var_13.mem_21
    let (var_36: (int64 ref)) = var_13.mem_22
    let (var_37: (uint64 ref)) = var_13.mem_23
    let (var_38: EnvStack29) = method_48((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: int64), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_39: (int64 ref)) = var_38.mem_0
    let (var_40: (uint64 ref)) = var_38.mem_1
    let (var_41: EnvStack29) = method_51((var_39: (int64 ref)), (var_40: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_42: (int64 ref)) = var_41.mem_0
    let (var_43: (uint64 ref)) = var_41.mem_1
    let (var_44: EnvStack29) = method_67((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_45: (int64 ref)) = var_44.mem_0
    let (var_46: (uint64 ref)) = var_44.mem_1
    let (var_47: EnvStack29) = method_51((var_45: (int64 ref)), (var_46: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_48: (int64 ref)) = var_47.mem_0
    let (var_49: (uint64 ref)) = var_47.mem_1
    let (var_50: uint64) = method_5((var_17: (uint64 ref)))
    let (var_51: uint64) = method_5((var_21: (uint64 ref)))
    let (var_52: uint64) = method_5((var_25: (uint64 ref)))
    let (var_53: uint64) = method_5((var_29: (uint64 ref)))
    let (var_54: EnvStack29) = method_101((var_50: uint64), (var_51: uint64), (var_52: uint64), (var_53: uint64), (var_39: (int64 ref)), (var_40: (uint64 ref)), (var_45: (int64 ref)), (var_46: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_55: (int64 ref)) = var_54.mem_0
    let (var_56: (uint64 ref)) = var_54.mem_1
    let (var_57: EnvStack29) = method_51((var_55: (int64 ref)), (var_56: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_58: (int64 ref)) = var_57.mem_0
    let (var_59: (uint64 ref)) = var_57.mem_1
    let (var_60: (unit -> unit)) = method_105((var_42: (int64 ref)), (var_43: (uint64 ref)), (var_39: (int64 ref)), (var_40: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: int64), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_45: (int64 ref)), (var_46: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_36: (int64 ref)), (var_37: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_58: (int64 ref)), (var_59: (uint64 ref)), (var_55: (int64 ref)), (var_56: (uint64 ref)), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack26((var_58: (int64 ref)), (var_59: (uint64 ref)), (var_55: (int64 ref)), (var_56: (uint64 ref)), (var_60: (unit -> unit)))
and method_111 ((var_0: (unit -> unit)), (var_1: (unit -> unit)), (var_2: (unit -> unit)), (var_3: (unit -> unit))) (): unit =
    var_3()
    var_2()
    var_1()
    var_0()
and method_112 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (unit -> float32)), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)) (): float32 =
    let (var_5: float32) = var_2()
    let (var_6: int64) = 1L
    let (var_7: int64) = 0L
    let (var_8: (float32 [])) = method_99((var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_6: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_7: int64))
    let (var_9: float32) = var_8.[int32 0L]
    (var_5 + var_9)
and method_116((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: EnvHeap23), (var_7: EnvHeap24), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_10: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_11: ManagedCuda.CudaBlas.CudaBlas) = var_8.mem_1
    let (var_12: ManagedCuda.CudaRand.CudaRandDevice) = var_8.mem_2
    let (var_13: EnvStack10) = var_8.mem_3
    let (var_14: EnvStack13) = var_8.mem_4
    let (var_15: EnvHeap5) = var_8.mem_5
    let (var_16: (int64 ref)) = var_8.mem_6
    let (var_17: EnvHeap15) = var_8.mem_7
    let (var_18: EnvHeap17) = ({mem_0 = (var_10: ManagedCuda.CudaContext); mem_1 = (var_11: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_12: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_13: EnvStack10); mem_4 = (var_14: EnvStack13); mem_5 = (var_15: EnvHeap5); mem_6 = (var_4: (int64 ref)); mem_7 = (var_5: EnvHeap15)} : EnvHeap17)
    let (var_19: (int64 ref)) = var_6.mem_0
    let (var_20: (uint64 ref)) = var_6.mem_1
    let (var_21: (int64 ref)) = var_6.mem_2
    let (var_22: (uint64 ref)) = var_6.mem_3
    let (var_23: (int64 ref)) = var_6.mem_4
    let (var_24: (uint64 ref)) = var_6.mem_5
    let (var_25: (int64 ref)) = var_6.mem_6
    let (var_26: (uint64 ref)) = var_6.mem_7
    let (var_27: (int64 ref)) = var_6.mem_8
    let (var_28: (uint64 ref)) = var_6.mem_9
    let (var_29: (int64 ref)) = var_6.mem_10
    let (var_30: (uint64 ref)) = var_6.mem_11
    let (var_31: (int64 ref)) = var_6.mem_12
    let (var_32: (uint64 ref)) = var_6.mem_13
    let (var_33: (int64 ref)) = var_6.mem_14
    let (var_34: (uint64 ref)) = var_6.mem_15
    let (var_35: (int64 ref)) = var_6.mem_16
    let (var_36: (uint64 ref)) = var_6.mem_17
    let (var_37: (int64 ref)) = var_6.mem_18
    let (var_38: (uint64 ref)) = var_6.mem_19
    let (var_39: (int64 ref)) = var_6.mem_20
    let (var_40: (uint64 ref)) = var_6.mem_21
    let (var_41: (int64 ref)) = var_6.mem_22
    let (var_42: (uint64 ref)) = var_6.mem_23
    method_117((var_21: (int64 ref)), (var_22: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_18: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    method_117((var_25: (int64 ref)), (var_26: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_18: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    method_117((var_29: (int64 ref)), (var_30: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_18: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    method_117((var_33: (int64 ref)), (var_34: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_18: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    method_120((var_37: (int64 ref)), (var_38: (uint64 ref)), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_18: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    method_120((var_41: (int64 ref)), (var_42: (uint64 ref)), (var_39: (int64 ref)), (var_40: (uint64 ref)), (var_18: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    let (var_43: EnvHeap17) = ({mem_0 = (var_10: ManagedCuda.CudaContext); mem_1 = (var_11: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_12: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_13: EnvStack10); mem_4 = (var_14: EnvStack13); mem_5 = (var_15: EnvHeap5); mem_6 = (var_2: (int64 ref)); mem_7 = (var_3: EnvHeap15)} : EnvHeap17)
    let (var_44: (int64 ref)) = var_7.mem_0
    let (var_45: (uint64 ref)) = var_7.mem_1
    let (var_46: (int64 ref)) = var_7.mem_2
    let (var_47: (uint64 ref)) = var_7.mem_3
    let (var_48: (int64 ref)) = var_7.mem_4
    let (var_49: (uint64 ref)) = var_7.mem_5
    let (var_50: (int64 ref)) = var_7.mem_6
    let (var_51: (uint64 ref)) = var_7.mem_7
    method_117((var_46: (int64 ref)), (var_47: (uint64 ref)), (var_44: (int64 ref)), (var_45: (uint64 ref)), (var_43: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    method_120((var_50: (int64 ref)), (var_51: (uint64 ref)), (var_48: (int64 ref)), (var_49: (uint64 ref)), (var_43: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
and method_124((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: EnvHeap24), (var_14: EnvHeap17), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: int64)): float =
    let (var_18: bool) = (var_17 < 272L)
    if var_18 then
        let (var_19: bool) = (var_17 >= 0L)
        let (var_20: bool) = (var_19 = false)
        if var_20 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_21: int64) = (var_17 * 524288L)
        if var_20 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_22: int64) = (8192L + var_21)
        method_17((var_2: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_29: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_30: EnvStack10) = EnvStack10((var_29: ResizeArray<Env9>))
        let (var_31: ManagedCuda.CudaContext) = var_2.mem_0
        let (var_32: ManagedCuda.CudaBlas.CudaBlas) = var_2.mem_1
        let (var_33: ManagedCuda.CudaRand.CudaRandDevice) = var_2.mem_2
        let (var_34: EnvStack10) = var_2.mem_3
        let (var_35: EnvStack13) = var_2.mem_4
        let (var_36: EnvHeap5) = var_2.mem_5
        let (var_37: (int64 ref)) = var_2.mem_6
        let (var_38: EnvHeap15) = var_2.mem_7
        let (var_39: EnvHeap17) = ({mem_0 = (var_31: ManagedCuda.CudaContext); mem_1 = (var_32: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_33: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_30: EnvStack10); mem_4 = (var_35: EnvStack13); mem_5 = (var_36: EnvHeap5); mem_6 = (var_37: (int64 ref)); mem_7 = (var_38: EnvHeap15)} : EnvHeap17)
        let (var_89: (int64 ref)) = var_39.mem_6
        let (var_90: EnvHeap15) = var_39.mem_7
        let (var_91: ManagedCuda.CudaContext) = var_39.mem_0
        let (var_92: ManagedCuda.CudaBlas.CudaBlas) = var_39.mem_1
        let (var_93: ManagedCuda.CudaRand.CudaRandDevice) = var_39.mem_2
        let (var_94: EnvStack10) = var_39.mem_3
        let (var_95: EnvStack13) = var_39.mem_4
        let (var_96: EnvHeap5) = var_39.mem_5
        let (var_97: EnvHeap17) = ({mem_0 = (var_91: ManagedCuda.CudaContext); mem_1 = (var_92: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_93: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_94: EnvStack10); mem_4 = (var_95: EnvStack13); mem_5 = (var_96: EnvHeap5); mem_6 = (var_10: (int64 ref)); mem_7 = (var_11: EnvHeap15)} : EnvHeap17)
        let (var_98: Env25) = method_46((var_11: EnvHeap15))
        let (var_99: EnvHeap15) = var_98.mem_0
        let (var_100: ManagedCuda.CudaEvent) = var_99.mem_0
        let (var_101: ManagedCuda.BasicTypes.CUstream) = method_11((var_90: EnvHeap15))
        var_100.Record(var_101)
        let (var_102: ManagedCuda.CudaStream) = var_99.mem_2
        var_102.WaitEvent var_100.Event
        let (var_103: EnvStack26) = method_125((var_10: (int64 ref)), (var_11: EnvHeap15), (var_89: (int64 ref)), (var_90: EnvHeap15), (var_97: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_21: int64), (var_12: EnvHeap23))
        let (var_104: (int64 ref)) = var_103.mem_0
        let (var_105: (uint64 ref)) = var_103.mem_1
        let (var_106: (int64 ref)) = var_103.mem_2
        let (var_107: (uint64 ref)) = var_103.mem_3
        let (var_108: (unit -> unit)) = var_103.mem_4
        let (var_109: EnvHeap17) = ({mem_0 = (var_91: ManagedCuda.CudaContext); mem_1 = (var_92: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_93: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_94: EnvStack10); mem_4 = (var_95: EnvStack13); mem_5 = (var_96: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_110: Env25) = method_46((var_9: EnvHeap15))
        let (var_111: EnvHeap15) = var_110.mem_0
        let (var_112: ManagedCuda.CudaEvent) = var_111.mem_0
        let (var_113: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
        var_112.Record(var_113)
        let (var_114: ManagedCuda.CudaStream) = var_111.mem_2
        var_114.WaitEvent var_112.Event
        let (var_115: EnvStack27) = method_66((var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_109: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_104: (int64 ref)), (var_105: (uint64 ref)), (var_106: (int64 ref)), (var_107: (uint64 ref)), (var_13: EnvHeap24))
        let (var_116: (int64 ref)) = var_115.mem_0
        let (var_117: (uint64 ref)) = var_115.mem_1
        let (var_118: (int64 ref)) = var_115.mem_2
        let (var_119: (uint64 ref)) = var_115.mem_3
        let (var_120: (unit -> unit)) = var_115.mem_4
        let (var_121: EnvHeap17) = ({mem_0 = (var_91: ManagedCuda.CudaContext); mem_1 = (var_92: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_93: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_94: EnvStack10); mem_4 = (var_95: EnvStack13); mem_5 = (var_96: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_122: Env25) = method_46((var_7: EnvHeap15))
        let (var_123: EnvHeap15) = var_122.mem_0
        let (var_124: ManagedCuda.CudaEvent) = var_123.mem_0
        let (var_125: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_124.Record(var_125)
        let (var_126: ManagedCuda.CudaStream) = var_123.mem_2
        var_126.WaitEvent var_124.Event
        let (var_127: Env25) = method_46((var_7: EnvHeap15))
        let (var_128: EnvHeap15) = var_127.mem_0
        let (var_129: ManagedCuda.CudaEvent) = var_128.mem_0
        let (var_130: ManagedCuda.BasicTypes.CUstream) = method_11((var_90: EnvHeap15))
        var_129.Record(var_130)
        let (var_131: ManagedCuda.CudaStream) = var_128.mem_2
        var_131.WaitEvent var_129.Event
        let (var_132: EnvStack28) = method_82((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_89: (int64 ref)), (var_90: EnvHeap15), (var_121: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_116: (int64 ref)), (var_117: (uint64 ref)), (var_118: (int64 ref)), (var_119: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_22: int64))
        let (var_133: (int64 ref)) = var_132.mem_0
        let (var_134: (uint64 ref)) = var_132.mem_1
        let (var_135: (unit -> unit)) = var_132.mem_2
        let (var_136: (unit -> unit)) = method_97((var_108: (unit -> unit)), (var_120: (unit -> unit)), (var_135: (unit -> unit)))
        let (var_137: (unit -> float32)) = method_98((var_133: (int64 ref)), (var_134: (uint64 ref)), (var_39: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule))
        let (var_178: int64) = 1L
        method_128((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_21: int64), (var_22: int64), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: (int64 ref)), (var_11: EnvHeap15), (var_12: EnvHeap23), (var_13: EnvHeap24), (var_39: EnvHeap17), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: int64), (var_5: float), (var_17: int64), (var_2: EnvHeap17), (var_14: EnvHeap17), (var_137: (unit -> float32)), (var_136: (unit -> unit)), (var_104: (int64 ref)), (var_105: (uint64 ref)), (var_106: (int64 ref)), (var_107: (uint64 ref)), (var_178: int64))
    else
        let (var_180: EnvStack10) = var_14.mem_3
        method_114((var_180: EnvStack10))
        let (var_181: float) = (float var_4)
        (var_5 / var_181)
and method_16 ((var_1: uint64)) ((var_0: Env1)): int32 =
    let (var_2: uint64) = var_0.mem_0
    let (var_3: uint64) = var_0.mem_1
    let (var_4: bool) = (var_3 < var_1)
    if var_4 then
        -1
    else
        let (var_5: bool) = (var_3 = var_1)
        if var_5 then
            0
        else
            1
and method_49((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 32768L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_50((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_6
    let (var_11: EnvHeap15) = var_7.mem_7
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_5((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_5((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 0.000000f)
    let (var_27: uint64) = method_5((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 128, 64, 128, var_16, var_19, 128, var_25, 128, var_26, var_29, 128)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_52((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: ManagedCuda.CudaContext), (var_3: ManagedCuda.BasicTypes.CUstream)): unit =
    let (var_4: uint64) = method_5((var_1: (uint64 ref)))
    let (var_5: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_4)
    let (var_6: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_5)
    let (var_7: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(32768L)
    var_2.ClearMemoryAsync(var_6, 0uy, var_7, var_3)
and method_54((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_55((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_60((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_12: uint64) = method_5((var_5: (uint64 ref)))
    let (var_13: uint64) = method_5((var_7: (uint64 ref)))
    let (var_14: uint64) = method_5((var_9: (uint64 ref)))
    method_61((var_12: uint64), (var_13: uint64), (var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_14: uint64), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
and method_64((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_65((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
and method_68((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 0.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 64, 128, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_70((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_71((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_71", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_73((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_74((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_75((var_10: (int64 ref)), (var_11: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
    method_76((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_16: EnvHeap17), (var_17: ManagedCuda.BasicTypes.CUmodule))
and method_85((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_86((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_86", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_89((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule)): Env9 =
    let (var_2: int64) = 4L
    method_13((var_0: EnvHeap17), (var_1: ManagedCuda.BasicTypes.CUmodule), (var_2: int64))
and method_90((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_91((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_91", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_93((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: uint64) = method_5((var_1: (uint64 ref)))
    let (var_10: uint64) = method_5((var_3: (uint64 ref)))
    let (var_11: uint64) = method_5((var_5: (uint64 ref)))
    let (var_12: int64) = (var_6 * 4L)
    let (var_13: uint64) = (uint64 var_12)
    let (var_14: uint64) = (var_11 + var_13)
    method_94((var_10: uint64), (var_9: uint64), (var_14: uint64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule))
and method_101((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule)): EnvStack29 =
    let (var_45: Env9) = method_49((var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    let (var_46: (int64 ref)) = var_45.mem_0
    let (var_47: Env19) = var_45.mem_1
    let (var_48: (uint64 ref)) = var_47.mem_0
    let (var_49: uint64) = method_5((var_5: (uint64 ref)))
    let (var_50: uint64) = method_5((var_7: (uint64 ref)))
    let (var_51: uint64) = method_5((var_48: (uint64 ref)))
    method_102((var_49: uint64), (var_50: uint64), (var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_51: uint64), (var_8: EnvHeap17), (var_9: ManagedCuda.BasicTypes.CUmodule))
    EnvStack29((var_46: (int64 ref)), (var_48: (uint64 ref)))
and method_105 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_29: (int64 ref)), (var_30: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_37: (int64 ref)), (var_38: (uint64 ref)), (var_39: (int64 ref)), (var_40: (uint64 ref)), (var_41: (int64 ref)), (var_42: (uint64 ref)), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_45: (int64 ref)), (var_46: EnvHeap15), (var_47: (int64 ref)), (var_48: EnvHeap15)) (): unit =
    let (var_49: uint64) = method_5((var_28: (uint64 ref)))
    let (var_50: uint64) = method_5((var_32: (uint64 ref)))
    let (var_51: uint64) = method_5((var_36: (uint64 ref)))
    let (var_52: uint64) = method_5((var_40: (uint64 ref)))
    let (var_53: uint64) = method_5((var_26: (uint64 ref)))
    let (var_54: uint64) = method_5((var_30: (uint64 ref)))
    let (var_55: uint64) = method_5((var_34: (uint64 ref)))
    let (var_56: uint64) = method_5((var_38: (uint64 ref)))
    method_106((var_49: uint64), (var_50: uint64), (var_51: uint64), (var_52: uint64), (var_53: uint64), (var_54: uint64), (var_55: uint64), (var_56: uint64), (var_41: (int64 ref)), (var_42: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    method_110((var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    method_64((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    let (var_57: Env25) = method_46((var_48: EnvHeap15))
    let (var_58: EnvHeap15) = var_57.mem_0
    let (var_59: ManagedCuda.CudaEvent) = var_58.mem_0
    let (var_60: ManagedCuda.BasicTypes.CUstream) = method_11((var_46: EnvHeap15))
    var_59.Record(var_60)
    let (var_61: ManagedCuda.CudaStream) = var_58.mem_2
    var_61.WaitEvent var_59.Event
and method_117((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_118((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_120((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_121((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_125((var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_11: EnvHeap23)): EnvStack26 =
    let (var_12: (int64 ref)) = var_11.mem_0
    let (var_13: (uint64 ref)) = var_11.mem_1
    let (var_14: (int64 ref)) = var_11.mem_2
    let (var_15: (uint64 ref)) = var_11.mem_3
    let (var_16: (int64 ref)) = var_11.mem_4
    let (var_17: (uint64 ref)) = var_11.mem_5
    let (var_18: (int64 ref)) = var_11.mem_6
    let (var_19: (uint64 ref)) = var_11.mem_7
    let (var_20: (int64 ref)) = var_11.mem_8
    let (var_21: (uint64 ref)) = var_11.mem_9
    let (var_22: (int64 ref)) = var_11.mem_10
    let (var_23: (uint64 ref)) = var_11.mem_11
    let (var_24: (int64 ref)) = var_11.mem_12
    let (var_25: (uint64 ref)) = var_11.mem_13
    let (var_26: (int64 ref)) = var_11.mem_14
    let (var_27: (uint64 ref)) = var_11.mem_15
    let (var_28: (int64 ref)) = var_11.mem_16
    let (var_29: (uint64 ref)) = var_11.mem_17
    let (var_30: (int64 ref)) = var_11.mem_18
    let (var_31: (uint64 ref)) = var_11.mem_19
    let (var_32: (int64 ref)) = var_11.mem_20
    let (var_33: (uint64 ref)) = var_11.mem_21
    let (var_34: (int64 ref)) = var_11.mem_22
    let (var_35: (uint64 ref)) = var_11.mem_23
    let (var_36: EnvStack29) = method_48((var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_37: (int64 ref)) = var_36.mem_0
    let (var_38: (uint64 ref)) = var_36.mem_1
    let (var_39: EnvStack29) = method_51((var_37: (int64 ref)), (var_38: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_40: (int64 ref)) = var_39.mem_0
    let (var_41: (uint64 ref)) = var_39.mem_1
    let (var_42: EnvStack29) = method_67((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_43: (int64 ref)) = var_42.mem_0
    let (var_44: (uint64 ref)) = var_42.mem_1
    let (var_45: EnvStack29) = method_51((var_43: (int64 ref)), (var_44: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_46: (int64 ref)) = var_45.mem_0
    let (var_47: (uint64 ref)) = var_45.mem_1
    let (var_48: uint64) = method_5((var_15: (uint64 ref)))
    let (var_49: uint64) = method_5((var_19: (uint64 ref)))
    let (var_50: uint64) = method_5((var_23: (uint64 ref)))
    let (var_51: uint64) = method_5((var_27: (uint64 ref)))
    let (var_52: EnvStack29) = method_101((var_48: uint64), (var_49: uint64), (var_50: uint64), (var_51: uint64), (var_37: (int64 ref)), (var_38: (uint64 ref)), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_53: (int64 ref)) = var_52.mem_0
    let (var_54: (uint64 ref)) = var_52.mem_1
    let (var_55: EnvStack29) = method_51((var_53: (int64 ref)), (var_54: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule))
    let (var_56: (int64 ref)) = var_55.mem_0
    let (var_57: (uint64 ref)) = var_55.mem_1
    let (var_58: (unit -> unit)) = method_126((var_40: (int64 ref)), (var_41: (uint64 ref)), (var_37: (int64 ref)), (var_38: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: int64), (var_28: (int64 ref)), (var_29: (uint64 ref)), (var_30: (int64 ref)), (var_31: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_46: (int64 ref)), (var_47: (uint64 ref)), (var_43: (int64 ref)), (var_44: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_32: (int64 ref)), (var_33: (uint64 ref)), (var_34: (int64 ref)), (var_35: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: (int64 ref)), (var_19: (uint64 ref)), (var_20: (int64 ref)), (var_21: (uint64 ref)), (var_22: (int64 ref)), (var_23: (uint64 ref)), (var_24: (int64 ref)), (var_25: (uint64 ref)), (var_26: (int64 ref)), (var_27: (uint64 ref)), (var_56: (int64 ref)), (var_57: (uint64 ref)), (var_53: (int64 ref)), (var_54: (uint64 ref)), (var_0: (int64 ref)), (var_1: EnvHeap15), (var_2: (int64 ref)), (var_3: EnvHeap15))
    EnvStack26((var_56: (int64 ref)), (var_57: (uint64 ref)), (var_53: (int64 ref)), (var_54: (uint64 ref)), (var_58: (unit -> unit)))
and method_128((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: int64), (var_15: float), (var_16: int64), (var_17: EnvHeap17), (var_18: EnvHeap17), (var_19: (unit -> float32)), (var_20: (unit -> unit)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: int64)): float =
    let (var_26: bool) = (var_25 < 64L)
    if var_26 then
        let (var_27: bool) = (var_25 >= 0L)
        let (var_28: bool) = (var_27 = false)
        if var_28 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_29: int64) = (var_25 * 8192L)
        let (var_30: int64) = (var_2 + var_29)
        if var_28 then
            (failwith "Argument out of bounds.")
        else
            ()
        let (var_31: int64) = (var_3 + var_29)
        let (var_32: (int64 ref)) = var_12.mem_6
        let (var_33: EnvHeap15) = var_12.mem_7
        let (var_34: ManagedCuda.CudaContext) = var_12.mem_0
        let (var_35: ManagedCuda.CudaBlas.CudaBlas) = var_12.mem_1
        let (var_36: ManagedCuda.CudaRand.CudaRandDevice) = var_12.mem_2
        let (var_37: EnvStack10) = var_12.mem_3
        let (var_38: EnvStack13) = var_12.mem_4
        let (var_39: EnvHeap5) = var_12.mem_5
        let (var_40: EnvHeap17) = ({mem_0 = (var_34: ManagedCuda.CudaContext); mem_1 = (var_35: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_36: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_37: EnvStack10); mem_4 = (var_38: EnvStack13); mem_5 = (var_39: EnvHeap5); mem_6 = (var_8: (int64 ref)); mem_7 = (var_9: EnvHeap15)} : EnvHeap17)
        let (var_41: Env25) = method_46((var_9: EnvHeap15))
        let (var_42: EnvHeap15) = var_41.mem_0
        let (var_43: ManagedCuda.CudaEvent) = var_42.mem_0
        let (var_44: ManagedCuda.BasicTypes.CUstream) = method_11((var_33: EnvHeap15))
        var_43.Record(var_44)
        let (var_45: ManagedCuda.CudaStream) = var_42.mem_2
        var_45.WaitEvent var_43.Event
        let (var_46: EnvStack26) = method_100((var_8: (int64 ref)), (var_9: EnvHeap15), (var_32: (int64 ref)), (var_33: EnvHeap15), (var_40: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_30: int64), (var_10: EnvHeap23))
        let (var_47: (int64 ref)) = var_46.mem_0
        let (var_48: (uint64 ref)) = var_46.mem_1
        let (var_49: (int64 ref)) = var_46.mem_2
        let (var_50: (uint64 ref)) = var_46.mem_3
        let (var_51: (unit -> unit)) = var_46.mem_4
        let (var_52: EnvHeap17) = ({mem_0 = (var_34: ManagedCuda.CudaContext); mem_1 = (var_35: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_36: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_37: EnvStack10); mem_4 = (var_38: EnvStack13); mem_5 = (var_39: EnvHeap5); mem_6 = (var_6: (int64 ref)); mem_7 = (var_7: EnvHeap15)} : EnvHeap17)
        let (var_53: Env25) = method_46((var_7: EnvHeap15))
        let (var_54: EnvHeap15) = var_53.mem_0
        let (var_55: ManagedCuda.CudaEvent) = var_54.mem_0
        let (var_56: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
        var_55.Record(var_56)
        let (var_57: ManagedCuda.CudaStream) = var_54.mem_2
        var_57.WaitEvent var_55.Event
        let (var_58: EnvStack27) = method_66((var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_52: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_47: (int64 ref)), (var_48: (uint64 ref)), (var_49: (int64 ref)), (var_50: (uint64 ref)), (var_11: EnvHeap24))
        let (var_59: (int64 ref)) = var_58.mem_0
        let (var_60: (uint64 ref)) = var_58.mem_1
        let (var_61: (int64 ref)) = var_58.mem_2
        let (var_62: (uint64 ref)) = var_58.mem_3
        let (var_63: (unit -> unit)) = var_58.mem_4
        let (var_64: EnvHeap17) = ({mem_0 = (var_34: ManagedCuda.CudaContext); mem_1 = (var_35: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_36: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_37: EnvStack10); mem_4 = (var_38: EnvStack13); mem_5 = (var_39: EnvHeap5); mem_6 = (var_4: (int64 ref)); mem_7 = (var_5: EnvHeap15)} : EnvHeap17)
        let (var_65: Env25) = method_46((var_5: EnvHeap15))
        let (var_66: EnvHeap15) = var_65.mem_0
        let (var_67: ManagedCuda.CudaEvent) = var_66.mem_0
        let (var_68: ManagedCuda.BasicTypes.CUstream) = method_11((var_7: EnvHeap15))
        var_67.Record(var_68)
        let (var_69: ManagedCuda.CudaStream) = var_66.mem_2
        var_69.WaitEvent var_67.Event
        let (var_70: Env25) = method_46((var_5: EnvHeap15))
        let (var_71: EnvHeap15) = var_70.mem_0
        let (var_72: ManagedCuda.CudaEvent) = var_71.mem_0
        let (var_73: ManagedCuda.BasicTypes.CUstream) = method_11((var_33: EnvHeap15))
        var_72.Record(var_73)
        let (var_74: ManagedCuda.CudaStream) = var_71.mem_2
        var_74.WaitEvent var_72.Event
        let (var_75: EnvStack28) = method_82((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_32: (int64 ref)), (var_33: EnvHeap15), (var_64: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_59: (int64 ref)), (var_60: (uint64 ref)), (var_61: (int64 ref)), (var_62: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_31: int64))
        let (var_76: (int64 ref)) = var_75.mem_0
        let (var_77: (uint64 ref)) = var_75.mem_1
        let (var_78: (unit -> unit)) = var_75.mem_2
        let (var_79: (unit -> unit)) = method_111((var_20: (unit -> unit)), (var_51: (unit -> unit)), (var_63: (unit -> unit)), (var_78: (unit -> unit)))
        let (var_80: (unit -> float32)) = method_112((var_76: (int64 ref)), (var_77: (uint64 ref)), (var_19: (unit -> float32)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
        let (var_81: int64) = (var_25 + 1L)
        method_128((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: int64), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: int64), (var_15: float), (var_16: int64), (var_17: EnvHeap17), (var_18: EnvHeap17), (var_80: (unit -> float32)), (var_79: (unit -> unit)), (var_47: (int64 ref)), (var_48: (uint64 ref)), (var_49: (int64 ref)), (var_50: (uint64 ref)), (var_81: int64))
    else
        let (var_83: float32) = var_19()
        let (var_84: float) = (float var_83)
        let (var_85: float) = (var_15 + var_84)
        let (var_86: int64) = (var_14 + 1L)
        let (var_93: ResizeArray<Env9>) = ResizeArray<Env9>()
        let (var_94: EnvStack10) = EnvStack10((var_93: ResizeArray<Env9>))
        let (var_95: ManagedCuda.CudaContext) = var_12.mem_0
        let (var_96: ManagedCuda.CudaBlas.CudaBlas) = var_12.mem_1
        let (var_97: ManagedCuda.CudaRand.CudaRandDevice) = var_12.mem_2
        let (var_98: EnvStack10) = var_12.mem_3
        let (var_99: EnvStack13) = var_12.mem_4
        let (var_100: EnvHeap5) = var_12.mem_5
        let (var_101: (int64 ref)) = var_12.mem_6
        let (var_102: EnvHeap15) = var_12.mem_7
        let (var_103: EnvHeap17) = ({mem_0 = (var_95: ManagedCuda.CudaContext); mem_1 = (var_96: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_97: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_94: EnvStack10); mem_4 = (var_99: EnvStack13); mem_5 = (var_100: EnvHeap5); mem_6 = (var_101: (int64 ref)); mem_7 = (var_102: EnvHeap15)} : EnvHeap17)
        let (var_104: EnvStack10) = var_103.mem_3
        method_18((var_23: (int64 ref)), (var_24: (uint64 ref)), (var_104: EnvStack10))
        if (System.Double.IsNaN var_85) then
            let (var_105: EnvStack10) = var_18.mem_3
            method_114((var_105: EnvStack10))
            method_114((var_98: EnvStack10))
            method_114((var_104: EnvStack10))
            let (var_106: float) = (float var_86)
            (var_85 / var_106)
        else
            var_20()
            method_116((var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
            let (var_108: EnvStack10) = var_18.mem_3
            method_114((var_108: EnvStack10))
            method_114((var_98: EnvStack10))
            let (var_109: int64) = (var_16 + 1L)
            method_124((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_17: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_86: int64), (var_85: float), (var_4: (int64 ref)), (var_5: EnvHeap15), (var_6: (int64 ref)), (var_7: EnvHeap15), (var_8: (int64 ref)), (var_9: EnvHeap15), (var_10: EnvHeap23), (var_11: EnvHeap24), (var_103: EnvHeap17), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_109: int64))
and method_55((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_5: EnvHeap17)): unit =
    // Cuda join point
    // method_56((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64))
    let (var_6: ManagedCuda.CudaContext) = var_5.mem_0
    let (var_7: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_56", var_4, var_6)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_7.set_GridDimensions(var_8)
    let (var_9: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_7.set_BlockDimensions(var_9)
    let (var_10: (int64 ref)) = var_5.mem_6
    let (var_11: EnvHeap15) = var_5.mem_7
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
    let (var_14: (System.Object [])) = [|var_0; var_1; var_2; var_3|]: (System.Object [])
    var_7.RunAsync(var_12, var_14)
and method_61((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_62((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_8: ManagedCuda.BasicTypes.CUmodule), (var_7: EnvHeap17))
and method_65((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: int64), (var_3: (int64 ref)), (var_4: (uint64 ref)), (var_5: (int64 ref)), (var_6: (uint64 ref)), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_9: ManagedCuda.CudaBlas.CudaBlas) = var_7.mem_1
    let (var_10: (int64 ref)) = var_7.mem_6
    let (var_11: EnvHeap15) = var_7.mem_7
    let (var_12: ManagedCuda.CudaBlas.CudaBlasHandle) = var_9.get_CublasHandle()
    let (var_13: ManagedCuda.BasicTypes.CUstream) = method_11((var_11: EnvHeap15))
    var_9.set_Stream(var_13)
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_16: (float32 ref)) = (ref 1.000000f)
    let (var_17: uint64) = method_5((var_4: (uint64 ref)))
    let (var_18: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_17)
    let (var_19: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_18)
    let (var_20: uint64) = method_5((var_1: (uint64 ref)))
    let (var_21: int64) = (var_2 * 4L)
    let (var_22: uint64) = (uint64 var_21)
    let (var_23: uint64) = (var_20 + var_22)
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: (float32 ref)) = (ref 1.000000f)
    let (var_27: uint64) = method_5((var_6: (uint64 ref)))
    let (var_28: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_27)
    let (var_29: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_28)
    let (var_30: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_12, var_14, var_15, 128, 128, 64, var_16, var_19, 128, var_25, 128, var_26, var_29, 128)
    if var_30 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_30)
and method_74((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 64, 128, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_75((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: EnvHeap17), (var_7: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_8: ManagedCuda.CudaBlas.CudaBlas) = var_6.mem_1
    let (var_9: (int64 ref)) = var_6.mem_6
    let (var_10: EnvHeap15) = var_6.mem_7
    let (var_11: ManagedCuda.CudaBlas.CudaBlasHandle) = var_8.get_CublasHandle()
    let (var_12: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    var_8.set_Stream(var_12)
    let (var_13: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.NonTranspose
    let (var_14: ManagedCuda.CudaBlas.Operation) = ManagedCuda.CudaBlas.Operation.Transpose
    let (var_15: (float32 ref)) = (ref 1.000000f)
    let (var_16: uint64) = method_5((var_3: (uint64 ref)))
    let (var_17: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_16)
    let (var_18: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_17)
    let (var_19: uint64) = method_5((var_1: (uint64 ref)))
    let (var_20: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_19)
    let (var_21: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_20)
    let (var_22: (float32 ref)) = (ref 1.000000f)
    let (var_23: uint64) = method_5((var_5: (uint64 ref)))
    let (var_24: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_23)
    let (var_25: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_24)
    let (var_26: ManagedCuda.CudaBlas.CublasStatus) = ManagedCuda.CudaBlas.CudaBlasNativeMethods.cublasSgemm_v2(var_11, var_13, var_14, 128, 128, 64, var_15, var_18, 128, var_21, 128, var_22, var_25, 128)
    if var_26 <> ManagedCuda.CudaBlas.CublasStatus.Success then raise <| new ManagedCuda.CudaBlas.CudaBlasException(var_26)
and method_76((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: EnvHeap17), (var_5: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_6: uint64) = method_5((var_1: (uint64 ref)))
    let (var_7: uint64) = method_5((var_3: (uint64 ref)))
    method_77((var_6: uint64), (var_7: uint64), (var_5: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17))
and method_94((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: EnvHeap17), (var_4: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_95((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_4: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17))
and method_102((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: EnvHeap17), (var_8: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_103((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_8: ManagedCuda.BasicTypes.CUmodule), (var_7: EnvHeap17))
and method_106((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: (int64 ref)), (var_13: (uint64 ref)), (var_14: (int64 ref)), (var_15: (uint64 ref)), (var_16: (int64 ref)), (var_17: (uint64 ref)), (var_18: EnvHeap17), (var_19: ManagedCuda.BasicTypes.CUmodule)): unit =
    let (var_20: uint64) = method_5((var_9: (uint64 ref)))
    let (var_21: uint64) = method_5((var_11: (uint64 ref)))
    let (var_22: uint64) = method_5((var_13: (uint64 ref)))
    let (var_23: uint64) = method_5((var_15: (uint64 ref)))
    let (var_24: uint64) = method_5((var_17: (uint64 ref)))
    method_107((var_20: uint64), (var_21: uint64), (var_22: uint64), (var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_23: uint64), (var_24: uint64), (var_18: EnvHeap17), (var_19: ManagedCuda.BasicTypes.CUmodule))
and method_110((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_74((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_10: (int64 ref)), (var_11: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
    method_75((var_6: (int64 ref)), (var_7: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_12: EnvHeap17), (var_13: ManagedCuda.BasicTypes.CUmodule))
and method_118((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_119((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_119", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_121((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_122((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_122", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(64u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_126 ((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_23: (int64 ref)), (var_24: (uint64 ref)), (var_25: (int64 ref)), (var_26: (uint64 ref)), (var_27: (int64 ref)), (var_28: (uint64 ref)), (var_29: (int64 ref)), (var_30: (uint64 ref)), (var_31: (int64 ref)), (var_32: (uint64 ref)), (var_33: (int64 ref)), (var_34: (uint64 ref)), (var_35: (int64 ref)), (var_36: (uint64 ref)), (var_37: (int64 ref)), (var_38: (uint64 ref)), (var_39: (int64 ref)), (var_40: (uint64 ref)), (var_41: (int64 ref)), (var_42: (uint64 ref)), (var_43: (int64 ref)), (var_44: EnvHeap15), (var_45: (int64 ref)), (var_46: EnvHeap15)) (): unit =
    let (var_47: uint64) = method_5((var_26: (uint64 ref)))
    let (var_48: uint64) = method_5((var_30: (uint64 ref)))
    let (var_49: uint64) = method_5((var_34: (uint64 ref)))
    let (var_50: uint64) = method_5((var_38: (uint64 ref)))
    let (var_51: uint64) = method_5((var_24: (uint64 ref)))
    let (var_52: uint64) = method_5((var_28: (uint64 ref)))
    let (var_53: uint64) = method_5((var_32: (uint64 ref)))
    let (var_54: uint64) = method_5((var_36: (uint64 ref)))
    method_106((var_47: uint64), (var_48: uint64), (var_49: uint64), (var_50: uint64), (var_51: uint64), (var_52: uint64), (var_53: uint64), (var_54: uint64), (var_39: (int64 ref)), (var_40: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_13: (int64 ref)), (var_14: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    method_127((var_13: (int64 ref)), (var_14: (uint64 ref)), (var_15: (int64 ref)), (var_16: (uint64 ref)), (var_17: (int64 ref)), (var_18: (uint64 ref)), (var_19: (int64 ref)), (var_20: (uint64 ref)), (var_21: (int64 ref)), (var_22: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    method_64((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: int64), (var_7: (int64 ref)), (var_8: (uint64 ref)), (var_9: (int64 ref)), (var_10: (uint64 ref)), (var_11: EnvHeap17), (var_12: ManagedCuda.BasicTypes.CUmodule))
    let (var_55: Env25) = method_46((var_46: EnvHeap15))
    let (var_56: EnvHeap15) = var_55.mem_0
    let (var_57: ManagedCuda.CudaEvent) = var_56.mem_0
    let (var_58: ManagedCuda.BasicTypes.CUstream) = method_11((var_44: EnvHeap15))
    var_57.Record(var_58)
    let (var_59: ManagedCuda.CudaStream) = var_56.mem_2
    var_59.WaitEvent var_57.Event
and method_62((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17)): unit =
    // Cuda join point
    // method_63((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64))
    let (var_9: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_10: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_63", var_7, var_9)
    let (var_11: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_10.set_GridDimensions(var_11)
    let (var_12: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_10.set_BlockDimensions(var_12)
    let (var_13: (int64 ref)) = var_8.mem_6
    let (var_14: EnvHeap15) = var_8.mem_7
    let (var_15: ManagedCuda.BasicTypes.CUstream) = method_11((var_14: EnvHeap15))
    let (var_17: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6|]: (System.Object [])
    var_10.RunAsync(var_15, var_17)
and method_77((var_0: uint64), (var_1: uint64), (var_2: ManagedCuda.BasicTypes.CUmodule), (var_3: EnvHeap17)): unit =
    // Cuda join point
    // method_78((var_0: uint64), (var_1: uint64))
    let (var_4: ManagedCuda.CudaContext) = var_3.mem_0
    let (var_5: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_78", var_2, var_4)
    let (var_6: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(4u, 1u, 1u)
    var_5.set_GridDimensions(var_6)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(32u, 32u, 1u)
    var_5.set_BlockDimensions(var_7)
    let (var_8: (int64 ref)) = var_3.mem_6
    let (var_9: EnvHeap15) = var_3.mem_7
    let (var_10: ManagedCuda.BasicTypes.CUstream) = method_11((var_9: EnvHeap15))
    let (var_12: (System.Object [])) = [|var_0; var_1|]: (System.Object [])
    var_5.RunAsync(var_10, var_12)
and method_95((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: ManagedCuda.BasicTypes.CUmodule), (var_4: EnvHeap17)): unit =
    // Cuda join point
    // method_96((var_0: uint64), (var_1: uint64), (var_2: uint64))
    let (var_5: ManagedCuda.CudaContext) = var_4.mem_0
    let (var_6: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_96", var_3, var_5)
    let (var_7: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_6.set_GridDimensions(var_7)
    let (var_8: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_6.set_BlockDimensions(var_8)
    let (var_9: (int64 ref)) = var_4.mem_6
    let (var_10: EnvHeap15) = var_4.mem_7
    let (var_11: ManagedCuda.BasicTypes.CUstream) = method_11((var_10: EnvHeap15))
    let (var_13: (System.Object [])) = [|var_0; var_1; var_2|]: (System.Object [])
    var_6.RunAsync(var_11, var_13)
and method_103((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: ManagedCuda.BasicTypes.CUmodule), (var_8: EnvHeap17)): unit =
    // Cuda join point
    // method_104((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64))
    let (var_9: ManagedCuda.CudaContext) = var_8.mem_0
    let (var_10: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_104", var_7, var_9)
    let (var_11: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_10.set_GridDimensions(var_11)
    let (var_12: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_10.set_BlockDimensions(var_12)
    let (var_13: (int64 ref)) = var_8.mem_6
    let (var_14: EnvHeap15) = var_8.mem_7
    let (var_15: ManagedCuda.BasicTypes.CUstream) = method_11((var_14: EnvHeap15))
    let (var_17: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6|]: (System.Object [])
    var_10.RunAsync(var_15, var_17)
and method_107((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64), (var_13: EnvHeap17), (var_14: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_108((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64), (var_14: ManagedCuda.BasicTypes.CUmodule), (var_13: EnvHeap17))
and method_127((var_0: (int64 ref)), (var_1: (uint64 ref)), (var_2: (int64 ref)), (var_3: (uint64 ref)), (var_4: (int64 ref)), (var_5: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_8: (int64 ref)), (var_9: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule)): unit =
    method_75((var_4: (int64 ref)), (var_5: (uint64 ref)), (var_0: (int64 ref)), (var_1: (uint64 ref)), (var_6: (int64 ref)), (var_7: (uint64 ref)), (var_10: EnvHeap17), (var_11: ManagedCuda.BasicTypes.CUmodule))
and method_108((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64), (var_13: ManagedCuda.BasicTypes.CUmodule), (var_14: EnvHeap17)): unit =
    // Cuda join point
    // method_109((var_0: uint64), (var_1: uint64), (var_2: uint64), (var_3: uint64), (var_4: uint64), (var_5: uint64), (var_6: uint64), (var_7: uint64), (var_8: uint64), (var_9: uint64), (var_10: uint64), (var_11: uint64), (var_12: uint64))
    let (var_15: ManagedCuda.CudaContext) = var_14.mem_0
    let (var_16: ManagedCuda.CudaKernel) = ManagedCuda.CudaKernel("method_109", var_13, var_15)
    let (var_17: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(1u, 64u, 1u)
    var_16.set_GridDimensions(var_17)
    let (var_18: ManagedCuda.VectorTypes.dim3) = ManagedCuda.VectorTypes.dim3(128u, 1u, 1u)
    var_16.set_BlockDimensions(var_18)
    let (var_19: (int64 ref)) = var_14.mem_6
    let (var_20: EnvHeap15) = var_14.mem_7
    let (var_21: ManagedCuda.BasicTypes.CUstream) = method_11((var_20: EnvHeap15))
    let (var_23: (System.Object [])) = [|var_0; var_1; var_2; var_3; var_4; var_5; var_6; var_7; var_8; var_9; var_10; var_11; var_12|]: (System.Object [])
    var_16.RunAsync(var_21, var_23)
let (var_0: string) = cuda_kernels
let (var_1: ManagedCuda.CudaContext) = ManagedCuda.CudaContext(false)
var_1.Synchronize()
let (var_2: string) = System.Environment.get_CurrentDirectory()
let (var_3: string) = System.IO.Path.Combine(var_2, "nvcc_router.bat")
let (var_4: System.Diagnostics.ProcessStartInfo) = System.Diagnostics.ProcessStartInfo()
var_4.set_RedirectStandardOutput(true)
var_4.set_RedirectStandardError(true)
var_4.set_UseShellExecute(false)
var_4.set_FileName(var_3)
let (var_5: System.Diagnostics.Process) = System.Diagnostics.Process()
var_5.set_StartInfo(var_4)
let (var_7: (System.Diagnostics.DataReceivedEventArgs -> unit)) = method_0
var_5.OutputDataReceived.Add(var_7)
var_5.ErrorDataReceived.Add(var_7)
let (var_8: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Auxiliary/Build/vcvarsall.bat")
let (var_9: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/bin/Hostx64/x64")
let (var_10: string) = System.IO.Path.Combine("C:/Program Files (x86)/Microsoft Visual Studio/2017/Community", "VC/Tools/MSVC/14.11.25503/include")
let (var_11: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "include")
let (var_12: string) = System.IO.Path.Combine("C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.0", "bin/nvcc.exe")
let (var_13: string) = System.IO.Path.Combine(var_2, "cuda_kernels.ptx")
let (var_14: string) = System.IO.Path.Combine(var_2, "cuda_kernels.cu")
let (var_15: bool) = System.IO.File.Exists(var_14)
if var_15 then
    System.IO.File.Delete(var_14)
else
    ()
System.IO.File.WriteAllText(var_14, var_0)
let (var_16: bool) = System.IO.File.Exists(var_3)
if var_16 then
    System.IO.File.Delete(var_3)
else
    ()
let (var_17: System.IO.FileStream) = System.IO.File.OpenWrite(var_3)
let (var_18: System.IO.StreamWriter) = System.IO.StreamWriter(var_17)
var_18.WriteLine("SETLOCAL")
let (var_19: string) = String.concat "" [|"CALL "; "\""; var_8; "\" x64 -vcvars_ver=14.11"|]
var_18.WriteLine(var_19)
let (var_20: string) = String.concat "" [|"SET PATH=%PATH%;"; "\""; var_9; "\""|]
var_18.WriteLine(var_20)
let (var_21: string) = String.concat "" [|"\""; var_12; "\" -gencode=arch=compute_52,code=\\\"sm_52,compute_52\\\" --use-local-env --cl-version 2017 -I\""; var_11; "\" -I\"C:/cub-1.7.4\" -I\""; var_10; "\" --keep-dir \""; var_2; "\" -maxrregcount=0  --machine 64 -ptx -cudart static  -o \""; var_13; "\" \""; var_14; "\""|]
var_18.WriteLine(var_21)
var_18.Dispose()
var_17.Dispose()
let (var_22: System.Diagnostics.Stopwatch) = System.Diagnostics.Stopwatch.StartNew()
let (var_23: bool) = var_5.Start()
let (var_24: bool) = (var_23 = false)
if var_24 then
    (failwith "NVCC failed to run.")
else
    ()
var_5.BeginOutputReadLine()
var_5.BeginErrorReadLine()
var_5.WaitForExit()
let (var_25: int32) = var_5.get_ExitCode()
let (var_26: bool) = (var_25 = 0)
let (var_27: bool) = (var_26 = false)
if var_27 then
    let (var_28: string) = System.String.Format("{0}",var_25)
    let (var_29: string) = String.concat ", " [|"NVCC failed compilation."; var_28|]
    let (var_30: string) = System.String.Format("[{0}]",var_29)
    (failwith var_30)
else
    ()
let (var_31: System.TimeSpan) = var_22.get_Elapsed()
printfn "The time it took to compile the Cuda kernels is: %A" var_31
let (var_32: ManagedCuda.BasicTypes.CUmodule) = var_1.LoadModulePTX(var_13)
var_5.Dispose()
let (var_33: string) = String.concat "" [|"Compiled the kernels into the following directory: "; var_2|]
System.Console.WriteLine(var_33)
let (var_34: EnvHeap0) = ({mem_0 = (var_1: ManagedCuda.CudaContext)} : EnvHeap0)
let (var_35: uint64) = 1073741824UL
let (var_36: ManagedCuda.CudaContext) = var_34.mem_0
let (var_37: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_35)
let (var_38: ManagedCuda.BasicTypes.CUdeviceptr) = var_36.AllocateMemory(var_37)
let (var_39: uint64) = uint64 var_38
let (var_40: (uint64 ref)) = (ref var_39)
let (var_41: ResizeArray<Env1>) = ResizeArray<Env1>()
let (var_42: EnvStack2) = EnvStack2((var_41: ResizeArray<Env1>))
let (var_43: ResizeArray<Env3>) = ResizeArray<Env3>()
let (var_44: EnvStack4) = EnvStack4((var_43: ResizeArray<Env3>))
let (var_45: EnvHeap5) = ({mem_0 = (var_42: EnvStack2); mem_1 = (var_40: (uint64 ref)); mem_2 = (var_35: uint64); mem_3 = (var_44: EnvStack4)} : EnvHeap5)
let (var_46: EnvHeap6) = ({mem_0 = (var_36: ManagedCuda.CudaContext); mem_1 = (var_45: EnvHeap5)} : EnvHeap6)
method_1((var_46: EnvHeap6), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_47: ManagedCuda.CudaRand.GeneratorType) = ManagedCuda.CudaRand.GeneratorType.PseudoDefault
let (var_48: ManagedCuda.CudaRand.CudaRandDevice) = ManagedCuda.CudaRand.CudaRandDevice(var_47)
let (var_49: ManagedCuda.CudaContext) = var_46.mem_0
let (var_50: EnvHeap5) = var_46.mem_1
let (var_51: EnvHeap7) = ({mem_0 = (var_49: ManagedCuda.CudaContext); mem_1 = (var_48: ManagedCuda.CudaRand.CudaRandDevice); mem_2 = (var_50: EnvHeap5)} : EnvHeap7)
let (var_52: ManagedCuda.CudaBlas.PointerMode) = ManagedCuda.CudaBlas.PointerMode.Host
let (var_53: ManagedCuda.CudaBlas.AtomicsMode) = ManagedCuda.CudaBlas.AtomicsMode.Allowed
let (var_54: ManagedCuda.CudaBlas.CudaBlas) = ManagedCuda.CudaBlas.CudaBlas(var_52, var_53)
let (var_55: ManagedCuda.CudaContext) = var_51.mem_0
let (var_56: ManagedCuda.CudaRand.CudaRandDevice) = var_51.mem_1
let (var_57: EnvHeap5) = var_51.mem_2
let (var_58: EnvHeap8) = ({mem_0 = (var_55: ManagedCuda.CudaContext); mem_1 = (var_54: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_56: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_57: EnvHeap5)} : EnvHeap8)
let (var_65: ResizeArray<Env9>) = ResizeArray<Env9>()
let (var_66: EnvStack10) = EnvStack10((var_65: ResizeArray<Env9>))
let (var_67: ManagedCuda.CudaContext) = var_58.mem_0
let (var_68: ManagedCuda.CudaBlas.CudaBlas) = var_58.mem_1
let (var_69: ManagedCuda.CudaRand.CudaRandDevice) = var_58.mem_2
let (var_70: EnvHeap5) = var_58.mem_3
let (var_71: EnvHeap11) = ({mem_0 = (var_67: ManagedCuda.CudaContext); mem_1 = (var_68: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_69: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_66: EnvStack10); mem_4 = (var_70: EnvHeap5)} : EnvHeap11)
let (var_83: ResizeArray<Env12>) = ResizeArray<Env12>()
let (var_84: EnvStack13) = EnvStack13((var_83: ResizeArray<Env12>))
let (var_85: ManagedCuda.CudaContext) = var_71.mem_0
let (var_86: ManagedCuda.CudaBlas.CudaBlas) = var_71.mem_1
let (var_87: ManagedCuda.CudaRand.CudaRandDevice) = var_71.mem_2
let (var_88: EnvStack10) = var_71.mem_3
let (var_89: EnvHeap5) = var_71.mem_4
let (var_90: EnvHeap14) = ({mem_0 = (var_85: ManagedCuda.CudaContext); mem_1 = (var_86: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_87: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_88: EnvStack10); mem_4 = (var_84: EnvStack13); mem_5 = (var_89: EnvHeap5)} : EnvHeap14)
let (var_91: (bool ref)) = (ref true)
let (var_92: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_93: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_94: EnvHeap15) = ({mem_0 = (var_93: ManagedCuda.CudaEvent); mem_1 = (var_91: (bool ref)); mem_2 = (var_92: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_95: Env12) = method_7((var_94: EnvHeap15), (var_90: EnvHeap14), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_96: (int64 ref)) = var_95.mem_0
let (var_97: Env16) = var_95.mem_1
let (var_98: EnvHeap15) = var_97.mem_0
let (var_99: ManagedCuda.CudaContext) = var_90.mem_0
let (var_100: ManagedCuda.CudaBlas.CudaBlas) = var_90.mem_1
let (var_101: ManagedCuda.CudaRand.CudaRandDevice) = var_90.mem_2
let (var_102: EnvStack10) = var_90.mem_3
let (var_103: EnvStack13) = var_90.mem_4
let (var_104: EnvHeap5) = var_90.mem_5
let (var_105: EnvHeap17) = ({mem_0 = (var_99: ManagedCuda.CudaContext); mem_1 = (var_100: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_101: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_102: EnvStack10); mem_4 = (var_103: EnvStack13); mem_5 = (var_104: EnvHeap5); mem_6 = (var_96: (int64 ref)); mem_7 = (var_98: EnvHeap15)} : EnvHeap17)
let (var_107: (char [])) = System.IO.File.ReadAllText("C:\\ML Datasets\\TinyShakespeare\\tiny_shakespeare.txt").ToCharArray()
let (var_108: int64) = var_107.LongLength
let (var_109: bool) = (var_108 >= 0L)
let (var_110: bool) = (var_109 = false)
if var_110 then
    (failwith "The input to init needs to be greater or equal to 0.")
else
    ()
let (var_116: (uint8 [])) = Array.zeroCreate<uint8> (System.Convert.ToInt32(var_108))
let (var_117: int64) = 0L
method_9((var_116: (uint8 [])), (var_107: (char [])), (var_108: int64), (var_117: int64))
let (var_118: int64) = var_116.LongLength
let (var_119: bool) = (var_118 > 0L)
let (var_120: bool) = (var_119 = false)
if var_120 then
    (failwith "Tensor needs to be at least size 1.")
else
    ()
let (var_121: bool) = (var_118 = 1115394L)
let (var_122: bool) = (var_121 = false)
if var_122 then
    (failwith "The dimensions must match.")
else
    ()
let (var_123: int64) = 1115394L
let (var_124: int64) = 0L
let (var_125: int64) = 1L
let (var_126: Env18) = method_10((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_123: int64), (var_116: (uint8 [])), (var_124: int64), (var_125: int64))
let (var_127: Env9) = var_126.mem_0
let (var_128: (int64 ref)) = var_127.mem_0
let (var_129: Env19) = var_127.mem_1
let (var_130: (uint64 ref)) = var_129.mem_0
let (var_131: uint64) = method_5((var_130: (uint64 ref)))
let (var_132: EnvStack20) = method_19((var_131: uint64), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_133: (int64 ref)) = var_132.mem_0
let (var_134: (uint64 ref)) = var_132.mem_1
let (var_135: EnvStack21) = method_27((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_136: (int64 ref)) = var_135.mem_0
let (var_137: (uint64 ref)) = var_135.mem_1
let (var_138: EnvStack21) = method_30((var_136: (int64 ref)), (var_137: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_139: (int64 ref)) = var_138.mem_0
let (var_140: (uint64 ref)) = var_138.mem_1
let (var_141: EnvStack21) = method_27((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_142: (int64 ref)) = var_141.mem_0
let (var_143: (uint64 ref)) = var_141.mem_1
let (var_144: EnvStack21) = method_30((var_142: (int64 ref)), (var_143: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_145: (int64 ref)) = var_144.mem_0
let (var_146: (uint64 ref)) = var_144.mem_1
let (var_147: Env9) = method_32((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_148: (int64 ref)) = var_147.mem_0
let (var_149: Env19) = var_147.mem_1
let (var_150: (uint64 ref)) = var_149.mem_0
method_33((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_148: (int64 ref)), (var_150: (uint64 ref)))
let (var_151: EnvStack22) = method_37((var_148: (int64 ref)), (var_150: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_152: (int64 ref)) = var_151.mem_0
let (var_153: (uint64 ref)) = var_151.mem_1
let (var_154: Env9) = method_32((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_155: (int64 ref)) = var_154.mem_0
let (var_156: Env19) = var_154.mem_1
let (var_157: (uint64 ref)) = var_156.mem_0
method_39((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_155: (int64 ref)), (var_157: (uint64 ref)))
let (var_158: EnvStack22) = method_37((var_155: (int64 ref)), (var_157: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_159: (int64 ref)) = var_158.mem_0
let (var_160: (uint64 ref)) = var_158.mem_1
let (var_161: Env9) = method_32((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_162: (int64 ref)) = var_161.mem_0
let (var_163: Env19) = var_161.mem_1
let (var_164: (uint64 ref)) = var_163.mem_0
method_39((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_162: (int64 ref)), (var_164: (uint64 ref)))
let (var_165: EnvStack22) = method_37((var_162: (int64 ref)), (var_164: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_166: (int64 ref)) = var_165.mem_0
let (var_167: (uint64 ref)) = var_165.mem_1
let (var_168: EnvStack22) = method_40((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_169: (int64 ref)) = var_168.mem_0
let (var_170: (uint64 ref)) = var_168.mem_1
let (var_171: EnvStack22) = method_37((var_169: (int64 ref)), (var_170: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_172: (int64 ref)) = var_171.mem_0
let (var_173: (uint64 ref)) = var_171.mem_1
let (var_174: EnvHeap23) = ({mem_0 = (var_152: (int64 ref)); mem_1 = (var_153: (uint64 ref)); mem_2 = (var_148: (int64 ref)); mem_3 = (var_150: (uint64 ref)); mem_4 = (var_159: (int64 ref)); mem_5 = (var_160: (uint64 ref)); mem_6 = (var_155: (int64 ref)); mem_7 = (var_157: (uint64 ref)); mem_8 = (var_166: (int64 ref)); mem_9 = (var_167: (uint64 ref)); mem_10 = (var_162: (int64 ref)); mem_11 = (var_164: (uint64 ref)); mem_12 = (var_172: (int64 ref)); mem_13 = (var_173: (uint64 ref)); mem_14 = (var_169: (int64 ref)); mem_15 = (var_170: (uint64 ref)); mem_16 = (var_139: (int64 ref)); mem_17 = (var_140: (uint64 ref)); mem_18 = (var_136: (int64 ref)); mem_19 = (var_137: (uint64 ref)); mem_20 = (var_145: (int64 ref)); mem_21 = (var_146: (uint64 ref)); mem_22 = (var_142: (int64 ref)); mem_23 = (var_143: (uint64 ref))} : EnvHeap23)
let (var_175: (bool ref)) = (ref true)
let (var_176: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_177: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_178: EnvHeap15) = ({mem_0 = (var_177: ManagedCuda.CudaEvent); mem_1 = (var_175: (bool ref)); mem_2 = (var_176: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_179: Env12) = method_41((var_178: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_180: (int64 ref)) = var_179.mem_0
let (var_181: Env16) = var_179.mem_1
let (var_182: EnvHeap15) = var_181.mem_0
let (var_183: ManagedCuda.CudaContext) = var_105.mem_0
let (var_184: ManagedCuda.CudaBlas.CudaBlas) = var_105.mem_1
let (var_185: ManagedCuda.CudaRand.CudaRandDevice) = var_105.mem_2
let (var_186: EnvStack10) = var_105.mem_3
let (var_187: EnvStack13) = var_105.mem_4
let (var_188: EnvHeap5) = var_105.mem_5
let (var_189: (int64 ref)) = var_105.mem_6
let (var_190: EnvHeap15) = var_105.mem_7
let (var_191: EnvHeap17) = ({mem_0 = (var_183: ManagedCuda.CudaContext); mem_1 = (var_184: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_185: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_186: EnvStack10); mem_4 = (var_187: EnvStack13); mem_5 = (var_188: EnvHeap5); mem_6 = (var_180: (int64 ref)); mem_7 = (var_182: EnvHeap15)} : EnvHeap17)
let (var_192: (int64 ref)) = var_191.mem_6
let (var_193: EnvHeap15) = var_191.mem_7
let (var_194: EnvStack21) = method_42((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_195: (int64 ref)) = var_194.mem_0
let (var_196: (uint64 ref)) = var_194.mem_1
let (var_197: EnvStack21) = method_30((var_195: (int64 ref)), (var_196: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_198: (int64 ref)) = var_197.mem_0
let (var_199: (uint64 ref)) = var_197.mem_1
let (var_200: EnvStack22) = method_40((var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_201: (int64 ref)) = var_200.mem_0
let (var_202: (uint64 ref)) = var_200.mem_1
let (var_203: EnvStack22) = method_37((var_201: (int64 ref)), (var_202: (uint64 ref)), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_204: (int64 ref)) = var_203.mem_0
let (var_205: (uint64 ref)) = var_203.mem_1
let (var_206: EnvHeap24) = ({mem_0 = (var_204: (int64 ref)); mem_1 = (var_205: (uint64 ref)); mem_2 = (var_201: (int64 ref)); mem_3 = (var_202: (uint64 ref)); mem_4 = (var_198: (int64 ref)); mem_5 = (var_199: (uint64 ref)); mem_6 = (var_195: (int64 ref)); mem_7 = (var_196: (uint64 ref))} : EnvHeap24)
let (var_207: (bool ref)) = (ref true)
let (var_208: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_209: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_210: EnvHeap15) = ({mem_0 = (var_209: ManagedCuda.CudaEvent); mem_1 = (var_207: (bool ref)); mem_2 = (var_208: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_211: Env12) = method_41((var_210: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_212: (int64 ref)) = var_211.mem_0
let (var_213: Env16) = var_211.mem_1
let (var_214: EnvHeap15) = var_213.mem_0
let (var_215: EnvHeap17) = ({mem_0 = (var_183: ManagedCuda.CudaContext); mem_1 = (var_184: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_185: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_186: EnvStack10); mem_4 = (var_187: EnvStack13); mem_5 = (var_188: EnvHeap5); mem_6 = (var_212: (int64 ref)); mem_7 = (var_214: EnvHeap15)} : EnvHeap17)
let (var_216: (int64 ref)) = var_215.mem_6
let (var_217: EnvHeap15) = var_215.mem_7
let (var_218: (bool ref)) = (ref true)
let (var_219: ManagedCuda.CudaStream) = ManagedCuda.CudaStream()
let (var_220: ManagedCuda.CudaEvent) = ManagedCuda.CudaEvent()
let (var_221: EnvHeap15) = ({mem_0 = (var_220: ManagedCuda.CudaEvent); mem_1 = (var_218: (bool ref)); mem_2 = (var_219: ManagedCuda.CudaStream)} : EnvHeap15)
let (var_222: Env12) = method_41((var_221: EnvHeap15), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule))
let (var_223: (int64 ref)) = var_222.mem_0
let (var_224: Env16) = var_222.mem_1
let (var_225: EnvHeap15) = var_224.mem_0
let (var_226: EnvHeap17) = ({mem_0 = (var_183: ManagedCuda.CudaContext); mem_1 = (var_184: ManagedCuda.CudaBlas.CudaBlas); mem_2 = (var_185: ManagedCuda.CudaRand.CudaRandDevice); mem_3 = (var_186: EnvStack10); mem_4 = (var_187: EnvStack13); mem_5 = (var_188: EnvHeap5); mem_6 = (var_223: (int64 ref)); mem_7 = (var_225: EnvHeap15)} : EnvHeap17)
let (var_227: (int64 ref)) = var_226.mem_6
let (var_228: EnvHeap15) = var_226.mem_7
let (var_229: int64) = 0L
method_44((var_133: (int64 ref)), (var_134: (uint64 ref)), (var_227: (int64 ref)), (var_228: EnvHeap15), (var_216: (int64 ref)), (var_217: EnvHeap15), (var_192: (int64 ref)), (var_193: EnvHeap15), (var_174: EnvHeap23), (var_206: EnvHeap24), (var_105: EnvHeap17), (var_32: ManagedCuda.BasicTypes.CUmodule), (var_229: int64))
method_129((var_103: EnvStack13))
method_114((var_88: EnvStack10))
var_54.Dispose()
var_48.Dispose()
let (var_230: uint64) = method_5((var_40: (uint64 ref)))
let (var_231: ManagedCuda.BasicTypes.SizeT) = ManagedCuda.BasicTypes.SizeT(var_230)
let (var_232: ManagedCuda.BasicTypes.CUdeviceptr) = ManagedCuda.BasicTypes.CUdeviceptr(var_231)
var_49.FreeMemory(var_232)
var_40 := 0UL
var_1.Dispose()

