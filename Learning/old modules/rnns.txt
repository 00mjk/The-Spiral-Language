    inl mi size =
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.Tensor
                inl weight f dim = {
                    weight = f dim
                    streams = stream, stream
                    block = ()
                    }
                {
                state = weight tanh (size, size)
                input = weight tanh (sublayer_size, size)
                bias = {
                    si = const one (1,size)
                    i = const half (1,size)
                    s = const half (1,size)
                    c = zero (1,size)
                    }
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            inl out =
                match d with
                | {state={out}} -> out
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span,size}

            inl apply =
                inm out =
                    inm input, state = matmult_stream ({(weights.input) with data=input}, {(weights.state) with data=out})
                    inl bias = weights.bias
                    map CudaAD.generalized_mi_tanh {input state bias}

                succ {out state={out}}
            inl {out={out state} bck} = apply s
            {out state bck}
        block = ()
        }

    inl mi' size = 
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.Tensor
                inl weight f (b,a as dim) = {
                    weight = f dim
                    streams = stream, stream
                    front = covariance default_epsilon b
                    back = covariance default_epsilon a
                    block = ()
                    }

                inl bias f a = {
                    weight = f (1,a)
                    //back = covariance default_epsilon a
                    stream = stream
                    block = ()
                    }

                {
                state = weight tanh (size, size)
                input = weight tanh (sublayer_size, size)
                bias = {
                    si = bias (const one) size
                    i = bias (const half) size
                    s = bias (const half) size
                    c = bias zero size
                    }
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            inl out =
                match d with
                | {state={out}} -> out
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span,size}

            inl apply =
                inm out =
                    inm input, state = matmult_stream ({(weights.input) with data=input}, {(weights.state) with data=out})
                    //inm bias = weights.bias |> Struct.map (expand_singular (span,())) |> sequence
                    inl bias = weights.bias |> Struct.map (inl {weight} -> weight)
                    map CudaAD.generalized_mi_tanh {input state bias}
                
                succ {out state={out}}
            inl {out={out state} bck} = apply s
            {out state bck}

        optimize = Optimizer.kfac
        block = ()
        }

    inl mi'' size =
        inl dim = {inner = { si = size; i = size; s = size; c = size }}
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.TensorView
                inl weight {init with dim=b,a} = {
                    weight = view' init
                    streams = stream, stream
                    front = covariance default_epsilon b
                    back = covariance default_epsilon a
                    block = ()
                    }

                inl bias {init with dim=1,a} = {
                    weight = view' init
                    back = covariance default_epsilon a
                    block = ()
                    }
                
                {
                state = weight {init=tanh; dim=size, size}
                input = weight {init=tanh; dim=sublayer_size, size}
                bias = bias {init={si=const one; i=const half; s=const half; c=zero}; dim=1, dim.inner}
                }

            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            inl out =
                match d with
                | {state={out}} -> out
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span,size}

            inl apply =
                inm out =
                    inm input, state = matmult_stream ({(weights.input) with data=input}, {(weights.state) with data=out})
                    inm bias = expand_singular (span,()) weights.bias 
                    inl bias = wrap_split ((), dim.inner) bias
                    map CudaAD.generalized_mi_tanh {input state bias}
                
                succ {out state={out}}
            inl {out={out state} bck} = apply s
            {out state bck}

        optimize = Optimizer.kfac
        block = ()
        }

    inl lstm size =
        open Initializer.dual.TensorView
        inl dim = 
            {
            inner = { input = size; forget = size; memory = size; output = size }
            }
        inl init =
            {
            bias = { input = zero; forget = const one; memory = zero; output = zero }
            cell = { input = sigmoid; forget = sigmoid; memory = tanh; output = sigmoid }
            }
        {
        init = inl sublayer_size -> 
            {
            dsc = 
                inl weight d = {
                    weight = view' d
                    streams = stream, stream
                    block = ()
                    }
                {
                input = weight { init = init.cell; dim = sublayer_size, dim.inner }
                state = weight { init = init.cell; dim = size, dim.inner }
                bias = view' {init = init.bias; dim = 1, dim.inner}
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            inl out, memory =
                match d with
                | {state={out memory}} -> out, memory
                | _ -> 
                    inl f _ = s.CudaTensor.zero {elem_type=float; dim=span,size}
                    f(), f()

            inl apply =
                inm {out memory} =
                    inm input, state = matmult_stream ({(weights.input) with data=input}, {(weights.state) with data=out})
                    inl bias, input, state = wrap_split ((), dim.inner) (weights.bias, input, state)
                    inl cell = Struct.map3 (inl input state bias -> {input state bias}) input state bias
                    map CudaAD.lstm {memory cell}
                
                succ {out state={out memory}}
            inl {out={out state} bck} = apply s
            {out state bck}
        block = ()
        }

    inl lstm' size =
        open Initializer.dual.TensorView
        inl dim = 
            {
            inner = { input = size; forget = size; memory = size; output = size }
            }
        inl init =
            {
            bias = { input = zero; forget = const one; memory = zero; output = zero }
            cell = { input = sigmoid; forget = sigmoid; memory = tanh; output = sigmoid }
            }
        {
        init = inl sublayer_size -> 
            {
            dsc = 
                inl weight d = {
                    weight = view' d
                    streams = stream, stream
                    block = ()
                    }
                inl weight' {d with dim=b,a} = {(weight d) with
                    front = covariance default_epsilon b
                    back = covariance default_epsilon a
                    }
                inl weight'' {d with dim=b,a} = {(weight d) with
                    front = covariance default_epsilon b
                    }
                inl bias {init with dim=1,a} = {
                    weight = view' init
                    block = ()
                    }
                {
                input = weight' { init = init.cell; dim = sublayer_size, dim.inner }
                state = weight'' { init = init.cell; dim = size, dim.inner }
                bias = bias {init = init.bias; dim = 1, dim.inner}
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            inl out, memory =
                match d with
                | {state={out memory}} -> out, memory
                | _ -> 
                    inl f _ = s.CudaTensor.zero {elem_type=float; dim=span,size}
                    f(), f()

            inl apply =
                inm {out memory} =
                    inm input, state = matmult_stream ({(weights.input) with data=input}, {(weights.state) with data=out})
                    inl bias, input, state = wrap_split ((), dim.inner) (weights.bias.weight, input, state)
                    inl cell = Struct.map3 (inl input state bias -> {input state bias}) input state bias
                    map CudaAD.lstm {memory cell}
                
                succ {out state={out memory}}
            inl {out={out state} bck} = apply s
            {out state bck}
        optimize = inl {learning_rate weights} ->
            inl {back} = weights.input
            inl weights = {weights.state with back}
            //inl weights = {weights.bias with back}
            Optimizer.kfac {learning_rate weights}

        block = ()
        }

    inl plastic_rnn n size =
        open Initializer.dual.TensorView
        inl init = 
            inl bias = {si=const one; i=const half; s=const half; c=zero}
            {
            input = {static=identity; modulator={input=zero; state=zero}}
            state = {static=randn 0.01f32; modulator={input=zero; state=zero}}
            bias = {static=zero; modulator={input=bias; state=bias}}
            }
        inl dim =
            {
            matrix = {static=size; modulator={input=size; state=size}}
            bias =
                inl dim = {si=size; i=size; s=size; c=size}
                {static=size; modulator={input=dim; state=dim}}
            }
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.TensorView
                inl streams = stream, stream
                inl weight d = {
                    weight = view' d
                    streams
                    block = ()
                    }
                inl bias {init with dim=1,a} = {
                    weight = view' init
                    block = ()
                    }
                {
                input = weight {init=init.input; dim=sublayer_size, dim.matrix}
                state = weight {init=init.state; dim=size, dim.matrix}
                bias = bias {init=init.bias; dim=1,dim.bias}
                streams = {modulator={input=streams; state=streams}}
                sublayer_size = val sublayer_size
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            assert (span = 1) "The differentiable plasticity layer supports only online learning for now."
            inl H =
                match d with
                | {state={H}} -> H
                | _ -> 
                    {
                    input=s.CudaTensor.zero {elem_type=float; dim=weights.sublayer_size, size}
                    state=s.CudaTensor.zero {elem_type=float; dim=size, size}
                    }

            inl state =
                match d with
                | {state={state}} -> state
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span, size}

            inl apply =
                inm out =
                    inm {input state plastic} = 
                        matmult_stream {
                            input={(weights.input) with data=input}
                            state={(weights.state) with data=state}
                            plastic=
                                Struct.map3 (inl weight data streams -> { weight data streams block=() }) 
                                    H {input state} weights.streams.modulator
                            }
                    inl input, state = wrap_split ((), dim.matrix) (input, state)
                    inl bias = wrap_split ((), dim.bias) weights.bias.weight
                    inl input = 
                        {
                        static = input.static
                        modulator = {input = input.modulator.input; state = state.modulator.input; bias = bias.modulator.input}
                        plastic = plastic.input
                        }
                    inl state = 
                        {
                        static = state.static
                        modulator = {input = input.modulator.state; state = state.modulator.state; bias = bias.modulator.state}
                        plastic = plastic.state
                        }
                    inl bias = bias.static
                    map CudaAD.plastic_rnn {input state bias}
                inm H =
                    mapi (inl cur {input H out} -> 
                        inl f k = {out input = input k; H = H k }
                        CudaAD.oja_update n cur { input = f.input; state = f.state }
                        ) {out H input=Struct.map' (Tensor.rotate (inl a,b -> b,a)) {input state}}

                succ {out state={state=out; H}}

            inl {out={out state} bck} = apply s
            {out state bck}

        block = ()
        }

    inl plastic_rnn' n size =
        open Initializer.dual.TensorView
        inl init = 
            inl bias = {si=const one; i=const half; s=const half; c=zero}
            {
            input = {static=identity; modulator={input=zero; state=zero}}
            state = {static=randn 0.01f32; modulator={input=zero; state=zero}}
            bias = {static=zero; modulator={input=bias; state=bias}}
            }
        inl dim =
            {
            matrix = {static=size; modulator={input=size; state=size}}
            bias = {si=size; i=size; s=size; c=size}
            }
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.TensorView
                inl streams = stream, stream
                inl weight {d with dim=b,a} = {
                    weight = view' d
                    streams
                    front = covariance default_epsilon b
                    back = covariance default_epsilon a
                    block = ()
                    }
                inl bias {init with dim=1,a} = {
                    weight = view' init
                    back = covariance default_epsilon a
                    stream = stream
                    block = ()
                    }
                {
                input = weight {init=init.input; dim=sublayer_size, dim.matrix}
                state = weight {init=init.state; dim=size, dim.matrix}
                bias = {
                    static=bias {init=init.bias.static; dim=1,size}
                    modulator={
                        input=bias {init=init.bias.modulator.input; dim=1,dim.bias}
                        state=bias {init=init.bias.modulator.state; dim=1,dim.bias}
                        }
                    }
                streams = {modulator={input=streams; state=streams}}
                sublayer_size = val sublayer_size
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            assert (span = 1) "The differentiable plasticity layer supports only online learning for now."
            inl H =
                match d with
                | {state={H}} -> H
                | _ -> 
                    {
                    input=s.CudaTensor.zero {elem_type=float; dim=weights.sublayer_size, size}
                    state=s.CudaTensor.zero {elem_type=float; dim=size, size}
                    }

            inl state =
                match d with
                | {state={state}} -> state
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span, size}

            inl apply =
                inm out =
                    inm {input state plastic} = 
                        matmult_stream {
                            input={(weights.input) with data=input}
                            state={(weights.state) with data=state}
                            plastic=
                                Struct.map3 (inl weight data streams -> { weight data streams block=() }) 
                                    H {input state} weights.streams.modulator
                            }
                    inl input, state = wrap_split ((), dim.matrix) (input, state)
                    //inm bias = expand_singular (span, ()) weights.bias // TODO: Fix this.
                    inl bias = wrap_split_weight {modulator={input=(),dim.bias; state=(),dim.bias}} weights.bias
                    inl input = 
                        {
                        static = input.static
                        modulator = {input = input.modulator.input; state = state.modulator.input; bias = bias.modulator.input}
                        plastic = plastic.input
                        }
                    inl state = 
                        {
                        static = state.static
                        modulator = {input = input.modulator.state; state = state.modulator.state; bias = bias.modulator.state}
                        plastic = plastic.state
                        }
                    inl bias = weights.bias.static.weight
                    map CudaAD.plastic_rnn {input state bias}
                inm H =
                    mapi (inl cur {input H out} -> 
                        inl f k = {out input = input k; H = H k }
                        CudaAD.oja_update n cur { input = f.input; state = f.state }
                        ) {out H input=Struct.map' (Tensor.rotate (inl a,b -> b,a)) {input state}}

                succ {out state={state=out; H}}
            inl {out={out state} bck} = apply s
            {out state bck}
        optimize = Optimizer.kfac
        block = ()
        }

    inl plastic_rnn'' n size =
        open Initializer.dual.TensorView
        inl init = 
            inl bias = {si=const one; i=const half; s=const half; c=zero}
            {
            input = {static=identity; modulator={input=zero; state=zero}}
            state = {static=randn 0.01f32; modulator={input=zero; state=zero}}
            bias = {static=zero; modulator={input=bias; state=bias}}
            }
        inl dim =
            {
            matrix = {static=size; modulator={input=size; state=size}}
            bias = {si=size; i=size; s=size; c=size}
            }
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.TensorView
                inl streams = stream, stream
                inl weight {d with dim=b,a} = {
                    weight = view' d
                    streams
                    front = covariance default_epsilon b
                    back = covariance default_epsilon a
                    block = ()
                    }
                inl bias {init with dim=1,a} = {
                    weight = view' init
                    stream = stream
                    back = covariance default_epsilon a
                    block = ()
                    }
                {
                input = weight {init=init.input; dim=sublayer_size, dim.matrix}
                state = weight {init=init.state; dim=size, dim.matrix}
                bias = {
                    static=bias {init=init.bias.static; dim=1,size}
                    modulator=
                        inl bias init = Struct.map2 (inl init dim -> bias {init dim=1,dim}) init dim.bias
                        {
                        input=bias init.bias.modulator.input
                        state=bias init.bias.modulator.state
                        }
                    }
                streams = {modulator={input=streams; state=streams}}
                sublayer_size = val sublayer_size
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            assert (span = 1) "The differentiable plasticity layer supports only online learning for now."
            inl H =
                match d with
                | {state={H}} -> H
                | _ -> 
                    {
                    input=s.CudaTensor.zero {elem_type=float; dim=weights.sublayer_size, size}
                    state=s.CudaTensor.zero {elem_type=float; dim=size, size}
                    }

            inl state =
                match d with
                | {state={state}} -> state
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span, size}

            inl apply =
                inm out =
                    inm {input state plastic} = 
                        matmult_stream {
                            input={(weights.input) with data=input}
                            state={(weights.state) with data=state}
                            plastic=
                                Struct.map3 (inl weight data streams -> { weight data streams block=() }) 
                                    H {input state} weights.streams.modulator
                            }
                    inl input, state = wrap_split ((), dim.matrix) (input, state)
                    inm bias = expand_singular (span, ()) weights.bias
                    inl bias = Struct.map (wrap_split_weight ((), size)) weights.bias
                    inl input = 
                        {
                        static = input.static
                        modulator = {input = input.modulator.input; state = state.modulator.input; bias = bias.modulator.input}
                        plastic = plastic.input
                        }
                    inl state = 
                        {
                        static = state.static
                        modulator = {input = input.modulator.state; state = state.modulator.state; bias = bias.modulator.state}
                        plastic = plastic.state
                        }
                    inl bias = weights.bias.static.weight
                    map CudaAD.plastic_rnn {input state bias}
                inm H =
                    mapi (inl cur {input H out} -> 
                        inl f k = {out input = input k; H = H k }
                        CudaAD.oja_update n cur { input = f.input; state = f.state }
                        ) {out H input=Struct.map' (Tensor.rotate (inl a,b -> b,a)) {input state}}

                succ {out state={state=out; H}}
            inl {out={out state} bck} = apply s
            {out state bck}
        optimize = Optimizer.kfac
        block = ()
        }

    inl modulated_rnn' n size =
        open Initializer.dual.TensorView
        inl init = 
            inl bias = {si=const one; i=const half; s=const half; c=zero}
            {
            input = {static=identity; modulator={input=zero; state=zero}; chaneller={input=zero; state=zero}}
            state = {static=randn 0.01f32; modulator={input=zero; state=zero}; chaneller={input=zero; state=zero}}
            bias = {static=zero; modulator={input=bias; state=bias}; chaneller={input=bias; state=bias}}
            }
        inl dim =
            {
            matrix = {static=size; modulator={input=size; state=size}; chaneller={input=size; state=size}}
            bias = {si=size; i=size; s=size; c=size}
            }
        {
        init = inl sublayer_size -> 
            {
            dsc =
                open Initializer.dual.TensorView
                inl streams = stream, stream
                inl weight {d with dim=b,a} = {
                    weight = view' d
                    streams
                    front = covariance default_epsilon b
                    back = covariance default_epsilon a
                    block = ()
                    }
                inl bias {init with dim=1,a} = {
                    weight = view' init
                    back = covariance default_epsilon a
                    stream = stream
                    block = ()
                    }
                {
                input = weight {init=init.input; dim=sublayer_size, dim.matrix}
                state = weight {init=init.state; dim=size, dim.matrix}
                bias = {
                    static=bias {init=init.bias.static; dim=1,size}
                    modulator={
                        input=bias {init=init.bias.modulator.input; dim=1,dim.bias}
                        state=bias {init=init.bias.modulator.state; dim=1,dim.bias}
                        }
                    chaneller={
                        input=bias {init=init.bias.chaneller.input; dim=1,dim.bias}
                        state=bias {init=init.bias.chaneller.state; dim=1,dim.bias}
                        }
                    }
                streams = {modulator={input=streams; state=streams}}
                sublayer_size = val sublayer_size
                }
            size
            }

        apply = inl {d with weights input} s -> 
            inl span = primal input .span_outer
            assert (span = 1) "The differentiable plasticity layer supports only online learning for now."
            inl H =
                match d with
                | {state={H}} -> H
                | _ -> 
                    {
                    input=s.CudaTensor.zero {elem_type=float; dim=weights.sublayer_size, size}
                    state=s.CudaTensor.zero {elem_type=float; dim=size, size}
                    }

            inl state =
                match d with
                | {state={state}} -> state
                | _ -> s.CudaTensor.zero {elem_type=float; dim=span, size}

            inl apply =
                inm out =
                    inm {input state plastic} = 
                        matmult_stream {
                            input={(weights.input) with data=input}
                            state={(weights.state) with data=state}
                            plastic=
                                Struct.map3 (inl weight data streams -> { weight data streams block=() }) 
                                    H {input state} weights.streams.modulator
                            }
                    inl input, state = wrap_split ((), dim.matrix) (input, state)
                    //inm bias = expand_singular (span, ()) weights.bias // TODO: Fix this.
                    inl bias = wrap_split_weight {modulator={input=(),dim.bias; state=(),dim.bias}} weights.bias
                    inl input = 
                        {
                        static = input.static
                        modulator = {input = input.modulator.input; state = state.modulator.input; bias = bias.modulator.input}
                        plastic = plastic.input
                        }
                    inl state = 
                        {
                        static = state.static
                        modulator = {input = input.modulator.state; state = state.modulator.state; bias = bias.modulator.state}
                        plastic = plastic.state
                        }
                    inl bias = weights.bias.static.weight
                    map CudaAD.plastic_rnn {input state bias}
                inm H =
                    mapi (inl cur {input H out} -> 
                        inl f k = {out input = input k; H = H k }
                        CudaAD.oja_update n cur { input = f.input; state = f.state }
                        ) {out H input=Struct.map' (Tensor.rotate (inl a,b -> b,a)) {input state}}

                succ {out state={state=out; H}}
            inl {out={out state} bck} = apply s
            {out state bck}
        optimize = Optimizer.kfac
        block = ()
        }
